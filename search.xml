<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Day1:x86汇编框架、数据类型、基本运算、位运算</title>
    <url>/2025/07/05/Day1-x86%E6%B1%87%E7%BC%96%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>vs2022汇编环境、x86汇编框架、数据类型、基本运算、位运算</p>
<span id="more"></span>

<h2 id="在vs2022中编写汇编代码"><a href="#在vs2022中编写汇编代码" class="headerlink" title="在vs2022中编写汇编代码"></a>在vs2022中编写汇编代码</h2><ul>
<li><p>新建一个空项目</p>
</li>
<li><p>在工具栏的“工具”选项中选择“获取工具和功能”，在“使用C++的桌面开发”中勾选“Windows 10 SDK”以及“MSVC v142 -VS 2015 C++生成工具”，然后安装这些新勾选的选项，更新VS2022</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-05%20233157.png" alt="勾选选项"></p>
</li>
<li><p>右键新建的空项目，选择最下方的“属性”，在弹出来的页面中选择“常规”，然后将平台版本改成windows10，可能需要改也可能不需要</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-05%20233305.png" alt="属性页"></p>
</li>
<li><p>右键新建的空项目，选择“生成依赖性”，然后是“生成自定义”，在界面中选择masm</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-05%20233422.png" alt="生成自定义"></p>
</li>
<li><p>然后就可以新建一个.asm源文件了。新建完成后，右键源文件选择“属性”，然后在“常规”里检查项类型是否为“Microsoft Macro Assembler”</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-05%20233723.png" alt="常规"></p>
</li>
<li><p>以上是针对报错进行的尝试修正总结，可能有多余或者不足之处</p>
</li>
</ul>
<h2 id="x86汇编框架-MASM"><a href="#x86汇编框架-MASM" class="headerlink" title="x86汇编框架(MASM)"></a>x86汇编框架(MASM)</h2><ul>
<li><p>示例：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;预处理</span></span><br><span class="line"><span class="meta">.586</span></span><br><span class="line"><span class="meta">.model</span> flat,stdcall</span><br><span class="line"></span><br><span class="line"><span class="comment">;包含的链接库</span></span><br><span class="line">includelib ucrt<span class="number">.</span>lib</span><br><span class="line">includelib legacy_stdio_definitions<span class="number">.</span>lib</span><br><span class="line">includelib kernel32<span class="number">.</span>lib</span><br><span class="line">includelib user32<span class="number">.</span>lib</span><br><span class="line"></span><br><span class="line"><span class="comment">;外部函数声明</span></span><br><span class="line"><span class="meta">extern</span> printf:proc</span><br><span class="line"></span><br><span class="line"><span class="comment">;数据段</span></span><br><span class="line"><span class="meta">.data</span></span><br><span class="line">szHello <span class="built_in">db</span> <span class="string">&#x27;HelloWorld!&#x27;</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;代码段</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line"><span class="comment">;函数声明</span></span><br><span class="line">main proc</span><br><span class="line">	<span class="keyword">lea</span> <span class="built_in">eax</span>,szHello</span><br><span class="line">	<span class="keyword">push</span> <span class="built_in">eax</span></span><br><span class="line">	<span class="keyword">call</span> printf</span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">4</span></span><br><span class="line">main endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<ul>
<li><p>重点如下：</p>
</li>
<li><p>链接库声明</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">includelib NameOfLib<span class="number">.</span>lib</span><br></pre></td></tr></table></figure>
</li>
<li><p>不同的段</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">.NameOfSection</span></span><br><span class="line"><span class="comment">;段所包含的数据</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数格式</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">functionName proc 参数名<span class="number">1</span>:参数类型，参数名<span class="number">2</span>:参数类型...</span><br><span class="line">	<span class="comment">;汇编代码</span></span><br><span class="line">functionName endp</span><br></pre></td></tr></table></figure>
</li>
<li><p>在一个asm文件末尾，需要</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">end			<span class="comment">;用于无入口点，即非可执行文件，不需要主函数时</span></span><br><span class="line">end main	<span class="comment">;用于可执行文件，必须指定入口点(如main函数)时</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table>
<thead>
<tr>
<th align="center">类型名称</th>
<th align="center">简写</th>
<th align="center">对应类型</th>
<th align="center">占用字节数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BYTE</td>
<td align="center">db</td>
<td align="center">char</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">WORD</td>
<td align="center">dw</td>
<td align="center">short</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">DWORD</td>
<td align="center">dd</td>
<td align="center">int</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">QWORD</td>
<td align="center">dq</td>
<td align="center">long long</td>
<td align="center">8</td>
</tr>
</tbody></table>
<h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><ul>
<li><p>数据传送指令</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> dest,src		<span class="comment">;dest=src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;eax=1示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>地址传送指令</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lea</span> dest,[addr]		<span class="comment">;dest=addr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;eax=77E75F38示例</span></span><br><span class="line"><span class="keyword">lea</span> <span class="built_in">eax</span>,77E75F38</span><br></pre></td></tr></table></figure>
</li>
<li><p>加法</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add</span> dest,src	<span class="comment">;dest=dest+src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;1+1=2示例，最后eax里为2</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自增</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inc</span> dest		<span class="comment">;dest=dest+1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;eax++示例</span></span><br><span class="line"><span class="keyword">inc</span> <span class="built_in">eax</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>减法</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sub</span> dest,src	<span class="comment">;dest=dest-src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;6-2=4示例，最后eax里为4</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">6</span></span><br><span class="line"><span class="keyword">sub</span> <span class="built_in">eax</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自减</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dec</span> dest		<span class="comment">;dest=dest-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;eax--示例</span></span><br><span class="line"><span class="keyword">dec</span> <span class="built_in">eax</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>乘法</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;分为mul(无符号)和imul(有符号)</span></span><br><span class="line"><span class="comment">;乘法结果存放在edx和eax中(edx:eax)，低位eax，高位edx。未指定时，eax默认作为一个因数</span></span><br><span class="line"><span class="keyword">mul</span> src				<span class="comment">;edx:eax=eax*src</span></span><br><span class="line"><span class="keyword">imul</span> src			<span class="comment">;edx:eax=eax*src</span></span><br><span class="line"><span class="keyword">imul</span> dest,src		<span class="comment">;dest=dest*src</span></span><br><span class="line"><span class="keyword">imul</span> dest,src,imm	<span class="comment">;dest=src*imm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;4*2=8示例，eax*ebx</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">mul</span> <span class="built_in">ebx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>除法</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;分为div(无符号)和idiv(有符号)</span></span><br><span class="line"><span class="comment">;被除数放在edx:eax中，除数任意，商存放在eax中，余数存放在edx中</span></span><br><span class="line"><span class="keyword">div</span> src			<span class="comment">;edx:eax%src=eax...edx</span></span><br><span class="line"><span class="keyword">idiv</span> src		<span class="comment">;edx:eax%src=eax...edx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;101%2...1示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">101</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">div</span> <span class="built_in">ebx</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><ul>
<li><p>与</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> dest,src		<span class="comment">;dest=dest &amp; src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;1&amp;2=0示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">and</span> <span class="built_in">eax</span>,<span class="built_in">ebx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>或</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> dest,src			<span class="comment">;dest=dest | src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;1|2=3示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">or</span> <span class="built_in">eax</span>,<span class="built_in">ebx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>取反</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">not</span> dest			<span class="comment">;dest=~dest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;not 00000001=11111110示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">not</span> <span class="built_in">eax</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>异或</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">xor</span> dest,src		<span class="comment">;dest=dest^src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;1^2=3示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">xor</span> <span class="built_in">eax</span>,<span class="built_in">ebx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>左移，右移</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;左移</span></span><br><span class="line"><span class="keyword">shl</span> dest,count		<span class="comment">;dest=dest&lt;&lt;count</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;1&lt;&lt;3=8示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">shl</span> <span class="built_in">eax</span>,<span class="built_in">cl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;右移</span></span><br><span class="line"><span class="keyword">shr</span> dest,count		<span class="comment">;dest=dest&gt;&gt;count</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;8&gt;&gt;3=1示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">8</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">shr</span> <span class="built_in">eax</span>,<span class="built_in">cl</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day2:寻址方式、标志寄存器、JCC指令</title>
    <url>/2025/07/07/Day2-%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>寻址方式、标志寄存器、JCC指令</p>
<span id="more"></span>

<h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><table>
<thead>
<tr>
<th align="center">寻址方式</th>
<th align="center">示例</th>
<th align="center">典型用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center">立即数寻址</td>
<td align="center">mov eax,42</td>
<td align="center">加载常数</td>
</tr>
<tr>
<td align="center">寄存器寻址</td>
<td align="center">add eax,ebx</td>
<td align="center">寄存器运算</td>
</tr>
<tr>
<td align="center">直接寻址</td>
<td align="center">mov eax,[0x8040000]</td>
<td align="center">访问全局变量</td>
</tr>
<tr>
<td align="center">寄存器间接寻址</td>
<td align="center">mov eax,[esi]</td>
<td align="center">指针解引用</td>
</tr>
<tr>
<td align="center">基址寻址</td>
<td align="center">mov [ebp-4],ecx</td>
<td align="center">栈帧局部变量</td>
</tr>
<tr>
<td align="center">变址寻址</td>
<td align="center">mov eax,[esi*4]</td>
<td align="center">数组遍历</td>
</tr>
<tr>
<td align="center">基址变址寻址</td>
<td align="center">mov eax,[ebx+esi*2+8]</td>
<td align="center">结构体，多维数组</td>
</tr>
<tr>
<td align="center">相对寻址</td>
<td align="center">jmp label</td>
<td align="center">跳转，函数调用</td>
</tr>
</tbody></table>
<h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><table>
<thead>
<tr>
<th align="center">标志位</th>
<th align="center">名称</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CF</td>
<td align="center">Carry Flag 进位标志位</td>
<td align="center">最高位发生进位&#x2F;借位时置1</td>
</tr>
<tr>
<td align="center">PF</td>
<td align="center">Parity Flag 奇偶标志位</td>
<td align="center">1的个数为偶数时置1</td>
</tr>
<tr>
<td align="center">AF</td>
<td align="center">Auxiliary Carry Flag 辅助进位标志位</td>
<td align="center">bit3和bit4之间发生进位&#x2F;借位时置1</td>
</tr>
<tr>
<td align="center">ZF</td>
<td align="center">Zoro Flag 零标志位</td>
<td align="center">为0时置1</td>
</tr>
<tr>
<td align="center">SF</td>
<td align="center">Sign Flag 符号标志位</td>
<td align="center">最高位为1(负数)时置1</td>
</tr>
<tr>
<td align="center">OF</td>
<td align="center">Overflow Flag 溢出标志位</td>
<td align="center">有符号数溢出时置1</td>
</tr>
<tr>
<td align="center">DF</td>
<td align="center">Direction Flag 方向标志位</td>
<td align="center">为1时从高位到低位处理字符串，std打开，cld关闭</td>
</tr>
<tr>
<td align="center">IF</td>
<td align="center">Interrupt Flag 中断标志位</td>
<td align="center">为1时可以响应中断请求，sti打开，cli关闭</td>
</tr>
<tr>
<td align="center">TF</td>
<td align="center">Trap Flag 陷阱标志位</td>
<td align="center">为1时会触发异常，被调试器捕获，用于单步调试</td>
</tr>
</tbody></table>
<h2 id="JCC指令"><a href="#JCC指令" class="headerlink" title="JCC指令"></a>JCC指令</h2><ul>
<li><p>TEST指令：TEST op1,op2</p>
<p>将两个操作数进行&amp;操作（op1 &amp; op2）并更新标志位：</p>
<p>CF&#x3D;0，OF&#x3D;0</p>
<p>&amp;结果为0：ZF&#x3D;1</p>
<p>结果最高位为1：SF&#x3D;1</p>
</li>
<li><p>CMP指令：CMP op1,op2</p>
<p>进行减法操作（op1 - op2）并更新标志位：</p>
<p>若op1 &lt; op2（发生借位），CF&#x3D;1</p>
<p>若发生有符号溢出，OF&#x3D;1</p>
<p>op1 &#x3D;&#x3D; op2（结果为0），ZF&#x3D;1</p>
<p>op1 &lt; op2（结果为负数），SF&#x3D;1</p>
</li>
<li><p>JCC指令：JCC Label</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">条件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">JMP</td>
<td align="center">无条件</td>
<td align="center">无条件跳转</td>
</tr>
<tr>
<td align="center">JE &#x2F; JZ</td>
<td align="center">ZF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>Z</strong>F</td>
</tr>
<tr>
<td align="center">JNE &#x2F; JNZ</td>
<td align="center">ZF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>Z</strong>F</td>
</tr>
<tr>
<td align="center">JS</td>
<td align="center">SF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>S</strong>F</td>
</tr>
<tr>
<td align="center">JNS</td>
<td align="center">SF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>S</strong>F</td>
</tr>
<tr>
<td align="center">JP &#x2F; JPE</td>
<td align="center">PF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>P</strong>F &#x2F; <strong>J</strong>ump if <strong>P</strong>arity <strong>E</strong>ven</td>
</tr>
<tr>
<td align="center">JNP &#x2F; JPO</td>
<td align="center">PF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>P</strong>F &#x2F; <strong>J</strong>ump if <strong>P</strong>arity <strong>O</strong>dd</td>
</tr>
<tr>
<td align="center">JO</td>
<td align="center">OF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>O</strong>F</td>
</tr>
<tr>
<td align="center">JNO</td>
<td align="center">OF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>O</strong>F</td>
</tr>
<tr>
<td align="center">JB &#x2F; JNAE &#x2F; JC</td>
<td align="center">CF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>B</strong>elow &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>A</strong>bove or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>C</strong>F</td>
</tr>
<tr>
<td align="center">JNB &#x2F; JAE &#x2F; JNC</td>
<td align="center">CF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>B</strong>elow &#x2F; <strong>J</strong>ump if <strong>A</strong>bove or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>C</strong>F</td>
</tr>
<tr>
<td align="center">JBE &#x2F; JNA</td>
<td align="center">CF&#x3D;1 或 ZF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>B</strong>elow or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>A</strong>bove</td>
</tr>
<tr>
<td align="center">JA &#x2F; JNBE</td>
<td align="center">CF&#x3D;0 且 ZF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>A</strong>bove &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>B</strong>elow or <strong>E</strong>qual</td>
</tr>
<tr>
<td align="center">JL &#x2F; JNGE</td>
<td align="center">SF ≠ OF</td>
<td align="center"><strong>J</strong>ump if <strong>L</strong>ess &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>G</strong>reater or <strong>E</strong>qual</td>
</tr>
<tr>
<td align="center">JGE &#x2F; JNL</td>
<td align="center">SF &#x3D; OF</td>
<td align="center"><strong>J</strong>ump if <strong>G</strong>reater or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>L</strong>ess</td>
</tr>
<tr>
<td align="center">JLE &#x2F; JNG</td>
<td align="center">ZF&#x3D;1 或 SF ≠ OF</td>
<td align="center"><strong>J</strong>ump if <strong>L</strong>ess or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>G</strong>reater</td>
</tr>
<tr>
<td align="center">JG &#x2F; JNLE</td>
<td align="center">ZF&#x3D;0 且 SF &#x3D; OF</td>
<td align="center"><strong>J</strong>ump if <strong>G</strong>reater &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>L</strong>ess or <strong>E</strong>qual</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day3:函数与栈帧、数组与串指令、宏与结构体、x64汇编框架、内联汇编与混合编程</title>
    <url>/2025/07/08/Day3-%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A0%86%E6%A0%88/</url>
    <content><![CDATA[<p>函数与栈帧、数组与串指令、宏与结构体、x64汇编框架、内联汇编与混合编程</p>
<span id="more"></span>

<h2 id="函数与栈帧"><a href="#函数与栈帧" class="headerlink" title="函数与栈帧"></a>函数与栈帧</h2><ul>
<li><p>“栈“是内存中的一部分，可以理解为连续的一块内存，它为程序运行提供了一个暂时的存放数据的地方，地址、数据等可以通过push指令从寄存器中被复制到栈中，进而寄存器可以进行其他操作，等到这些数据再次被需要时再从栈中被pop出来。栈遵循先进后出的规则，先push的在高地址，后push的在低地址</p>
</li>
<li><p>在程序运行时，每个函数都会拥有独立的栈帧，即独立的栈上的一部分空间。有两个寄存器，esp，ebp（x86即32位环境下）负责维护函数的栈空间。ebp存放的是函数栈空间的栈基址，esp存放的是函数栈空间的栈顶。可以理解为ebp是指向函数栈空间最高位的一个指针（因为栈空间从高地址开始分配，因此指向的是最高位，但是是栈空间的起始地址），而esp是指向函数栈空间最低位的一个指针（指向的是最低位，但是会随着后续栈空间的扩充而变化）。</p>
</li>
<li><p>CALL指令：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;call一个函数的时候，会发生以下内容</span></span><br><span class="line"><span class="keyword">push</span> 返回地址（<span class="keyword">call</span>所在指令的下一条）</span><br><span class="line"><span class="keyword">jmp</span> 目标函数地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>RET指令：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;函数结束时，RET指令会发生以下内容</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">eip</span> <span class="comment">;从栈上弹出返回地址到eip（保存下一步指令地址的寄存器）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>栈帧：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;跳转到每一个函数，会发生以下内容以开辟栈帧</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ebp</span>			<span class="comment">;把上一个函数的ebp值放到栈上</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span>			<span class="comment">;把esp值给ebp，开辟新函数的栈帧</span></span><br><span class="line"><span class="comment">;函数执行完毕后，会发生以下内容清理栈帧</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">esp</span>,<span class="built_in">ebp</span>			<span class="comment">;把ebp值给esp，清理函数栈帧</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ebp</span>				<span class="comment">;恢复ebp原来的值，即上一个函数的ebp</span></span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="数组与串指令"><a href="#数组与串指令" class="headerlink" title="数组与串指令"></a>数组与串指令</h2><ul>
<li><p>声明数组：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">.data</span>			<span class="comment">;在数据段声明</span></span><br><span class="line"> szHello <span class="built_in">db</span> <span class="string">&#x27;HelloWorld&#x27;</span>,<span class="number">0</span>			<span class="comment">;声明一个字符串</span></span><br><span class="line"> nNumber <span class="built_in">dd</span> <span class="number">20</span> dup(<span class="number">0</span>)				<span class="comment">;声明一个DWORD数组，20位，使用dup()初始化数组内容为0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用数组基址的几种方式：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lea</span> <span class="built_in">eax</span>,szHello</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,offset Nnumber</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问数组成员：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;[数组起始地址+索引寄存器*比例因子+偏移量]（索引寄存器用来存放索引值，比例因子对应类型的字节大小，偏移量可用于结构体数组等场景）</span></span><br><span class="line"><span class="comment">;如：</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,offset Array	<span class="comment">;把数组基址给ebx</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">esi</span>,<span class="number">0</span>				<span class="comment">;esi用来当索引寄存器</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="number">10</span>				<span class="comment">;ecx用来放索引上限（ecx常用作计数器）</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_start:</span>				<span class="comment">;创建一个循环</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">eax</span>,[<span class="built_in">ebx</span>+<span class="built_in">esi</span>*<span class="number">4</span>]	<span class="comment">;取出数组内容放到eax中</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">esi</span>,<span class="number">1</span>			<span class="comment">;索引递增</span></span><br><span class="line">	<span class="keyword">cmp</span> <span class="built_in">esi</span>,<span class="built_in">ecx</span>			<span class="comment">;与索引上限比较，判断是否遍历完数组</span></span><br><span class="line">	<span class="keyword">jl</span> loop_start		<span class="comment">;还没遍历完数组就循环操作，jump到loop_start再走一遍</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>串指令：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;stos系列:stosb,stosw,stosd,stosq（分别对应byte,word,dword,qword,功能是把al/ax/eax/rax中的内容存到edi/rdi）</span></span><br><span class="line"><span class="comment">;lods系列:lodsb,lodsw,lodsd,lodsq（同样分别对应四个类型，功能是把esi/rsi的内容加载到al/ax/eax/rax中）</span></span><br><span class="line"><span class="comment">;movs系列:movsb,movsw,movsd,movsq（同样分别对应四个类型，功能是把esi的内容复制到edi中）</span></span><br><span class="line"><span class="comment">;cmps系列:cmpsb,cmpsw,cmpsd,cmpsq（同样分别对应四个类型，功能是比较esi和edi的内容并设置标志位）</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="宏与结构体"><a href="#宏与结构体" class="headerlink" title="宏与结构体"></a>宏与结构体</h2><ul>
<li><p>宏：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;无参宏使用关键字EQU，如</span></span><br><span class="line">PI <span class="built_in">EQU</span> <span class="number">3</span>		<span class="comment">;定义PI=3</span></span><br><span class="line"><span class="comment">;含参宏使用关键字MACRO，用endm结尾，如</span></span><br><span class="line">Myadd MACRO Number</span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">eax</span>,Number</span><br><span class="line">endm			<span class="comment">;定义Myadd函数实现eax加上参数</span></span><br><span class="line"><span class="comment">;含参宏的调用：</span></span><br><span class="line">Myadd&lt;参数&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结构体：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;使用关键字struct和ends，如</span></span><br><span class="line">Point struct</span><br><span class="line">	x <span class="built_in">word</span> ?</span><br><span class="line">	y <span class="built_in">word</span> ?</span><br><span class="line">Point ends</span><br><span class="line"></span><br><span class="line"><span class="comment">;实例化结构体</span></span><br><span class="line">MyPoint Point&lt;?&gt;	<span class="comment">;实例化出MyPoint</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;访问结构体成员</span></span><br><span class="line"><span class="keyword">mov</span> MyPoint<span class="number">.</span>x,<span class="number">123</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="x64汇编框架-MASM"><a href="#x64汇编框架-MASM" class="headerlink" title="x64汇编框架(MASM)"></a>x64汇编框架(MASM)</h2><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;x64环境下的代码，传参的时候先使用寄存器(Windows:rcx,rdx,r8,r9  Linux:rdi,rsi,rdx,rcx,r8,r9)再使用栈</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line"><span class="comment">;Add函数声明</span></span><br><span class="line"><span class="keyword">Add</span> proc</span><br><span class="line">	<span class="keyword">push</span> <span class="built_in">rbp</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rbp</span>,<span class="built_in">rsp</span></span><br><span class="line">	<span class="keyword">lea</span> <span class="built_in">rax</span>,[<span class="built_in">rdi</span> + <span class="built_in">rsi</span>]		<span class="comment">;从寄存器中取参数</span></span><br><span class="line">	<span class="keyword">pop</span> <span class="built_in">rbp</span></span><br><span class="line">	<span class="keyword">ret</span></span><br><span class="line"><span class="keyword">Add</span> endp</span><br><span class="line"></span><br><span class="line">main proc			</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rdi</span>,<span class="number">2</span>		<span class="comment">;把参数传入寄存器中</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rsi</span>,<span class="number">3</span></span><br><span class="line">	<span class="keyword">call</span> <span class="keyword">Add</span></span><br><span class="line">	<span class="keyword">ret</span></span><br><span class="line">main endp</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">;x86环境下的代码，传参使用栈</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line"><span class="comment">;Add函数声明</span></span><br><span class="line"><span class="keyword">Add</span> proc</span><br><span class="line">	<span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">eax</span>,[<span class="built_in">esp</span>+<span class="number">8</span>]			<span class="comment">;从栈上取参数</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">eax</span>,[<span class="built_in">esp</span>+<span class="number">12</span>]</span><br><span class="line">	<span class="keyword">pop</span> <span class="built_in">ebp</span></span><br><span class="line">	<span class="keyword">ret</span></span><br><span class="line"><span class="keyword">Add</span> endp</span><br><span class="line"></span><br><span class="line">main proc</span><br><span class="line">	<span class="keyword">push</span> <span class="number">3</span>			<span class="comment">;把参数压入栈中</span></span><br><span class="line">	<span class="keyword">push</span> <span class="number">2</span></span><br><span class="line">	<span class="keyword">call</span> <span class="keyword">Add</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">8</span></span><br><span class="line">main endp</span><br></pre></td></tr></table></figure>

<h2 id="内联汇编与混合编程"><a href="#内联汇编与混合编程" class="headerlink" title="内联汇编与混合编程"></a>内联汇编与混合编程</h2><ul>
<li><p>x86下，在Microsoft Visual C++ (MSVC)程序中使用汇编，可以通过_asm{}直接写在C++代码中:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _asm&#123;</span><br><span class="line">        <span class="keyword">xor</span> eax,eax</span><br><span class="line">        mov eax,<span class="number">1</span></span><br><span class="line">        add eax,<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>x64下，在Microsoft Visual C++ (MSVC)程序中使用汇编，需要独立的asm文件，通过extern声明使用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Add</span><span class="params">(<span class="type">long</span> <span class="type">long</span> number1,<span class="type">long</span> <span class="type">long</span> number2)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="built_in">Add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    std::cout&lt;&lt;res&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//asm文件</span></span><br><span class="line">.code</span><br><span class="line">Add proc</span><br><span class="line">    push rbp</span><br><span class="line">    mov rbp,rsp</span><br><span class="line">    <span class="keyword">xor</span> rax,rax</span><br><span class="line">    add rax,rcx</span><br><span class="line">    add rax,rdx</span><br><span class="line">    pop rbp</span><br><span class="line">    ret</span><br><span class="line">Add endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day5:函数调用约定</title>
    <url>/2025/07/12/Day5-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/</url>
    <content><![CDATA[<p>函数调用约定</p>
<span id="more"></span>

<h2 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h2><ul>
<li><p>主要有三种：cdecl、stdcall、fastcall。以求和函数为例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求和</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> res=sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>cdecl：完全栈传参，参数从右往左入栈，由调用者清理参数占用的栈空间</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; int __cdecl main()</span></span><br><span class="line">_main           proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: j__main↑j</span></span><br><span class="line">  </span><br><span class="line">var_C           = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">0Ch</span></span><br><span class="line">res             = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">8</span></span><br><span class="line">  </span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitStart_2:</span></span><br><span class="line">                <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+var_C]</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">3</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line">                <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitEnd_2:</span>                   <span class="comment">; JMC_flag</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset _6005466B_entry@cpp</span><br><span class="line">                <span class="keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="number">4</span> <span class="comment">; __CheckForDebuggerJustMyCode(x)</span></span><br><span class="line">                <span class="keyword">nop</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">3</span>               <span class="comment">; 参数c入栈</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">2</span>               <span class="comment">; 参数b入栈</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">1</span>               <span class="comment">; 参数a入栈</span></span><br><span class="line">                <span class="keyword">call</span>    j_?sum@@YAHHHH@Z <span class="comment">; sum(int,int,int)</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0Ch</span>			<span class="comment">;这里调用者进行了清理参数占用的栈空间的操作(3个参数×4字节)，被调用者不负责</span></span><br><span class="line">                <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+res], <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+res]</span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">push</span>    offset _Format  <span class="comment">; &quot;%d\n&quot;</span></span><br><span class="line">                <span class="keyword">call</span>    j__printf</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line">                <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line">                <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">call</span>    j___RTC_CheckEsp</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">retn</span></span><br><span class="line">_main           endp</span><br><span class="line"></span><br><span class="line"><span class="comment">; int __cdecl sum(int a, int b, int c)</span></span><br><span class="line">?sum@@YAHHHH@Z  proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: sum(int,int,int)↑j</span></span><br><span class="line">  </span><br><span class="line">a               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">8</span></span><br><span class="line">b               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">0Ch</span></span><br><span class="line">c               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">10h</span></span><br><span class="line">  </span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span>		<span class="comment">;sum函数自身的栈空间</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitStart:</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">xor</span>     <span class="built_in">ecx</span>, <span class="built_in">ecx</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line">                <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitEnd:</span>                     <span class="comment">; JMC_flag</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset _6005466B_entry@cpp</span><br><span class="line">                <span class="keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="number">4</span> <span class="comment">; __CheckForDebuggerJustMyCode(x)</span></span><br><span class="line">                <span class="keyword">nop</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+a]</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+b]</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+c]</span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span>		<span class="comment">;清理自身栈空间</span></span><br><span class="line">                <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">call</span>    j___RTC_CheckEsp</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">retn</span></span><br><span class="line">?sum@@YAHHHH@Z  endp</span><br></pre></td></tr></table></figure>
</li>
<li><p>stdcall：完全栈传参，参数从右往左入栈，由被调用者清理参数占用的栈空间</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; int __cdecl main()</span></span><br><span class="line">_main           proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: j__main↑j</span></span><br><span class="line">  </span><br><span class="line">var_C           = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">0Ch</span></span><br><span class="line">res             = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">8</span></span><br><span class="line">  </span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitStart_2:</span></span><br><span class="line">                <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+var_C]</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">3</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line">                <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitEnd_2:</span>                   <span class="comment">; JMC_flag</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset _6005466B_entry@cpp</span><br><span class="line">                <span class="keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="number">4</span> <span class="comment">; __CheckForDebuggerJustMyCode(x)</span></span><br><span class="line">                <span class="keyword">nop</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">3</span>               <span class="comment">; 参数c入栈</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">2</span>               <span class="comment">; 参数b入栈</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">1</span>               <span class="comment">; 参数a入栈</span></span><br><span class="line">                <span class="keyword">call</span>    j_?sum@@YGHHHH@Z <span class="comment">; sum(int,int,int)</span></span><br><span class="line">                <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+res], <span class="built_in">eax</span>		<span class="comment">;这里直接到把返回值给res了，调用者不负责清理参数占用的栈空间</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+res]</span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">push</span>    offset _Format  <span class="comment">; &quot;%d\n&quot;</span></span><br><span class="line">                <span class="keyword">call</span>    j__printf</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line">                <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line">                <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">call</span>    j___RTC_CheckEsp</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">retn</span></span><br><span class="line">_main           endp</span><br><span class="line">  </span><br><span class="line"><span class="comment">; int __stdcall sum(int a, int b, int c)</span></span><br><span class="line">?sum@@YGHHHH@Z  proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: sum(int,int,int)↑j</span></span><br><span class="line">  </span><br><span class="line">a               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">8</span></span><br><span class="line">b               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">0Ch</span></span><br><span class="line">c               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">10h</span></span><br><span class="line">  </span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span>		<span class="comment">;sum的栈空间</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitStart:</span></span><br><span class="line">              	 <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">xor</span>     <span class="built_in">ecx</span>, <span class="built_in">ecx</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line">                <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitEnd:</span>                     <span class="comment">; JMC_flag</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset _6005466B_entry@cpp</span><br><span class="line">                <span class="keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="number">4</span> <span class="comment">; __CheckForDebuggerJustMyCode(x)</span></span><br><span class="line">                <span class="keyword">nop</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+a]</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+b]</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+c]</span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span>		<span class="comment">;清理自身栈空间</span></span><br><span class="line">                <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">call</span>    j___RTC_CheckEsp</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">retn</span>    <span class="number">0Ch</span>			<span class="comment">;被调用者通过返回指令给esp增加0Ch，清理参数占用的栈空间</span></span><br><span class="line">?sum@@YGHHHH@Z  endp</span><br></pre></td></tr></table></figure>
</li>
<li><p>fastcall：寄存器+栈传参，优先使用寄存器，剩余参数从右往左入栈，由被调用者清理参数占用的栈空间</p>
<p>寄存器传参优先级：</p>
<p>x86：ecx  edx  栈</p>
<p>x64：rcx  rdx  r8  r9  栈</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; int __cdecl main()</span></span><br><span class="line">_main           proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: j__main↑j</span></span><br><span class="line">  </span><br><span class="line">var_C           = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">0Ch</span></span><br><span class="line">res             = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">8</span></span><br><span class="line">  </span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitStart_2:</span></span><br><span class="line">                <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+var_C]</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">3</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line">                <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitEnd_2:</span>                   <span class="comment">; JMC_flag</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset _6005466B_entry@cpp</span><br><span class="line">                <span class="keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="number">4</span> <span class="comment">; __CheckForDebuggerJustMyCode(x)</span></span><br><span class="line">                <span class="keyword">nop</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">3</span>               <span class="comment">; 参数c入栈</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">edx</span>, <span class="number">2</span>          <span class="comment">; 参数b存入寄存器</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">1</span>          <span class="comment">; 参数a存入寄存器</span></span><br><span class="line">                <span class="keyword">call</span>    j_?sum@@YIHHHH@Z <span class="comment">; sum(int,int,int)</span></span><br><span class="line">                <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+res], <span class="built_in">eax</span>		<span class="comment">;这里也是没有调用者对参数占用的栈空间的清理</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+res]</span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">push</span>    offset _Format  <span class="comment">; &quot;%d\n&quot;</span></span><br><span class="line">                <span class="keyword">call</span>    j__printf</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line">                <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line">                <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">call</span>    j___RTC_CheckEsp</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">retn</span></span><br><span class="line">_main           endp</span><br><span class="line"></span><br><span class="line"><span class="comment">; int __fastcall sum(int a, int b, int c)</span></span><br><span class="line">?sum@@YIHHHH@Z  proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: sum(int,int,int)↑j</span></span><br><span class="line">  </span><br><span class="line">var_18          = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">18h</span></span><br><span class="line">b               = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">14h</span></span><br><span class="line">a               = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">8</span></span><br><span class="line">c               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">8</span></span><br><span class="line">  </span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0D8h</span>		<span class="comment">;sum开辟栈空间</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitStart:</span></span><br><span class="line">                <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+var_18]</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">6</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line">                <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitEnd:</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ecx</span></span><br><span class="line">                <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+b], <span class="built_in">edx</span></span><br><span class="line">                <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+a], <span class="built_in">ecx</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset _6005466B_entry@cpp <span class="comment">; JMC_flag</span></span><br><span class="line">                <span class="keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="number">4</span> <span class="comment">; __CheckForDebuggerJustMyCode(x)</span></span><br><span class="line">                <span class="keyword">nop</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+a]</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+b]</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+c]</span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0D8h</span>		<span class="comment">;sum清理栈空间</span></span><br><span class="line">                <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">call</span>    j___RTC_CheckEsp</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">retn</span>    <span class="number">4</span>				<span class="comment">;由于只有一个参数被push到栈上，所以被调用者返回4，清理参数占用的栈空间</span></span><br><span class="line">?sum@@YIHHHH@Z  endp</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day4:Linux汇编框架、操作系统与汇编器、主函数跳转流程</title>
    <url>/2025/07/11/Day4-Linux%E6%B1%87%E7%BC%96%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>Linux汇编框架、操作系统与汇编器、主函数跳转流程</p>
<span id="more"></span>

<h2 id="Linux-NASM-汇编框架"><a href="#Linux-NASM-汇编框架" class="headerlink" title="Linux(NASM)汇编框架"></a>Linux(NASM)汇编框架</h2><ul>
<li><p>Linux和Windows的不同主要有：</p>
<ul>
<li><p>系统调用方式不同：</p>
<ul>
<li><p>Windows提供API，可以直接利用系统函数</p>
</li>
<li><p>Linux需要用系统调用号触发系统调用。系统调用号存入特定寄存器后使用触发指令，触发系统调用</p>
<p>触发指令：</p>
<p>​	32位(x86)：int 0x80</p>
<p>​	64位(x64)：syscall</p>
<p>参数传递：</p>
<p>​	32位：eax（系统调用号），ebx、ecx、edx、esi、edi、ebp（参数）。</p>
<p>​	64位：rax（系统调用号），rdi、rsi、rdx、r10、r8、r9（参数）。</p>
<p>32位下exit示例：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span>		<span class="comment">;32位下，exit的系统调用号为1</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">0x80</span>		<span class="comment">;系统调用号存入寄存器后，触发系统调用</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>可执行文件格式不同：</p>
<ul>
<li>Windows使用PE文件格式</li>
<li>Linux使用ELF文件格式</li>
</ul>
</li>
<li><p>其他细节：</p>
<ul>
<li>Linux在段名前必须添加section，只有.text段没有.code段（实际上由汇编器决定，详见下一部分）</li>
<li>Linux使用0xA作为字符串结束符</li>
</ul>
</li>
</ul>
</li>
<li><p>32位汇编框架</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">section</span> .data</span><br><span class="line">	msg <span class="built_in">db</span> <span class="string">&quot;HelloWorld&quot;</span>,<span class="number">0xA</span></span><br><span class="line">	len <span class="built_in">equ</span> $ - msg				<span class="comment">;用变量len记录msg的长度（$表示当前变量的地址，减去msg的地址就是msg的长度）</span></span><br><span class="line">	</span><br><span class="line"><span class="meta">section</span> .text</span><br><span class="line">	<span class="meta">global</span> _start</span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">4</span>					<span class="comment">;eax存放系统调用号4：sys_write</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">1</span>					<span class="comment">;参数1：文件描述符，1表示标准输出stdout</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ecx</span>,msg					<span class="comment">;参数2：要打印的数据地址</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">edx</span>,len					<span class="comment">;参数3：打印的字节数</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">0x80</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span>					<span class="comment">;eax存放系统调用号1：sys_exit</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">0</span>					<span class="comment">;参数1：退出状态码（0表示成功）</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">0x80</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>64位汇编框架</p>
</li>
</ul>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">section</span> .data</span><br><span class="line">	msg <span class="built_in">db</span> <span class="string">&quot;HelloWorld&quot;</span>,<span class="number">0xA</span></span><br><span class="line">	len <span class="built_in">equ</span> $ - msg				</span><br><span class="line">	</span><br><span class="line"><span class="meta">section</span> .text</span><br><span class="line">	<span class="meta">global</span> _start</span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rax</span>,<span class="number">1</span>					<span class="comment">;rax存放系统调用号1：sys_write</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rdi</span>,<span class="number">1</span>					<span class="comment">;参数1：文件描述符，1表示标准输出stdout</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rsi</span>,msg					<span class="comment">;参数2：要打印的数据地址</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rdx</span>,len					<span class="comment">;参数3：打印的字节数</span></span><br><span class="line">	<span class="keyword">syscall</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rax</span>,<span class="number">60</span>					<span class="comment">;rax存放系统调用号60：sys_exit</span></span><br><span class="line">	<span class="keyword">xor</span> <span class="built_in">rdi</span>,<span class="built_in">rdi</span>					<span class="comment">;参数1：退出状态码（0表示成功）</span></span><br><span class="line">	<span class="keyword">syscall</span></span><br></pre></td></tr></table></figure>

<h2 id="操作系统与汇编器"><a href="#操作系统与汇编器" class="headerlink" title="操作系统与汇编器"></a>操作系统与汇编器</h2><ul>
<li>Windows：主要有MASM和NASM两种汇编器<ul>
<li>MASM（Microsoft Macro Assembler），主要集成在visual studio中<ul>
<li>段名前不要求加section，可以直接用 <strong>.段名</strong> 声明</li>
<li>指令存放在.code段</li>
<li>.code段，函数以 <strong>func_name proc</strong> 开始，以 <strong>func_name endp</strong> 结束</li>
<li>使用Intel风格，即 <strong>指令   目标操作数，源操作数</strong></li>
</ul>
</li>
<li>NASM（Netwide Assembler），跨平台汇编器，支持Windows、Linux、macOS<ul>
<li>段名前要求加section，用 <strong>sectino .段名</strong> 声明</li>
<li>指令存放在.text段</li>
<li>.text段，函数用 <strong>global func_name</strong> 声明后再定义 </li>
<li>使用Intel风格</li>
</ul>
</li>
</ul>
</li>
<li>Linux：主要有NASM和GAS两种汇编器<ul>
<li>NASM同上 </li>
<li>GAS（GNU Assembler），Linux默认汇编器<ul>
<li>段名前要求加.section，用 <strong>.section .段名</strong> 声明</li>
<li>指令存放在.text段</li>
<li>.text段，函数用 <strong>.global func_name</strong> 声明后再定义</li>
<li>使用AT&amp;T风格，即 <strong>指令   源操作数，目标操作数</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="主函数跳转流程"><a href="#主函数跳转流程" class="headerlink" title="主函数跳转流程"></a>主函数跳转流程</h2><ul>
<li><p>环境：vs2022，Debug  x86&#x2F;x64，Release x86&#x2F;x64</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;x86 debug 跳转特征</span></span><br><span class="line"><span class="comment">;step1</span></span><br><span class="line"><span class="keyword">jmp</span>			<span class="comment">;直接jmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step2</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;第一个call</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step3</span></span><br><span class="line"><span class="keyword">call</span></span><br><span class="line"><span class="keyword">call</span> &lt;--	<span class="comment">;连续两个call，进第二个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step4</span></span><br><span class="line"><span class="number">2</span>*<span class="keyword">jz</span>--&gt;<span class="keyword">call</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;两个jz指向的同一个call且此call后紧跟mov和call</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step5</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">push</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">push</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">push</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;连续push3个参数入栈后的call</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step6</span></span><br><span class="line"><span class="keyword">jmp</span></span><br></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;x86 Release 跳转特征</span></span><br><span class="line"><span class="comment">;step1</span></span><br><span class="line"><span class="keyword">call</span></span><br><span class="line"><span class="keyword">jmp</span>			<span class="comment">;call后的jmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step2</span></span><br><span class="line"><span class="keyword">push</span></span><br><span class="line"><span class="keyword">push</span></span><br><span class="line"><span class="keyword">push</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;连续push3个参数入栈后的call</span></span><br></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;x64 Debug 跳转特征 </span></span><br><span class="line"><span class="comment">;step1</span></span><br><span class="line"><span class="keyword">jmp</span>			<span class="comment">;直接jmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step2</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;第一个call</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step3</span></span><br><span class="line"><span class="keyword">call</span></span><br><span class="line"><span class="keyword">call</span> &lt;--	<span class="comment">;连续两个call进第二个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step4</span></span><br><span class="line"><span class="number">2</span>*<span class="keyword">jz</span>--&gt;<span class="keyword">call</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;两个jz指向的同一个call且此call后紧跟mov和call</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step5</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;连续5个mov后的call（传参）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step6</span></span><br><span class="line"><span class="keyword">jmp</span>			<span class="comment">;直接jmp</span></span><br></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;x64 Release 跳转特征 </span></span><br><span class="line"><span class="comment">;step1</span></span><br><span class="line"><span class="keyword">call</span></span><br><span class="line"><span class="keyword">jmp</span>			<span class="comment">;call后的jmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step2</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">call</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;三个mov后的call（传参）且此call后紧跟mov和call</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day6:if-else语句识别、switch语句识别、循环语句识别</title>
    <url>/2025/07/14/Day6-switch%E8%AF%AD%E5%8F%A5%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p>if-else语句识别、switch语句识别、循环语句识别</p>
<span id="more"></span>

<h2 id="if-else语句识别"><a href="#if-else语句识别" class="headerlink" title="if-else语句识别"></a>if-else语句识别</h2><ul>
<li><p>第一种，数值比较作为条件（x86debug为例，其余类似，仅是比较方法（如使用sub而不是cmp）和模式特征上的差异）</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>004702D0                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C]</span><br><span class="line"><span class="symbol">.text:</span>004702D3                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004702D4                 <span class="keyword">push</span>    offset unk_545E50 <span class="comment">; %d</span></span><br><span class="line"><span class="symbol">.text:</span>004702D9                 <span class="keyword">call</span>    sub_4681E0      <span class="comment">; scanf</span></span><br><span class="line"><span class="symbol">.text:</span>004702DE                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>004702E1                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_C], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>004702E5                 <span class="keyword">jnz</span>     short loc_4702F6 <span class="comment">; if [ebp+var_C]!=1, jump to loc_4702f6</span></span><br><span class="line"><span class="symbol">.text:</span>004702E7                 <span class="keyword">push</span>    offset aNEquales1 <span class="comment">; &quot;n equales 1&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>004702EC                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>004702F1                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span>004702F4                 <span class="keyword">jmp</span>     short loc_470303</span><br><span class="line"><span class="symbol">.text:</span>004702F6 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>004702F6</span><br><span class="line"><span class="symbol">.text:</span>004702F6 loc_4702F6:                             <span class="comment">; CODE XREF: main+45↑j</span></span><br><span class="line"><span class="symbol">.text:</span>004702F6                 <span class="keyword">push</span>    offset aNDoesNotEqual1 <span class="comment">; &quot;n does not equal 1&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>004702FB                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470300</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equales 1&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n does not equal 1&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种，变量直接作为条件</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00470303</span>                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_18]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470306</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470307</span>                 <span class="keyword">push</span>    offset unk_545E50 <span class="comment">; %d</span></span><br><span class="line"><span class="symbol">.text:</span>0047030C                 <span class="keyword">call</span>    sub_4681E0      <span class="comment">; scanf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470311</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470314</span>                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_18], <span class="number">0</span> <span class="comment">; 和&#x27;0&#x27;比较</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470318</span>                 <span class="keyword">jz</span>      short loc_470327 <span class="comment">; if [ebp+var_18]==0, jump to loc_470327, 跳过printf</span></span><br><span class="line"><span class="symbol">.text:</span>0047031A                 <span class="keyword">push</span>    offset aJudgeIsNotZero <span class="comment">; &quot;judge is not zero&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>0047031F                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470324</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> judge;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;judge);</span><br><span class="line"><span class="keyword">if</span> (judge)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;judge is not zero&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三种，返回值（函数式）作为条件</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00470387</span>                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span>0047038A                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0047038B                 <span class="keyword">push</span>    offset unk_545E50 <span class="comment">; %d</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470390</span>                 <span class="keyword">call</span>    sub_4681E0      <span class="comment">; scanf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470395</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470398</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span>0047039B                 <span class="keyword">push</span>    <span class="built_in">eax</span>             <span class="comment">; 输入的值入栈，即函数传参</span></span><br><span class="line"><span class="symbol">.text:</span>0047039C                 <span class="keyword">call</span>    sub_46B214      <span class="comment">; 自定义函数</span></span><br><span class="line"><span class="symbol">.text:</span>004703A1                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span>004703A4                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>        <span class="comment">; 1 &amp; 1 = 0； 0 &amp; 0 = 1</span></span><br><span class="line"><span class="symbol">.text:</span>004703A6                 <span class="keyword">jz</span>      short loc_4703B5</span><br><span class="line"><span class="symbol">.text:</span>004703A8                 <span class="keyword">push</span>    offset aItS0    <span class="comment">; &quot;it&#x27;s 0\n&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>004703AD                 <span class="keyword">call</span>    sub_468D1B</span><br><span class="line"><span class="symbol">.text:</span>004703B2                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;sub_46b214</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470110</span> arg_0           = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470110</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470110</span>                 <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470111</span>                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470113</span>                 <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470119</span>                 <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>0047011A                 <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>0047011B                 <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>0047011C                 <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>0047011E                 <span class="keyword">xor</span>     <span class="built_in">ecx</span>, <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470120</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470125</span>                 <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470127</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset unk_57500E</span><br><span class="line"><span class="symbol">.text:</span>0047012C                 <span class="keyword">call</span>    sub_46B660</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470131</span>                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470132</span>                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+arg_0], <span class="number">0</span>  <span class="comment">; [ebp+8], eax在栈上的位置</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470136</span>                 <span class="keyword">jnz</span>     short loc_470141 <span class="comment">; eax=0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470138</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">1</span>          <span class="comment">; if [ebp+arg_0]==0, eax=1, return 1(eax)</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047013D</span>                 <span class="keyword">jmp</span>     short loc_470143</span><br><span class="line"><span class="symbol">.text:</span>0047013F <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>0047013F                 <span class="keyword">jmp</span>     short loc_470143</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470141</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470141</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470141</span> loc_470141:                             <span class="comment">; CODE XREF: sub_470110+26↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470141</span>                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span>        <span class="comment">; eax=0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470143</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470143</span> loc_470143:                             <span class="comment">; CODE XREF: sub_470110+2D↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470143</span>                                         <span class="comment">; sub_470110+2F↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470143</span>                 <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470144</span>                 <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470145</span>                 <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470146</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span></span><br><span class="line"><span class="symbol">.text:</span>0047014C                 <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span>0047014E                 <span class="keyword">call</span>    sub_46A62A</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470153</span>                 <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470155</span>                 <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470156</span>                 <span class="keyword">retn</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">IfZero</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (a == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">	<span class="keyword">if</span>(IfZero(a))</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;it&#x27;s 0\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="switch语句识别"><a href="#switch语句识别" class="headerlink" title="switch语句识别"></a>switch语句识别</h2><ul>
<li><p>比较简单的情况下：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00470327</span>                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span>0047032A                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0047032B                 <span class="keyword">push</span>    offset unk_545E50 <span class="comment">; %d</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470330</span>                 <span class="keyword">call</span>    sub_4681E0      <span class="comment">; scanf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470335</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470338</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span>0047033B                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_EC], <span class="built_in">eax</span> <span class="comment">; [ebp+var_EC]==[ebp+var_24], 用临时变量[ebp+var_EC]来检验case</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470341</span>                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_EC], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470348</span>                 <span class="keyword">jz</span>      short loc_47035E <span class="comment">; case1输出</span></span><br><span class="line"><span class="symbol">.text:</span>0047034A                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_EC], <span class="number">5</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470351</span>                 <span class="keyword">jz</span>      short loc_470371 <span class="comment">; case5输出</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470353</span>                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_EC], <span class="number">0Ah</span></span><br><span class="line"><span class="symbol">.text:</span>0047035A                 <span class="keyword">jz</span>      short loc_470384 <span class="comment">; case10输出</span></span><br><span class="line"><span class="symbol">.text:</span>0047035C                 <span class="keyword">jmp</span>     short loc_470395 <span class="comment">; break然后system(&quot;pause&quot;)</span></span><br><span class="line"><span class="symbol">.text:</span>0047035E <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>0047035E</span><br><span class="line"><span class="symbol">.text:</span>0047035E loc_47035E:                             <span class="comment">; CODE XREF: main+A8↑j</span></span><br><span class="line"><span class="symbol">.text:</span>0047035E                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470361</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470362</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470367</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>0047036C                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>0047036F                 <span class="keyword">jmp</span>     short loc_470395</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470371</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470371</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470371</span> loc_470371:                             <span class="comment">; CODE XREF: main+B1↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470371</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470374</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470375</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>0047037A                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>0047037F                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470382</span>                 <span class="keyword">jmp</span>     short loc_470395</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470384</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470384</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470384</span> loc_470384:                             <span class="comment">; CODE XREF: main+BA↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470384</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470387</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470388</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047038D</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470392</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470395</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470395</span> loc_470395:                             <span class="comment">; CODE XREF: main+BC↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470395</span>                                         <span class="comment">; main+CF↑j ...</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470395</span>                 <span class="keyword">push</span>    offset aPause   <span class="comment">; &quot;pause&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>0047039A                 <span class="keyword">call</span>    sub_46AFAD      <span class="comment">; system(&quot;pause&quot;)</span></span><br><span class="line"><span class="symbol">.text:</span>0047039F                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line"><span class="keyword">switch</span> (number) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>再复杂点，会优化出跳转表，即每个case跳转的地址会被集合成一个数组，像表一样</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>004702D3                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004702D4                 <span class="keyword">push</span>    offset unk_545E50 <span class="comment">; %d</span></span><br><span class="line"><span class="symbol">.text:</span>004702D9                 <span class="keyword">call</span>    sub_4681E0      <span class="comment">; scanf</span></span><br><span class="line"><span class="symbol">.text:</span>004702DE                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>004702E1                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C]</span><br><span class="line"><span class="symbol">.text:</span>004702E4                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_D4], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004702EA                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_D4] <span class="comment">; 把输入值传到ecx，下一步减去1，减1的原因见后面的解释</span></span><br><span class="line"><span class="symbol">.text:</span>004702F0                 <span class="keyword">sub</span>     <span class="built_in">ecx</span>, <span class="number">1</span>          <span class="comment">; switch 67 cases</span></span><br><span class="line"><span class="symbol">.text:</span>004702F3                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_D4], <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>004702F9                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_D4], <span class="number">42h</span> <span class="comment">; 把输入值和42h(66)比较，下一步是大于66就跳出case的判断</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470300</span>                 <span class="keyword">ja</span>      def_470313      <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470306</span>                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, [<span class="built_in">ebp</span>+var_D4]</span><br><span class="line"><span class="symbol">.text:</span>0047030C                 <span class="keyword">movzx</span>   <span class="built_in">eax</span>, <span class="built_in">ds</span>:byte_470418[<span class="built_in">edx</span>] <span class="comment">; 跳转表索引值表，即预判了输入值的范围并且为每个可能的值建立了索引值表（比如说现在确定了范围是0-66，就枚举了0-66这些数值对应的索引，然后再根据索引找到应改跳转的地址</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470313</span>                 <span class="keyword">jmp</span>     <span class="built_in">ds</span>:jpt_470313[<span class="built_in">eax</span>*<span class="number">4</span>] <span class="comment">; switch jump</span></span><br><span class="line"><span class="symbol">.text:</span>0047031A <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>0047031A</span><br><span class="line"><span class="symbol">.text:</span>0047031A loc_47031A:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span>0047031A                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span>0047031A                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047031D</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0047031E                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470323</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470328</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>0047032B                 <span class="keyword">jmp</span>     short def_470313 <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047032D</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047032D</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047032D</span> loc_47032D:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047032D</span>                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047032D</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 5</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470330</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470331</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470336</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>0047033B                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>0047033E                 <span class="keyword">jmp</span>     short def_470313 <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470340</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470340</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470340</span> loc_470340:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470340</span>                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470340</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 10</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470343</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470344</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470349</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>0047034E                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470351</span>                 <span class="keyword">jmp</span>     short def_470313 <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470353</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470353</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470353</span> loc_470353:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470353</span>                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470353</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 17</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470356</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470357</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>0047035C                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470361</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470364</span>                 <span class="keyword">jmp</span>     short def_470313 <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470366</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470366</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470366</span> loc_470366:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470366</span>                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470366</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 11</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470369</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0047036A                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>0047036F                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470374</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470377</span>                 <span class="keyword">jmp</span>     short def_470313 <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470379</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470379</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470379</span> loc_470379:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470379</span>                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470379</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 67</span></span><br><span class="line"><span class="symbol">.text:</span>0047037C                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047037D</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470382</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470387</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>0047038A                 <span class="keyword">jmp</span>     short def_470313 <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span>0047038C <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>0047038C</span><br><span class="line"><span class="symbol">.text:</span>0047038C loc_47038C:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span>0047038C                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span>0047038C                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 3</span></span><br><span class="line"><span class="symbol">.text:</span>0047038F                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470390</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470395</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>0047039A                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047039D</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047039D</span> def_470313:                             <span class="comment">; CODE XREF: sub_4702A0+60↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047039D</span>                                         <span class="comment">; sub_4702A0+73↑j ...</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047039D</span>                 <span class="keyword">push</span>    offset aPause   <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span>004703A2                 <span class="keyword">call</span>    sub_46AFAD      <span class="comment">; system</span></span><br><span class="line"><span class="symbol">.text:</span>004703A7                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line"><span class="keyword">switch</span> (number) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">67</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>对跳转表和索引值表进行进一步解释：</p>
<p>先看跳转表：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-16%20000211.png" alt="跳转表"></p>
<p>可以看到跳转表只有简单的8种情况。但是编译器（反编译器？）只能根据case的最大值用笨方法枚举可能的值，这时候，就可以给这些枚举的值分成两种：一种是case里有的，一种是case里没有的。看跳转表的最后一个，叫def而不是loc，这个就是给case里没有的枚举值准备的。因为分为case里有的和没有的，因此，case里有的，会给出具体的索引值；case里没有的，统一导向跳转表的最后一个。再看索引值表：</p>
<p><img src="/../images/image-20250716001640839.png" alt="索引值表"></p>
<p>可以看到，里面枚举了0到66对应的索引值。看汇编代码，是将输入的值作为索引值表的索引来用的，索引出来的值再作为跳转表的索引。注意看，索引值表的最小值为0，因此，跳转表和数组一样从0开始索引，而0-7对应跳转表的八种情况。通过进一步挖掘信息，还可以知道跳转表是把case按照从小到大的顺序排列的。因此，最开始会对输入值有一个减的操作。至于为什么减1，我们就可以推测最小的case是1了，因为索引从0开始，而最小的case在索引0处。</p>
</li>
<li><p>这样解释下来可能还有点绕，所以我们按照机器的动作走一遍：</p>
<p>首先，把case按顺序排出跳转表。</p>
<p>然后，假设我们拿到输入的值。作为机器，我们知道case有：1，3，5，10，17，11，67，所以先给输入的值减1，以便这个值是1的时候我们可以索引到跳转表下标0处。同时，如果这个值大于66，我们还可以直接跳过case检查，直接导出去（刚好和在case最大最小值范围内但不是case的值一样对待）</p>
<p>再然后，我们枚举0-66的值，并且把这些值和case里有的值一一比较，分出两种值：一种在case里，一种不再case里。</p>
<p>ok，然后我们建立索引值表，给在case里的枚举值对应的跳转表索引值，比如说枚举值2（输入值是3），刚好case里有3，按顺序排第二，我们就给索引值1（从0开始索引）。回头看截出来的索引值表，在下标2的地方刚好是1（枚举值索引出跳转表索引）；给不在case里的值索引到7，对应跳转表最后一位（为没在case里的值专门准备的那一位）。</p>
<p>最后，我们就准备好我们的解决方案了，对于任意输入的值我们就都有对策了。</p>
</li>
<li><p>请务必真正理解上述内容，因为在逆向工程中，这么绕的操作很常见。在PE文件结构部分，我们或许还有机会再接触到这么绕的操作。（其实只需要写出程序拿到ida里点开跳转表和索引值表（如果有的话）看几眼就明白了，亲身实践总比阅读文字来的有效，因为文字还取决于书写者的表达水平(●’◡’●)）</p>
</li>
</ul>
<h2 id="循环语句识别"><a href="#循环语句识别" class="headerlink" title="循环语句识别"></a>循环语句识别</h2><ul>
<li><p>第一种，for循环</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00464096</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="number">0</span>  <span class="comment">; 一个变量初始化为0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046409D</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_14], <span class="number">1</span> <span class="comment">; 另一个变量初始化为1</span></span><br><span class="line"><span class="symbol">.text:</span>004640A4                 <span class="keyword">jmp</span>     short loc_4640AF</span><br><span class="line"><span class="symbol">.text:</span>004640A6 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>004640A6</span><br><span class="line"><span class="symbol">.text:</span>004640A6 loc_4640A6:                             <span class="comment">; CODE XREF: sub_464070+4E↓j</span></span><br><span class="line"><span class="symbol">.text:</span>004640A6                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_14]</span><br><span class="line"><span class="symbol">.text:</span>004640A9                 <span class="keyword">add</span>     <span class="built_in">eax</span>, <span class="number">1</span>          <span class="comment">; 用eax过渡，给[ebp+var_14]加1</span></span><br><span class="line"><span class="symbol">.text:</span>004640AC                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_14], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004640AF</span><br><span class="line"><span class="symbol">.text:</span>004640AF loc_4640AF:                             <span class="comment">; CODE XREF: sub_464070+34↑j</span></span><br><span class="line"><span class="symbol">.text:</span>004640AF                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_14], <span class="number">0Ah</span></span><br><span class="line"><span class="symbol">.text:</span>004640B3                 <span class="keyword">jg</span>      short loc_4640C0 <span class="comment">; [ebp+var_14]大于0Ah时跳转（出循环）</span></span><br><span class="line"><span class="symbol">.text:</span>004640B5                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span>004640B8                 <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_14] <span class="comment">; 用eax过渡，把[ebp+var_14]的值加到[ebp+var_8]上</span></span><br><span class="line"><span class="symbol">.text:</span>004640BB                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004640BE                 <span class="keyword">jmp</span>     short loc_4640A6 <span class="comment">; 跳回去，形成循环</span></span><br><span class="line"><span class="symbol">.text:</span>004640C0 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>004640C0</span><br><span class="line"><span class="symbol">.text:</span>004640C0 loc_4640C0:                             <span class="comment">; CODE XREF: sub_464070+43↑j</span></span><br><span class="line"><span class="symbol">.text:</span>004640C0                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span>004640C3                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004640C4                 <span class="keyword">push</span>    offset aCountD  <span class="comment">; &quot;count : %d &quot;</span></span><br><span class="line"><span class="symbol">.text:</span>004640C9                 <span class="keyword">call</span>    sub_45DB54      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>004640CE                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">	count += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;count : %d &quot;</span>, count);</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种，while循环</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>004640D1                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="number">0</span>  <span class="comment">; 一个变量初始化为0</span></span><br><span class="line"><span class="symbol">.text:</span>004640D8                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_20], <span class="number">0Ah</span> <span class="comment">; 另一个变量初始化为10</span></span><br><span class="line"><span class="symbol">.text:</span>004640DF</span><br><span class="line"><span class="symbol">.text:</span>004640DF loc_4640DF:                             <span class="comment">; CODE XREF: sub_464070+87↓j</span></span><br><span class="line"><span class="symbol">.text:</span>004640DF                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_20], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>004640E3                 <span class="keyword">jle</span>     short loc_4640F9 <span class="comment">; [ebp+var_20]小于等于0时跳转（出循环）</span></span><br><span class="line"><span class="symbol">.text:</span>004640E5                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span>004640E8                 <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_20] <span class="comment">; eax过渡，把[ebp+var_20]值加到[ebp+var_8]上</span></span><br><span class="line"><span class="symbol">.text:</span>004640EB                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004640EE                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_20]</span><br><span class="line"><span class="symbol">.text:</span>004640F1                 <span class="keyword">sub</span>     <span class="built_in">eax</span>, <span class="number">1</span>          <span class="comment">; eax过渡，给[ebp+var_20]减1</span></span><br><span class="line"><span class="symbol">.text:</span>004640F4                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_20], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004640F7                 <span class="keyword">jmp</span>     short loc_4640DF <span class="comment">; 回跳，形成循环</span></span><br><span class="line"><span class="symbol">.text:</span>004640F9 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>004640F9</span><br><span class="line"><span class="symbol">.text:</span>004640F9 loc_4640F9:                             <span class="comment">; CODE XREF: sub_464070+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span>004640F9                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span>004640FC                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004640FD                 <span class="keyword">push</span>    offset aCountD  <span class="comment">; &quot;count : %d &quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464102</span>                 <span class="keyword">call</span>    sub_45DB54      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464107</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">	count += n;</span><br><span class="line">	n--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;count : %d &quot;</span>, count);</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三种，do-while循环</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>0046410A                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="number">0</span>  <span class="comment">; 一个变量初始化为0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464111</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_2C], <span class="number">0Ah</span> <span class="comment">; 另一个变量初始化为10</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464118</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464118</span> loc_464118:                             <span class="comment">; CODE XREF: sub_464070+BE↓j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464118</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span>0046411B                 <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_2C] <span class="comment">; eax过渡，把[ebp+var_2C]值加到[ebp+var_8]上</span></span><br><span class="line"><span class="symbol">.text:</span>0046411E                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464121</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_2C]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464124</span>                 <span class="keyword">sub</span>     <span class="built_in">eax</span>, <span class="number">1</span>          <span class="comment">; eax过渡，给[ebp+var_2C]减1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464127</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_2C], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0046412A                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_2C], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>0046412E                 <span class="keyword">jg</span>      short loc_464118 <span class="comment">; [ebp+var_2C]大于0时回跳</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464130</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464133</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464134</span>                 <span class="keyword">push</span>    offset aCountD  <span class="comment">; &quot;count : %d &quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464139</span>                 <span class="keyword">call</span>    sub_45DB54      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>0046413E                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">	count += i;</span><br><span class="line">	i--;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &gt; <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;count : %d &quot;</span>, count);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>RELearining</category>
      </categories>
  </entry>
  <entry>
    <title>周记</title>
    <url>/2025/06/02/%E5%91%A8%E8%AE%B0/</url>
    <content><![CDATA[<p>简单记录每周收获</p>
<span id="more"></span>

<h2 id="week1-2025-3-4-2025-3-9"><a href="#week1-2025-3-4-2025-3-9" class="headerlink" title="week1 (2025.3.4-2025.3.9)"></a>week1 (2025.3.4-2025.3.9)</h2><ul>
<li>看到群友讲到周报，灵光一闪觉得可以写写周记来记录自己的学习，也当作一种督促</li>
<li>这周主要学习李承远老师的《逆向工程核心原理》（去年12月图书馆借的，这周才正式开始看）</li>
<li>主要学习了动态调试的基础技能。有：<ol>
<li>调试器的基础操作，查找目标代码的方法（干找，字符串检索，下断点，API检索及下断点）</li>
<li>打补丁patch修改输出的字符串（直接修改或者导向修改的NULL填充区域）并导出新的可执行文件</li>
<li>字节序、寄存器基础</li>
<li>栈、栈帧</li>
<li>函数调用约定（cdecl（调用者处理栈）、stdcall（被调用者处理栈）、fastcall（同stdcall，但是结合了栈和寄存器））</li>
</ol>
</li>
</ul>
<h2 id="week2-2025-3-10-2025-3-16"><a href="#week2-2025-3-10-2025-3-16" class="headerlink" title="week2 (2025.3.10-2025.3.16)"></a>week2 (2025.3.10-2025.3.16)</h2><ul>
<li>这周主要学习了PE文件结构的内容，同步更新了学习笔记 ，主要是PE文件的基本组成介绍，理论知识</li>
<li>周末本想接着下一章的学习，但是摆大烂了，甚至PE笔记还没写完</li>
<li>下周末就是NCTF了，一点准备没有，要炸掉了</li>
</ul>
<h2 id="week3-2025-3-17-2025-3-23"><a href="#week3-2025-3-17-2025-3-23" class="headerlink" title="week3 (2025.3.17-2025.3.23)"></a>week3 (2025.3.17-2025.3.23)</h2><ul>
<li>这周过得又忙又不知道在忙什么，PE文件结构最后的EAT部分没看懂，(T_T)，笔记还没补完</li>
<li>NCTF爆零了，编码能力是硬伤，知识更是伤上加伤 (T_T)</li>
<li>好了，真是糟糕的一周</li>
</ul>
<h2 id="week4-2025-3-24-2025-3-30"><a href="#week4-2025-3-24-2025-3-30" class="headerlink" title="week4 (2025.3.24-2025.3.30)"></a>week4 (2025.3.24-2025.3.30)</h2><ul>
<li>offline一周</li>
</ul>
<h2 id="week5-2025-3-31-2025-4-6"><a href="#week5-2025-3-31-2025-4-6" class="headerlink" title="week5 (2025.3.31-2025.4.6)"></a>week5 (2025.3.31-2025.4.6)</h2><ul>
<li>想了想，发现自己一直存在一个错误，就是为了笔记而做笔记，纯粹的是记录；但是好像以总结或者说复述的方式来做笔记才比较有用</li>
<li>这周碰上清明了，有个三天假。虽然但是，依旧是没怎么学新东西</li>
<li>但是至少是做了点什么。周日把PE文件格式收尾了（还是有点难度的，因为回头看了前面做的笔记，发现对IAT和EAT的认识有点不对劲，重新梳理了一遍，删删改改）。学聪明了，这次是看完书完整地把例子先走了一遍再做的笔记</li>
<li>这周在咸鱼2元淘到了一包课，后面发现里面有一套课体系挺完整的，也是有课跟了</li>
<li>还有就是尝试了自己写python解密脚本，发现没体系学过一遍真不能硬上</li>
</ul>
<h2 id="week6-2025-4-7-2025-4-13"><a href="#week6-2025-4-7-2025-4-13" class="headerlink" title="week6 (2025.4.7-2025.4.13)"></a>week6 (2025.4.7-2025.4.13)</h2><ul>
<li>这周找了个短一些的python视频，跟着过了一遍，然后试着做题写脚本，您猜怎么着，还是不太会🤡</li>
<li>解密实在是太吃操作了，细细一想，好像解密这玩意更吃数学，一个%逆向DS直接上公式，我还在循环爆破被除数🤡</li>
<li>不得不拿出四字真言：菜就多练。所以，这周就试着刷题来了</li>
<li>节奏还是慢了点，唉</li>
</ul>
<h2 id="week7-2025-4-14-2025-4-20"><a href="#week7-2025-4-14-2025-4-20" class="headerlink" title="week7 (2025.4.14-2025.4.20)"></a>week7 (2025.4.14-2025.4.20)</h2><ul>
<li>emmm怎么说，这周前面几天倒是抽时间刷题了，但是一到周末，明显感到懒了</li>
<li>周三花了一个下午搞明白重定位表，笔记写了，但是切入点好像不是很对。这次的笔记，因为参考了DS给的辅助讲解，所以跟前面的有点不一样。感觉用形象的例子来类比以及从设计者角度描述细节，更有利于后期复习再理解</li>
<li>还是感觉效率上不来🤔，我在想要不然先跟课走，不懂的地方再看书，会不会学的清楚一点，省的老啃一处</li>
<li>本来打算周末来个脱壳练习的，鸽了（；´д｀）ゞ</li>
</ul>
<h2 id="week8-2025-4-21-2025-4-27"><a href="#week8-2025-4-21-2025-4-27" class="headerlink" title="week8 (2025.4.21-2025.4.27)"></a>week8 (2025.4.21-2025.4.27)</h2><ul>
<li>这几天图床崩了，图片上传不了，之前的图在博客里也有点显示不出来，找了好久没找到问题在哪里，只能传到本地和其他文件一起打包传github了</li>
<li>五一调休使我本就短暂的周末更加短暂（虽然目前为止周末还没有被我真正利用过），这周拿得出手的就只是一道题目</li>
<li>em…实际上这周花了不少时间搞脱壳练习的环境。买的课里头老师说用vs2008练习，但是该死的虚拟机没联网得自己安装netframework，这就花了不少时间，以及灵机一动把环境搭在win11上了，这又花了一点时间。还有一点时间尝试用自己写的程序加壳脱壳，但是没折腾成功。</li>
<li>还有，我有点怀疑这个老师的成分了，一口一个抛砖引玉，一口一个自己看（我要是自己会学还看课干什么），难绷。但是找不到比他的课更完整的win逆向资源了😔</li>
</ul>
<h2 id="week9-2025-4-28-2025-5-4"><a href="#week9-2025-4-28-2025-5-4" class="headerlink" title="week9 (2025.4.28-2025.5.4)"></a>week9 (2025.4.28-2025.5.4)</h2><ul>
<li>这周碰上了实验周和五一假期，看似空闲时间很多，但实际上并非如此<del>（借口</del></li>
<li>CS啊，三天速通数学实验，还要写老厚一本的实验报告，甚至报告还包括两篇论文，某校不要太离谱，我不是来学数学建模比赛的</li>
<li>好的，看来这周依旧是没什么学习收获的一周。除了单开了一个IDApro的学习笔记（四处碰壁只能学学工具的使用了）</li>
</ul>
<h2 id="week10-2025-5-5-2025-5-11"><a href="#week10-2025-5-5-2025-5-11" class="headerlink" title="week10 (2025.5.5-2025.5.11)"></a>week10 (2025.5.5-2025.5.11)</h2><ul>
<li>这周折腾电装实习和数学实验，还要复习大物和高数，忙死了，唉</li>
</ul>
<h2 id="week11-2025-5-12-2025-5-18"><a href="#week11-2025-5-12-2025-5-18" class="headerlink" title="week11 (2025.5.12-2025.5.18)"></a>week11 (2025.5.12-2025.5.18)</h2><ul>
<li>诶，浅摆一周</li>
</ul>
<h2 id="week12-2025-5-19-2025-5-25"><a href="#week12-2025-5-19-2025-5-25" class="headerlink" title="week12 (2025.5.19-2025.5.25)"></a>week12 (2025.5.19-2025.5.25)</h2><ul>
<li>快期末月了啊，哎呀，一学期又要过去了</li>
<li>开始有点考试前的紧张感了，这周主要拿来搞学业了，大物、高数、电工模电还有六级多手抓🙃</li>
<li>诶，但是优化了一下博客的界面，折腾了快有三天时间。主要就是给主页改成了分类卡片，下一级才是文章，这样子结构更清晰一点。还有一些小地方的美化，以及阅读次数统计的问题（从leancloud国内版到不蒜子到leancloud国际版又回到leancloud国内版…哇，看来我和DS老师的协调能力还不是很好，毕竟光这一项就要了差不多1天时间🙃头都大了）</li>
<li>本来打算周末把没跟上的课业补上，但是优化博客就占了周六一个上午，周六一个下午搞那个C++慕课（不当人啊，题目让直接复制的输出实现代码和输出要求一模两样），但是我还有高数大物特别是模电和六级以及还有个电装实习报告和物理实验报告，压力都给到周日，可想而知</li>
<li>还有一件事，这周逮空看了看hello算法（就是这个：<a href="https://www.hello-algo.com/chapter_hello_algo/">https://www.hello-algo.com/chapter_hello_algo/</a> ，上学期囤下来的资源）最近刚好买的课里头讲C和C++的时候提到了数据结构，但是实在找不到时间看视频，就只能看看书了。哇，U1S1是真优质资料啊。回头看看再加一个数据结构与算法的分类，反正下学期好像也要学了</li>
<li>其实还有点事情，写这个博客的初心其实不是什么记录收获，而是因为我没有找到可以学习效仿的对象，看大佬的博客都是更新知识，很少有人提到为什么会想到去学这些知识，就是，没人会告诉你下一步该干什么，知识那么多却又找不到学习的方向，就是这种感觉。所以想记录记录自己的学习经历，方便梳理学习路线，也希望多少可以给将来像我一样迷茫的人一些指引。</li>
<li>其实开始学习的时候，我会时不时去看看同级的大佬的博客，看到他们更新的都是我没有听说过的知识，看着他们变得越来越专业越来越厉害，长久下来心里很不是滋味。高中时候那种无力感就又出现了。后来我就隐约觉得不对劲，这不就把大学又过成高中了吗？“比较的终点是自卑，专注的终点是自由”，想想当初想学信安不就是因为喜欢吗（虽然那时候确实不知道具体得学什么），为什么要和别人比呢？高中的时候我总是刻意不融入比较的氛围，而现在没有了那样厚重的学习环境，我却不自觉开始比较起来了，唉😔所以这些天其实一直在调整自己的心态，好在现在我感觉慢慢地不再频繁站在外界去审视自己了，开始觉得每天能看见阳光、能够在晚自习上下课的路上边听歌边走路、<del>能够实现引体向上拉0个到拉6个（尽管是在有弹力带辅助的情况下、</del>能够在社团的宣讲活动上承担一部分发言的责任……这些都让我的生活变得越来越美好。这可能就是知足常乐的感觉吧，反正活得更开心了，也更有行动的能量了，也挺好</li>
<li>今天的字数有点超标了哈哈😄但是不管了</li>
<li>接下来一个月多不知道会不会还有机会更新点知识笔记，但是希望暑假可以好好学学吧<del>（求求我自己了</del></li>
<li>既然提到了学习路线，要不然这里梳理一段吧，其实有些东西没记上来。刚开始是从《逆向工程核心原理》开始学的，但是学了快一个月感觉效率也不行啊，后面开始找课，找到了一个全路线的课（目录里是包含了渗透测试和逆向免杀的）但是感觉逆向那部分老师有点混啊，上课就展示笔记 ，说话也含含糊糊的，还时不时来句主要是抛砖引玉，就感觉这样下来也学得迷迷糊糊的，所以又去找新的课。现在是找到了另外两套，一套是windows内核安全，一套是红队免杀（两套课同一家机构的，<del>jayx</del>），这个体系感觉也很清晰，老师讲课（至少看了几节课下来）倒也清楚，实践为主。所以现在确定下来是跟着最新的两套学。后面可能会考虑改改之前记的笔记。</li>
<li>啊对了，还得狡辩一下。我发现week2开始就不是记录收获了，像是报备干了什么😄其实也没什么写的，因为还在摸索。</li>
</ul>
<h2 id="week13-2025-5-26-2025-6-1"><a href="#week13-2025-5-26-2025-6-1" class="headerlink" title="week13 (2025.5.26-2025.6.1)"></a>week13 (2025.5.26-2025.6.1)</h2><ul>
<li>这周本来是试着把博客部署到vercel上方便国内访问的（DeepSeek说可以的），但是没折腾明白，所以本来没打算写什么的。结果，周日晚上11点多打开博客文件夹，发现有点不对劲，一访问，**博客崩了</li>
<li>千错万错就不该错在什么都不懂还跟着DeepSeek走，哇，真的，难以描述这种难受，光这篇周记就有77天了啊，***</li>
<li>这段话其实是6.2写的，周日晚上修博客修到1点，尝试修复但是行不通😅</li>
<li>哇，你知道吗这个人工智能，它教我用rm rf，虽然不是windows的指令，但是它能在教程里用上这样的指令，哇，真的，真是这个👍。我真的，哇，要无语死了</li>
<li>6.2就折腾一天的博客，把原来的博客废掉了，重构了一个。哇，一搜教程，和当初刚开始搞博客时看到的完全不一样了，下下来的NexT还是新版的，配置变了不是一点，哇😅</li>
<li>吃一堑长一智了，以后找教程不先搜别人写的直接问AI我就是这个👍</li>
</ul>
<h2 id="week14-2025-6-2-2025-6-8"><a href="#week14-2025-6-2-2025-6-8" class="headerlink" title="week14 (2025.6.2-2025.6.8)"></a>week14 (2025.6.2-2025.6.8)</h2><ul>
<li>OK，这周主要任务就是重新搭了一个博客。博客建了半年了，都忘了怎么建起来的了，重搭去找教程，搜出来的结果和印象里半年前的还不一样，迭代速率真快啊</li>
<li>好在旧的博客没有全毁，在残存的next文件里找到了一些还能抄的配置</li>
<li>才半年NexT都更新到8.23了，评论系统和访客系统变了不少，老配置用不上只能换新的配置了</li>
<li>完了都没什么可以写的了</li>
<li>预计接下来几周就不会有什么内容了，马上就是期末周了。唉，大大小小的作业报告考试又来了🫠</li>
</ul>
<h2 id="week15-16-17-2025-6-9-2025-6-29"><a href="#week15-16-17-2025-6-9-2025-6-29" class="headerlink" title="week15,16,17 (2025.6.9-2025.6.29)"></a>week15,16,17 (2025.6.9-2025.6.29)</h2><ul>
<li>期末月断更</li>
</ul>
<h2 id="week18-2025-6-30-2025-7-6"><a href="#week18-2025-6-30-2025-7-6" class="headerlink" title="week18 (2025.6.30-2025.7.6)"></a>week18 (2025.6.30-2025.7.6)</h2><ul>
<li>OK，也是考完试了。回家两天也是闲里偷忙地看了一点课</li>
<li>接下来看看能不能持续更个几十天，我已经“计划”好了一些要更的内容了，能不能更成就看我自己了（</li>
</ul>
<h2 id="week19-2025-7-7-2025-7-13"><a href="#week19-2025-7-7-2025-7-13" class="headerlink" title="week19 (2025.7.7-2025.7.13)"></a>week19 (2025.7.7-2025.7.13)</h2><ul>
<li>这周开始学习基础一点的知识，主要是汇编。下周应该是程序逆向基础的东西了。</li>
<li>笔记有点乱。这周主要围绕汇编，学习了不同架构不同模式下的汇编的基础知识，包括最基本的寄存器、汇编指令、函数的汇编形式、栈帧、不同架构模式的汇编差异等。整体而言其实不是很繁杂的东西，内容也不多，所以说其实这周还是处于想起来该学了的时候才学的状态。看了看其他的囤起来的资料，有一说一，开学后还真不一定可以有连续的时间学，这样子没有先起个体系感觉还是很难真正学懂。</li>
</ul>
]]></content>
      <categories>
        <category>周记</category>
      </categories>
  </entry>
  <entry>
    <title>Re:从0到1的脚本之路</title>
    <url>/2025/06/02/Re-%E4%BB%8E0%E5%88%B01%E7%9A%84%E8%84%9A%E6%9C%AC%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p>python脚本做题记录</p>
<span id="more"></span>

<h2 id="SWPUCTF-2021-新生赛-fakebase"><a href="#SWPUCTF-2021-新生赛-fakebase" class="headerlink" title="[SWPUCTF 2021 新生赛]fakebase"></a>[SWPUCTF 2021 新生赛]fakebase</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#给的代码如下：</span></span><br><span class="line">flag = <span class="string">&#x27;xxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line"></span><br><span class="line">s_box = <span class="string">&#x27;qwertyuiopasdfghjkzxcvb123456#$&#x27;</span></span><br><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    tmp += <span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">ord</span>(i)))[<span class="number">2</span>:].zfill(<span class="number">8</span>)</span><br><span class="line">b1 = <span class="built_in">int</span>(tmp,<span class="number">2</span>)</span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> b1//<span class="number">31</span> != <span class="number">0</span>:</span><br><span class="line">    s += s_box[b1%<span class="number">31</span>]</span><br><span class="line">    b1 = b1//<span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s = u#k4ggia61egegzjuqz12jhfspfkay</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>代码中，把flag逐字符转化为二进制，截掉前缀，填充为8位，再拼接这些二进制数得到tmp</p>
</li>
<li><p>然后把tmp转化为十进制b1，不断除31，同时用余数做S_box索引，把索引值拼接得到S</p>
</li>
<li><p>所以，解密思路是，首先，还原b1：</p>
<ul>
<li>b1利用后得到一系列索引值，所以由索引值反推b1</li>
<li>逆序s对照s_box得出索引（为了从最后一个余数开始还原b1）并组成一个列表。因为循环终止条件是b1&#x2F;&#x2F;31&#x3D;&#x3D;0，所以最后一次除只利用了商等于0，而余数未知，于是从0-30假设被弃掉的余数，枚举各种可能。</li>
</ul>
</li>
<li><p>而如何判断哪种可能是我们需要的呢？就需要还原出flag并判断。把还原出来的b1转二进制，去掉前缀，填充到8的倍数方便截取二进制数，然后8个8个还原出字符，最后判断是不是flag就行了。</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">buf=<span class="string">&quot;u#k4ggia61egegzjuqz12jhfspfkay&quot;</span></span><br><span class="line">s_box = <span class="string">&#x27;qwertyuiopasdfghjkzxcvb123456#$&#x27;</span></span><br><span class="line"></span><br><span class="line">index_list=[]</span><br><span class="line"><span class="comment">#求索引值列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> buf[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s_box)):</span><br><span class="line">        <span class="keyword">if</span> i == s_box[j]:</span><br><span class="line">           index_list.append(j)</span><br><span class="line"><span class="comment">#print(index_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#枚举达到终止条件时的余数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>):</span><br><span class="line">    <span class="comment">#开始还原b1</span></span><br><span class="line">    b1=i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buf)):</span><br><span class="line">        b1=b1*<span class="number">31</span>+index_list[j]<span class="comment">#不断加余数，乘31</span></span><br><span class="line">    tmp=<span class="built_in">str</span>(<span class="built_in">bin</span>(b1)[<span class="number">2</span>:])<span class="comment">#加密流程是把tmp从2进制转10进制，这里就反着来，把b1从10进制转2进制，截去前缀</span></span><br><span class="line">    tmp=tmp.zfill((<span class="built_in">len</span>(tmp)//<span class="number">8</span>+<span class="number">1</span>)*<span class="number">8</span>)<span class="comment">#加密时字符转成8位2进制数，反着来就是把8位2进制数转为字符，所以先把tmp 8位对齐方便后续截取</span></span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(tmp),<span class="number">8</span>):</span><br><span class="line">        flag+=<span class="built_in">chr</span>(<span class="built_in">int</span>(tmp[i:i+<span class="number">8</span>],<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;NSSCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#flag = &quot;NSSCTF&#123;WHAt_BASe31&#125;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="SWPUCTF-2021-新生赛-非常简单的逻辑题"><a href="#SWPUCTF-2021-新生赛-非常简单的逻辑题" class="headerlink" title="[SWPUCTF 2021 新生赛]非常简单的逻辑题"></a>[SWPUCTF 2021 新生赛]非常简单的逻辑题</h2><ul>
<li><p>题目给的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&#x27;xxxxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;wesyvbniazxchjko1973652048@$+-&amp;*&lt;&gt;&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    s1 = <span class="built_in">ord</span>(flag[i])//<span class="number">17</span></span><br><span class="line">    s2 = <span class="built_in">ord</span>(flag[i])%<span class="number">17</span></span><br><span class="line">    result += s[(s1+i)%<span class="number">34</span>]+s[-(s2+i+<span class="number">1</span>)%<span class="number">34</span>]</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># result = &#x27;v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>加密思路是：逐字符取flag，通过&#x2F;&#x2F;和%操作得到两个值s1和s2，把这两个值处理后，作为索引在s中索引出字符，拼接得到result</p>
</li>
<li><p>逆着来应该是把result错位分开，分成和s1有关的与和s2有关的，然后求出索引值，逆两个取余过程得到s1和s2，再把s1和s2运算得到flag字符</p>
</li>
<li><p>很显然，这个过程十分复杂，因为涉及取模的还原</p>
</li>
<li><p>所以考虑顺着加密的思路走，从常见的字符十进制值枚举，遇到加密后结果和result一样的就拿来拼接flag</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;wesyvbniazxchjko1973652048@$+-&amp;*&lt;&gt;&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i&#x27;</span></span><br><span class="line">tmp=<span class="string">&#x27;&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#提取出result里和s1、s2相关的字符</span></span><br><span class="line">s1_list=[]</span><br><span class="line">s2_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(result),<span class="number">2</span>):</span><br><span class="line">    s1_list.append(result[i])</span><br><span class="line">    s2_list.append(result[i+<span class="number">1</span>])</span><br><span class="line"><span class="comment">#开始爆破</span></span><br><span class="line"><span class="comment">#先求出加密过程两个索引值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s1_list)):</span><br><span class="line">    index1=s.index(s1_list[i])</span><br><span class="line">    index2=s.index(s2_list[i])</span><br><span class="line">    <span class="comment">#以索引值为判断条件，在常见字符的范围内重现加密过程，加密结果和索引值一致即为flag的字符</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">126</span>):</span><br><span class="line">        s1=j//<span class="number">17</span></span><br><span class="line">        s2=j%<span class="number">17</span></span><br><span class="line">        <span class="keyword">if</span> (s1 + i) % <span class="number">34</span>==index1 <span class="keyword">and</span> -(s2 + i + <span class="number">1</span>) % <span class="number">34</span>==index2:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &quot;NSSCTF&#123;Fake_RERE_QAQ&#125;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="SWPUCTF-2021-新生赛-re2"><a href="#SWPUCTF-2021-新生赛-re2" class="headerlink" title="[SWPUCTF 2021 新生赛]re2"></a>[SWPUCTF 2021 新生赛]re2</h2><ul>
<li><p>IDA打开，代码如下：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-13%20214924.png" alt="RE2"></p>
</li>
<li><p>简单的字符处理，先判断字符是否在范围内，然后采用不同处理方式</p>
</li>
<li><p>直接正向利用代码，省点脑子。</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alpha=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&#123;&#125;-_&#x27;</span></span><br><span class="line">dic=&#123;&#125;</span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;ylqq]aycqyp&#123;&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ord</span>(i)&lt;=<span class="number">96</span> <span class="keyword">or</span> <span class="built_in">ord</span>(i)&gt;<span class="number">98</span>) <span class="keyword">and</span> (<span class="built_in">ord</span>(i)&lt;=<span class="number">64</span> <span class="keyword">or</span> <span class="built_in">ord</span>(i)&gt;<span class="number">66</span>):</span><br><span class="line">        dic[<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)-<span class="number">2</span>)]=i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dic[<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)+<span class="number">24</span>)]=i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    flag+=dic[i]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;nss_caesar&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>直接得出来的结果是{nss_c{es{r}，显然不对，猜测对应关系不唯一。打印出alpha经过处理后的结果，发现’{‘和’a’都对应’y’，所以把显然不对劲的两个’ { ‘改成’ a ‘</p>
</li>
</ul>
<h2 id="WUSTCTF-2020-level1"><a href="#WUSTCTF-2020-level1" class="headerlink" title="[WUSTCTF 2020]level1"></a>[WUSTCTF 2020]level1</h2><ul>
<li><p>附件给了ELF文件和一个txt，反汇编代码如下：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-14%20214810.png" alt="LEVEL1"></p>
</li>
<li><p>逻辑就是从flag文件里读数据，然后存到ptr里。后面是简单的可逆处理，但是要注意ptr是从下标1开始用的。给的txt应该就是处理后的结果，把它转成一个列表，第一位随便填一个数。然后逆。</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output=[<span class="number">0</span>, <span class="number">198</span>, <span class="number">232</span>, <span class="number">816</span>, <span class="number">200</span>, <span class="number">1536</span>, <span class="number">300</span>, <span class="number">6144</span>, <span class="number">984</span>, <span class="number">51200</span>, <span class="number">570</span>, <span class="number">92160</span>, <span class="number">1200</span>, <span class="number">565248</span>, <span class="number">756</span>, <span class="number">1474560</span>, <span class="number">800</span>, <span class="number">6291456</span>, <span class="number">1782</span>, <span class="number">65536000</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">if</span> (i&amp;<span class="number">1</span>)!=<span class="number">0</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(output[i]&gt;&gt;i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(output[i]//i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;d9-dE6-20c&#125;&#x27;（改了前缀）</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="SWPUCTF-2021-新生赛-简简单单的解密"><a href="#SWPUCTF-2021-新生赛-简简单单的解密" class="headerlink" title="[SWPUCTF 2021 新生赛]简简单单的解密"></a>[SWPUCTF 2021 新生赛]简简单单的解密</h2><ul>
<li><p>给的python代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64,urllib.parse</span><br><span class="line">key = <span class="string">&quot;HereIsFlagggg&quot;</span></span><br><span class="line">flag = <span class="string">&quot;xxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line">s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">    s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">res = []</span><br><span class="line">i = j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> flag:</span><br><span class="line">    i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">    j = (j + s_box[i]) % <span class="number">256</span></span><br><span class="line">    s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    t = (s_box[i] + s_box[j]) % <span class="number">256</span></span><br><span class="line">    k = s_box[t]</span><br><span class="line">    res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">crypt = (<span class="built_in">str</span>(base64.b64encode(cipher.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">enc = <span class="built_in">str</span>(base64.b64decode(crypt),<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">enc = urllib.parse.quote(enc)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment"># enc = %C2%A6n%C2%87Y%1Ag%3F%C2%A01.%C2%9C%C3%B7%C3%8A%02%C3%80%C2%92W%C3%8C%C3%BA</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>采用的加密算法是标准RC4，加密两遍恢复明文。最后面的调用base的两行经过调试发现相互抵消，所以整个逻辑就是先RC4加密，然后用urllib.parse.quote()方法编码，编码部分用原库自带的urllib.parse.unquote()就行了</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">enc = <span class="string">&#x27;%C2%A6n%C2%87Y%1Ag%3F%C2%A01.%C2%9C%C3%B7%C3%8A%02%C3%80%C2%92W%C3%8C%C3%BA&#x27;</span></span><br><span class="line">buf=urllib.parse.unquote(enc)</span><br><span class="line">result=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> buf:</span><br><span class="line">    result.append(i)</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;HereIsFlagggg&quot;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RC4</span>(<span class="params">flag</span>):</span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> flag:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s_box[i]) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">        t = (s_box[i] + s_box[j]) % <span class="number">256</span></span><br><span class="line">        k = s_box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line">flag+=RC4(result)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag = &#x27;NSSCTF&#123;REAL_EZ_RC4&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="LitCTF-2023-ez-XOR"><a href="#LitCTF-2023-ez-XOR" class="headerlink" title="[LitCTF 2023]ez_XOR"></a>[LitCTF 2023]ez_XOR</h2><ul>
<li><p>IDA打开，如图</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20215658.png" alt="ez_XOR"></p>
</li>
<li><p>用XOR函数对输入做处理后，与str比较。打开XOR：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20215712.png" alt="function_xor"></p>
</li>
<li><p>功能就是遍历字符，异或处理，再异或一遍就可以了</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;E`&#125;J]OrQF[V8zV:hzpV&#125;fVF[t&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="built_in">str</span>[i])^<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag = &#x27;NSSCTF&#123;XOR_1s_3asy_to_OR&#125;&#x27;(前缀做了改动)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="HUBUCTF-2022-新生赛-simple-RE"><a href="#HUBUCTF-2022-新生赛-simple-RE" class="headerlink" title="[HUBUCTF 2022 新生赛]simple_RE"></a>[HUBUCTF 2022 新生赛]simple_RE</h2><ul>
<li><p>IDA打开，如图</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20223128.png" alt="simpleRE"></p>
</li>
<li><p>加密函数看起来逻辑很复杂，但是点开名字很奇怪的数组，发现一个编码表，可以推测是base64编码。</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20223308.png" alt="加密函数"></p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20223321.png" alt="编码表"></p>
</li>
<li><p>回过头看给的用来比较的字符串，基本可以确定是base64换表编码</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20223431.png" alt="预设字符串"></p>
</li>
<li><p>找到了一个可以自定义编码表的python库cusbase64，可以用config指定编码表，这样就容易多了</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cusbase64</span><br><span class="line">table=<span class="string">&#x27;qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD&#x27;</span></span><br><span class="line">enc=<span class="string">&#x27;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM/8==&#x27;</span></span><br><span class="line">b=cusbase64.CusBase64()</span><br><span class="line">b.config(table)</span><br><span class="line">b.decode(enc)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;a8d4347722800e72e34e1aba3fe914ae&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="NSSCTF-2022-Spring-Recruit-easy-C"><a href="#NSSCTF-2022-Spring-Recruit-easy-C" class="headerlink" title="[NSSCTF 2022 Spring Recruit]easy C"></a>[NSSCTF 2022 Spring Recruit]easy C</h2><ul>
<li><p>题目给的是c源文件，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main()&#123;</span><br><span class="line">    char a[]=<span class="string">&quot;wwwwwww&quot;</span>;</span><br><span class="line">    char b[]=<span class="string">&quot;d`vxbQd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    //<span class="keyword">try</span> to find out the flag</span><br><span class="line">    printf(<span class="string">&quot;please input flag:&quot;</span>);</span><br><span class="line">    scanf(<span class="string">&quot; %s&quot;</span>,&amp;a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen(a)!=<span class="number">7</span>)&#123;</span><br><span class="line">        printf(<span class="string">&quot;NoNoNo\n&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">        a[i]++;</span><br><span class="line">        a[i]=a[i]^<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!strcmp(a,b))&#123;</span><br><span class="line">        printf(<span class="string">&quot;good!\n&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(<span class="string">&quot;NoNoNo\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    //flag 记得包上 NSSCTF&#123;&#125; 再提交!!!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分析逻辑，把输入的flag按字符先递增，再和2异或，得到的新数组应该和b一样。逆着来就是先异或再递减。</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;d`vxbQd&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    flag+=<span class="built_in">chr</span>((<span class="built_in">ord</span>(i)^<span class="number">2</span>)-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;easy_Re&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="NSSCTF-2022-Spring-Recruit-easy-Python"><a href="#NSSCTF-2022-Spring-Recruit-easy-Python" class="headerlink" title="[NSSCTF 2022 Spring Recruit]easy Python"></a>[NSSCTF 2022 Spring Recruit]easy Python</h2><ul>
<li><p>题目给的py源码，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">string,string2</span>):</span><br><span class="line">    tmp_str = <span class="built_in">str</span>()</span><br><span class="line">    ret = <span class="built_in">str</span>()</span><br><span class="line">    bit_string_str = string.encode()</span><br><span class="line">    remain = <span class="built_in">len</span>( string ) % <span class="number">3</span></span><br><span class="line">    remain_str = <span class="built_in">str</span>()</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> bit_string_str:</span><br><span class="line">        b_char = (<span class="built_in">bin</span>(char)[<span class="number">2</span>:])</span><br><span class="line">        b_char = <span class="string">&#x27;0&#x27;</span>*(<span class="number">8</span>-<span class="built_in">len</span>(b_char)) + b_char</span><br><span class="line">        tmp_str += b_char</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp_str)//<span class="number">6</span>):</span><br><span class="line">        temp_nub = <span class="built_in">int</span>(tmp_str[i*<span class="number">6</span>:<span class="number">6</span>*(i+<span class="number">1</span>)],<span class="number">2</span>)</span><br><span class="line">        ret += string2[temp_nub]</span><br><span class="line">    <span class="keyword">if</span> remain==<span class="number">2</span>:</span><br><span class="line">        remain_str = tmp_str[-<span class="number">4</span>:] + <span class="string">&#x27;0&#x27;</span>*<span class="number">2</span></span><br><span class="line">        temp_nub = <span class="built_in">int</span>(remain_str,<span class="number">2</span>)</span><br><span class="line">        ret += string2[temp_nub] + <span class="string">&quot;=&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> remain==<span class="number">1</span>:</span><br><span class="line">        remain_str = tmp_str[-<span class="number">2</span>:] + <span class="string">&#x27;0&#x27;</span>*<span class="number">4</span></span><br><span class="line">        temp_nub = <span class="built_in">int</span>(remain_str,<span class="number">2</span>)</span><br><span class="line">        ret += string2[temp_nub] + <span class="string">&quot;=&quot;</span>*<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> ret.replace(<span class="string">&quot;=&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">res = encode(<span class="built_in">input</span>(),string.ascii_uppercase+string.ascii_lowercase+string.digits+<span class="string">&#x27;+/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> res == <span class="string">&quot;TlNTQ1RGe2Jhc2U2NCEhfQ&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;good!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bad!&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>细细一看，encode()里面有加“&#x3D;”的操作，并且使用的string2是字母大小写+数字+’+&#x2F;‘，推测是base64，但是注意到encode()返回的时候把“&#x3D;”替换成了“”，也就是删除了“&#x3D;&#x3D;”，所以要把后面用于比较的也就是加密后的字符串加上“&#x3D;”</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pybase64</span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;TlNTQ1RGe2Jhc2U2NCEhfQ==&#x27;</span></span><br><span class="line">flag=pybase64.b64decode(<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;base64!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="SWPUCTF-2021-新生赛-fakerandom"><a href="#SWPUCTF-2021-新生赛-fakerandom" class="headerlink" title="[SWPUCTF 2021 新生赛]fakerandom"></a>[SWPUCTF 2021 新生赛]fakerandom</h2><ul>
<li><p>依旧是Py源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">flag = <span class="string">&#x27;xxxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    l.append(random.getrandbits(<span class="number">8</span>))</span><br><span class="line">result=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l)):</span><br><span class="line">    random.seed(l[i])</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        result.append(<span class="built_in">ord</span>(flag[i*<span class="number">5</span>+n])^random.getrandbits(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># result = [201, 8, 198, 68, 131, 152, 186, 136, 13, 130, 190, 112, 251, 93, 212, 1, 31, 214, 116, 244]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>逻辑就是，用生成的伪随机数来异或flag的特定位。异或可逆，已知种子，伪随机数可以确定。所以只需要在源码的基础上稍作改动，把result和flag的位置调换一下就可以了</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">result = [<span class="number">201</span>, <span class="number">8</span>, <span class="number">198</span>, <span class="number">68</span>, <span class="number">131</span>, <span class="number">152</span>, <span class="number">186</span>, <span class="number">136</span>, <span class="number">13</span>, <span class="number">130</span>, <span class="number">190</span>, <span class="number">112</span>, <span class="number">251</span>, <span class="number">93</span>, <span class="number">212</span>, <span class="number">1</span>, <span class="number">31</span>, <span class="number">214</span>, <span class="number">116</span>, <span class="number">244</span>]</span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    l.append(random.getrandbits(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l)):</span><br><span class="line">    random.seed(l[i])</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        flag+=<span class="built_in">chr</span>(result[i*<span class="number">5</span>+n]^random.getrandbits(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;FakeE_random&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="HNCTF-2022-Week1-X0r"><a href="#HNCTF-2022-Week1-X0r" class="headerlink" title="[HNCTF 2022 Week1]X0r"></a>[HNCTF 2022 Week1]X0r</h2><ul>
<li><p>IDA打开，main函数如下：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-22%20214614.png" alt="main函数"></p>
<p>可以看出，逻辑就是对输入的字符串按字符异或处理，最后与给定的arr比较</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">0x000003FE</span>, <span class="number">0x000003EB</span>, <span class="number">0x000003EB</span>, <span class="number">0x000003FB</span>, <span class="number">0x000003E4</span>, <span class="number">0x000003F6</span>, <span class="number">0x000003D3</span>, <span class="number">0x000003D0</span>, <span class="number">0x00000388</span>, <span class="number">0x000003CA</span>, <span class="number">0x000003EF</span>, <span class="number">0x00000389</span>, <span class="number">0x000003CB</span>, <span class="number">0x000003EF</span>, <span class="number">0x000003CB</span>, <span class="number">0x00000388</span>, <span class="number">0x000003EF</span>, <span class="number">0x000003D5</span>, <span class="number">0x000003D9</span>, <span class="number">0x000003CB</span>, <span class="number">0x000003D1</span>, <span class="number">0x000003CD</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(arr)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>((arr[i]-<span class="number">900</span>)^<span class="number">0x34</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">flag = <span class="string">&#x27;NSSCTF&#123;x0r_1s_s0_easy&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="HGAME-2023-week1-easyenc"><a href="#HGAME-2023-week1-easyenc" class="headerlink" title="[HGAME 2023 week1]easyenc"></a>[HGAME 2023 week1]easyenc</h2><ul>
<li><p>IDA打开，main函数如图</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-25%20214452.png" alt="main函数"></p>
</li>
<li><p>可以看到逻辑就是先遍历出输入字符串的长度（ * ( ( _BYTE *) v9 + v4 )这样的格式可以看成：v9[v4]，算是一种经验吧）然后循环对输入的字符串按字符进行运算，最后与给定的数据比较。</p>
</li>
<li><p>难点在于，给的是10个元素的数组，而输入的字符串却要求是41个字符。看来V7的格式不是很对，要把这么多位的数据进行划分才行。v7是DWORD类型，而参与运算的v9用的是BYTE类型，1DWORD&#x3D;4BYTE，要把v7的数分成4部分，这里的数据不好提取，可以直接丢给AI。当然手动复制也可以。</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">buf=[<span class="number">0x9FDFF04</span>,<span class="number">0xB0F301</span>,<span class="number">0xADF00500</span>,<span class="number">0x5170607</span>,<span class="number">0x17FD17EB</span>,<span class="number">0x1EE01EA</span>,<span class="number">0xFA05B1EA</span>,<span class="number">0xAC170108</span>,<span class="number">0xFDEA01EC</span>,<span class="number">0x60705F0</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">buf1 = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> buf:</span><br><span class="line">    bytes_data = num.to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> bytes_data:</span><br><span class="line">        buf1.append(<span class="built_in">hex</span>(byte))</span><br><span class="line"><span class="comment">#print(buf1)</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> buf1:</span><br><span class="line">    tmp=((<span class="built_in">int</span>(num,<span class="number">16</span>)+<span class="number">86</span>)^<span class="number">0x32</span>)&amp;<span class="number">0xff</span></span><br><span class="line">    flag+=<span class="built_in">chr</span>(tmp)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;4ddit1on_is_a_rever5ible_0peration&#125;&#x27;（修改了前缀）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当然得多学一点，所以手搓v7，找DS问一下怎么处理数据，得到如上的方法。</p>
<ul>
<li><p>用to_bytes把v7的数转成字节形式，byteorder指定了小端序，然后hex转换成十六进制数存入新列表。至于为什么要转成十六进制数，和下面的代码有关。</p>
</li>
<li><p>然后用新列表的元素进行逆运算。因为直接使用这些元素会被判成字符，所以前面先转成十六进制数，再用int转成十进制数，这样就可以正常运算了</p>
</li>
<li><p>最后还要&amp;0xff，因为逆出来的数据有点超出ascii码范围了</p>
</li>
<li><p>还有就是，这样得出来的flag其实缺了一个“ } ”。回头看反编译的代码，那个未命名的用来输入v9的实际上不是纯粹的scanf那样的函数。里面有个FILE指针，推测是读文件的函数。所以读取的内容结尾按道理会有’\0’。但是，加上了’\0’算出来的flag也没有’ } ‘。所以，凭常识加上’ } ‘。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次blog优化</title>
    <url>/2025/06/02/%E8%AE%B0%E4%B8%80%E6%AC%A1blog%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>Hexo+NexT博客的小优化 (注：此篇记录的是笔者原来崩溃的博客的优化，是旧版NexT优化)</p>
<span id="more"></span>

<ul>
<li>这几天突然产生一个想法：博客主页改成分类的样式会不会更好看一点，主页是主题集合，每个主题里面才是相关的文章</li>
<li>心动不如行动，直接开干！</li>
</ul>
<h2 id="首页分类卡片实现"><a href="#首页分类卡片实现" class="headerlink" title="首页分类卡片实现"></a>首页分类卡片实现</h2><ul>
<li><p>这部分其实花了不少时间，因为没有具体学过Hexo+NexT的结构，好在有Deepseek老师的帮助</p>
</li>
<li><p>修改的部分主要在themes&#x2F;next&#x2F;layout&#x2F;index.swig，下面直接贴代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;_layout.swig&#x27; %&#125;</span><br><span class="line">&#123;% import &#x27;_macro/sidebar.swig&#x27; as sidebar_template with context %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;&#123; title &#125;&#125;&#123;%- if theme.index_with_subtitle and subtitle %&#125; - &#123;&#123; subtitle &#125;&#125;&#123;%- endif %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block class %&#125;index categories-page&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 这部分是实现category卡片，最后面还有没category的文章的处理，因为我严格了每篇文章有category，就没管画面如何了 #&#125;</span><br><span class="line">&#123;% if site.categories.length &gt; 0 %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-cards-container&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for cat in site.categories.toArray() %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-card&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;category-name&quot;</span>&gt;</span>&#123;&#123; cat.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-count&quot;</span>&gt;</span>&#123;&#123; cat.posts.length &#125;&#125;篇文章<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#123;# 这一部分实现卡片显示包含的文章的标题，数量可以改下面的limit()的数字 #&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-posts-list&quot;</span>&gt;</span></span><br><span class="line">          &#123;% for post in cat.posts.sort(&#x27;date&#x27;, -1).limit(3).toArray() %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-post-item&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;post-title&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; post.title &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123; post.title | truncate(18) &#125;&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-date&quot;</span>&gt;</span></span><br><span class="line">    			&#123;% if post.updated %&#125; </span><br><span class="line">    				&#123;&#123; post.updated.format(&#x27;MM/DD&#x27;) &#125;&#125;</span><br><span class="line">    			&#123;% else %&#125;</span><br><span class="line">    				&#123;&#123; post.date.format(&#x27;MM/DD&#x27;) &#125;&#125;</span><br><span class="line">    			&#123;% endif %&#125;</span><br><span class="line">    		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">            </span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;more-posts-wrapper&quot;</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;/categories/&#x27; + cat.name + &#x27;/&#x27;) &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;more-posts-button&quot;</span>&gt;</span></span><br><span class="line">      			更多文章 →</span><br><span class="line">    		<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no-categories-notice&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>暂无分类数据，请为文章添加分类<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>还有source&#x2F;_data&#x2F;styles.styl</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 分类卡片样式 - 安全追加 */</span></span><br><span class="line"><span class="selector-class">.category-cards-container</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.category-card</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.85</span>); <span class="comment">/* 半透明白色，与你的opacity 0.85协调 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">    <span class="attribute">backdrop-filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>); <span class="comment">/* 毛玻璃效果增强背景融合 */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>); <span class="comment">/* 柔和边框 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">5px</span>);</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.15</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.category-name</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post-count</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#7f8c8d</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">0.9em</span>;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这部分是我自己用的背景图的设置 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(/images/background.jpg);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ======================== */</span></span><br><span class="line"><span class="comment">/* 分类卡片内的文章列表样式 */</span></span><br><span class="line"><span class="comment">/* ======================== */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category-card</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative; <span class="comment">/* 为毛玻璃效果提供定位上下文 */</span></span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.category-header</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.08</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.recent-posts-list</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">3px</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.post-title</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#34495e</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0.95em</span>;</span><br><span class="line">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#3498db</span>;</span><br><span class="line">          <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.post-date</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#95a5a6</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span><br><span class="line">        <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  * &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.category-header</span>, </span><br><span class="line">  <span class="selector-class">.recent-post-item</span>, </span><br><span class="line">  <span class="selector-class">.recent-posts-list</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 更多文章按钮样式 */</span></span><br><span class="line"><span class="selector-class">.more-posts-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.more-posts-button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">72</span>, <span class="number">168</span>, <span class="number">241</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.9em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">52</span>, <span class="number">152</span>, <span class="number">219</span>, <span class="number">0.1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">52</span>, <span class="number">152</span>, <span class="number">219</span>, <span class="number">0.2</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">3px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">margin-left</span>: <span class="number">8px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 响应式调整 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.category-card</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">18px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">      <span class="attribute">flex-direction</span>: column;</span><br><span class="line">      <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">      </span><br><span class="line">      <span class="selector-class">.post-date</span> &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">        <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-24%20223804.png" alt="分类卡片效果"></p>
</li>
</ul>
<h2 id="点击更多文章后的文章列表实现"><a href="#点击更多文章后的文章列表实现" class="headerlink" title="点击更多文章后的文章列表实现"></a>点击更多文章后的文章列表实现</h2><ul>
<li><p>这部分主要基于原来的Index.swig，因为我觉得原来的风格就挺简洁好看的</p>
</li>
<li><p>找到themes&#x2F;next&#x2F;layout&#x2F;category.swig，改成：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;_layout.swig&#x27; %&#125;</span><br><span class="line">&#123;% import &#x27;_macro/sidebar.swig&#x27; as sidebar_template with context %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">  &#123;&#123; page.category &#125;&#125; | &#123;&#123; __(&#x27;title.category&#x27;) &#125;&#125; | &#123;&#123; config.title &#125;&#125;</span><br><span class="line">  &#123;%- if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123; config.subtitle &#125;&#125;&#123;%- endif %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block class %&#125;category posts-expand&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-title&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center; margin: 30px 0;&quot;</span>&gt;</span>//这里把分类名称置中了</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; page.category &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;%- for post in page.posts.toArray() %&#125;</span><br><span class="line">    &#123;&#123; partial(&#x27;_macro/post.swig&#x27;, &#123;post: post, is_index: true&#125;) &#125;&#125;</span><br><span class="line">  &#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;% include &#x27;_partials/pagination.swig&#x27; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-25%20000412-1749026329569-14.png" alt="文章列表效果"></p>
</li>
</ul>
<h2 id="删除文章侧边栏目录难看的下划线"><a href="#删除文章侧边栏目录难看的下划线" class="headerlink" title="删除文章侧边栏目录难看的下划线"></a>删除文章侧边栏目录难看的下划线</h2><ul>
<li><p>在themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;head.swig<strong>最后加上</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 强制移除目录下划线 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 覆盖所有可能的目录容器 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[class*=<span class="string">&quot;toc&quot;</span>]</span> <span class="selector-class">.nav-item</span> <span class="selector-tag">a</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[class*=<span class="string">&quot;TOC&quot;</span>]</span> <span class="selector-class">.nav-item</span> <span class="selector-tag">a</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.active</span> &gt; <span class="selector-tag">a</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.active-current</span> &gt; <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-bottom</span>: none <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-shadow</span>: none <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 覆盖伪元素下划线 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[class*=<span class="string">&quot;toc&quot;</span>]</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[class*=<span class="string">&quot;TOC&quot;</span>]</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-24%20225421.png" alt="消除下划线"></p>
</li>
</ul>
<h2 id="删除文末标签文字前的“-”"><a href="#删除文末标签文字前的“-”" class="headerlink" title="删除文末标签文字前的“#”"></a>删除文末标签文字前的“#”</h2><ul>
<li><p>先说文件：themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.swig</p>
</li>
<li><p>这个问题，网上找到的解决方法都是删掉11行的“#”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//这是原来的代码，可以ctrl+F搜post-footer</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;post-footer&quot;</span>&gt;</span></span><br><span class="line">    &#123;%- if post.tags and post.tags.length %&#125;</span><br><span class="line">      &#123;%- if theme.tag_icon %&#125;</span><br><span class="line">        &#123;%- set tag_indicate = &#x27;<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#x27; %&#125;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;%- set tag_indicate = &#x27;#&#x27; %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-tags&quot;</span>&gt;</span></span><br><span class="line">        &#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>#<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;%- endfor %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>但是删除后发现“#”还在。把代码给DS看了下，发现第7行把tag_indicate设成了“#”，删掉这个就可以了</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-24%20235657-1749026142443-7.png" alt="删除“#”"></p>
</li>
</ul>
<h2 id="测试时阅读文章不计数"><a href="#测试时阅读文章不计数" class="headerlink" title="测试时阅读文章不计数"></a>测试时阅读文章不计数</h2><ul>
<li><p>2025.6.2 注：在NexT8后的版本，valine不被支持了</p>
</li>
<li><p>博客搭起来后一直有个问题，就是自己看自己的博客文章会被计数，最开始是用ublock屏蔽统计网站来实现，但是这两天测试了一下发现这个方法用手机访问也不会计数，这不就意味着统计功能瘫痪了吗😮</p>
</li>
<li><p>所以开始和DS老师探讨新方法。DS老师这人不咋行，好方案藏着掖着，拷问了半天才有了下面的简洁的方法：</p>
<ul>
<li><p>themes&#x2F;next&#x2F;layout&#x2F;_third-party&#x2F;comments&#x2F;valine.swig中，在new Valine({ })的括号里，把visitor设置成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">visitor    : (window.location.hostname === &#x27;localhost&#x27; || window.location.hostname === &#x27;127.0.0.1&#x27;) ? false : &#123;&#123; theme.valine.visitor &#125;&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>这样子，在hexo s下访问localhost查看文章不会被计数。DS说这是把hexo s和hexo d两个环境隔离了，所以说如果hexo s下出现文章阅读数为零的情况算正常（我就是这样）</p>
</li>
<li><p>当然了，如果要看阅读数，就要访问hexo d部署后的网站了，记得不要点进文章去看，不然还是会被计数</p>
</li>
<li><p>麻烦是麻烦了点，但功能至少是实现了</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次blog重建</title>
    <url>/2025/06/05/%E8%AE%B0%E4%B8%80%E6%AC%A1blog%E9%87%8D%E5%BB%BA/</url>
    <content><![CDATA[<p>部署Vercel失误后的blog重建（基于hexo+NexT8.23.0，采用utterances评论系统和firestore数据记录）</p>
<span id="more"></span>

<ul>
<li>OK，这是笔者在依赖AI盲目把博客部署到Vercel上导致博客崩溃后的博客重建记录</li>
<li>记录的原因首先是更新“记一次blog优化”的内容，还有新版本NexT的一些个人配置（新版本NexT的教程好像不多，评论系统和访客计数系统要自己琢磨好一会儿）</li>
</ul>
<h2 id="首页分类卡片实现"><a href="#首页分类卡片实现" class="headerlink" title="首页分类卡片实现"></a>首页分类卡片实现</h2><ul>
<li><p>因为是对“记一次blog优化”的更新，所以这部分直接贴代码了（注：区别更多是在文件名从swig变成了njk）</p>
<p>themes&#x2F;next&#x2F;layout&#x2F;index.njk：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;_layout.njk&#x27; %&#125;</span><br><span class="line">&#123;% import &#x27;_macro/sidebar.njk&#x27; as sidebar_template with context %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;&#123; title &#125;&#125;&#123;%- if theme.index_with_subtitle and subtitle %&#125; - &#123;&#123; subtitle &#125;&#125;&#123;%- endif %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block class %&#125;index categories-page&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 这部分是实现category卡片，最后面还有没category的文章的处理，因为我严格了每篇文章有category，就没管画面如何了 #&#125;</span><br><span class="line">&#123;% if site.categories.length &gt; 0 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-cards-container&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for cat in site.categories.toArray() %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-card&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;category-name&quot;</span>&gt;</span>&#123;&#123; cat.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-count&quot;</span>&gt;</span>&#123;&#123; cat.posts.length &#125;&#125;篇文章<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;# 这一部分实现卡片显示包含的文章的标题，数量可以改下面的limit()的数字 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-posts-list&quot;</span>&gt;</span></span><br><span class="line">      &#123;% for post in cat.posts.sort(&#x27;date&#x27;, -1).limit(3).toArray() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-post-item&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;post-title&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; post.title &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; post.title | truncate(18) &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-date&quot;</span>&gt;</span></span><br><span class="line">			&#123;% if post.updated %&#125; </span><br><span class="line">				&#123;&#123; post.updated.format(&#x27;MM/DD&#x27;) &#125;&#125;</span><br><span class="line">			&#123;% else %&#125;</span><br><span class="line">				&#123;&#123; post.date.format(&#x27;MM/DD&#x27;) &#125;&#125;</span><br><span class="line">			&#123;% endif %&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;more-posts-wrapper&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;/categories/&#x27; + cat.name + &#x27;/&#x27;) &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;more-posts-button&quot;</span>&gt;</span></span><br><span class="line">		更多文章 →</span><br><span class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no-categories-notice&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>暂无分类数据，请为文章添加分类<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>source&#x2F;_data&#x2F;styles.styl：</p>
<p>得先在next&#x2F;config.yml里打开这个文件的支持（可能是新特性吧，笔者记得之前没改过config设置就有这个文件了，但是现在得打开支持并手动创建_data文件夹和styles.styl等文件），在custom_file_path里删除style的注释</p>
<p><img src="/../images/image-20250605144828365.png" alt="打开文件支持"></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 分类卡片样式 - 安全追加 */</span></span><br><span class="line"><span class="selector-class">.category-cards-container</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.category-card</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.85</span>); <span class="comment">/* 半透明白色，与你的opacity 0.85协调 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">    <span class="attribute">backdrop-filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>); <span class="comment">/* 毛玻璃效果增强背景融合 */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>); <span class="comment">/* 柔和边框 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">5px</span>);</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.15</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.category-name</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post-count</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#7f8c8d</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">0.9em</span>;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这部分是我自己用的背景图的设置 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(/images/background.jpg);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ======================== */</span></span><br><span class="line"><span class="comment">/* 分类卡片内的文章列表样式 */</span></span><br><span class="line"><span class="comment">/* ======================== */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category-card</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative; <span class="comment">/* 为毛玻璃效果提供定位上下文 */</span></span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.category-header</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.08</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.recent-posts-list</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">3px</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.post-title</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#34495e</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0.95em</span>;</span><br><span class="line">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#3498db</span>;</span><br><span class="line">          <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.post-date</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#95a5a6</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span><br><span class="line">        <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  * &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.category-header</span>, </span><br><span class="line">  <span class="selector-class">.recent-post-item</span>, </span><br><span class="line">  <span class="selector-class">.recent-posts-list</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 更多文章按钮样式 */</span></span><br><span class="line"><span class="selector-class">.more-posts-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.more-posts-button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">72</span>, <span class="number">168</span>, <span class="number">241</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.9em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">52</span>, <span class="number">152</span>, <span class="number">219</span>, <span class="number">0.1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">52</span>, <span class="number">152</span>, <span class="number">219</span>, <span class="number">0.2</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">3px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">margin-left</span>: <span class="number">8px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 响应式调整 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.category-card</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">18px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">      <span class="attribute">flex-direction</span>: column;</span><br><span class="line">      <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">      </span><br><span class="line">      <span class="selector-class">.post-date</span> &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">        <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.posts-<span class="attribute">container</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果请见“记一次blog优化”</p>
</li>
</ul>
<h2 id="点击更多文章后的文章列表实现"><a href="#点击更多文章后的文章列表实现" class="headerlink" title="点击更多文章后的文章列表实现"></a>点击更多文章后的文章列表实现</h2><ul>
<li><p>仍然是基于原来的Index.njk</p>
</li>
<li><p>themes&#x2F;next&#x2F;layout&#x2F;category.njk：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;_layout.njk&#x27; %&#125;</span><br><span class="line">&#123;% import &#x27;_macro/sidebar.njk&#x27; as sidebar_template with context %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125; </span><br><span class="line">&#123;&#123; page.category &#125;&#125; | &#123;&#123; __(&#x27;title.category&#x27;) &#125;&#125; | &#123;&#123; config.title &#125;&#125;</span><br><span class="line">&#123;% if theme.index_with_subtitle and subtitle %&#125; - &#123;&#123; subtitle &#125;&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block class %&#125;index posts-expand&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-title&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center; margin: 30px 0;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; page.category &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;# 新增包裹容器并添加间距 class PS:这一部分是个人感觉列表太贴近侧边栏了，所以和首页分类卡片的位置设置保持一致了#&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;posts-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 30px ;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;%- for post in page.posts.toArray() %&#125;</span><br><span class="line">    &#123;&#123; partial(&#x27;_macro/post.njk&#x27;, &#123;post: post, is_index: true&#125;) &#125;&#125;</span><br><span class="line">  &#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- include &#x27;_partials/pagination.njk&#x27; -%&#125;</span><br><span class="line">  </span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果仍见上一篇博客</p>
</li>
</ul>
<h2 id="删除侧边栏目录下划线与文末标签的“-”"><a href="#删除侧边栏目录下划线与文末标签的“-”" class="headerlink" title="删除侧边栏目录下划线与文末标签的“#”"></a>删除侧边栏目录下划线与文末标签的“#”</h2><ul>
<li>这两个部分没有变动，除了文件名的后缀改变了，其余都一样。详见上一篇博客。</li>
</ul>
<h2 id="utterances评论系统"><a href="#utterances评论系统" class="headerlink" title="utterances评论系统"></a>utterances评论系统</h2><ul>
<li><p>新版本NexT已经不支持valine了，给的选项只有：</p>
<p><img src="/../images/image-20250605150357372.png" alt="评论系统选项"></p>
</li>
<li><p>所以笔者选了utterances。这个系统好像和github有点关系</p>
</li>
<li><p>在next&#x2F;config.yml的comments里把active改成utterances</p>
<p><img src="/../images/image-20250605150655597.png" alt="选择utterances"></p>
</li>
<li><p>然后需要给github仓库安装utterances，访问<a href="https://github.com/apps/utterances">https://github.com/apps/utterances</a> ，然后点击Install</p>
<p><img src="/../images/image-20250605185949763.png" alt="install utterances"></p>
</li>
<li><p>在跳转的页面勾选only select repositories，然后选择博客仓库</p>
<p><img src="/../images/image-20250605190153428.png" alt="select repositories"></p>
</li>
<li><p>点击install就可以了</p>
</li>
<li><p>要注意的是，hexo s下是调试不了这个功能的（虽然不知道我为什么要在hexo s下调试这个功能），会报错，但是部署后是可以正常工作的</p>
</li>
</ul>
<h2 id="firestore统计访问人数"><a href="#firestore统计访问人数" class="headerlink" title="firestore统计访问人数"></a>firestore统计访问人数</h2><ul>
<li><p>NexT8.23.0不支持Valine了，得重新选择数据统计系统。firestore是google的产品，因此需要科学上网。</p>
</li>
<li><p>参考大佬博客：<a href="https://weirenxue.github.io/2021/06/11/hexo_next_firestore_visitors/">https://weirenxue.github.io/2021/06/11/hexo_next_firestore_visitors/</a>  步骤很简洁完整了，但是个人实现的时候会有一些问题，接下来详细介绍相关步骤</p>
</li>
<li><p>首先，在next&#x2F;config.yml里启用firestore：</p>
<p><img src="/../images/image-20250605192012733.png" alt="启用firestore"></p>
</li>
<li><p>有两个空需要填写，apikey和projectId。不急，需要先有firestore的项目。接下来访问firebase：<a href="https://console.firebase.google.com/">https://console.firebase.google.com/</a>  （科学上网）</p>
</li>
<li><p>登录后点击“创建项目”</p>
<p><img src="/../images/image-20250605192451907.png" alt="创建项目"></p>
</li>
<li><p>接下来按照引导走下去，开发者计划、AI辅助、google analytics根据个人需求选择，点击继续并稍等片刻就创建成功了。</p>
<p><img src="/../images/image-20250605192821032.png" alt="创建成功"></p>
</li>
<li><p>点击新项目，在左上角“项目概述”里点“项目设置”</p>
<p><img src="/../images/image-20250605193218565.png" alt="项目设置"></p>
<p>这时候可以看见项目ID等信息了，但是api还没有显示</p>
<p><img src="/../images/image-20250605193311734.png" alt="项目设置信息"></p>
</li>
<li><p>接下来在左侧边栏“构建”里找到“Authentication”，点击“开始”（哇，这个界面设置我还以为google不让手动设置只能用AI了，瞎按了半天才知道点”开始”）</p>
<p><img src="/../images/image-20250605193844508.png" alt="Authentication"></p>
</li>
<li><p>接下来选择登陆方式登录即可。我选择谷歌，点击右上角启用，项目公开名称默认即可，项目支持邮箱选择个人谷歌邮箱</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-05%20194506.png" alt="登录"></p>
</li>
<li><p>回到项目设置页面，可以看到api已经出现了</p>
<p><img src="/../images/image-20250605210227422.png" alt="api出现"></p>
</li>
<li><p>接下来就可以把next&#x2F;config.yml里的projectId和apiKey填上了</p>
</li>
<li><p>然后打开左侧边栏“构建”里的“Firestore Database”，点击“创建数据库”</p>
<p><img src="/../images/image-20250605210959567.png" alt="创建数据库"></p>
</li>
<li><p>接下来的页面，设置位置（数据库ID似乎不能改动），然后下一步</p>
<p><img src="/../images/image-20250605211218445.png" alt="设置位置"></p>
</li>
<li><p>接下来选择测试模式，等待预配Cloud Firestore</p>
<p><img src="/../images/image-20250605211444337.png" alt="选择测试模式"></p>
</li>
<li><p>加载成功后长这样</p>
<p><img src="/../images/image-20250605211643158.png" alt="database创建成功后"></p>
</li>
<li><p>接下来重新部署博客后就可以测试计数机制是否正常了。但是笔者在这一步折腾了很久，因为调试的时候发现：</p>
<p>1.数据库的信息在第一次启用计数机制后会自动生成，但是对这些信息进行改动后计数机制就失效了  </p>
<p>2.即使在莫名其妙的情况下（可能是关闭firestore配置后再次开启的情况）重新初始化了数据库，计数1次之后再怎么访问（如刷新、关闭页面重新打开）也不会记录第2次  </p>
</li>
<li><p>还有一些调试过程发现的问题，但是调试过程太乱了不好描述，所以下面直接指出问题并给出解决方案</p>
</li>
<li><p>首先，firestore的计数机制有点特别，它使用了localStorage来判断是否访问过文章，如果访问过文章，将不会出现第二次计数的情况（永远不会，除非重置localStorage）。这也解释了为什么改动数据信息后计数机制会失效：因为没有第二次计数，所以数据库信息不会再更新。因此需要对计数机制进行一些优化，优化方案来自DeepSeek，需要改动的配置为next&#x2F;source&#x2F;js&#x2F;third-party&#x2F;statistics&#x2F;firestore.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global CONFIG, firebase */</span></span><br><span class="line"></span><br><span class="line">firebase.<span class="title function_">initializeApp</span>(&#123;</span><br><span class="line">  apiKey   : <span class="variable constant_">CONFIG</span>.<span class="property">firestore</span>.<span class="property">apiKey</span>,</span><br><span class="line">  <span class="attr">projectId</span>: <span class="variable constant_">CONFIG</span>.<span class="property">firestore</span>.<span class="property">projectId</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getCount</span> = (<span class="params">doc, increaseCount</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// IncreaseCount will be false when not in article page</span></span><br><span class="line">    <span class="keyword">return</span> doc.<span class="title function_">get</span>().<span class="title function_">then</span>(<span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Has no data, initialize count</span></span><br><span class="line">      <span class="keyword">let</span> count = d.<span class="property">exists</span> ? d.<span class="title function_">data</span>().<span class="property">count</span> : <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// If first view this article</span></span><br><span class="line">      <span class="keyword">if</span> (increaseCount) &#123;</span><br><span class="line">        <span class="comment">// Increase count</span></span><br><span class="line">        count++;</span><br><span class="line">        doc.<span class="title function_">set</span>(&#123;</span><br><span class="line">          count</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> db = firebase.<span class="title function_">firestore</span>();</span><br><span class="line">  <span class="keyword">const</span> articles = db.<span class="title function_">collection</span>(<span class="variable constant_">CONFIG</span>.<span class="property">firestore</span>.<span class="property">collection</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;page:loaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable constant_">CONFIG</span>.<span class="property">page</span>.<span class="property">isPost</span>) &#123;</span><br><span class="line">      <span class="comment">// Fix issue #118</span></span><br><span class="line">      <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent</span></span><br><span class="line">      <span class="keyword">const</span> title = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.post-title&#x27;</span>).<span class="property">textContent</span>.<span class="title function_">trim</span>();</span><br><span class="line">      <span class="keyword">const</span> doc = articles.<span class="title function_">doc</span>(title);</span><br><span class="line">      <span class="keyword">let</span> increaseCount = <span class="variable constant_">CONFIG</span>.<span class="property">hostname</span> === location.<span class="property">hostname</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(title)) &#123;</span><br><span class="line">        increaseCount = <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Mark as visited in current session</span></span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(title, <span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">getCount</span>(doc, increaseCount).<span class="title function_">then</span>(<span class="function"><span class="params">count</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.firestore-visitors-count&#x27;</span>).<span class="property">innerText</span> = count;</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error updating count:&#x27;</span>, e));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">CONFIG</span>.<span class="property">page</span>.<span class="property">isHome</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> promises = [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.post-title&#x27;</span>)].<span class="title function_">map</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> title = element.<span class="property">textContent</span>.<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">const</span> doc = articles.<span class="title function_">doc</span>(title);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">getCount</span>(doc);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises).<span class="title function_">then</span>(<span class="function"><span class="params">counts</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> metas = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.firestore-visitors-count&#x27;</span>);</span><br><span class="line">        counts.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val, idx</span>) =&gt;</span> &#123;</span><br><span class="line">          metas[idx].<span class="property">innerText</span> = val;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching counts:&#x27;</span>, e));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>简单解释一下优化的主要思路：使用sessionStorage替换localStorage，计数机制变为会话级，即每次打开文章都会计数，而刷新不会计数</p>
</li>
<li><p>那么接下来就要设置一下数据库的规则了。大佬的安全规则好像有一些漏洞，下面是DeepSeek生成的安全规则：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rules_version = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">service cloud.<span class="property">firestore</span> &#123;</span><br><span class="line">  match /databases/&#123;database&#125;/documents &#123;</span><br><span class="line">    <span class="comment">// 针对文章集合的规则</span></span><br><span class="line">    match /articles/&#123;articleId&#125; &#123;</span><br><span class="line">      <span class="comment">// 允许所有人读取</span></span><br><span class="line">      allow <span class="attr">read</span>: <span class="keyword">if</span> <span class="literal">true</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 创建新文档时的规则</span></span><br><span class="line">      allow <span class="attr">create</span>: <span class="keyword">if</span> request.<span class="property">resource</span>.<span class="property">data</span>.<span class="title function_">keys</span>().<span class="title function_">hasOnly</span>([<span class="string">&quot;count&quot;</span>]) </span><br><span class="line">                   &amp;&amp; request.<span class="property">resource</span>.<span class="property">data</span>.<span class="property">count</span> == <span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 更新文档时的规则（确保count只能+1）</span></span><br><span class="line">      allow <span class="attr">update</span>: <span class="keyword">if</span> request.<span class="property">resource</span>.<span class="property">data</span>.<span class="title function_">keys</span>().<span class="title function_">hasOnly</span>([<span class="string">&quot;count&quot;</span>])</span><br><span class="line">                   &amp;&amp; request.<span class="property">resource</span>.<span class="property">data</span>.<span class="property">count</span> == resource.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁止其他所有操作</span></span><br><span class="line">    match /&#123;<span class="variable language_">document</span>=**&#125; &#123;</span><br><span class="line">      allow read, <span class="attr">write</span>: <span class="keyword">if</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开“Firestore Database”的“规则”，把规则粘贴进去，点击发布即可</p>
<p><img src="/../images/image-20250605214840666.png" alt="设置规则"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
</search>

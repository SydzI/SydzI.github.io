<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0xGame2025Week1WriteUp</title>
    <url>/2025/10/10/0xGame2025Week1ReverseWriteUp/</url>
    <content><![CDATA[<p>0xGame2025 Week1 Reverse方向全解&amp;详解</p>
<span id="more"></span>

<h2 id="EasyXor"><a href="#EasyXor" class="headerlink" title="EasyXor"></a>EasyXor</h2><ul>
<li><p>附件程序用IDA打开就是main函数的位置了，按F5反编译得到如下：</p>
<p><img src="/../images/image-20251003215402469-1760102969152-3.png" alt="反编译结果"></p>
<p>进行一些小小的变量名优化可以得到：</p>
<p><img src="/../images/image-20251003215440797-1760102969152-2.png" alt="小小的优化后"></p>
</li>
<li><p>可以看出，函数获取flag输入，然后对flag每一位进行异或，异或的值来自一个给定的字符串，要求异或后的值要等于str[i]-i。所以解密思路是，把异或关系中的Char和str[i]-i进行对调，即由Char^key[index%length]&#x3D;&#x3D;str[i]-i得到( str[i]-i )^key[index%length]&#x3D;&#x3D;Char。解密脚本：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>	<span class="hljs-type">char</span> str[] = &#123;<br>    <span class="hljs-number">0x42</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x27</span>,<br>    <span class="hljs-number">0x55</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x23</span>,<br>    <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span><br>    &#125;;<br>    <span class="hljs-type">char</span> key[] = <span class="hljs-string">&quot;raputa0xGame2025&quot;</span>;<br>    <span class="hljs-type">char</span> flag[<span class="hljs-number">45</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">43</span>; i++) &#123;<br>        flag[i] = (str[i] - i) ^ key[i % <span class="hljs-built_in">strlen</span>(key)];<br>    &#125;<br>    flag[<span class="hljs-number">44</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, flag);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="BaseUpx"><a href="#BaseUpx" class="headerlink" title="BaseUpx"></a>BaseUpx</h2><ul>
<li><p>题目提示有Upx壳，用DIE打开附件程序可以看出这是标准upx4.24</p>
<p><img src="/../images/image-20251003221920374-1760102969152-1.png" alt="DIE界面"></p>
</li>
<li><p>在Github上下载<a href="https://github.com/upx/upx/releases/tag/v4.2.4">Release UPX 4.2.4 · upx&#x2F;upx</a>，使用指令upx -d脱壳</p>
<p><img src="/../images/image-20251003222033233-1760102969152-7.png" alt="脱壳"></p>
</li>
<li><p>然后就可以把脱壳后的程序拿到IDA里分析，打开就是main函数了，按F5反编译：</p>
<p><img src="/../images/image-20251003222227627-1760102969152-5.png" alt="反编译结果"></p>
</li>
<li><p>可以看到函数对输入的enc（实际上是flag）进行了base64encode，然后和str进行比较。因此思路是拿到str，直接用<a href="https://cyberchef.org/">CyberChef</a>来进行base64解码：</p>
<p><img src="/../images/image-20251003222543143-1760102969152-6.png" alt="cyberchef解密"></p>
</li>
</ul>
<h2 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h2><ul>
<li><p>附件程序用IDA打开，直接就是main函数了，按F5反编译，提示flag在程序里</p>
<p><img src="/../images/image-20251003222821412-1760102969152-4.png" alt="main函数"></p>
</li>
<li><p>shift+F12查看字符串表，就可以找到flag了</p>
<p><img src="/../images/image-20251003222909434-1760102969152-8.png" alt="字符串表"></p>
</li>
</ul>
<h2 id="SignIn2"><a href="#SignIn2" class="headerlink" title="SignIn2"></a>SignIn2</h2><ul>
<li><p>运行附件程序可以看到一些提示：</p>
<p><img src="/../images/image-20251003223506054-1760102969152-9.png" alt="提示"></p>
<p>提示ROT47，应该是某种加密</p>
</li>
<li><p>附件程序用IDA打开，按F5反编译main函数：</p>
<p><img src="/../images/image-20251003223242376-1760102969152-10.png" alt="main函数"></p>
<p>可以看到程序里本来就有一个flag，程序拿到我们输入的数字后对flag进行了加密，然后检查加密后的flag开头几个字母是不是”0xGame”。既然提到了ROT47，就把flag的数据拿到<a href="https://cyberchef.org/">CyberChef</a>里看看能不能解密，刚好可以找到一个ROT 47 Brust Force（flag就直接复制程序里的就好了）：</p>
<p><img src="/../images/image-20251004143034177-1760102969153-11.png" alt="cyberchef"></p>
<p>当时解完没细看flag内容，复现这题来写博客的时候看到这个flag还有点怀疑对不对😂</p>
</li>
</ul>
<h2 id="ZZZ"><a href="#ZZZ" class="headerlink" title="ZZZ"></a>ZZZ</h2><ul>
<li><p>附件程序用IDA打开，直接就是main函数了，按F5反编译一下：</p>
<p><img src="/../images/image-20251004151114879-1760102969153-12.png" alt="main函数反编译结果"></p>
</li>
<li><p>可以看出程序拿到输入的flag后先检查了一下格式，然后截取除了4个部分，拿这4个部分建立了等式。结合题目ZZZ可以推测这是在考z3求解。题目为了保证唯一解还给了flag的sha256来验证</p>
</li>
<li><p>用z3复现一下等式，再加上sha256验证：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br>sha256=<span class="hljs-string">&#x27;4aba519d4666f5421488afaaf89efdcbe48e7a53f814ce5c1d82b46b55032651&#x27;</span><br>s=Solver()<br>x1=BitVec(<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-number">32</span>)<br>x2=BitVec(<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-number">32</span>)<br>x3=BitVec(<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-number">32</span>)<br>x4=BitVec(<span class="hljs-string">&#x27;x4&#x27;</span>,<span class="hljs-number">32</span>)<br>s.add(<span class="hljs-number">3</span> * x2 + <span class="hljs-number">5</span> * x1 + <span class="hljs-number">7</span> * x4 + <span class="hljs-number">2</span> * x3 == -<span class="hljs-number">1445932505</span>)<br>s.add(<span class="hljs-number">2</span> * (<span class="hljs-number">2</span> * (<span class="hljs-number">2</span> * x2 + x3) + x1) + x4 == -<span class="hljs-number">672666814</span>)<br>s.add(<span class="hljs-number">7</span> * x2 + <span class="hljs-number">3</span> * x1 + <span class="hljs-number">5</span> * x4 + <span class="hljs-number">4</span> * x3 == <span class="hljs-number">958464147</span>)<br>s.add(((x1 ^ x2) &lt;&lt; <span class="hljs-number">6</span>) + ((x3 &gt;&gt; <span class="hljs-number">6</span>) ^ <span class="hljs-number">0x4514</span>) == <span class="hljs-number">123074281</span>)<br><br><span class="hljs-keyword">while</span> s.check() == sat:<br>    model=s.model()<br>    x1_val=model[x1].as_long()<br>    x2_val=model[x2].as_long()<br>    x3_val=model[x3].as_long()<br>    x4_val=model[x4].as_long()<br>    flag=<span class="hljs-string">f&quot;0xGame&#123;&#123;<span class="hljs-subst">&#123;x1_val:08x&#125;</span><span class="hljs-subst">&#123;x2_val:08x&#125;</span><span class="hljs-subst">&#123;x3_val:08x&#125;</span><span class="hljs-subst">&#123;x4_val:08x&#125;</span>&#125;&#125;&quot;</span><br>    <span class="hljs-keyword">if</span> hashlib.sha256(flag.encode()).hexdigest()==sha256:<span class="hljs-comment">#验证是否为正确flag</span><br>        <span class="hljs-built_in">print</span>(flag)<br>    exception=Or(x1!=x1_val,x2!=x2_val,x3!=x3_val,x4!=x4_val)<span class="hljs-comment">#排除同一解</span><br>    s.add(exception)<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="DyDebug"><a href="#DyDebug" class="headerlink" title="DyDebug"></a>DyDebug</h2><ul>
<li><p>附件程序用IDA打开，直接就是main函数了，按F5看看反编译：</p>
<p><img src="/../images/image-20251004131520036-1760102969153-13.png" alt="main函数反编译结果"></p>
</li>
<li><p>如注释写的，程序对我们的输入没有任何操作，而是拿了flag明文来比较，所以可以直接动态调试拿到flag明文。这里需要知道一些汇编小知识：函数的返回值存放在寄存器rax里。然后开始我们的操作：</p>
<p>在main函数反编译界面选中解密函数decrypt_string()所在行，右键选择jump to disasm跳到汇编界面：</p>
<p><img src="/../images/image-20251004134158983-1760102969153-14.png" alt="jump to disasm"></p>
<p>光标停在的地方附近就有一个call _Z14decrypt_stringPKcy指令，后面有注释是解密函数decrypt_string()</p>
<p><img src="/../images/image-20251004134355375-1760102969153-15.png" alt="光标停在这里"></p>
<p>其实光标停在的位置的指令就是取函数返回值的操作了。函数的返回值放在rax里，而这条指令把rax mov（移动）到了[rbp-10h+decrypted_str]，看不懂没关系，只需要知道函数返回值可以通过这里的rax看到就行了。这个返回值就是解密后得到的flag明文。在光标停在的位置按F2下断点</p>
<p><img src="/../images/image-20251004134943597-1760102969153-16.png" alt="F2下断点"></p>
<p>把界面正上方的”no debugger”改选成”local windows debugger”，按旁边绿色的三角形开始调试</p>
<p><img src="/../images/image-20251004135012031-1760102969153-20.png" alt="local windows debugger"></p>
<p>这时候会弹出命令行窗口，随便输入一点东西，按回车</p>
<p><img src="/../images/image-20251004135050308-1760102969153-18.png" alt="随便输点东西"></p>
<p>可以看到IDA里程序停在了我们刚刚下断点的地方</p>
<p><img src="/../images/image-20251004135229299-1760102969153-17.png" alt="停在了断点位置"></p>
<p>把鼠标移到rax上就可以看到flag了，双击rax到flag的位置，可以把这一串数据复制给AI提取</p>
<p><img src="/../images/image-20251004135253094-1760102969153-19.png" alt="flag的位置"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>WriteUp&amp;复现</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WriteUp</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>0xGame2025Week2WriteUp</title>
    <url>/2025/10/19/0xGame2025Week2ReverseWriteUp/</url>
    <content><![CDATA[<p>0xGame2025 Week2 Reverse方向全解&amp;详解</p>
<span id="more"></span>

<h2 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h2><ul>
<li><p>附件用IDA打开，main函数反编译后大概长这样：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-08%20220553.png" alt="main函数"></p>
<p>这是shuffle函数：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-08%20220917.png" alt="shuffle函数"></p>
<p>可以看出这是在考随机数，有了种子就可以得到一模一样的随机数序列。回到main函数，双击seed可以得到一个值：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-08%20220939.png" alt="main函数中的seed"></p>
<p>但是经过测试这个seed解不出flag，回头看可以发现上图中seed还有另一个引用：runtime_env，很可疑了。双击跳转：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-08%20220959.png" alt="另有其seed"></p>
<p>出现了对seed的赋值，结合名字的”runtime”可以推测这个才是真正的seed</p>
</li>
<li><p>解密脚本：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">unshuffle_simple</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *str, <span class="hljs-type">int</span> length)</span> &#123;<br>    <span class="hljs-type">int</span> *rand_vals = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(length * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> temp;<br>    <span class="hljs-type">int</span> i, j;<br><br>    <span class="hljs-comment">// 先获取所有随机值</span><br>    <span class="hljs-keyword">for</span> (i = length - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; --i) &#123;<br>        rand_vals[i] = rand();<br>    &#125;<br><br>    <span class="hljs-comment">// 逆向洗牌：从前往后</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; length; i++) &#123;<br>        j = rand_vals[i] % (i + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 执行相同的交换</span><br>        temp = str[i];<br>        str[i] = str[j];<br>        str[j] = temp;<br>    &#125;<br><br>    <span class="hljs-built_in">free</span>(rand_vals);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seed = <span class="hljs-number">0x666</span>;<br>    <span class="hljs-type">char</span> flag[] = <span class="hljs-string">&quot;23-64bed6&#125;-xm5300-&#123;faGa34-0e04c2e7c2a78f39a4&quot;</span>;<br>    <span class="hljs-type">int</span> length = <span class="hljs-built_in">strlen</span>(flag);<br>    srand(seed);<br>    unshuffle_simple((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)flag, length);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flag: %s\n&quot;</span>, flag);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="算数高手"><a href="#算数高手" class="headerlink" title="算数高手"></a>算数高手</h2><ul>
<li><p>附件程序是个pythonexe，相关知识可以参考<a href="http://sydzi.github.io/2025/10/05/Day17-python%E9%80%86%E5%90%91/">Day17:python逆向</a><del>（王婆卖瓜ing</del>。使用<a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor</a>解包后可以得到一个文件夹：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-09%20082444.png" alt="pyinstxtractor解包"></p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-09%20082559.png" alt="解包得到的文件夹"></p>
</li>
<li><p>根据pyinstxtractor的提示可以找到疑似入口文件，同名的文件可能性大点。然后用uncompyle6把pyc转成py格式：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-09%20082742.png" alt="pyc转成py(忽略我的环境报错)"></p>
</li>
<li><p>直接得到flag</p>
</li>
</ul>
<h2 id="BabyJar"><a href="#BabyJar" class="headerlink" title="BabyJar"></a>BabyJar</h2><ul>
<li><p>附件程序是个jar文件，用jd-gui打开：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-09%20090601.png" alt="main函数"></p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-09%20090623.png" alt="encrypt函数"></p>
</li>
<li><p>可以看到这是一个java的flag检验程序，加密逻辑在encrypt方法里。上图选中的那行把字节的高位移到低位，低位移到高位，所以再操作一次就可以还原。还要注意encrypt的返回值进行了base64编码。</p>
</li>
<li><p>解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">enc,key</span>):<br>    enc=base64.b64decode(enc)<br>    flag=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br>        temp=((i&amp;<span class="hljs-number">240</span>)&gt;&gt;<span class="hljs-number">4</span>|(i&amp;<span class="hljs-number">15</span>)&lt;&lt;<span class="hljs-number">4</span>)<br>        flag+=<span class="hljs-built_in">chr</span>(temp^key)<br>    <span class="hljs-keyword">return</span> flag<br><br>enc=<span class="hljs-string">&quot;QsY1V5cX9jJyF2JSAgdikwfCEneTAgICUpNnd1Iyk8IXUkJ3QhcyZ8J3YpY=&quot;</span><br>key=<span class="hljs-number">20</span><br>flag=<span class="hljs-string">&quot;&quot;</span><br>flag=decrypt(enc,key)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="16bit"><a href="#16bit" class="headerlink" title="16bit"></a>16bit</h2><ul>
<li><p>根据题目名称和提示可以推测考察16位环境逆向。附件程序不能运行，IDA也反编译不了，只能读汇编：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">seg000:</span><span class="hljs-number">0000</span> <span class="hljs-comment">; =============== S U B R O U T I N E =======================================</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0000</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0000</span> <span class="hljs-comment">; Attributes: noreturn</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0000</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0000</span>                 <span class="hljs-meta">public</span> start<br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0000</span> start           proc <span class="hljs-built_in">near</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0000</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ax</span>, <span class="hljs-built_in">seg</span> dseg<br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0003</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ds</span>, <span class="hljs-built_in">ax</span>          <span class="hljs-comment">; dseg是数据段，有flag加密后的数据</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0005</span>                 <span class="hljs-meta">assume</span> <span class="hljs-built_in">ds</span>:dseg<br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0005</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">cx</span>, <span class="hljs-number">17h</span>         <span class="hljs-comment">; count寄存器，一般存放循环次数</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0008</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">si</span>, <span class="hljs-number">0</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">000B</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">di</span>, <span class="hljs-number">0</span><br><span class="hljs-symbol">seg000:</span>000E<br><span class="hljs-symbol">seg000:</span>000E loc_1000E:                              <span class="hljs-comment">; CODE XREF: start+1C↓j</span><br><span class="hljs-symbol">seg000:</span>000E                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">al</span>, [<span class="hljs-built_in">si</span>+<span class="hljs-number">0Ah</span>]    <span class="hljs-comment">; si=0时[0Ah]即dseg：000A，是flag密文的位置，此处是在取出密文</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0012</span>                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">al</span>, <span class="hljs-number">9</span>           <span class="hljs-comment">; 减9</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0014</span>                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">al</span>, <span class="hljs-number">0Eh</span>         <span class="hljs-comment">; 异或</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0016</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">di</span>+<span class="hljs-number">38h</span>], <span class="hljs-built_in">al</span>    <span class="hljs-comment">; 解密后的数据存放到以[38h]即dseg:0038h为起始的区域</span><br><span class="hljs-symbol">seg000:</span>001A                 <span class="hljs-keyword">inc</span>     <span class="hljs-built_in">si</span>              <span class="hljs-comment">; 往下取</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">001B</span>                 <span class="hljs-keyword">inc</span>     <span class="hljs-built_in">di</span>              <span class="hljs-comment">; 往下存</span><br><span class="hljs-symbol">seg000:</span>001C                 <span class="hljs-keyword">loop</span>    loc_1000E       <span class="hljs-comment">; si=0时[0Ah]即dseg：000A，是flag密文的位置，此处是在取出密文</span><br><span class="hljs-symbol">seg000:</span>001E                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">cx</span>, <span class="hljs-number">17h</span>         <span class="hljs-comment">; 更新循环次数</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0021</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0021</span> loc_10021:                              <span class="hljs-comment">; CODE XREF: start+2F↓j</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0021</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">al</span>, [<span class="hljs-built_in">si</span>+<span class="hljs-number">0Ah</span>]    <span class="hljs-comment">; 此处si=17h,所以取的是以dseg:0021h为起始的数据</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0025</span>                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">al</span>, <span class="hljs-number">0Eh</span>         <span class="hljs-comment">; 异或</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0027</span>                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">al</span>, <span class="hljs-number">9</span>           <span class="hljs-comment">; 减9</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0029</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">di</span>+<span class="hljs-number">38h</span>], <span class="hljs-built_in">al</span>    <span class="hljs-comment">; 解密后的数据存放到seg:004f为起始的区域</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">002D</span>                 <span class="hljs-keyword">inc</span>     <span class="hljs-built_in">si</span>              <span class="hljs-comment">; 往下取</span><br><span class="hljs-symbol">seg000:</span>002E                 <span class="hljs-keyword">inc</span>     <span class="hljs-built_in">di</span>              <span class="hljs-comment">; 往下存</span><br><span class="hljs-symbol">seg000:</span>002F                 <span class="hljs-keyword">loop</span>    loc_10021       <span class="hljs-comment">; 此处si=17h,所以取的是以dseg:0021h为起始的数据</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0031</span>                 <span class="hljs-keyword">mov</span>     byte_100A6, <span class="hljs-number">24h</span> <span class="hljs-comment">; &#x27;$&#x27; ; byte_100A6是&quot;flag=&quot;，此处是在打印flag</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0036</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">dx</span>, <span class="hljs-number">67h</span> <span class="hljs-comment">; &#x27;g&#x27;</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0039</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-number">ah</span>, <span class="hljs-number">9</span><br><span class="hljs-symbol">seg000:</span>003B                 <span class="hljs-keyword">int</span>     <span class="hljs-number">21h</span>             <span class="hljs-comment">; DOS - PRINT STRING</span><br><span class="hljs-symbol">seg000:</span>003B                                         <span class="hljs-comment">; DS:DX -&gt; string terminated by &quot;$&quot;</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">003D</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">dx</span>, <span class="hljs-number">38h</span> <span class="hljs-comment">; &#x27;8&#x27;</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0040</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-number">ah</span>, <span class="hljs-number">9</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0042</span>                 <span class="hljs-keyword">int</span>     <span class="hljs-number">21h</span>             <span class="hljs-comment">; DOS - PRINT STRING</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0042</span>                                         <span class="hljs-comment">; DS:DX -&gt; string terminated by &quot;$&quot;</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0044</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ax</span>, <span class="hljs-number">4C00h</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0047</span>                 <span class="hljs-keyword">int</span>     <span class="hljs-number">21h</span>             <span class="hljs-comment">; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0047</span> start           endp                    <span class="hljs-comment">; AL = exit code</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0047</span><br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0047</span> seg000          ends<br><span class="hljs-symbol">seg000:</span><span class="hljs-number">0047</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0009</span> <span class="hljs-comment">; ===========================================================================</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0009</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0009</span> <span class="hljs-comment">; Segment type: Pure data</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0009</span> dseg            <span class="hljs-meta">segment</span> para <span class="hljs-meta">public</span> <span class="hljs-string">&#x27;DATA&#x27;</span> <span class="hljs-meta">use16</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0009</span>                 <span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:dseg<br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0009</span>                 <span class="hljs-comment">;org 9</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0009</span>                 <span class="hljs-meta">align</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">dseg:</span>000A                 <span class="hljs-built_in">db</span>  <span class="hljs-number">47h</span> <span class="hljs-comment">; G</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">000B</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">7Fh</span> <span class="hljs-comment">; </span><br><span class="hljs-symbol">dseg:</span>000C                 <span class="hljs-built_in">db</span>  <span class="hljs-number">52h</span> <span class="hljs-comment">; R</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">000D</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">78h</span> <span class="hljs-comment">; x</span><br><span class="hljs-symbol">dseg:</span>000E                 <span class="hljs-built_in">db</span>  <span class="hljs-number">6Ch</span> <span class="hljs-comment">; l</span><br><span class="hljs-symbol">dseg:</span>000F                 <span class="hljs-built_in">db</span>  <span class="hljs-number">74h</span> <span class="hljs-comment">; t</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0010</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">7Eh</span> <span class="hljs-comment">; ~</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0011</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">72h</span> <span class="hljs-comment">; r</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0012</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">47h</span> <span class="hljs-comment">; G</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0013</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">47h</span> <span class="hljs-comment">; G</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0014</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">73h</span> <span class="hljs-comment">; s</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0015</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">5Ah</span> <span class="hljs-comment">; Z</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0016</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">84h</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0017</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">5Ah</span> <span class="hljs-comment">; Z</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0018</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">43h</span> <span class="hljs-comment">; C</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0019</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">85h</span><br><span class="hljs-symbol">dseg:</span>001A                 <span class="hljs-built_in">db</span>  <span class="hljs-number">46h</span> <span class="hljs-comment">; F</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">001B</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">5Ah</span> <span class="hljs-comment">; Z</span><br><span class="hljs-symbol">dseg:</span>001C                 <span class="hljs-built_in">db</span>  <span class="hljs-number">83h</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">001D</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">6Fh</span> <span class="hljs-comment">; o</span><br><span class="hljs-symbol">dseg:</span>001E                 <span class="hljs-built_in">db</span>  <span class="hljs-number">46h</span> <span class="hljs-comment">; F</span><br><span class="hljs-symbol">dseg:</span>001F                 <span class="hljs-built_in">db</span>  <span class="hljs-number">5Ah</span> <span class="hljs-comment">; Z</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0020</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">6Ch</span> <span class="hljs-comment">; l</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0021</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">33h</span> <span class="hljs-comment">; 3</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0022</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">30h</span> <span class="hljs-comment">; 0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0023</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">73h</span> <span class="hljs-comment">; s</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0024</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">32h</span> <span class="hljs-comment">; 2</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0025</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">75h</span> <span class="hljs-comment">; u</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0026</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">66h</span> <span class="hljs-comment">; f</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0027</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">37h</span> <span class="hljs-comment">; 7</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0028</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">61h</span> <span class="hljs-comment">; a</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0029</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">66h</span> <span class="hljs-comment">; f</span><br><span class="hljs-symbol">dseg:</span>002A                 <span class="hljs-built_in">db</span>  <span class="hljs-number">33h</span> <span class="hljs-comment">; 3</span><br><span class="hljs-symbol">dseg:</span>002B                 <span class="hljs-built_in">db</span>  <span class="hljs-number">30h</span> <span class="hljs-comment">; 0</span><br><span class="hljs-symbol">dseg:</span>002C                 <span class="hljs-built_in">db</span>  <span class="hljs-number">78h</span> <span class="hljs-comment">; x</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">002D</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">66h</span> <span class="hljs-comment">; f</span><br><span class="hljs-symbol">dseg:</span>002E                 <span class="hljs-built_in">db</span>  <span class="hljs-number">40h</span> <span class="hljs-comment">; @</span><br><span class="hljs-symbol">dseg:</span>002F                 <span class="hljs-built_in">db</span>  <span class="hljs-number">35h</span> <span class="hljs-comment">; 5</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0030</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">61h</span> <span class="hljs-comment">; a</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0031</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">4Eh</span> <span class="hljs-comment">; N</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0032</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">64h</span> <span class="hljs-comment">; d</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0033</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">34h</span> <span class="hljs-comment">; 4</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0034</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">65h</span> <span class="hljs-comment">; e</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0035</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">32h</span> <span class="hljs-comment">; 2</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0036</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">33h</span> <span class="hljs-comment">; 3</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0037</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">88h</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0038</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0039</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>003A                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>003B                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>003C                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">003D</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>003E                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>003F                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0040</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0041</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0042</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0043</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0044</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0045</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0046</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0047</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0048</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0049</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>004A                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>004B                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>004C                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">004D</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>004E                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>004F                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0050</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0051</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0052</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0053</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0054</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0055</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0056</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0057</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0058</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0059</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>005A                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>005B                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>005C                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">005D</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>005E                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span>005F                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0060</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0061</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0062</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0063</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0064</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0065</span>                 <span class="hljs-built_in">db</span>    <span class="hljs-number">0</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0066</span> byte_100A6      <span class="hljs-built_in">db</span> <span class="hljs-number">0</span>                    <span class="hljs-comment">; DATA XREF: start+31↑w</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0067</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">66h</span> <span class="hljs-comment">; f</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0068</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">6Ch</span> <span class="hljs-comment">; l</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">0069</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">61h</span> <span class="hljs-comment">; a</span><br><span class="hljs-symbol">dseg:</span>006A                 <span class="hljs-built_in">db</span>  <span class="hljs-number">67h</span> <span class="hljs-comment">; g</span><br><span class="hljs-symbol">dseg:</span>006B                 <span class="hljs-built_in">db</span>  <span class="hljs-number">20h</span><br><span class="hljs-symbol">dseg:</span>006C                 <span class="hljs-built_in">db</span>  <span class="hljs-number">3Dh</span> <span class="hljs-comment">; =</span><br><span class="hljs-symbol">dseg:</span><span class="hljs-number">006D</span>                 <span class="hljs-built_in">db</span>  <span class="hljs-number">24h</span> <span class="hljs-comment">; $</span><br><span class="hljs-symbol">dseg:</span>006E                 <span class="hljs-built_in">db</span>    ? <span class="hljs-comment">;</span><br><span class="hljs-symbol">dseg:</span>006F                 <span class="hljs-built_in">db</span>    ? <span class="hljs-comment">;</span><br><span class="hljs-symbol">dseg:</span>006F dseg            ends<br><span class="hljs-symbol">dseg:</span>006F<br><span class="hljs-symbol">seg002:</span><span class="hljs-number">0000</span> <span class="hljs-comment">; ===========================================================================</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>可以看出程序分两部分对flag的密文进行了解密，模拟这段代码就可以得到flag。解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">data = [<br>    <span class="hljs-number">0x47</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x47</span>,<br>    <span class="hljs-number">0x73</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x6F</span>,<br>    <span class="hljs-number">0x46</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x37</span>,<br>    <span class="hljs-number">0x61</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x4E</span>,<br>    <span class="hljs-number">0x64</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x88</span><br>]<br><br>output = []<br><br><span class="hljs-comment"># 第一段解密（前 0x17 字节）</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x17</span>):<br>    al = data[i]<br>    al = (al - <span class="hljs-number">9</span>) &amp; <span class="hljs-number">0xFF</span><br>    al = al ^ <span class="hljs-number">0x0E</span><br>    output.append(al)<br><br><span class="hljs-comment"># 第二段解密（后 0x17 字节）</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x17</span>,<span class="hljs-number">0x2E</span>):<br>    al = data[i]<br>    al = al ^ <span class="hljs-number">0x0E</span><br>    al = (al - <span class="hljs-number">9</span>) &amp; <span class="hljs-number">0xFF</span><br>    output.append(al)<br><br><span class="hljs-comment"># 输出为字符串</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> output)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="TELF"><a href="#TELF" class="headerlink" title="TELF"></a>TELF</h2><ul>
<li><p>题目提示加壳，DIE检查发现附件程序加了upx壳：</p>
<p><img src="/../images/image-20251010194622670.png" alt="DIE检查"></p>
<p>这是个elf文件，考察elf手动脱壳的话难度不小。使用upx工具会发现脱不了壳，推测有upx特征魔改。用010editor打开附件程序，注意到出现了可疑字样”X1c”：</p>
<p><img src="/../images/image-20251010195805683.png" alt="可疑字样"></p>
<p>修改”X1c”为”UPX”后程序可正常工具脱壳：</p>
<p><img src="/../images/image-20251010195916919.png" alt="工具脱壳"></p>
<p>脱壳后的程序用IDA打开，main函数如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  __int64 block; <span class="hljs-comment">// [rsp+8h] [rbp-A8h] BYREF</span><br>  _QWORD fl4g[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-A0h] BYREF</span><br>  <span class="hljs-type">char</span> flag[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+50h] [rbp-60h] BYREF</span><br>  __int64 v7; <span class="hljs-comment">// [rsp+58h] [rbp-58h]</span><br>  __int64 v8; <span class="hljs-comment">// [rsp+60h] [rbp-50h]</span><br>  __int64 v9; <span class="hljs-comment">// [rsp+68h] [rbp-48h]</span><br>  __int64 v10; <span class="hljs-comment">// [rsp+70h] [rbp-40h]</span><br>  __int64 v11; <span class="hljs-comment">// [rsp+78h] [rbp-38h]</span><br>  __int64 v12; <span class="hljs-comment">// [rsp+80h] [rbp-30h]</span><br>  _DWORD key[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [rsp+90h] [rbp-20h] BYREF</span><br>  <span class="hljs-type">int</span> k; <span class="hljs-comment">// [rsp+A4h] [rbp-Ch]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+A8h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+ACh] [rbp-4h]</span><br><br>  srand(<span class="hljs-number">0xF6950u</span>);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">3</span>; ++i )<br>    key[i] = rand();<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input your flag: &quot;</span>);<br>  <span class="hljs-keyword">if</span> ( __isoc99_scanf(<span class="hljs-string">&quot;%56s&quot;</span>, flag) == <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(flag) == <span class="hljs-number">56</span> )<br>    &#123;<br>      fl4g[<span class="hljs-number">0</span>] = *flag;<br>      fl4g[<span class="hljs-number">1</span>] = v7;<br>      fl4g[<span class="hljs-number">2</span>] = v8;<br>      fl4g[<span class="hljs-number">3</span>] = v9;<br>      fl4g[<span class="hljs-number">4</span>] = v10;<br>      fl4g[<span class="hljs-number">5</span>] = v11;<br>      fl4g[<span class="hljs-number">6</span>] = v12;<br>      <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">55</span>; j += <span class="hljs-number">8</span> )<br>      &#123;<br>        block = fl4g[j / <span class="hljs-number">8u</span>];<br>        encrypt(&amp;block, key);<br>        fl4g[j / <span class="hljs-number">8u</span>] = block;<br>      &#125;<br>      <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">55</span>; ++k )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( enc[k] != *(fl4g + k) )<br>        &#123;<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Try Again!&quot;</span>);<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Congratulation!&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Length Error!&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    fwrite(<span class="hljs-string">&quot;Input error or EOF\n&quot;</span>, <span class="hljs-number">1uLL</span>, <span class="hljs-number">0x13u</span>LL, _bss_start);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>可以看出程序用先随机数生成了key，然后对输入的flag进行了加密，最后是校验。加密函数如下，是tea加密：</p>
<p><img src="/../images/image-20251010200059379.png" alt="encrypt函数"></p>
<p>但是用相同种子生成的随机数组成的key会解密失败，动调会发现key和自己使用同一种子生成的key不同（IDAelf动调教程见<a href="https://www.52pojie.cn/thread-730499-1-1.html">ida动态调试elf(无坑详细)</a>）：</p>
<p><img src="/../images/image-20251010201432090.png" alt="动调时的key"></p>
<p>这样就能解密了。tea加密的主要逻辑是异或，所以只需要还原出加密时的相关变量就可以了</p>
</li>
<li><p>解密脚本：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* block, <span class="hljs-type">uint32_t</span>* key)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> p1 = block[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">uint32_t</span> p2 = block[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        sum -= <span class="hljs-number">0x61C88647</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        p2 -= (p1 + sum) ^ (<span class="hljs-number">16</span> * p1 + key[<span class="hljs-number">2</span>]) ^ ((p1 &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">3</span>]);<br>        p1 -= (p2 + sum) ^ (<span class="hljs-number">16</span> * p2 + key[<span class="hljs-number">0</span>]) ^ ((p2 &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">1</span>]);<br>        sum += <span class="hljs-number">0x61C88647</span>;<br>    &#125;<br>    block[<span class="hljs-number">0</span>] = p1;<br>    block[<span class="hljs-number">1</span>] = p2;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">0x7e4d087b</span>, <span class="hljs-number">0x7a4db733</span>, <span class="hljs-number">0x70fe9df0</span>, <span class="hljs-number">0x595607f7</span> &#125;;<br>    <span class="hljs-type">uint32_t</span> enc[<span class="hljs-number">14</span>] = &#123;<br>        <span class="hljs-number">0xDC01DAAD</span>, <span class="hljs-number">0x088A5BAE</span>, <span class="hljs-number">0x8F4FF54E</span>, <span class="hljs-number">0x9E9D5F6E</span>,<br>        <span class="hljs-number">0x08A94E0A</span>, <span class="hljs-number">0xC245AB25</span>, <span class="hljs-number">0x438FC94B</span>, <span class="hljs-number">0x28D6513D</span>,<br>        <span class="hljs-number">0xF4CD72F6</span>, <span class="hljs-number">0x3B4AB42B</span>, <span class="hljs-number">0xEF6636FB</span>, <span class="hljs-number">0xB28C8AD6</span>,<br>        <span class="hljs-number">0x1B9C1AEB</span>, <span class="hljs-number">0x531F9C0A</span><br>    &#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">14</span>; i += <span class="hljs-number">2</span>) &#123;<br>        decrypt(&amp;enc[i], key);<br>    &#125;<br><br>    <span class="hljs-type">char</span>* flagChar = (<span class="hljs-type">char</span>*)enc;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">56</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, flagChar[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>WriteUp&amp;复现</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WriteUp</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day1:x86汇编框架、数据类型、基本运算、位运算</title>
    <url>/2025/07/05/Day1-x86%E6%B1%87%E7%BC%96%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>vs2022汇编环境、x86汇编框架、数据类型、基本运算、位运算</p>
<span id="more"></span>

<h2 id="在vs2022中编写汇编代码"><a href="#在vs2022中编写汇编代码" class="headerlink" title="在vs2022中编写汇编代码"></a>在vs2022中编写汇编代码</h2><ul>
<li><p>新建一个空项目</p>
</li>
<li><p>在工具栏的“工具”选项中选择“获取工具和功能”，在“使用C++的桌面开发”中勾选“Windows 10 SDK”以及“MSVC v142 -VS 2015 C++生成工具”，然后安装这些新勾选的选项，更新VS2022</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-05%20233157.png" alt="勾选选项"></p>
</li>
<li><p>右键新建的空项目，选择最下方的“属性”，在弹出来的页面中选择“常规”，然后将平台版本改成windows10，可能需要改也可能不需要</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-05%20233305.png" alt="属性页"></p>
</li>
<li><p>右键新建的空项目，选择“生成依赖性”，然后是“生成自定义”，在界面中选择masm</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-05%20233422.png" alt="生成自定义"></p>
</li>
<li><p>然后就可以新建一个.asm源文件了。新建完成后，右键源文件选择“属性”，然后在“常规”里检查项类型是否为“Microsoft Macro Assembler”</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-05%20233723.png" alt="常规"></p>
</li>
<li><p>以上是针对报错进行的尝试修正总结，可能有多余或者不足之处</p>
</li>
</ul>
<h2 id="x86汇编框架-MASM"><a href="#x86汇编框架-MASM" class="headerlink" title="x86汇编框架(MASM)"></a>x86汇编框架(MASM)</h2><ul>
<li><p>xxxxxxxxxx2 1int num[2][2] &#x3D; { {1,2},{3,4} };2printf(“%d,%d,%d,%d”, num[0][0], num[0][1], num[1][0], num[1][1]);c</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;预处理</span><br><span class="hljs-meta">.586</span><br><span class="hljs-meta">.model</span> flat,stdcall<br><br><span class="hljs-comment">;包含的链接库</span><br>includelib ucrt<span class="hljs-number">.</span>lib<br>includelib legacy_stdio_definitions<span class="hljs-number">.</span>lib<br>includelib kernel32<span class="hljs-number">.</span>lib<br>includelib user32<span class="hljs-number">.</span>lib<br><br><span class="hljs-comment">;外部函数声明</span><br><span class="hljs-meta">extern</span> printf:proc<br><br><span class="hljs-comment">;数据段</span><br><span class="hljs-meta">.data</span><br>szHello <span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;HelloWorld!&#x27;</span>,<span class="hljs-number">0</span><br><br><span class="hljs-comment">;代码段</span><br><span class="hljs-meta">.code</span><br><span class="hljs-comment">;函数声明</span><br>main proc<br>	<span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,szHello<br>	<span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>	<span class="hljs-keyword">call</span> printf<br>	<span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>,<span class="hljs-number">4</span><br>main endp<br>end<br></code></pre></td></tr></table></figure>

<ul>
<li><p>重点如下：</p>
</li>
<li><p>链接库声明</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm">includelib NameOfLib<span class="hljs-number">.</span>lib<br></code></pre></td></tr></table></figure>
</li>
<li><p>不同的段</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.NameOfSection</span><br><span class="hljs-comment">;段所包含的数据</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>函数格式</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm">functionName proc 参数名<span class="hljs-number">1</span>:参数类型，参数名<span class="hljs-number">2</span>:参数类型...<br>	<span class="hljs-comment">;汇编代码</span><br>functionName endp<br></code></pre></td></tr></table></figure>
</li>
<li><p>在一个asm文件末尾，需要</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm">end			<span class="hljs-comment">;用于无入口点，即非可执行文件，不需要主函数时</span><br>end main	<span class="hljs-comment">;用于可执行文件，必须指定入口点(如main函数)时</span><br></code></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table>
<thead>
<tr>
<th align="center">类型名称</th>
<th align="center">简写</th>
<th align="center">对应类型</th>
<th align="center">占用字节数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BYTE</td>
<td align="center">db</td>
<td align="center">char</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">WORD</td>
<td align="center">dw</td>
<td align="center">short</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">DWORD</td>
<td align="center">dd</td>
<td align="center">int</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">QWORD</td>
<td align="center">dq</td>
<td align="center">long long</td>
<td align="center">8</td>
</tr>
</tbody></table>
<h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><ul>
<li><p>数据传送指令</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> dest,src		<span class="hljs-comment">;dest=src</span><br><br><span class="hljs-comment">;eax=1示例</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>地址传送指令</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">lea</span> dest,[addr]		<span class="hljs-comment">;dest=addr</span><br><br><span class="hljs-comment">;eax=77E75F38示例</span><br><span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,77E75F38<br></code></pre></td></tr></table></figure>
</li>
<li><p>加法</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">add</span> dest,src	<span class="hljs-comment">;dest=dest+src</span><br><br><span class="hljs-comment">;1+1=2示例，最后eax里为2</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>自增</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">inc</span> dest		<span class="hljs-comment">;dest=dest+1</span><br><br><span class="hljs-comment">;eax++示例</span><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">eax</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>减法</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">sub</span> dest,src	<span class="hljs-comment">;dest=dest-src</span><br><br><span class="hljs-comment">;6-2=4示例，最后eax里为4</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">6</span><br><span class="hljs-keyword">sub</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>自减</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">dec</span> dest		<span class="hljs-comment">;dest=dest-1</span><br><br><span class="hljs-comment">;eax--示例</span><br><span class="hljs-keyword">dec</span> <span class="hljs-built_in">eax</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>乘法</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;分为mul(无符号)和imul(有符号)</span><br><span class="hljs-comment">;乘法结果存放在edx和eax中(edx:eax)，低位eax，高位edx。未指定时，eax默认作为一个因数</span><br><span class="hljs-keyword">mul</span> src				<span class="hljs-comment">;edx:eax=eax*src</span><br><span class="hljs-keyword">imul</span> src			<span class="hljs-comment">;edx:eax=eax*src</span><br><span class="hljs-keyword">imul</span> dest,src		<span class="hljs-comment">;dest=dest*src</span><br><span class="hljs-keyword">imul</span> dest,src,imm	<span class="hljs-comment">;dest=src*imm</span><br><br><span class="hljs-comment">;4*2=8示例，eax*ebx</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">4</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">mul</span> <span class="hljs-built_in">ebx</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>除法</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;分为div(无符号)和idiv(有符号)</span><br><span class="hljs-comment">;被除数放在edx:eax中，除数任意，商存放在eax中，余数存放在edx中</span><br><span class="hljs-keyword">div</span> src			<span class="hljs-comment">;edx:eax%src=eax...edx</span><br><span class="hljs-keyword">idiv</span> src		<span class="hljs-comment">;edx:eax%src=eax...edx</span><br><br><span class="hljs-comment">;101%2...1示例</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">101</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">div</span> <span class="hljs-built_in">ebx</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><ul>
<li><p>与</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">and</span> dest,src		<span class="hljs-comment">;dest=dest &amp; src</span><br><br><span class="hljs-comment">;1&amp;2=0示例</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">and</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">ebx</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>或</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">or</span> dest,src			<span class="hljs-comment">;dest=dest | src</span><br><br><span class="hljs-comment">;1|2=3示例</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">or</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">ebx</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>取反</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">not</span> dest			<span class="hljs-comment">;dest=~dest</span><br><br><span class="hljs-comment">;not 00000001=11111110示例</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">not</span> <span class="hljs-built_in">eax</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>异或</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">xor</span> dest,src		<span class="hljs-comment">;dest=dest^src</span><br><br><span class="hljs-comment">;1^2=3示例</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">ebx</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>左移，右移</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;左移</span><br><span class="hljs-keyword">shl</span> dest,count		<span class="hljs-comment">;dest=dest&lt;&lt;count</span><br><br><span class="hljs-comment">;1&lt;&lt;3=8示例</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>,<span class="hljs-number">3</span><br><span class="hljs-keyword">shl</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">cl</span><br><br><span class="hljs-comment">;右移</span><br><span class="hljs-keyword">shr</span> dest,count		<span class="hljs-comment">;dest=dest&gt;&gt;count</span><br><br><span class="hljs-comment">;8&gt;&gt;3=1示例</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">8</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>,<span class="hljs-number">3</span><br><span class="hljs-keyword">shr</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">cl</span><br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>0xGame2025Week3WriteUp</title>
    <url>/2025/10/28/0xGame2025Week3ReverseWriteUp/</url>
    <content><![CDATA[<p>0xGame2025 Week3 Reverse方向全解&amp;详解</p>
<span id="more"></span>

<h2 id="easyApp"><a href="#easyApp" class="headerlink" title="easyApp"></a>easyApp</h2><blockquote>
<p>考点：apk逆向、工具应用、base64编码解码、z3求解</p>
</blockquote>
<ul>
<li><p>附件程序是个apk，在模拟器中运行如图，推测按钮会触发flag检验逻辑：</p>
<p><img src="/../images/image-20251028215843640.png" alt="模拟器运行"></p>
</li>
<li><p>用JEB打开apk，找到MainActivity并右键解析后，得到JAVA代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.easyapp;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.util.Base64;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.EditText;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><span class="hljs-keyword">import</span> androidx.activity.ComponentActivity;<br><span class="hljs-keyword">import</span> dalvik.system.DexClassLoader;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> kotlin.Metadata;<br><span class="hljs-keyword">import</span> kotlin.collections.ArraysKt;<br><span class="hljs-keyword">import</span> kotlin.io.ByteStreamsKt;<br><span class="hljs-keyword">import</span> kotlin.jvm.functions.Function1;<br><span class="hljs-keyword">import</span> kotlin.jvm.internal.Intrinsics;<br><span class="hljs-keyword">import</span> kotlin.text.Charsets;<br><span class="hljs-keyword">import</span> kotlin.text.StringsKt;<br><br><span class="hljs-meta">@Metadata(d1 = &#123;&quot;\u0000\&quot;\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000E\n\u0002\u0010\u0012\n\u0000\b\u0007\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002J\u0012\u0010\u0003\u001A\u00020\u00042\b\u0010\u0005\u001A\u0004\u0018\u00010\u0006H\u0014J\f\u0010\u0007\u001A\u00020\b*\u00020\tH\u0002¨\u0006\n&quot;&#125;, d2 = &#123;&quot;Lcom/example/easyapp/MainActivity;&quot;, &quot;Landroidx/activity/ComponentActivity;&quot;, &quot;()V&quot;, &quot;onCreate&quot;, &quot;&quot;, &quot;savedInstanceState&quot;, &quot;Landroid/os/Bundle;&quot;, &quot;toHexString&quot;, &quot;&quot;, &quot;&quot;, &quot;app_release&quot;&#125;, k = 1, mv = &#123;1, 9, 0&#125;, xi = 0x30)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ComponentActivity</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> $stable;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span>  <span class="hljs-comment">// androidx.activity.ComponentActivity</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle arg3)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(arg3);<br>        <span class="hljs-built_in">this</span>.setContentView(layout.activity_main);<br>        <span class="hljs-type">EditText</span> <span class="hljs-variable">v3</span> <span class="hljs-operator">=</span> (EditText)<span class="hljs-built_in">this</span>.findViewById(id.flagInput);<br>        ((Button)<span class="hljs-built_in">this</span>.findViewById(id.button)).setOnClickListener((View arg2) -&gt; MainActivity.onCreate$lambda$<span class="hljs-number">0</span>(v3, <span class="hljs-built_in">this</span>, arg2));  <span class="hljs-comment">// 这里将Click和onCreate$lambda$0绑定起来了</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> onCreate$lambda$<span class="hljs-number">0</span>(EditText arg6, MainActivity arg7, View arg8) &#123;<br>        <span class="hljs-type">boolean</span> v6_4;  <span class="hljs-comment">// v8_1的返回值流向v6_4</span><br>        Intrinsics.checkNotNullParameter(arg7, <span class="hljs-string">&quot;this$0&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">v6</span> <span class="hljs-operator">=</span> arg6.getText().toString();  <span class="hljs-comment">// v6存放了输入的flag</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">v8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(arg7.getCacheDir(), <span class="hljs-string">&quot;dex.zip&quot;</span>);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">v0</span> <span class="hljs-operator">=</span> arg7.getAssets().open(<span class="hljs-string">&quot;dex.zip&quot;</span>);  <span class="hljs-comment">// 打开了asset/dex.zip</span><br>        Intrinsics.checkNotNullExpressionValue(v0, <span class="hljs-string">&quot;open(...)&quot;</span>);<br>        ByteStreamsKt.copyTo$<span class="hljs-keyword">default</span>(v0, ((OutputStream)<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(v8)), <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span>(v6.length() == <span class="hljs-number">42</span>) &#123;<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">v8_1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DexClassLoader</span>(v8.getAbsolutePath(), arg7.getCacheDir().getAbsolutePath(), <span class="hljs-literal">null</span>, arg7.getClassLoader()).loadClass(<span class="hljs-string">&quot;com.example.easyapp.Secret&quot;</span>).getDeclaredMethod(<span class="hljs-string">&quot;check&quot;</span>, String.class);  <span class="hljs-comment">// v8指向了dex中的com.example.easyapp.Secret的check方法</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> v6.substring(<span class="hljs-number">0</span>, <span class="hljs-number">26</span>);  <span class="hljs-comment">// flag被截断，截断的部分流向v1</span><br>            Intrinsics.checkNotNullExpressionValue(v1, <span class="hljs-string">&quot;this as java.lang.String…ing(startIndex, endIndex)&quot;</span>);<br>            <span class="hljs-type">byte</span>[] v1_1 = v1.getBytes(Charsets.UTF_8);  <span class="hljs-comment">// flag截断部分流向v1_1</span><br>            Intrinsics.checkNotNullExpressionValue(((Object)v1_1), <span class="hljs-string">&quot;this as java.lang.String).getBytes(charset)&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">v1_2</span> <span class="hljs-operator">=</span> Base64.encodeToString(v1_1, <span class="hljs-number">0</span>);  <span class="hljs-comment">// flag截断部分被进行了base编码，流向v1_2</span><br>            Intrinsics.checkNotNullExpressionValue(v1_2, <span class="hljs-string">&quot;encodeToString(...)&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">v1_3</span> <span class="hljs-operator">=</span> StringsKt.trim(((CharSequence)v1_2)).toString();  <span class="hljs-comment">// 编码后的flag截断部分流向v1_3</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">v6_1</span> <span class="hljs-operator">=</span> v6.substring(<span class="hljs-number">26</span>);  <span class="hljs-comment">// flag的剩余部分流向了v6_1</span><br>            Intrinsics.checkNotNullExpressionValue(v6_1, <span class="hljs-string">&quot;this as java.lang.String).substring(startIndex)&quot;</span>);<br>            <span class="hljs-type">byte</span>[] v6_2 = v6_1.getBytes(Charsets.UTF_8);  <span class="hljs-comment">// flag的剩余部分从v6_1流向了v6_2</span><br>            Intrinsics.checkNotNullExpressionValue(((Object)v6_2), <span class="hljs-string">&quot;this as java.lang.String).getBytes(charset)&quot;</span>);<br>            <span class="hljs-keyword">if</span>(v1_3.equals(<span class="hljs-string">&quot;MHhHYW1le0RvX3kwdV9sMHYzX2FuZHIwMWQ=&quot;</span>)) &#123;  <span class="hljs-comment">// 此处为v1_3的检验逻辑</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">v6_3</span> <span class="hljs-operator">=</span> v8_1.invoke(<span class="hljs-literal">null</span>, arg7.toHexString(v6_2));  <span class="hljs-comment">// v6_2经过toHexString处理后作为v8_1，即dex:com.example.easyapp.Secret.check的参数</span><br>                Intrinsics.checkNotNull(v6_3, <span class="hljs-string">&quot;null cannot be cast to non-null type kotlin.Boolean&quot;</span>);<br>                v6_4 = ((Boolean)v6_3).booleanValue();  <span class="hljs-comment">// v8_1的返回值流向v6_4</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                v6_4 = <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(v6_4) &#123;  <span class="hljs-comment">// v6_4决定了最后的输出：Right/Oh no no</span><br>                Toast.makeText(((Context)arg7), <span class="hljs-string">&quot;Right!&quot;</span>, <span class="hljs-number">0</span>).show();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            Toast.makeText(((Context)arg7), <span class="hljs-string">&quot;Oh no no&quot;</span>, <span class="hljs-number">0</span>).show();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        Toast.makeText(((Context)arg7), <span class="hljs-string">&quot;Length wrong!&quot;</span>, <span class="hljs-number">0</span>).show();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">toHexString</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] arg11)</span> &#123;<br>        <span class="hljs-keyword">return</span> ArraysKt.joinToString$<span class="hljs-keyword">default</span>(arg11, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>, ((Function1)MainActivity.toHexString<span class="hljs-number">.1</span>.INSTANCE), <span class="hljs-number">30</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>可以看到，flag被拆分成两部分进行检验，前26个字符经过base64编码后与”MHhHYW1le0RvX3kwdV9sMHYzX2FuZHIwMWQ&#x3D;”比对，剩下部分由dex中的com.example.easyapp.Secret.check方法检验。第一部分可以借助<a href="https://cyberchef.org/">CyberChef</a>解密：</p>
<p><img src="/../images/image-20251023214651101.png" alt="第一部分flag"></p>
</li>
<li><p>现在来分析flag第二部分的检验。在JEB左上角工程浏览器中找到asset&#x2F;dex.zip&#x2F;dex.bin</p>
<p><img src="/../images/image-20251024093910480.png" alt="找到dex.bin"></p>
<p>Secret类解析后得到：</p>
<p><img src="/../images/image-20251023215359432.png" alt="Secret类"></p>
<p>其中check的逻辑等价为一个三元一次大数方程组，三个元从flag的第二部分截取：</p>
<p>v0&#x3D;substring(flagPart2[0:16])<br>v3&#x3D;substring(flagPart2[8:24])<br>v4&#x3D;substring(flagPart2:[16:32])</p>
<p>v3 + 3 * v0 - 27454419028250566601 &#x3D; 0<br>2 * v4 - 5 * v3 + 20616666104378640363 &#x3D; 0<br>v0 + 4 * v4 - 0x1dce62be9f0fa2f6c &#x3D; 0</p>
<p>可以使用z3求解。解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">v0 v3 v4分别存放[0:16],[8:24],[16:32]下标的字符，BigInteger将这些字符转成十六进制数，每个十六进制数4位，所以每个变量是64位</span><br><span class="hljs-string">需要关注两两变量之间有32位的重叠</span><br><span class="hljs-string">所以可以将三个64位变量分成4个32位变量来处理</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 定义4个32位变量</span><br>u=BitVec(<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-number">32</span>)  <span class="hljs-comment"># v0的高32位</span><br>v=BitVec(<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-number">32</span>)  <span class="hljs-comment"># v0的低32位，也是v3的高32位</span><br>w=BitVec(<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-number">32</span>)  <span class="hljs-comment"># v3的低32位，也是v4的高32位</span><br>t=BitVec(<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-number">32</span>)  <span class="hljs-comment"># v4的低32位</span><br><br><span class="hljs-comment"># 通过拼接32位变量构造64位变量</span><br>v0=Concat(u,v) <span class="hljs-comment">#v0=u&lt;&lt;32|v</span><br>v3=Concat(v,w) <span class="hljs-comment">#v3=v&lt;&lt;32|w</span><br>v4=Concat(w,t) <span class="hljs-comment">#v4=w&lt;&lt;32|t</span><br><br><span class="hljs-comment">#定义常量</span><br>A=BitVecVal(<span class="hljs-number">27454419028250566601</span>,<span class="hljs-number">64</span>)<br>B=BitVecVal(-<span class="hljs-number">20616666104378640363</span>,<span class="hljs-number">64</span>)<br>C=BitVecVal(<span class="hljs-number">0x1dce62be9f0fa2f6c</span>,<span class="hljs-number">64</span>)<br><br><span class="hljs-comment">#建立约束</span><br>s=Solver()<br>s.add(v3+<span class="hljs-number">3</span>*v0==A)<br>s.add(<span class="hljs-number">2</span>*v4-<span class="hljs-number">5</span>*v3==B)<br>s.add(v0+<span class="hljs-number">4</span>*v4==C)<br><br><span class="hljs-keyword">if</span> s.check()==unsat:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无解&quot;</span>)<br><span class="hljs-keyword">while</span> s.check()==sat:<br>    model=s.model()<br>    u_val=model[u].as_long()<br>    v_val=model[v].as_long()<br>    w_val=model[w].as_long()<br>    t_val=model[t].as_long()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;found solution:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;u: <span class="hljs-subst">&#123;u_val:08x&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;v: <span class="hljs-subst">&#123;v_val:08x&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;w: <span class="hljs-subst">&#123;w_val:08x&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;t: <span class="hljs-subst">&#123;t_val:08x&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment"># 将32位变量还原成字符</span><br>    result=(u_val&lt;&lt;<span class="hljs-number">96</span>)|(v_val&lt;&lt;<span class="hljs-number">64</span>)|(w_val&lt;&lt;<span class="hljs-number">32</span>)|t_val<br><br>    hex_str=<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;result:032x&#125;</span>&quot;</span><br>    flag_bytes=<span class="hljs-built_in">bytes</span>.fromhex(hex_str)<br>    flag=flag_bytes.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>	<br>    <span class="hljs-comment">#排除已有的解</span><br>    s.add(Or(u!=u_val,v!=v_val,w!=w_val,t!=t_val))<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">found solution:</span><br><span class="hljs-string">u: 5f346e64</span><br><span class="hljs-string">v: 5f646578</span><br><span class="hljs-string">w: 5f6c6f61</span><br><span class="hljs-string">t: 6465727d</span><br><span class="hljs-string">flag: _4nd_dex_loader&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>flag：0xGame{Do_y0u_l0v3_andr01d_4nd_dex_loader}</p>
</blockquote>
<h2 id="Minesweepr"><a href="#Minesweepr" class="headerlink" title="Minesweepr"></a>Minesweepr</h2><blockquote>
<p>考点：web逆向、js逆向</p>
</blockquote>
<ul>
<li><p>附件是html文件和js文件，推测是一个web逆向题。html打开是一个扫雷游戏网页。因为js主要用来处理网页交互，所以重点关注js文件的内容</p>
<p><img src="/../images/image-20251023083351084.png" alt="扫雷游戏"></p>
</li>
<li><p>网页按F12打开开发人员工具，可以在工具栏源代码模块看js脚本。搜索”flag”可以找到一个可疑的函数：</p>
<p><img src="/../images/image-20251024112642390.png" alt="js脚本与可疑函数"></p>
<p>这里函数名和变量名都不是有意义的，不好阅读，可以双击高亮来追踪数据流。</p>
<p>分析可以发现，0x55ea57被调用了很多次，追踪这个值可以到达0x183c，这个函数负责从0xca50中加载值返回，这算是一个全局的混淆手段了</p>
<p><img src="/../images/image-20251024162443124.png" alt="0x55ea57被调用了多次"></p>
<p><img src="/../images/image-20251024162904166.png" alt="0x183c函数"></p>
<p>根据0x183c的代码可以找到0xca50的字符串表0x1193d5，表中就可以索引出密钥winModal:message2：”WebIsInteresting”了，以及密文”g\x1d%(\x1e,\x15@SA\x5cFD\x0fWJn]P}^}\x0c\x12\x07_]AGYC^o\x04\x00yA-ZGT\x16U\x0e”（0x183c的索引算法有点奇怪，好像索引不到正确的位置上，没搞懂）</p>
<p>而0x172ca4的解密逻辑可以等价如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>	flag+=enc[i]^key[i%<span class="hljs-built_in">len</span>(key)]<br></code></pre></td></tr></table></figure>

<p>因此可以得到解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">enc=<span class="hljs-string">&quot;g\x1d%(\x1e,\x15@SA\x5cFD\x0fWJn]P&#125;^&#125;\x0c\x12\x07_]AGYC^o\x04\x00yA-ZGT\x16U\x0e&quot;</span><br>key=<span class="hljs-string">&quot;WebIsInteresting&quot;</span><br>flag=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(enc[i])^<span class="hljs-built_in">ord</span>(key[i%<span class="hljs-built_in">len</span>(key)]))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>flag：0xGame{463950f9-9824-4bfb-8230-98ab02d431d0}</p>
</blockquote>
<h2 id="ezVBS"><a href="#ezVBS" class="headerlink" title="ezVBS"></a>ezVBS</h2><blockquote>
<p>考点：VBS逆向、VBS去混淆</p>
</blockquote>
<ul>
<li><p>附件程序是个VBS文件，运行显示：</p>
<p><img src="/../images/image-20251024165818790.png" alt="运行VBS"></p>
</li>
<li><p>用记事本打开VBS会发现是一堆奇怪的字符，查了一下说是加了混淆</p>
<p><img src="/../images/image-20251024170022478.png" alt="记事本打开"></p>
<p>参考<a href="https://blog.csdn.net/Daphneohh/article/details/143783257">VBS代码混淆</a>，可以使用去混淆脚本进行去混淆，使用方法见链接：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">Option</span> <span class="hljs-keyword">Explicit</span><br> <br><span class="hljs-keyword">Function</span> Defuscator(vbs)<br>	<span class="hljs-keyword">Dim</span> t<br>	t = <span class="hljs-built_in">InStr</span>(<span class="hljs-number">1</span>, vbs, <span class="hljs-string">&quot;Execute&quot;</span>, <span class="hljs-number">1</span>)<br>	t = <span class="hljs-built_in">Mid</span>(vbs, t + <span class="hljs-built_in">Len</span>(<span class="hljs-string">&quot;Execute&quot;</span>)) <br>	t = <span class="hljs-built_in">Eval</span>(t)<br>	Defuscator = t<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br> <br><span class="hljs-keyword">Dim</span> fso, i<br><span class="hljs-keyword">Const</span> ForReading = <span class="hljs-number">1</span><br><span class="hljs-keyword">Set</span> fso = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Scripting.FileSystemObject&quot;</span>)<br><span class="hljs-keyword">For</span> i = <span class="hljs-number">0</span> <span class="hljs-keyword">To</span> WScript.Arguments.Count - <span class="hljs-number">1</span> <br>	<span class="hljs-keyword">Dim</span> FileName<br>	FileName = WScript.Arguments(i)<br>	<span class="hljs-keyword">Dim</span> MyFile<br>	<span class="hljs-keyword">Set</span> MyFile = fso.OpenTextFile(FileName, ForReading)<br>	<span class="hljs-keyword">Dim</span> vbs<br>	vbs = MyFile.ReadAll	<br>	WScript.Echo Defuscator(vbs)<br>	MyFile.Close<br><span class="hljs-keyword">Next</span><br> <br><span class="hljs-keyword">Set</span> fso = <span class="hljs-literal">Nothing</span><br></code></pre></td></tr></table></figure>

<p>然后可以得到如下的代码：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><code class="hljs vbscript">Microsoft (R) Windows Script Host Version <span class="hljs-number">5.812</span><br>版权所有(C) Microsoft Corporation。保留所有权利。<br><br>code = <span class="hljs-string">&quot;Function l(str):Dim i,j,k,r:j=Len(str):r=&quot;&quot;&quot;&quot;:For i=1 to j:k=Asc(Mid(str,i,1)):If k&gt;=33 And k&lt;=126 Then:r=r&amp;Chr(33+((k+14)Mod 94)):Else:r=r&amp;Chr(k):End If:Next:l=r:End Function:Execute l(&quot;&quot;DEC l x?AFEq@IWQt?E6C J@FC &gt;6DD286i QX i q2D6ec%23=6 l Q7Ie&#123;&amp;*d2Eh=?H&gt;5b%3BKF#JZp:A(w!s@)+z|uvr&#x27;ax^&quot;&quot;&quot;&quot;;$C6tD9`g&#125;y&lt;8_Gfc~4qQ i 7=28 l QH2+2pJ&#125;vsyhrH&#123;7&#125;5K*r?J&amp;DpyE$&gt;&#123;&amp;_HB&#125;z&gt;&#123;*u?J%g:J#|:d&amp;tp|w_52glQ i 6?4 l QQ i u@C : l ` %@ &#123;6?WDECX $E6A b i :7 : Z a kl &#123;6?WDECX %96? i 3:Eq=@4&lt; l pD4W|:5WDEC[ :[ `XX Y ade Y ade Z pD4W|:5WDEC[ : Z `[ `XX Y ade Z pD4W|:5WDEC[ : Z a[ `XX i 4` l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ec Y ecXX |@5 ec Z `[ `X i 4a l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ecXX |@5 ec Z `[ `X i 4b l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - ecX |@5 ec Z `[ `X i 4c l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt;X |@5 ec Z `[ `X i 6?4 l 6?4 U 4` U 4a U 4b U 4c i t=D6 i x7 : Z ` kl &#123;6?WDECX %96? i 3:Eq=@4&lt; l pD4W|:5WDEC[ :[ `XX Y ade Y ade Z pD4W|:5WDEC[ : Z `[ `XX Y ade i 4` l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ec Y ecXX |@5 ec Z `[ `X i 4a l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ecXX |@5 ec Z `[ `X i 4b l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - ecX |@5 ec Z `[ `X i 6?4 l 6?4 U 4` U 4a U 4b U QlQ i t=D6 i 3:Eq=@4&lt; l pD4W|:5WDEC[ :[ `XX Y ade Y ade i 4` l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ec Y ecXX |@5 ec Z `[ `X i 4a l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ecXX |@5 ec Z `[ `X i 6?4 l 6?4 U 4` U 4a U QlQ U QlQ i t?5 x7 i t?5 x7 i &#125;6IE i xu 6?4 l 7=28 %96? i |D8q@I Q*@FC 7=28 :D 4@CC64EPQ i t=D6 i |D8q@I Q*@FC 7=28 :D :?4@CC64EPQ i t?5 x7&quot;&quot;)&quot;</span><br><span class="hljs-keyword">Execute</span> code<br>code = <span class="hljs-string">&quot;Function l(str):Dim i,j,k,r:j=Len(str):r=&quot;&quot;&quot;&quot;:For i=1 to j:k=Asc(Mid(str,i,1)):If k&gt;=33 And k&lt;=126 Then:r=r&amp;Chr(33+((k+14)Mod 94)):Else:r=r&amp;Chr(k):End If:Next:l=r:End Function:Execute l(&quot;&quot;DEC l x?AFEq@IWQt?E6C J@FC 7=28i QX i q2D6ec%23=6 l QeHB)IvGyC%c~&quot;&quot;&quot;&quot;&gt;&#125;twp^h@fg&#x27;qZ`=+#s4EdAFa2(_5Du&#123;Jr$86;z79&amp;:x|*!&lt;Kb?3Q i 7=28 l Q^^H5q&#x27;Z2CGvJ+(fdZyaE#:vz=(faCy28#^H$=xwE#GKE+_f$CvZB@zHa`&#x27;%2qxpJs^6Esgb&amp;+AHF=:&amp;6#&#x27;p2+AHD+zHJ`gr2=yaE#GKEq(@Eq&#x27;p9qg&gt;&#123;ZgwEq(fFq&#x27;f7Z^H8ZAH9`G27~BHu#&#x27;&gt;9CGv7Cy28#&#x27;CEZ(;dZzH5q&#x27;&quot;&quot;&quot;&quot;Eq(f2=AH8#(fz#x%D#yp2=EllQ i 6?4 l QQ i u@C : l ` %@ &#123;6?WDECX $E6A b i :7 : Z a kl &#123;6?WDECX %96? i 3:Eq=@4&lt; l pD4W|:5WDEC[ :[ `XX Y ade Y ade Z pD4W|:5WDEC[ : Z `[ `XX Y ade Z pD4W|:5WDEC[ : Z a[ `XX i 4` l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ec Y ecXX |@5 ec Z `[ `X i 4a l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ecXX |@5 ec Z `[ `X i 4b l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - ecX |@5 ec Z `[ `X i 4c l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt;X |@5 ec Z `[ `X i 6?4 l 6?4 U 4` U 4a U 4b U 4c i t=D6 i x7 : Z ` kl &#123;6?WDECX %96? i 3:Eq=@4&lt; l pD4W|:5WDEC[ :[ `XX Y ade Y ade Z pD4W|:5WDEC[ : Z `[ `XX Y ade i 4` l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ec Y ecXX |@5 ec Z `[ `X i 4a l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ecXX |@5 ec Z `[ `X i 4b l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - ecX |@5 ec Z `[ `X i 6?4 l 6?4 U 4` U 4a U 4b U QlQ i t=D6 i 3:Eq=@4&lt; l pD4W|:5WDEC[ :[ `XX Y ade Y ade i 4` l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ec Y ecXX |@5 ec Z `[ `X i 4a l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ecXX |@5 ec Z `[ `X i 6?4 l 6?4 U 4` U 4a U QlQ U QlQ i t?5 x7 i t?5 x7 i &#125;6IE i xu 6?4 l 7=28 %96? i |D8q@I DEC i t=D6 i |D8q@I Q*@FC 7=28 :D :?4@CC64EPQ i |D8q@I 6?4 i t?5 x7&quot;&quot;)&quot;</span><br><span class="hljs-keyword">Set</span> objFSO = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Scripting.FileSystemObject&quot;</span>)<br>strScriptPath = WScript.ScriptFullName<br>strTextToWrite = code<br>objFSO.OpenTextFile(strScriptPath, <span class="hljs-number">2</span>, <span class="hljs-literal">True</span>).WriteLine(strTextToWrite)<br></code></pre></td></tr></table></figure>

<p>可以看到code中有一些可读明文，后面又是一大串奇怪的字符。推测还有一层混淆，可读明文即为解密函数。让AI给出解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">l</span>(<span class="hljs-params">encrypted_str</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;VBScript l 函数的 Python 实现&quot;&quot;&quot;</span><br>    result = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encrypted_str)):<br>        k = <span class="hljs-built_in">ord</span>(encrypted_str[i])<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">33</span> &lt;= k &lt;= <span class="hljs-number">126</span>:<br>            <span class="hljs-comment"># 与 VBScript 相同的算法</span><br>            result += <span class="hljs-built_in">chr</span>(<span class="hljs-number">33</span> + ((k + <span class="hljs-number">14</span>) % <span class="hljs-number">94</span>))<br>        <span class="hljs-keyword">else</span>:<br>            result += <span class="hljs-built_in">chr</span>(k)<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-comment"># 你的加密字符串</span><br>encrypted_strings = [<br>    <span class="hljs-string">&quot;DEC l x?AFEq@IWQt?E6C J@FC &gt;6DD286i QX i q2D6ec%23=6 l Q7Ie&#123;&amp;*d2Eh=?H&gt;5b%3BKF#JZp:A(w!s@)+z|uvr&#x27;ax^\&quot;\&quot;\&quot;\&quot;;$C6tD9`g&#125;y&lt;8_Gfc~4qQ i 7=28 l QH2+2pJ&#125;vsyhrH&#123;7&#125;5K*r?J&amp;DpyE$&gt;&#123;&amp;_HB&#125;z&gt;&#123;*u?J%g:J#|:d&amp;tp|w_52glQ i 6?4 l QQ i u@C : l ` %@ &#123;6?WDECX $E6A b i :7 : Z a kl &#123;6?WDECX %96? i 3:Eq=@4&lt; l pD4W|:5WDEC[ :[ `XX Y ade Y ade Z pD4W|:5WDEC[ : Z `[ `XX Y ade Z pD4W|:5WDEC[ : Z a[ `XX i 4` l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ec Y ecXX |@5 ec Z `[ `X i 4a l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ecXX |@5 ec Z `[ `X i 4b l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - ecX |@5 ec Z `[ `X i 4c l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt;X |@5 ec Z `[ `X i 6?4 l 6?4 U 4` U 4a U 4b U 4c i t=D6 i x7 : Z ` kl &#123;6?WDECX %96? i 3:Eq=@4&lt; l pD4W|:5WDEC[ :[ `XX Y ade Y ade Z pD4W|:5WDEC[ : Z `[ `XX Y ade i 4` l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ec Y ecXX |@5 ec Z `[ `X i 4a l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ecXX |@5 ec Z `[ `X i 4b l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - ecX |@5 ec Z `[ `X i 6?4 l 6?4 U 4` U 4a U 4b U QlQ i t=D6 i 3:Eq=@4&lt; l pD4W|:5WDEC[ :[ `XX Y ade Y ade i 4` l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ec Y ecXX |@5 ec Z `[ `X i 4a l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ecXX |@5 ec Z `[ `X i 6?4 l 6?4 U 4` U 4a U QlQ U QlQ i t?5 x7 i t?5 x7 i &#125;6IE i xu 6?4 l 7=28 %96? i |D8q@I Q*@FC 7=28 :D 4@CC64EPQ i t=D6 i |D8q@I Q*@FC 7=28 :D :?4@CC64EPQ i t?5 x7&quot;</span>,<br><br>    <span class="hljs-string">&quot;DEC l x?AFEq@IWQt?E6C J@FC 7=28i QX i q2D6ec%23=6 l QeHB)IvGyC%c~\&quot;\&quot;\&quot;\&quot;&gt;&#125;twp^h@fg&#x27;qZ`=+#s4EdAFa2(_5Du&#123;Jr$86;z79&amp;:x|*!&lt;Kb?3Q i 7=28 l Q^^H5q&#x27;Z2CGvJ+(fdZyaE#:vz=(faCy28#^H$=xwE#GKE+_f$CvZB@zHa`&#x27;%2qxpJs^6Esgb&amp;+AHF=:&amp;6#&#x27;p2+AHD+zHJ`gr2=yaE#GKEq(@Eq&#x27;p9qg&gt;&#123;ZgwEq(fFq&#x27;f7Z^H8ZAH9`G27~BHu#&#x27;&gt;9CGv7Cy28#&#x27;CEZ(;dZzH5q&#x27;\&quot;\&quot;\&quot;\&quot;Eq(f2=AH8#(fz#x%D#yp2=EllQ i 6?4 l QQ i u@C : l ` %@ &#123;6?WDECX $E6A b i :7 : Z a kl &#123;6?WDECX %96? i 3:Eq=@4&lt; l pD4W|:5WDEC[ :[ `XX Y ade Y ade Z pD4W|:5WDEC[ : Z `[ `XX Y ade Z pD4W|:5WDEC[ : Z a[ `XX i 4` l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ec Y ecXX |@5 ec Z `[ `X i 4a l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ecXX |@5 ec Z `[ `X i 4b l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - ecX |@5 ec Z `[ `X i 4c l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt;X |@5 ec Z `[ `X i 6?4 l 6?4 U 4` U 4a U 4b U 4c i t=D6 i x7 : Z ` kl &#123;6?WDECX %96? i 3:Eq=@4&lt; l pD4W|:5WDEC[ :[ `XX Y ade Y ade Z pD4W|:5WDEC[ : Z `[ `XX Y ade i 4` l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ec Y ecXX |@5 ec Z `[ `X i 4a l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ecXX |@5 ec Z `[ `X i 4b l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - ecX |@5 ec Z `[ `X i 6?4 l 6?4 U 4` U 4a U 4b U QlQ i t=D6 i 3:Eq=@4&lt; l pD4W|:5WDEC[ :[ `XX Y ade Y ade i 4` l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ec Y ecXX |@5 ec Z `[ `X i 4a l |:5Wq2D6ec%23=6[ x?EW3:Eq=@4&lt; - Wec Y ecXX |@5 ec Z `[ `X i 6?4 l 6?4 U 4` U 4a U QlQ U QlQ i t?5 x7 i t?5 x7 i &#125;6IE i xu 6?4 l 7=28 %96? i |D8q@I DEC i t=D6 i |D8q@I Q*@FC 7=28 :D :?4@CC64EPQ i |D8q@I 6?4 i t?5 x7&quot;</span><br>]<br><br><span class="hljs-comment"># 解密并显示结果</span><br><span class="hljs-keyword">for</span> i, encrypted <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(encrypted_strings, <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解密第 <span class="hljs-subst">&#123;i&#125;</span> 个字符串:&quot;</span>)<br>    decrypted = l(encrypted)<br>    <span class="hljs-built_in">print</span>(decrypted)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;=&quot;</span> * <span class="hljs-number">80</span> + <span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">解密第 <span class="hljs-number">1</span> 个字符串:<br><span class="hljs-built_in">str</span> = InputBox(<span class="hljs-string">&quot;Enter your message: &quot;</span>) : Base64Table = <span class="hljs-string">&quot;fx6LUY5at9lnwmd3TbqzuRy+AipWHPDoXZKMFGCV2I/QQQQjSreEsh18NJkg0v74OcB&quot;</span> : flag = <span class="hljs-string">&quot;waZaAyNGDJ9CwLfNdzYCnyUsAJtSmLU0wqNKmLYFnyT8iyRMi5UEAMH0da8=&quot;</span> : enc = <span class="hljs-string">&quot;&quot;</span> : For i = <span class="hljs-number">1</span> To Len(<span class="hljs-built_in">str</span>) Step <span class="hljs-number">3</span> : <span class="hljs-keyword">if</span> i + <span class="hljs-number">2</span> &lt;= Len(<span class="hljs-built_in">str</span>) Then : bitBlock = Asc(Mid(<span class="hljs-built_in">str</span>, i, <span class="hljs-number">1</span>)) * <span class="hljs-number">256</span> * <span class="hljs-number">256</span> + Asc(Mid(<span class="hljs-built_in">str</span>, i + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)) * <span class="hljs-number">256</span> + Asc(Mid(<span class="hljs-built_in">str</span>, i + <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)) : c1 = Mid(Base64Table, Int(bitBlock \ (<span class="hljs-number">64</span> * <span class="hljs-number">64</span> * <span class="hljs-number">64</span>)) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : c2 = Mid(Base64Table, Int(bitBlock \ (<span class="hljs-number">64</span> * <span class="hljs-number">64</span>)) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : c3 = Mid(Base64Table, Int(bitBlock \ <span class="hljs-number">64</span>) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : c4 = Mid(Base64Table, Int(bitBlock) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : enc = enc &amp; c1 &amp; c2 &amp; c3 &amp; c4 : Else : If i + <span class="hljs-number">1</span> &lt;= Len(<span class="hljs-built_in">str</span>) Then : bitBlock = Asc(Mid(<span class="hljs-built_in">str</span>, i, <span class="hljs-number">1</span>)) * <span class="hljs-number">256</span> * <span class="hljs-number">256</span> + Asc(Mid(<span class="hljs-built_in">str</span>, i + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)) * <span class="hljs-number">256</span> : c1 = Mid(Base64Table, Int(bitBlock \ (<span class="hljs-number">64</span> * <span class="hljs-number">64</span> * <span class="hljs-number">64</span>)) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : c2 = Mid(Base64Table, Int(bitBlock \ (<span class="hljs-number">64</span> * <span class="hljs-number">64</span>)) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : c3 = Mid(Base64Table, Int(bitBlock \ <span class="hljs-number">64</span>) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : enc = enc &amp; c1 &amp; c2 &amp; c3 &amp; <span class="hljs-string">&quot;=&quot;</span> : Else : bitBlock = Asc(Mid(<span class="hljs-built_in">str</span>, i, <span class="hljs-number">1</span>)) * <span class="hljs-number">256</span> * <span class="hljs-number">256</span> : c1 = Mid(Base64Table, Int(bitBlock \ (<span class="hljs-number">64</span> * <span class="hljs-number">64</span> * <span class="hljs-number">64</span>)) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : c2 = Mid(Base64Table, Int(bitBlock \ (<span class="hljs-number">64</span> * <span class="hljs-number">64</span>)) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : enc = enc &amp; c1 &amp; c2 &amp; <span class="hljs-string">&quot;=&quot;</span> &amp; <span class="hljs-string">&quot;=&quot;</span> : End If : End If : Next : IF enc = flag Then : MsgBox <span class="hljs-string">&quot;Your flag is correct!&quot;</span> : Else : MsgBox <span class="hljs-string">&quot;Your flag is incorrect!&quot;</span> : End If<br><br>================================================================================<br><br>解密第 <span class="hljs-number">2</span> 个字符串:<br><span class="hljs-built_in">str</span> = InputBox(<span class="hljs-string">&quot;Enter your flag: &quot;</span>) : Base64Table = <span class="hljs-string">&quot;6wqXxGvJrT4OQQQQmNEHA/9o78VB+1lZRDct5pu2aW0dsFLyCSgejKfhUiIMYPkz3nb&quot;</span> : flag = <span class="hljs-string">&quot;//wdBV+arvGyZW75+J2tRiGKlW72rJagR/wSlIHtRvztZ07SrG+qoKw21VTaBIAyD/etD83UZpwuliUeRVAaZpwsZKwy18CalJ2tRvztBWotBVAhB8mL+8HtBW7uBV7f+/wg+pwh1vafOqwFRVmhrvGfrJagRVrt+Wj5+KwdBVQQQQtBW7alpwgRW7KRITsRJAalt==&quot;</span> : enc = <span class="hljs-string">&quot;&quot;</span> : For i = <span class="hljs-number">1</span> To Len(<span class="hljs-built_in">str</span>) Step <span class="hljs-number">3</span> : <span class="hljs-keyword">if</span> i + <span class="hljs-number">2</span> &lt;= Len(<span class="hljs-built_in">str</span>) Then : bitBlock = Asc(Mid(<span class="hljs-built_in">str</span>, i, <span class="hljs-number">1</span>)) * <span class="hljs-number">256</span> * <span class="hljs-number">256</span> + Asc(Mid(<span class="hljs-built_in">str</span>, i + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)) * <span class="hljs-number">256</span> + Asc(Mid(<span class="hljs-built_in">str</span>, i + <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)) : c1 = Mid(Base64Table, Int(bitBlock \ (<span class="hljs-number">64</span> * <span class="hljs-number">64</span> * <span class="hljs-number">64</span>)) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : c2 = Mid(Base64Table, Int(bitBlock \ (<span class="hljs-number">64</span> * <span class="hljs-number">64</span>)) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : c3 = Mid(Base64Table, Int(bitBlock \ <span class="hljs-number">64</span>) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : c4 = Mid(Base64Table, Int(bitBlock) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : enc = enc &amp; c1 &amp; c2 &amp; c3 &amp; c4 : Else : If i + <span class="hljs-number">1</span> &lt;= Len(<span class="hljs-built_in">str</span>) Then : bitBlock = Asc(Mid(<span class="hljs-built_in">str</span>, i, <span class="hljs-number">1</span>)) * <span class="hljs-number">256</span> * <span class="hljs-number">256</span> + Asc(Mid(<span class="hljs-built_in">str</span>, i + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)) * <span class="hljs-number">256</span> : c1 = Mid(Base64Table, Int(bitBlock \ (<span class="hljs-number">64</span> * <span class="hljs-number">64</span> * <span class="hljs-number">64</span>)) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : c2 = Mid(Base64Table, Int(bitBlock \ (<span class="hljs-number">64</span> * <span class="hljs-number">64</span>)) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : c3 = Mid(Base64Table, Int(bitBlock \ <span class="hljs-number">64</span>) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : enc = enc &amp; c1 &amp; c2 &amp; c3 &amp; <span class="hljs-string">&quot;=&quot;</span> : Else : bitBlock = Asc(Mid(<span class="hljs-built_in">str</span>, i, <span class="hljs-number">1</span>)) * <span class="hljs-number">256</span> * <span class="hljs-number">256</span> : c1 = Mid(Base64Table, Int(bitBlock \ (<span class="hljs-number">64</span> * <span class="hljs-number">64</span> * <span class="hljs-number">64</span>)) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : c2 = Mid(Base64Table, Int(bitBlock \ (<span class="hljs-number">64</span> * <span class="hljs-number">64</span>)) Mod <span class="hljs-number">64</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) : enc = enc &amp; c1 &amp; c2 &amp; <span class="hljs-string">&quot;=&quot;</span> &amp; <span class="hljs-string">&quot;=&quot;</span> : End If : End If : Next : IF enc = flag Then : MsgBox <span class="hljs-built_in">str</span> : Else : MsgBox <span class="hljs-string">&quot;Your flag is incorrect!&quot;</span> : MsgBox enc : End If<br><br>================================================================================<br></code></pre></td></tr></table></figure>

<p>解密出来是两段代码。但是代码给的base表不是很对，第2段代码中删除base表中间连续QQQQ的几个可以解密出一些类似提示的东西</p>
<p><img src="/../images/image-20251024172111827.png" alt="类似提示的东西"></p>
<p>第1段代码的编码表进行同样的修改就得到了flag：</p>
<p><img src="/../images/image-20251024172507953.png" alt="得到flag"></p>
</li>
</ul>
<blockquote>
<p>flag：0xGame{bf00591f-a1cb-4191-b41d-d4eecda0b798}</p>
</blockquote>
<h2 id="World’s-end-BlackBox"><a href="#World’s-end-BlackBox" class="headerlink" title="World’s_end_BlackBox"></a>World’s_end_BlackBox</h2><blockquote>
<p>考点：动态调试、魔改RC4算法</p>
</blockquote>
<ul>
<li><p>附件程序运行如图：</p>
<p><img src="/../images/image-20251024175918607.png" alt="附件程序运行"></p>
</li>
<li><p>用IDA打开，main函数由于类的影响不好分析，先进行简单的变量名优化：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  __int64 v3; <span class="hljs-comment">// rax</span><br>  __int64 v4; <span class="hljs-comment">// rax</span><br>  __int64 v5; <span class="hljs-comment">// rax</span><br>  __int64 v6; <span class="hljs-comment">// rax</span><br>  __int64 v7; <span class="hljs-comment">// rax</span><br>  __int64 v8; <span class="hljs-comment">// rax</span><br>  __int64 v9; <span class="hljs-comment">// rax</span><br>  __int64 v10; <span class="hljs-comment">// rax</span><br>  __int64 v11; <span class="hljs-comment">// rax</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::iterator __for_end; <span class="hljs-comment">// [rsp+20h] [rbp-60h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::iterator __for_begin; <span class="hljs-comment">// [rsp+28h] [rbp-58h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; EndFlag; <span class="hljs-comment">// [rsp+30h] [rbp-50h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> encrypted_message; <span class="hljs-comment">// [rsp+50h] [rbp-30h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> key; <span class="hljs-comment">// [rsp+70h] [rbp-10h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> flag; <span class="hljs-comment">// [rsp+90h] [rbp+10h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> v19; <span class="hljs-comment">// [rsp+B0h] [rbp+30h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::value_type __x; <span class="hljs-comment">// [rsp+D0h] [rbp+50h] BYREF</span><br>  <span class="hljs-type">char</span> c; <span class="hljs-comment">// [rsp+D7h] [rbp+57h]</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *__for_range; <span class="hljs-comment">// [rsp+D8h] [rbp+58h]</span><br><br>  _main(argc, argv, envp);<br>  SetConsoleOutputCP(<span class="hljs-number">0xFDE9u</span>);<br>  basicString((__int64)&amp;flag);<br>  basicString((__int64)&amp;key);<br>  v3 = operateOut(pOut, &amp;unk_408078);<br>  stdOut(v3, out);<br>  v4 = operateOut(pOut, &amp;unk_408160);<br>  stdOut(v4, out);<br>  getLine(pIn, &amp;key);                           <span class="hljs-comment">// 获取密码</span><br>  <span class="hljs-keyword">if</span> ( getLength(&amp;key) != <span class="hljs-number">12</span> )                  <span class="hljs-comment">// 长度判断</span><br>  &#123;<br>    v5 = operateOut(pOut, <span class="hljs-string">&quot;Length Error!&quot;</span>);<br>    stdOut(v5, out);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  KeyGenerate(&amp;v19, &amp;KeyEnc[abi:cxx11], &amp;DeKey[abi:cxx11]);<span class="hljs-comment">// key的生成算法</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::operator=(&amp;TrueKey[abi:cxx11], &amp;v19);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(&amp;v19);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">std</span>::operator!=&lt;<span class="hljs-type">char</span>&gt;(&amp;key, &amp;TrueKey[abi:cxx11]) )<span class="hljs-comment">// 出现了检验逻辑，可以从这里直接获取到真正的key</span><br>  &#123;<br>    v6 = operateOut(pOut, &amp;unk_4081A2);         <span class="hljs-comment">// key错误时的输出</span><br>    stdOut(v6, out);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  v7 = operateOut(pOut, &amp;Congratulation);       <span class="hljs-comment">// key正确时的输出</span><br>  stdOut(v7, out);<br>  v8 = operateOut(pOut, &amp;unk_408212);<br>  stdOut(v8, out);<br>  getLine(pIn, &amp;flag);                          <span class="hljs-comment">// 获取flag的输入</span><br>  <span class="hljs-keyword">if</span> ( getLength(&amp;flag) != <span class="hljs-number">51</span> )<br>  &#123;<br>    v9 = operateOut(pOut, <span class="hljs-string">&quot;Length Error!&quot;</span>);<br>    stdOut(v9, out);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  encrypt(&amp;encrypted_message, &amp;flag, &amp;key);     <span class="hljs-comment">// 加密算法，密钥即为前文的key</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::<span class="hljs-built_in">vector</span>(&amp;EndFlag);<br>  __for_range = &amp;encrypted_message;<br>  __for_begin._M_current = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::begin(&amp;encrypted_message);<br>  __for_end._M_current = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::end(__for_range);<br>  <span class="hljs-keyword">while</span> ( __gnu_cxx::operator!=&lt;<span class="hljs-type">char</span> *,<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;(&amp;__for_begin, &amp;__for_end) )<br>  &#123;<br>    c = *__gnu_cxx::__normal_iterator&lt;<span class="hljs-type">char</span> *,<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;::operator*(&amp;__for_begin);<br>    __x = (<span class="hljs-type">unsigned</span> __int8)c;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;EndFlag, &amp;__x);<br>    __gnu_cxx::__normal_iterator&lt;<span class="hljs-type">char</span> *,<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;::operator++(&amp;__for_begin);<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">std</span>::operator==&lt;<span class="hljs-type">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">int</span>&gt;&gt;(&amp;KALEIDXSCOPE, &amp;EndFlag) )<span class="hljs-comment">// 检验加密结果</span><br>  &#123;<br>    v10 = operateOut(pOut, <span class="hljs-string">&quot;All Perfect!&quot;</span>);<br>    stdOut(v10, out);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  v11 = operateOut(pOut, <span class="hljs-string">&quot;Try again!&quot;</span>);<br>  stdOut(v11, out);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::~<span class="hljs-built_in">vector</span>(&amp;EndFlag);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(&amp;encrypted_message);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(&amp;key);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(&amp;flag);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//加密函数</span><br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *__cdecl <span class="hljs-title function_">modifiedRC4</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *__return_ptr retstr, <span class="hljs-type">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *plaintext, <span class="hljs-type">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *key)</span><br>&#123;<br>  <span class="hljs-type">size_t</span> v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">size_t</span> length; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// bl</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::reference List; <span class="hljs-comment">// rax</span><br>  __int64 v8; <span class="hljs-comment">// [rsp+0h] [rbp-80h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; k; <span class="hljs-comment">// [rsp+20h] [rbp-60h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; s; <span class="hljs-comment">// [rsp+40h] [rbp-40h] BYREF</span><br>  <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">int</span>&gt; __a; <span class="hljs-comment">// [rsp+66h] [rbp-1Ah] BYREF</span><br>  <span class="hljs-type">char</span> v12; <span class="hljs-comment">// [rsp+67h] [rbp-19h] BYREF</span><br>  <span class="hljs-type">size_t</span> i; <span class="hljs-comment">// [rsp+68h] [rbp-18h]</span><br><br>  <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">int</span>&gt;::allocator((<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">int</span>&gt; *<span class="hljs-type">const</span>)&amp;v8 + <span class="hljs-number">102</span>);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::<span class="hljs-built_in">vector</span>(&amp;s, <span class="hljs-number">0x100u</span>LL, &amp;__a);<br>  <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">int</span>&gt;::~allocator(&amp;__a);<br>  rc4_ksa(&amp;s, key);                             <span class="hljs-comment">// RC4密钥调度算法</span><br>  v3 = <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::size(plaintext);<br>  rc4_prga(&amp;k, &amp;s, v3);                         <span class="hljs-comment">// RC4伪随机数生成算法</span><br>  <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;::allocator(&amp;v12);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::basic_string(retstr, &amp;unk_408037, &amp;v12);<br>  <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;::~allocator(&amp;v12);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0LL</span>; ; ++i )<br>  &#123;<br>    length = <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::size(plaintext);<br>    <span class="hljs-keyword">if</span> ( i &gt;= length )<br>      <span class="hljs-keyword">break</span>;<br>    v5 = *(_BYTE *)StrMakeList(plaintext, i);<br>    List = IntMakeList(&amp;k, i);<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::operator+=(retstr, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(<span class="hljs-type">char</span>)(v5 ^ *(_BYTE *)List ^ <span class="hljs-number">7</span>));<span class="hljs-comment">// 魔改的地方在这</span><br>  &#125;<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::~<span class="hljs-built_in">vector</span>(&amp;k);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::~<span class="hljs-built_in">vector</span>(&amp;s);<br>  <span class="hljs-keyword">return</span> retstr;<br>&#125;<br><br><span class="hljs-comment">//密钥调度算法</span><br><span class="hljs-type">void</span> __cdecl <span class="hljs-title function_">rc4_ksa</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; *s, <span class="hljs-type">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *key)</span><br>&#123;<br>  <span class="hljs-type">int</span> *M_current; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::iterator v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// rdx</span><br>  _BYTE *List; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v7; <span class="hljs-comment">// dl</span><br>  <span class="hljs-type">int</span> *s_j; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">int</span> *s_i; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">size_t</span> i; <span class="hljs-comment">// [rsp+20h] [rbp-60h]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+2Ch] [rbp-54h]</span><br><br>  M_current = <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::end(s)._M_current;<br>  v3._M_current = <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::begin(s)._M_current;<br>  <span class="hljs-built_in">std</span>::iota&lt;__gnu_cxx::__normal_iterator&lt;<span class="hljs-type">int</span> *,<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;,<span class="hljs-type">int</span>&gt;(<br>    v3,<br>    (__gnu_cxx::__normal_iterator&lt;<span class="hljs-type">int</span>*,<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; &gt;)M_current,<br>    <span class="hljs-number">0</span>);<br>  j = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0LL</span>; i &lt;= <span class="hljs-number">255</span>; ++i )<br>  &#123;<br>    v4 = *IntMakeList(s, i) + j;<br>    v5 = i % getLength(key);<br>    List = (_BYTE *)StrMakeList(key, v5);<br>    v7 = v4 + *List;<br>    LODWORD(List) = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)((v4 + (<span class="hljs-type">char</span>)*List) &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">24</span>;<br>    j = (<span class="hljs-type">unsigned</span> __int8)((_BYTE)List + v7) - (_DWORD)List;<br>    s_j = IntMakeList(s, j);<br>    s_i = IntMakeList(s, i);<br>    <span class="hljs-built_in">std</span>::swap&lt;<span class="hljs-type">int</span>&gt;(s_i, s_j);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//伪随机数生成算法</span><br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; *__cdecl <span class="hljs-title function_">rc4_prga</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; *__return_ptr retstr, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; *s, <span class="hljs-type">size_t</span> length)</span><br>&#123;<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::reference v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> *v4; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">int</span> *v5; <span class="hljs-comment">// rax</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::reference v6; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::value_type *v7; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">size_t</span> r; <span class="hljs-comment">// [rsp+30h] [rbp-50h]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+38h] [rbp-48h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+3Ch] [rbp-44h]</span><br><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::<span class="hljs-built_in">vector</span>(retstr);<br>  i = <span class="hljs-number">0</span>;<br>  j = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( r = <span class="hljs-number">0LL</span>; r &lt; length; ++r )<br>  &#123;<br>    i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>    v3 = IntMakeList(s, i);<br>    j = (<span class="hljs-type">unsigned</span> __int8)(((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)((j + *v3) &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">24</span>) + j + *(_BYTE *)v3)<br>      - ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)((j + *v3) &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">24</span>);<br>    v4 = IntMakeList(s, j);<br>    v5 = IntMakeList(s, i);<br>    <span class="hljs-built_in">std</span>::swap&lt;<span class="hljs-type">int</span>&gt;(v5, v4);<br>    LODWORD(v4) = *IntMakeList(s, i);<br>    v6 = IntMakeList(s, j);<br>    v7 = IntMakeList(<br>           s,<br>           (<span class="hljs-type">int</span>)((<span class="hljs-type">unsigned</span> __int8)(((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(((<span class="hljs-type">int</span>)v4 + *v6) &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">24</span>) + (_BYTE)v4 + *(_BYTE *)v6)<br>               - ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(((<span class="hljs-type">int</span>)v4 + *v6) &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">24</span>)));<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(retstr, v7);<br>  &#125;<br>  <span class="hljs-keyword">return</span> retstr;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>可以看到函数对输入的数据进行了魔改的RC4加密，但实际上没有改变RC4加解密同一个函数的性质，所以解密只需要复现这个代码即可</p>
<p>下面先获取密钥和加密后的flag数据。在main函数第一个getline处下断点，开始动态调试</p>
<p><img src="/../images/image-20251024200050353.png" alt="第一个getline处下断点"></p>
<p>随便输入一个字符后会到长度检测，要求输入的密码长度要等于12，可以输入12个字符也可以后续到这个cmp的时候改jz绕过</p>
<p><img src="/../images/image-20251024200525655.png" alt="长度检测"></p>
<p>过了长度检测后就可以一直运行到key检验处，双击生成的密钥的变量名(TrueKey)就可以得到真正的key了（从</p>
<p>hex窗口可以看到key即为”XaleidscopiX”）</p>
<p><img src="/../images/image-20251024202016786.png" alt="运行到key检验处"></p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-24%20200936.png" alt="真正的key"></p>
<p>然后还需要获得真正flag的加密数据。往下绕过key检验，运行到jz的时候再改一下ZF标志位（此处应当跳转）</p>
<p><img src="/../images/image-20251024202256140.png" alt="绕过key检验(已绕过)"></p>
<p>绕过后终端还有提示</p>
<p><img src="/../images/image-20251024202606398.png" alt="提示"></p>
<p>接下来运行到第二个getline，随便输几个数据（有长度检验，最好是输入51个字符，省的绕过长度检验）。然后继续运行到加密结果的检验处</p>
<p><img src="/../images/image-20251024203359348.png" alt="运行到加密结果检验处"></p>
<p>其中KALEIDXSCOPE的第一个offset就是正确的flag加密后的数据</p>
<p><img src="/../images/image-20251024203510922.png" alt="KALEIDXSCOPE第一个offset(unk_2692A10)"></p>
<p><img src="/../images/image-20251024203610635.png" alt="正确flag加密后的数据"></p>
<p>解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_decrypt</span>(<span class="hljs-params">data, key</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    out = []<br><br>    <span class="hljs-comment"># Key-scheduling algorithm (KSA)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    <span class="hljs-comment"># Pseudo-random generation algorithm (PRGA)</span><br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        K = S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        out.append(K)<br><br>    <span class="hljs-keyword">return</span> out<br><br>enc=[<span class="hljs-number">0x000000FC</span>, <span class="hljs-number">0x000000EA</span>, <span class="hljs-number">0x00000015</span>, <span class="hljs-number">0x0000002C</span>, <span class="hljs-number">0x00000086</span>, <span class="hljs-number">0x00000038</span>, <span class="hljs-number">0x0000003F</span>, <span class="hljs-number">0x000000F3</span>, <span class="hljs-number">0x00000092</span>, <span class="hljs-number">0x000000CE</span>, <span class="hljs-number">0x000000DA</span>, <span class="hljs-number">0x0000008E</span>, <span class="hljs-number">0x00000048</span>, <span class="hljs-number">0x000000D3</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x0000009F</span>, <span class="hljs-number">0x000000D9</span>, <span class="hljs-number">0x00000057</span>, <span class="hljs-number">0x000000B1</span>, <span class="hljs-number">0x000000EE</span>, <span class="hljs-number">0x00000041</span>, <span class="hljs-number">0x0000009A</span>, <span class="hljs-number">0x0000004D</span>, <span class="hljs-number">0x000000C5</span>, <span class="hljs-number">0x00000065</span>, <span class="hljs-number">0x0000006A</span>, <span class="hljs-number">0x000000FF</span>, <span class="hljs-number">0x000000C9</span>, <span class="hljs-number">0x0000005D</span>, <span class="hljs-number">0x00000034</span>, <span class="hljs-number">0x000000AD</span>, <span class="hljs-number">0x000000EA</span>, <span class="hljs-number">0x000000B1</span>, <span class="hljs-number">0x00000020</span>, <span class="hljs-number">0x0000004B</span>, <span class="hljs-number">0x000000DC</span>, <span class="hljs-number">0x000000BD</span>, <span class="hljs-number">0x000000D2</span>, <span class="hljs-number">0x00000035</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000084</span>, <span class="hljs-number">0x00000035</span>, <span class="hljs-number">0x00000071</span>, <span class="hljs-number">0x000000EC</span>, <span class="hljs-number">0x000000E0</span>, <span class="hljs-number">0x00000048</span>, <span class="hljs-number">0x0000008E</span>, <span class="hljs-number">0x000000EA</span>, <span class="hljs-number">0x0000007B</span>, <span class="hljs-number">0x000000AA</span>, <span class="hljs-number">0x000000CF</span>]<br>_key=<span class="hljs-string">&quot;XaleidscopiX&quot;</span><br>key=[]<br>flag=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> _key:<br>    key.append(<span class="hljs-built_in">ord</span>(i))<br><span class="hljs-comment">#print(key)</span><br><br>keystream=rc4_decrypt(enc, key)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    flag.append(enc[i]^keystream[i]^<span class="hljs-number">7</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag]))<br></code></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>flag：0xGame{RC4_15_4_b4s1c&amp;fl3x1bl3_3ncrYp710n4lg0r17hm}</p>
</blockquote>
<h2 id="Q-≧▽≦-T"><a href="#Q-≧▽≦-T" class="headerlink" title="Q(≧▽≦)T"></a>Q(≧▽≦)T</h2><blockquote>
<p>考点：QT程序逆向、crackme、动态调试、RC4、哈希校验</p>
</blockquote>
<ul>
<li><p>附件程序运行如图，是个序列号生成器：</p>
<p><img src="/../images/image-20251024212602045.png" alt="运行"></p>
</li>
<li><p>用IDA打开，出现的是start函数， 看不出什么东西来</p>
<p><img src="/../images/image-20251024214150526.png" alt="start函数"></p>
<p>shift+F12看看字符串表，可以发现两串可疑的字符串</p>
<p><img src="/../images/image-20251024214208963.png" alt="可疑的字符串"></p>
<p>跟踪过去可以找到这样一个函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> __fastcall <span class="hljs-title function_">sub_140001890</span><span class="hljs-params">(__int64 a1, __int64 a2, __int64 a3, __int64 a4)</span><br>&#123;<br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v5; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v6; <span class="hljs-comment">// [rsp+80h] [rbp-1F8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v7; <span class="hljs-comment">// [rsp+88h] [rbp-1F0h]</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v8; <span class="hljs-comment">// [rsp+90h] [rbp-1E8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v9; <span class="hljs-comment">// [rsp+98h] [rbp-1E0h]</span><br>  __int64 Block; <span class="hljs-comment">// [rsp+A0h] [rbp-1D8h] BYREF</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v11; <span class="hljs-comment">// [rsp+A8h] [rbp-1D0h]</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v12[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+B0h] [rbp-1C8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v13[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+D0h] [rbp-1A8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v14[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+F0h] [rbp-188h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v15; <span class="hljs-comment">// [rsp+110h] [rbp-168h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v16[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+130h] [rbp-148h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v17[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+150h] [rbp-128h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v18; <span class="hljs-comment">// [rsp+160h] [rbp-118h]</span><br>  __m128i v19[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+170h] [rbp-108h] BYREF</span><br>  __m128i v20; <span class="hljs-comment">// [rsp+190h] [rbp-E8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v21[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+1B0h] [rbp-C8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v22[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+1D0h] [rbp-A8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v23; <span class="hljs-comment">// [rsp+1E0h] [rbp-98h]</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v24[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+1F0h] [rbp-88h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v25[<span class="hljs-number">13</span>]; <span class="hljs-comment">// [rsp+210h] [rbp-68h] BYREF</span><br><br>  ((<span class="hljs-type">void</span> (__fastcall *)(<span class="hljs-type">void</span> *, <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 **, _QWORD, <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 **))QLineEdit::text)(<br>    QLineEdit::text,<br>    v25,<br>    *(_QWORD *)(*(_QWORD *)(a4 + <span class="hljs-number">40</span>) + <span class="hljs-number">16LL</span>),<br>    v25);<br>  QString::trimmed_helper(QLineEdit::text, v25, v25, v12);<br>  <span class="hljs-keyword">if</span> ( v25[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v25[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>    <span class="hljs-built_in">free</span>(QLineEdit::text);<br>  ((<span class="hljs-type">void</span> (__fastcall *)(<span class="hljs-type">void</span> *, <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 **, _QWORD, <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 **))QLineEdit::text)(<br>    QLineEdit::text,<br>    v25,<br>    *(_QWORD *)(*(_QWORD *)(a4 + <span class="hljs-number">40</span>) + <span class="hljs-number">24LL</span>),<br>    v13);<br>  <span class="hljs-keyword">if</span> ( v12[<span class="hljs-number">2</span>] == (<span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *)<span class="hljs-number">4</span> )<br>  &#123;<br>    QString::toUtf8_helper(QLineEdit::text, v25, v12, v14);<br>    Block = (__int64)v14[<span class="hljs-number">2</span>];<br>    v11 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)v14[<span class="hljs-number">1</span>];<br>    QCryptographicHash::hash(&amp;Block, v25, &amp;Block, &amp;v15, <span class="hljs-number">4LL</span>);<br>    sub_140001620((__int64)&amp;Block, (__int64)v25, a4, (__int64)v16);<br>    Block = <span class="hljs-number">64LL</span>;<br>    v11 = <span class="hljs-string">&quot;c94201919ec7463313c747d0a27fabcabf1400fa1e9a64d36a6b1a7e7b12ae68&quot;</span>;<br>    QString::fromUtf8(&amp;Block, v25, &amp;Block, v17);<br>    <span class="hljs-keyword">if</span> ( v18 == v16[<span class="hljs-number">2</span>]<br>      &amp;&amp; (v8 = v18, v6 = v18, v9 = v16[<span class="hljs-number">1</span>], v7 = v17[<span class="hljs-number">1</span>], (<span class="hljs-type">unsigned</span> __int8)QtPrivate::equalStrings(&amp;Block, v25, &amp;v6, &amp;v8)) )<br>    &#123;<br>      QString::toUtf8_helper(&amp;Block, v25, v13, v19);<br>      sub_1400016F0((__int64)&amp;Block, (__int64)v25, a4, &amp;v20, v19, (__int64)v14);<br>      sub_140001620((__int64)&amp;Block, (__int64)v25, a4, (__int64)v21);<br>      Block = <span class="hljs-number">72LL</span>;<br>      v11 = <span class="hljs-string">&quot;af33da5e152c15863b3a03c87601899a37d51b8b8168f65aca65352d3669e91959300ccb&quot;</span>;<br>      QString::fromUtf8(&amp;Block, v25, &amp;Block, v22);<br>      <span class="hljs-keyword">if</span> ( v23 == v21[<span class="hljs-number">2</span>]<br>        &amp;&amp; (v8 = v23, v9 = v21[<span class="hljs-number">1</span>],<br>                      v6 = v23,<br>                      v7 = v22[<span class="hljs-number">1</span>],<br>                      (<span class="hljs-type">unsigned</span> __int8)QtPrivate::equalStrings(&amp;Block, v25, &amp;v6, &amp;v8)) )<br>      &#123;<br>        Block = <span class="hljs-number">21LL</span>;<br>        v11 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;unk_1400061D8;<br>        QString::fromUtf8(&amp;Block, v25, &amp;Block, v25);<br>        Block = <span class="hljs-number">12LL</span>;<br>        v11 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;unk_1400061EE;<br>        QString::fromUtf8(&amp;Block, v25, &amp;Block, v24);<br>        QMessageBox::information(&amp;Block, v25, v24, a4, v25, <span class="hljs-number">1024LL</span>);<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        Block = <span class="hljs-number">22LL</span>;<br>        v11 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;unk_1400061C1;<br>        QString::fromUtf8(&amp;Block, v25, &amp;Block, v25);<br>        Block = <span class="hljs-number">12LL</span>;<br>        v11 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;unk_140006104;<br>        QString::fromUtf8(&amp;Block, v25, &amp;Block, v24);<br>        QMessageBox::warning(&amp;Block, v25, v24, a4, v25, <span class="hljs-number">1024LL</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( v24[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v24[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-built_in">free</span>(&amp;Block);<br>      <span class="hljs-keyword">if</span> ( v25[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v25[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-built_in">free</span>(&amp;Block);<br>      <span class="hljs-keyword">if</span> ( v22[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v22[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-built_in">free</span>(&amp;Block);<br>      <span class="hljs-keyword">if</span> ( v21[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v21[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-built_in">free</span>(&amp;Block);<br>      <span class="hljs-keyword">if</span> ( v20.m128i_i64[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub((<span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *)v20.m128i_i64[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-built_in">free</span>(&amp;Block);<br>      <span class="hljs-keyword">if</span> ( !v19[<span class="hljs-number">0</span>].m128i_i64[<span class="hljs-number">0</span>] || _InterlockedSub((<span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *)v19[<span class="hljs-number">0</span>].m128i_i64[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-keyword">goto</span> LABEL_45;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      Block = <span class="hljs-number">25LL</span>;<br>      v11 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;unk_140006159;<br>      QString::fromUtf8(&amp;Block, v25, &amp;Block, v25);<br>      Block = <span class="hljs-number">12LL</span>;<br>      v11 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;unk_140006104;<br>      QString::fromUtf8(&amp;Block, v25, &amp;Block, v24);<br>      QMessageBox::warning(&amp;Block, v25, v24, a4, v25, <span class="hljs-number">1024LL</span>);<br>      <span class="hljs-keyword">if</span> ( v24[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v24[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-built_in">free</span>(&amp;Block);<br>      <span class="hljs-keyword">if</span> ( !v25[<span class="hljs-number">0</span>] || _InterlockedSub(v25[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-keyword">goto</span> LABEL_45;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(&amp;Block);<br>LABEL_45:<br>    <span class="hljs-keyword">if</span> ( v17[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v17[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>      <span class="hljs-built_in">free</span>(&amp;Block);<br>    <span class="hljs-keyword">if</span> ( v16[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v16[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>      <span class="hljs-built_in">free</span>(&amp;Block);<br>    <span class="hljs-keyword">if</span> ( v15 &amp;&amp; !_InterlockedSub(v15, <span class="hljs-number">1u</span>) )<br>      <span class="hljs-built_in">free</span>(&amp;Block);<br>    <span class="hljs-keyword">if</span> ( v14[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v14[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>      <span class="hljs-built_in">free</span>(&amp;Block);<br>    <span class="hljs-keyword">goto</span> LABEL_10;<br>  &#125;<br>  Block = <span class="hljs-number">35LL</span>;<br>  v11 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;unk_1400060E0;<br>  QString::fromUtf8(&amp;Block, v25, &amp;Block, v25);<br>  Block = <span class="hljs-number">12LL</span>;<br>  v11 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;unk_140006104;<br>  QString::fromUtf8(&amp;Block, v25, &amp;Block, v24);<br>  QMessageBox::warning(&amp;Block, v25, v24, a4, v25, <span class="hljs-number">1024LL</span>);<br>  <span class="hljs-keyword">if</span> ( v24[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v24[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>  &#123;<br>    <span class="hljs-built_in">free</span>(&amp;Block);<br>    v5 = v25[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> ( !v25[<span class="hljs-number">0</span>] )<br>      <span class="hljs-keyword">goto</span> LABEL_10;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    v5 = v25[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> ( !v25[<span class="hljs-number">0</span>] )<br>      <span class="hljs-keyword">goto</span> LABEL_10;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( !_InterlockedSub(v5, <span class="hljs-number">1u</span>) )<br>    <span class="hljs-built_in">free</span>(&amp;Block);<br>LABEL_10:<br>  <span class="hljs-keyword">if</span> ( v13[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v13[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>    <span class="hljs-built_in">free</span>(&amp;Block);<br>  <span class="hljs-keyword">if</span> ( v12[<span class="hljs-number">0</span>] )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( !_InterlockedSub(v12[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>      <span class="hljs-built_in">free</span>(&amp;Block);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>程序的图形化界面是QT实现的，引入了QT的很多类，所以阅读难度还是有点大的。借助AI优化一下以及一点点动态调试辅助分析可以得到：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall <span class="hljs-title function_">check</span><span class="hljs-params">(__int64 a1, __int64 a2, __int64 a3, __int64 mainWindows)</span><br>&#123;<br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v5; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v6; <span class="hljs-comment">// [rsp+80h] [rbp-1F8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v7; <span class="hljs-comment">// [rsp+88h] [rbp-1F0h]</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v8; <span class="hljs-comment">// [rsp+90h] [rbp-1E8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v9; <span class="hljs-comment">// [rsp+98h] [rbp-1E0h]</span><br>  __int64 Block; <span class="hljs-comment">// [rsp+A0h] [rbp-1D8h] BYREF</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *stringData; <span class="hljs-comment">// [rsp+A8h] [rbp-1D0h]</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *usernameUtf8[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+B0h] [rbp-1C8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *passwordUtf8[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+D0h] [rbp-1A8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *usernameBytes[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+F0h] [rbp-188h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *usernameHash; <span class="hljs-comment">// [rsp+110h] [rbp-168h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *usernameHashHex[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+130h] [rbp-148h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v17[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+150h] [rbp-128h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *expectedUserHashSize; <span class="hljs-comment">// [rsp+160h] [rbp-118h]</span><br>  __m128i passwordBytes[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+170h] [rbp-108h] BYREF</span><br>  __m128i v20; <span class="hljs-comment">// [rsp+190h] [rbp-E8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v21[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+1B0h] [rbp-C8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v22[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+1D0h] [rbp-A8h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v23; <span class="hljs-comment">// [rsp+1E0h] [rbp-98h]</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v24[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+1F0h] [rbp-88h] BYREF</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *tempBuffer[<span class="hljs-number">13</span>]; <span class="hljs-comment">// [rsp+210h] [rbp-68h] BYREF</span><br><br>  (QLineEdit::text)(QLineEdit::text, tempBuffer, *(*(mainWindows + <span class="hljs-number">40</span>) + <span class="hljs-number">16LL</span>), tempBuffer);<br>  QString::trimmed_helper(QLineEdit::text, tempBuffer, tempBuffer, usernameUtf8);<br>  <span class="hljs-keyword">if</span> ( tempBuffer[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(tempBuffer[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>    <span class="hljs-built_in">free</span>(QLineEdit::text);<br>  (QLineEdit::text)(QLineEdit::text, tempBuffer, *(*(mainWindows + <span class="hljs-number">40</span>) + <span class="hljs-number">24LL</span>), passwordUtf8);<br>  <span class="hljs-keyword">if</span> ( usernameUtf8[<span class="hljs-number">2</span>] == <span class="hljs-number">4</span> )                   <span class="hljs-comment">// 长度检验</span><br>  &#123;<br>    QString::toUtf8_helper(QLineEdit::text, tempBuffer, usernameUtf8, usernameBytes);<br>    Block = usernameBytes[<span class="hljs-number">2</span>];<br>    stringData = usernameBytes[<span class="hljs-number">1</span>];<br>    QCryptographicHash::hash(&amp;Block, tempBuffer, &amp;Block, &amp;usernameHash, <span class="hljs-number">4LL</span>);<span class="hljs-comment">// 求输入的用户名hash</span><br>    toHex(&amp;Block, tempBuffer, mainWindows, usernameHashHex);<br>    Block = <span class="hljs-number">64LL</span>;<br>    stringData = <span class="hljs-string">&quot;c94201919ec7463313c747d0a27fabcabf1400fa1e9a64d36a6b1a7e7b12ae68&quot;</span>;<span class="hljs-comment">// 预设哈希值</span><br>    QString::fromUtf8(&amp;Block, tempBuffer, &amp;Block, v17);<br>    <span class="hljs-keyword">if</span> ( expectedUserHashSize == usernameHashHex[<span class="hljs-number">2</span>]<br>      &amp;&amp; (v8 = expectedUserHashSize,<br>          v6 = expectedUserHashSize,<br>          v9 = usernameHashHex[<span class="hljs-number">1</span>],<br>          v7 = v17[<span class="hljs-number">1</span>],<br>          QtPrivate::equalStrings(&amp;Block, tempBuffer, &amp;v6, &amp;v8)) )<span class="hljs-comment">// 用户名检验</span><br>    &#123;<br>      QString::toUtf8_helper(&amp;Block, tempBuffer, passwordUtf8, passwordBytes);<br>      RC4(&amp;Block, tempBuffer, mainWindows, &amp;v20, passwordBytes, usernameBytes);<br>      toHex(&amp;Block, tempBuffer, mainWindows, v21);<br>      Block = <span class="hljs-number">72LL</span>;<br>      stringData = <span class="hljs-string">&quot;af33da5e152c15863b3a03c87601899a37d51b8b8168f65aca65352d3669e91959300ccb&quot;</span>;<br>      QString::fromUtf8(&amp;Block, tempBuffer, &amp;Block, v22);<br>      <span class="hljs-keyword">if</span> ( v23 == v21[<span class="hljs-number">2</span>]<br>        &amp;&amp; (v8 = v23, v9 = v21[<span class="hljs-number">1</span>], v6 = v23, v7 = v22[<span class="hljs-number">1</span>], QtPrivate::equalStrings(&amp;Block, tempBuffer, &amp;v6, &amp;v8)) )<span class="hljs-comment">// 验证通过</span><br>      &#123;<br>        Block = <span class="hljs-number">21LL</span>;<br>        stringData = &amp;unk_7FF7F2EB61D8;<br>        QString::fromUtf8(&amp;Block, tempBuffer, &amp;Block, tempBuffer);<br>        Block = <span class="hljs-number">12LL</span>;<br>        stringData = &amp;unk_7FF7F2EB61EE;<br>        QString::fromUtf8(&amp;Block, tempBuffer, &amp;Block, v24);<br>        QMessageBox::information(&amp;Block, tempBuffer, v24, mainWindows, tempBuffer, <span class="hljs-number">1024LL</span>);<br>      &#125;<br>      <span class="hljs-keyword">else</span>                                      <span class="hljs-comment">// 密码验证不通过</span><br>      &#123;<br>        Block = <span class="hljs-number">22LL</span>;<br>        stringData = &amp;unk_7FF7F2EB61C1;<br>        QString::fromUtf8(&amp;Block, tempBuffer, &amp;Block, tempBuffer);<br>        Block = <span class="hljs-number">12LL</span>;<br>        stringData = &amp;unk_7FF7F2EB6104;<br>        QString::fromUtf8(&amp;Block, tempBuffer, &amp;Block, v24);<br>        QMessageBox::warning(&amp;Block, tempBuffer, v24, mainWindows, tempBuffer, <span class="hljs-number">1024LL</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( v24[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v24[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-built_in">free</span>(&amp;Block);<br>      <span class="hljs-keyword">if</span> ( tempBuffer[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(tempBuffer[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-built_in">free</span>(&amp;Block);<br>      <span class="hljs-keyword">if</span> ( v22[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v22[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-built_in">free</span>(&amp;Block);<br>      <span class="hljs-keyword">if</span> ( v21[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v21[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-built_in">free</span>(&amp;Block);<br>      <span class="hljs-keyword">if</span> ( v20.m128i_i64[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v20.m128i_i64[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-built_in">free</span>(&amp;Block);<br>      <span class="hljs-keyword">if</span> ( !passwordBytes[<span class="hljs-number">0</span>].m128i_i64[<span class="hljs-number">0</span>] || _InterlockedSub(passwordBytes[<span class="hljs-number">0</span>].m128i_i64[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-keyword">goto</span> LABEL_45;<br>    &#125;<br>    <span class="hljs-keyword">else</span>                                        <span class="hljs-comment">// 用户名验证不通过</span><br>    &#123;<br>      Block = <span class="hljs-number">25LL</span>;<br>      stringData = &amp;unk_7FF7F2EB6159;<br>      QString::fromUtf8(&amp;Block, tempBuffer, &amp;Block, tempBuffer);<br>      Block = <span class="hljs-number">12LL</span>;<br>      stringData = &amp;unk_7FF7F2EB6104;<br>      QString::fromUtf8(&amp;Block, tempBuffer, &amp;Block, v24);<br>      QMessageBox::warning(&amp;Block, tempBuffer, v24, mainWindows, tempBuffer, <span class="hljs-number">1024LL</span>);<br>      <span class="hljs-keyword">if</span> ( v24[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v24[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-built_in">free</span>(&amp;Block);<br>      <span class="hljs-keyword">if</span> ( !tempBuffer[<span class="hljs-number">0</span>] || _InterlockedSub(tempBuffer[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>        <span class="hljs-keyword">goto</span> LABEL_45;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(&amp;Block);<br>LABEL_45:<br>    <span class="hljs-keyword">if</span> ( v17[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v17[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>      <span class="hljs-built_in">free</span>(&amp;Block);<br>    <span class="hljs-keyword">if</span> ( usernameHashHex[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(usernameHashHex[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>      <span class="hljs-built_in">free</span>(&amp;Block);<br>    <span class="hljs-keyword">if</span> ( usernameHash &amp;&amp; !_InterlockedSub(usernameHash, <span class="hljs-number">1u</span>) )<br>      <span class="hljs-built_in">free</span>(&amp;Block);<br>    <span class="hljs-keyword">if</span> ( usernameBytes[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(usernameBytes[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>      <span class="hljs-built_in">free</span>(&amp;Block);<br>    <span class="hljs-keyword">goto</span> LABEL_10;<br>  &#125;<br>  Block = <span class="hljs-number">35LL</span>;<br>  stringData = &amp;unk_7FF7F2EB60E0;<br>  QString::fromUtf8(&amp;Block, tempBuffer, &amp;Block, tempBuffer);<br>  Block = <span class="hljs-number">12LL</span>;<br>  stringData = &amp;unk_7FF7F2EB6104;<br>  QString::fromUtf8(&amp;Block, tempBuffer, &amp;Block, v24);<br>  QMessageBox::warning(&amp;Block, tempBuffer, v24, mainWindows, tempBuffer, <span class="hljs-number">1024LL</span>);<br>  <span class="hljs-keyword">if</span> ( v24[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(v24[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>  &#123;<br>    <span class="hljs-built_in">free</span>(&amp;Block);<br>    v5 = tempBuffer[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> ( !tempBuffer[<span class="hljs-number">0</span>] )<br>      <span class="hljs-keyword">goto</span> LABEL_10;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    v5 = tempBuffer[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> ( !tempBuffer[<span class="hljs-number">0</span>] )<br>      <span class="hljs-keyword">goto</span> LABEL_10;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( !_InterlockedSub(v5, <span class="hljs-number">1u</span>) )<br>    <span class="hljs-built_in">free</span>(&amp;Block);<br>LABEL_10:<br>  <span class="hljs-keyword">if</span> ( passwordUtf8[<span class="hljs-number">0</span>] &amp;&amp; !_InterlockedSub(passwordUtf8[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>    <span class="hljs-built_in">free</span>(&amp;Block);<br>  <span class="hljs-keyword">if</span> ( usernameUtf8[<span class="hljs-number">0</span>] )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( !_InterlockedSub(usernameUtf8[<span class="hljs-number">0</span>], <span class="hljs-number">1u</span>) )<br>      <span class="hljs-built_in">free</span>(&amp;Block);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>可以看到用户名采用的是哈希检验，密码采用的是RC4检验，密钥为用户名。</p>
<p>密码检验套在用户名检验里，所以第一步先解出用户名。借助在线解密网站<a href="https://hashes.com/zh/decrypt/hash">MD5 在線免費解密</a>可以得到用户名”Kath”：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-20%20215617.png" alt="sha256解密得到用户名"></p>
<p>接下来求解密码。RC4函数如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">__m128i *__fastcall <span class="hljs-title function_">RC4</span><span class="hljs-params">(</span><br><span class="hljs-params">        __int64 a1,</span><br><span class="hljs-params">        __int64 a2,</span><br><span class="hljs-params">        __int64 a3,</span><br><span class="hljs-params">        __m128i *a4,</span><br><span class="hljs-params">        <span class="hljs-type">const</span> __m128i *passwordBytes,</span><br><span class="hljs-params">        __int64 usernameBytes)</span><br>&#123;<br>  <span class="hljs-keyword">volatile</span> <span class="hljs-type">signed</span> __int32 *v6; <span class="hljs-comment">// rax</span><br>  __int64 v7; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">bool</span> v8; <span class="hljs-comment">// zf</span><br>  <span class="hljs-type">int</span> keyLength; <span class="hljs-comment">// r11d</span><br>  <span class="hljs-type">int</span> *sBoxPtr; <span class="hljs-comment">// r8</span><br>  __m128i initVal; <span class="hljs-comment">// xmm0</span><br>  __m128i *sBoxInitPtr; <span class="hljs-comment">// rax</span><br>  __m128i v15; <span class="hljs-comment">// xmm2</span><br>  __m128i currentVal; <span class="hljs-comment">// xmm1</span><br>  __int64 keyBytes; <span class="hljs-comment">// rdi</span><br>  <span class="hljs-type">int</span> i_ksa; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> j_ksa; <span class="hljs-comment">// r9d</span><br>  <span class="hljs-type">int</span> v20; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> sBoxVal; <span class="hljs-comment">// r10d</span><br>  __int64 sum; <span class="hljs-comment">// kr00_8</span><br>  __int64 passwordIndex; <span class="hljs-comment">// r12</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// ebp</span><br>  __int64 i; <span class="hljs-comment">// rdi</span><br>  <span class="hljs-type">int</span> temp; <span class="hljs-comment">// eax</span><br>  __int64 v27; <span class="hljs-comment">// kr08_8</span><br>  <span class="hljs-type">char</span> v28; <span class="hljs-comment">// r14</span><br>  _DWORD S[<span class="hljs-number">256</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-438h] BYREF</span><br>  <span class="hljs-type">char</span> v31; <span class="hljs-comment">// [rsp+420h] [rbp-38h] BYREF</span><br><br>  v6 = passwordBytes-&gt;m128i_i64[<span class="hljs-number">0</span>];<br>  v7 = passwordBytes[<span class="hljs-number">1</span>].m128i_i64[<span class="hljs-number">0</span>];<br>  v8 = passwordBytes-&gt;m128i_i64[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>;<br>  *a4 = _mm_loadu_si128(passwordBytes);<br>  a4[<span class="hljs-number">1</span>].m128i_i64[<span class="hljs-number">0</span>] = v7;<br>  <span class="hljs-keyword">if</span> ( !v8 )<br>    _InterlockedAdd(v6, <span class="hljs-number">1u</span>);<br>  keyLength = *(usernameBytes + <span class="hljs-number">16</span>);<br>  sBoxPtr = S;<br>  initVal = _mm_load_si128(&amp;xmmword_7FF7F2EB6200);<br>  sBoxInitPtr = S;<br>  v15 = _mm_load_si128(&amp;xmmword_7FF7F2EB6210);<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    currentVal = initVal;<br>    ++sBoxInitPtr;<br>    initVal = _mm_add_epi32(initVal, v15);<br>    sBoxInitPtr[<span class="hljs-number">-1</span>] = currentVal;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( sBoxInitPtr != &amp;v31 );<br>  keyBytes = *(usernameBytes + <span class="hljs-number">8</span>);<br>  i_ksa = <span class="hljs-number">0</span>;<br>  j_ksa = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">do</span>                                            <span class="hljs-comment">// RC4_KSA</span><br>  &#123;<br>    v20 = i_ksa;<br>    sBoxVal = *sBoxPtr;<br>    ++i_ksa;<br>    ++sBoxPtr;<br>    sum = sBoxVal + j_ksa + *(keyBytes + v20 % keyLength);<br>    j_ksa = (HIBYTE(sum) + sum) - HIBYTE(HIDWORD(sum));<span class="hljs-comment">// j = j % 256</span><br>    *(sBoxPtr - <span class="hljs-number">1</span>) = S[j_ksa];<br>    S[j_ksa] = sBoxVal;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( i_ksa != <span class="hljs-number">256</span> );<br>  <span class="hljs-keyword">if</span> ( passwordBytes[<span class="hljs-number">1</span>].m128i_i64[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">0</span> )      <span class="hljs-comment">// RC4_PRGA和RC4decrypt</span><br>  &#123;<br>    passwordIndex = <span class="hljs-number">0LL</span>;<br>    j = <span class="hljs-number">0</span>;<br>    LODWORD(i) = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>      i = ((i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>);<br>      temp = S[i];<br>      j = (temp + j) % <span class="hljs-number">256</span>;<br>      S[i] = S[j];<br>      S[j] = temp;<br>      v27 = S[i] + temp;<br>      v28 = *(passwordBytes-&gt;m128i_i64[<span class="hljs-number">1</span>] + passwordIndex) ^ S[(HIBYTE(v27) + v27) - HIBYTE(HIDWORD(v27))];<span class="hljs-comment">// v28 = passwordBytes[passwordIndex] ^ S[(S[i]+S[j])%256]</span><br>      <span class="hljs-keyword">if</span> ( !a4-&gt;m128i_i64[<span class="hljs-number">0</span>] || *a4-&gt;m128i_i64[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">1</span> )<br>        QByteArray::reallocData(i, passwordBytes, a4[<span class="hljs-number">1</span>].m128i_i64[<span class="hljs-number">0</span>], a4, <span class="hljs-number">1LL</span>, *initVal.m128i_i64);<br>      *(a4-&gt;m128i_i64[<span class="hljs-number">1</span>] + passwordIndex++) = v28;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ( passwordBytes[<span class="hljs-number">1</span>].m128i_i64[<span class="hljs-number">0</span>] &gt; passwordIndex );<br>  &#125;<br>  <span class="hljs-keyword">return</span> a4;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>可以看出是标准的RC4，直接复现加密函数即可。解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_ksa</span>(<span class="hljs-params">key</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>    <span class="hljs-keyword">return</span> S<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_prga</span>(<span class="hljs-params">S, n</span>):<br>    i = j = <span class="hljs-number">0</span><br>    keystream = []<br>    S = S[:]  <span class="hljs-comment"># copy</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        k = S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        keystream.append(k)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(keystream)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_decrypt</span>(<span class="hljs-params">key, ciphertext</span>):<br>    S = rc4_ksa(key)<br>    ks = rc4_prga(S, <span class="hljs-built_in">len</span>(ciphertext))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(c ^ k <span class="hljs-keyword">for</span> c, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(ciphertext, ks))<br><br>key = <span class="hljs-string">b&quot;Kath&quot;</span><br>cipher = <span class="hljs-string">&quot;af33da5e152c15863b3a03c87601899a37d51b8b8168f65aca65352d3669e91959300ccb&quot;</span><br><br><span class="hljs-comment"># 转成bytes</span><br>ciphertext = <span class="hljs-built_in">bytes</span>.fromhex(cipher)<br><br><span class="hljs-comment"># 解密</span><br>plaintext = rc4_decrypt(key, ciphertext)<br><br><span class="hljs-comment"># 输出</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Plaintext:&quot;</span>, plaintext)<br><br></code></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>flag：0xGame{ce5e5621-3d6b-4429-b72a-957abf353390}</p>
</blockquote>
<h2 id="Calamity-Fortune"><a href="#Calamity-Fortune" class="headerlink" title="Calamity_Fortune"></a>Calamity_Fortune</h2><blockquote>
<p><del>这题，哈哈，数据提取错了题目截止提交48分钟后我才发现这个问题解出flag😄🫠我永远都不会原谅我自己了😄哈哈哈哈</del></p>
<p>考点：函数重写、复杂加密算法逆向、动态调试绕过程序机制</p>
</blockquote>
<ul>
<li><p>附件程序双击运行会提示如图</p>
<p><img src="/../images/image-20251021220052848.png" alt="双击提示"></p>
<p>然而，随便输一个数字的话会闪退</p>
</li>
<li><p>程序用IDA打开，main函数反编译如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// ecx</span><br>  __int64 v7; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">char</span> v8; <span class="hljs-comment">// cl</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [rsp+20h] [rbp-58h] BYREF</span><br>  <span class="hljs-type">char</span> v11[<span class="hljs-number">9</span>]; <span class="hljs-comment">// [rsp+27h] [rbp-51h] BYREF</span><br>  _QWORD v12[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-48h]</span><br>  <span class="hljs-type">int</span> v13; <span class="hljs-comment">// [rsp+58h] [rbp-20h]</span><br>  __int16 v14; <span class="hljs-comment">// [rsp+5Ch] [rbp-1Ch]</span><br><br>  sub_401600(argc, argv, envp);<br>  SetConsoleOutputCP(<span class="hljs-number">0xFDE9u</span>);<br>  SetConsoleCP(<span class="hljs-number">0xFDE9u</span>);<br>  v3 = time64(<span class="hljs-number">0LL</span>);<br>  srand(v3);<br>  v10 = <span class="hljs-number">0</span>;<br>  v4 = rand();<br>  <span class="hljs-built_in">puts</span>(&amp;Buffer);<br>  v5 = <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v10);<br>  v6 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v10 == v4 % <span class="hljs-number">100</span> + <span class="hljs-number">1</span> )<br>    &#123;<br>      MessageBoxA(<span class="hljs-number">0LL</span>, <span class="hljs-string">&quot;You guessed right! Is it really right?&quot;</span>, <span class="hljs-string">&quot;Result&quot;</span>, <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v7 = <span class="hljs-number">0LL</span>;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You guessed it wrong!&quot;</span>);<br>      <span class="hljs-built_in">puts</span>(&amp;byte_405098);<br>      v12[<span class="hljs-number">0</span>] = <span class="hljs-number">0xD0F0C00002B1973L</span>L;<br>      v12[<span class="hljs-number">1</span>] = <span class="hljs-number">0x182B1A043E1F082BL</span>L;<br>      v12[<span class="hljs-number">2</span>] = <span class="hljs-number">0x151236080A0D071CL</span>L;<br>      v12[<span class="hljs-number">3</span>] = <span class="hljs-number">0xA150C0111330622L</span>L;<br>      v12[<span class="hljs-number">4</span>] = <span class="hljs-number">0xD2B190804073E26L</span>L;<br>      v13 = <span class="hljs-number">251992113</span>;<br>      v14 = <span class="hljs-number">5130</span>;<br>      <span class="hljs-built_in">strcpy</span>(v11, <span class="hljs-string">&quot;Calamity&quot;</span>);<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        v8 = *((_BYTE *)v12 + v7) ^ v11[v7 &amp; <span class="hljs-number">7</span>];<br>        ++v7;<br>        <span class="hljs-built_in">putchar</span>(v8);<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v7 != <span class="hljs-number">46</span> );<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> v6;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>v12看着像密文，的确是密文，但不是flag的密文，因为它在输入错误的提示里。暂时没有发现flag检验函数，尝试先绕过数字检验</p>
<p>在汇编窗口找到数字判断语句（可以在反编译界面选中判断语句所在行，右键Jump to Disasm到达）</p>
<p><img src="/../images/image-20251021220816989.png" alt="判断语句的汇编"></p>
<p>可以看到这是一个jz，只需要在执行到这句但是还没步过时，修改ZF标志位即可绕过。在此处F2下断点，开始动调程序。随便输个数字，按回车</p>
<p><img src="/../images/image-20251021220921683.png" alt="随便输个数字"></p>
<p>此时程序停在jz处，即我们下断点的地方</p>
<p><img src="/../images/image-20251021221202643.png" alt="停在jz处"></p>
<p>在右上侧寄存器窗口找到ZF</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-21%20221235.png" alt="找到ZF"></p>
<p>双击ZF把它的值改成0x1</p>
<p><img src="/../images/image-20251021221613970.png" alt="修改ZF标志位"></p>
<p>可以看到jz语句处有一条箭头出来了</p>
<p><img src="/../images/image-20251021221637985.png" alt="绿色箭头"></p>
<p>F8执行jz跳转，跟踪程序执行流。可以看到程序运行到一个类似输出函数的地方</p>
<p><img src="/../images/image-20251021222114925.png" alt="类似输出函数的地方"></p>
<p>这时候，在这里多试几次会发现MessageBoxA可以步入。当然要是步过这个call MessageBoxA会发现程序没有弹出窗口，倒是终端输出了新的句子，十分可疑</p>
<p><img src="/../images/image-20251021222341398.png" alt="终端的新输出"></p>
<p>所以在程序执行到call cs:MessageBoxA这句的时候按F7步入，就会发现这个MessageBoxA别有洞天</p>
<p><img src="/../images/image-20251021222417932.png" alt="别有洞天"></p>
<p>这显然不像是MessageBoxA应该有的操作。可以看到一个可疑的地址被放到了rax里，跟踪这个jmp看看（jmp rax处F7步入）</p>
<p><img src="/../images/image-20251021222757420.png" alt="jmp后"></p>
<p>可以看到程序运行到了一个新函数，F5反编译，反编译代码如下（函数有多个模块的加密处理，还是很复杂的，以下是经过变量名优化的代码）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">__int64 <span class="hljs-title function_">realMain</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> v0; <span class="hljs-comment">// dl</span><br>  <span class="hljs-type">char</span> *v1; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v2; <span class="hljs-comment">// dl</span><br>  <span class="hljs-type">char</span> *i; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> __int8 *pFlag1; <span class="hljs-comment">// r9</span><br>  _BYTE *pFlag; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v7; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">char</span> v8; <span class="hljs-comment">// dl</span><br>  <span class="hljs-type">char</span> *j; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *p_block0; <span class="hljs-comment">// r10</span><br>  <span class="hljs-type">unsigned</span> __int8 *current_1; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">int</span> shift; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> temp_2; <span class="hljs-comment">// r8d</span><br>  <span class="hljs-type">int</span> temp_1; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cureent_block; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> delta; <span class="hljs-comment">// r11d</span><br>  <span class="hljs-type">int</span> key_value; <span class="hljs-comment">// ebp</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> prev_block; <span class="hljs-comment">// r9d</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *block; <span class="hljs-comment">// r8</span><br>  <span class="hljs-type">int</span> rounds; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> next; <span class="hljs-comment">// edx</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> oriDelta; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">unsigned</span> __int8 *encrypted_bytes_1; <span class="hljs-comment">// r10</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *v24; <span class="hljs-comment">// rdi</span><br>  _DWORD *v25; <span class="hljs-comment">// r8</span><br>  _DWORD *v26; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> shift_1; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v28; <span class="hljs-comment">// edx</span><br>  _BYTE *v29; <span class="hljs-comment">// r9</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v30; <span class="hljs-comment">// r8d</span><br>  <span class="hljs-type">unsigned</span> __int64 k; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v32; <span class="hljs-comment">// dl</span><br>  _BYTE *current1; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">int</span> randNum; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> tmp; <span class="hljs-comment">// r8</span><br>  _BYTE *target; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">unsigned</span> __int8 *v37; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">unsigned</span> __int8 *end; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">unsigned</span> __int8 *current; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> *v40; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-type">int</span> m; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> *v42; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> n; <span class="hljs-comment">// dl</span><br>  <span class="hljs-type">char</span> v44; <span class="hljs-comment">// dl</span><br>  <span class="hljs-type">char</span> *ii; <span class="hljs-comment">// rax</span><br>  _QWORD key[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-218h] BYREF</span><br>  <span class="hljs-type">char</span> notice2[<span class="hljs-number">22</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-208h] BYREF</span><br>  __int16 v49; <span class="hljs-comment">// [rsp+46h] [rbp-1F2h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> block0; <span class="hljs-comment">// [rsp+50h] [rbp-1E8h] BYREF</span><br>  <span class="hljs-type">int</span> v51; <span class="hljs-comment">// [rsp+54h] [rbp-1E4h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> block10; <span class="hljs-comment">// [rsp+78h] [rbp-1C0h]</span><br>  _BYTE encrypted_bytes[<span class="hljs-number">44</span>]; <span class="hljs-comment">// [rsp+80h] [rbp-1B8h] BYREF</span><br>  <span class="hljs-type">int</span> v54; <span class="hljs-comment">// [rsp+ACh] [rbp-18Ch] BYREF</span><br>  _BYTE flag[<span class="hljs-number">44</span>]; <span class="hljs-comment">// [rsp+B0h] [rbp-188h] BYREF</span><br>  <span class="hljs-type">char</span> v56; <span class="hljs-comment">// [rsp+DCh] [rbp-15Ch] BYREF</span><br>  _QWORD enc[<span class="hljs-number">7</span>]; <span class="hljs-comment">// [rsp+E0h] [rbp-158h] BYREF</span><br>  <span class="hljs-type">int</span> v58; <span class="hljs-comment">// [rsp+118h] [rbp-120h]</span><br>  _BYTE base64_output[<span class="hljs-number">59</span>]; <span class="hljs-comment">// [rsp+120h] [rbp-118h] BYREF</span><br>  _BYTE end_1[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [rsp+15Bh] [rbp-DDh] BYREF</span><br>  <span class="hljs-type">char</span> temp[<span class="hljs-number">64</span>]; <span class="hljs-comment">// [rsp+160h] [rbp-D8h] BYREF</span><br>  <span class="hljs-type">char</span> notice1[<span class="hljs-number">85</span>]; <span class="hljs-comment">// [rsp+1A0h] [rbp-98h] BYREF</span><br>  _BYTE v63[<span class="hljs-number">3</span>]; <span class="hljs-comment">// [rsp+1F5h] [rbp-43h] BYREF</span><br><br>  v0 = <span class="hljs-number">79</span>;<br>  enc[<span class="hljs-number">0</span>] = <span class="hljs-number">0x280D30732B077874L</span>L;<br>  enc[<span class="hljs-number">1</span>] = <span class="hljs-number">0x242D00103573060BL</span>L;<br>  enc[<span class="hljs-number">2</span>] = <span class="hljs-number">0x141C3406727D2F73L</span>L;<br>  enc[<span class="hljs-number">3</span>] = <span class="hljs-number">0xA71137676362833L</span>L;<br>  enc[<span class="hljs-number">4</span>] = <span class="hljs-number">0xE232B242F04742AL</span>L;<br>  enc[<span class="hljs-number">5</span>] = <span class="hljs-number">0x2F373F03033D7310L</span>L;<br>  enc[<span class="hljs-number">6</span>] = <span class="hljs-number">0x77067C3612772D7DL</span>L;<br>  qmemcpy(key, <span class="hljs-string">&quot;Calamity_Fortune&quot;</span>, <span class="hljs-keyword">sizeof</span>(key));<br>  qmemcpy(<br>    notice1,<br>    <span class="hljs-string">&quot;Ofqni`&#x27;jfcb&#x27;ns&#x27;sont&#x27;afu+&#x27;sob&#x27;tretbvrbis&#x27;bidu~wsnhi&#x27;tohrkc&#x27;eb&#x27;f&#x27;wnbdb&#x27;ha&#x27;dflb&#x27;ahu&#x27;~hry&quot;</span>,<br>    <span class="hljs-keyword">sizeof</span>(notice1));<br>  v1 = notice1;<br>  v58 = <span class="hljs-number">0x37233104</span>;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    *v1++ = v0 ^ <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">if</span> ( v63 == v1 )<br>      <span class="hljs-keyword">break</span>;<br>    v0 = *v1;<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(notice1);                                <span class="hljs-comment">// Having made it this far,......</span><br>  v2 = <span class="hljs-number">87</span>;<br>  qmemcpy(notice2, <span class="hljs-string">&quot;Wkbftb&#x27;Niwrs&#x27;~hru&#x27;akf`&quot;</span>, <span class="hljs-keyword">sizeof</span>(notice2));<br>  <span class="hljs-keyword">for</span> ( i = notice2; ; v2 = *i )<br>  &#123;<br>    *i++ = v2 ^ <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">if</span> ( i == &amp;v49 )<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(notice2);                                <span class="hljs-comment">// Please input your flag</span><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%44s&quot;</span>, flag);<br>  v4 = flag[<span class="hljs-number">0</span>];<br>  v56 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( !flag[<span class="hljs-number">0</span>] )<br>    <span class="hljs-keyword">goto</span> LABEL_11;<br>  pFlag1 = flag;<br>  pFlag = flag;<br>  <span class="hljs-keyword">do</span><br>    v7 = <span class="hljs-number">1</span> - flag + pFlag++;<br>  <span class="hljs-keyword">while</span> ( *pFlag );<br>  <span class="hljs-keyword">if</span> ( v7 != <span class="hljs-number">44</span> )<br>  &#123;<br>LABEL_11:                                       <span class="hljs-comment">// 错误时的输出</span><br>    v8 = <span class="hljs-number">75</span>;<br>    qmemcpy(temp, <span class="hljs-string">&quot;Kbi`so&#x27;Buuhu&amp;&quot;</span>, <span class="hljs-number">13</span>);<br>    <span class="hljs-keyword">for</span> ( j = temp; ; v8 = *j )<br>    &#123;<br>      *j++ = v8 ^ <span class="hljs-number">7</span>;<br>      <span class="hljs-keyword">if</span> ( &amp;temp[<span class="hljs-number">13</span>] == j )<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(temp);                                 <span class="hljs-comment">// 错误时的输出</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  p_block0 = &amp;block0;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )                                   <span class="hljs-comment">// bytesToBlock，转成uint32_t</span><br>  &#123;<br>    current_1 = pFlag1;<br>    shift = <span class="hljs-number">0</span>;<br>    temp_2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      temp_1 = v4 &lt;&lt; shift;<br>      shift += <span class="hljs-number">8</span>;<br>      ++current_1;<br>      temp_2 |= temp_1;<br>      <span class="hljs-keyword">if</span> ( shift == <span class="hljs-number">32</span> )<br>        <span class="hljs-keyword">break</span>;<br>      v4 = *current_1;<br>    &#125;<br>    pFlag1 += <span class="hljs-number">4</span>;<br>    *p_block0++ = temp_2;<br>    <span class="hljs-keyword">if</span> ( &amp;v56 == pFlag1 )<br>      <span class="hljs-keyword">break</span>;<br>    v4 = *pFlag1;<br>  &#125;<br>  cureent_block = block10;<br>  delta = <span class="hljs-number">0x9E3779B9</span>;<br>  key_value = <span class="hljs-number">0x616C6143</span>;<br>  prev_block = block0;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )                                   <span class="hljs-comment">// xxtea</span><br>  &#123;<br>    block = &amp;block0;<br>    <span class="hljs-keyword">for</span> ( rounds = <span class="hljs-number">0</span>; ; ++rounds )<br>    &#123;<br>      next = block[<span class="hljs-number">1</span>];<br>      ++block;<br>      cureent_block = prev_block<br>                    + (((cureent_block ^ *(key + (((delta &gt;&gt; <span class="hljs-number">2</span>) ^ rounds) &amp; <span class="hljs-number">3</span>))) + (next ^ delta)) ^ (((<span class="hljs-number">4</span> * next) ^ (cureent_block &gt;&gt; <span class="hljs-number">5</span>)) + ((<span class="hljs-number">16</span> * cureent_block) ^ (next &gt;&gt; <span class="hljs-number">3</span>))));<br>      *(block - <span class="hljs-number">1</span>) = cureent_block;<br>      <span class="hljs-keyword">if</span> ( rounds == <span class="hljs-number">9</span> )<br>        <span class="hljs-keyword">break</span>;<br>      prev_block = *block;<br>    &#125;<br>    prev_block = block0;<br>    oriDelta = delta;<br>    delta -= <span class="hljs-number">0x61C88647</span>;<br>    cureent_block = block10<br>                  + ((((cureent_block &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * block0)) + ((<span class="hljs-number">16</span> * cureent_block) ^ (block0 &gt;&gt; <span class="hljs-number">3</span>))) ^ ((block0 ^ oriDelta) + (key_value ^ cureent_block)));<br>    block10 = cureent_block;<br>    <span class="hljs-keyword">if</span> ( delta == <span class="hljs-number">0xCC623AF3</span> )<br>      <span class="hljs-keyword">break</span>;<br>    key_value = *(key + (((delta &gt;&gt; <span class="hljs-number">2</span>) ^ <span class="hljs-number">0xA</span>) &amp; <span class="hljs-number">3</span>));<br>  &#125;<br>  encrypted_bytes_1 = encrypted_bytes;<br>  v24 = &amp;v51;                                   <span class="hljs-comment">// blockToBytes，uint32_t转成bytes</span><br>  v25 = encrypted_bytes;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    v26 = v25;<br>    <span class="hljs-keyword">for</span> ( shift_1 = <span class="hljs-number">0</span>; shift_1 != <span class="hljs-number">32</span>; shift_1 += <span class="hljs-number">8</span> )<br>    &#123;<br>      v26 = (v26 + <span class="hljs-number">1</span>);<br>      v28 = prev_block &gt;&gt; shift_1;<br>      *(v26 - <span class="hljs-number">1</span>) = v28;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( &amp;v54 == ++v25 )<br>      <span class="hljs-keyword">break</span>;<br>    prev_block = *v24++;<br>  &#125;<br>  qmemcpy(temp, <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>, <span class="hljs-keyword">sizeof</span>(temp));<br>  v29 = base64_output;<br>  <span class="hljs-keyword">do</span>                                            <span class="hljs-comment">// base64encode</span><br>  &#123;<br>    v30 = *encrypted_bytes_1 &lt;&lt; <span class="hljs-number">16</span>;<br>    <span class="hljs-keyword">if</span> ( v7 != <span class="hljs-number">1</span> )<br>    &#123;<br>      v30 |= encrypted_bytes_1[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">8</span>;<br>      <span class="hljs-keyword">if</span> ( v7 &gt; <span class="hljs-number">2</span> )<br>        v30 |= encrypted_bytes_1[<span class="hljs-number">2</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0LL</span>; k != <span class="hljs-number">4</span>; ++k )<br>    &#123;<br>      v32 = <span class="hljs-number">61</span>;<br>      <span class="hljs-keyword">if</span> ( k &lt;= v7 )<br>        v32 = temp[(v30 &gt;&gt; (<span class="hljs-number">-6</span> * k + <span class="hljs-number">18</span>)) &amp; <span class="hljs-number">0x3F</span>];<br>      v29[k] = v32;<br>    &#125;<br>    encrypted_bytes_1 += <span class="hljs-number">3</span>;<br>    v29 += <span class="hljs-number">4</span>;<br>    v7 -= <span class="hljs-number">3</span>;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( (&amp;v54 + <span class="hljs-number">1</span>) != encrypted_bytes_1 );<br>  current1 = end_1;<br>  end_1[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  srand(<span class="hljs-number">0x65u</span>);                                 <span class="hljs-comment">// shuffle</span><br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    randNum = rand();<br>    tmp = *current1;<br>    target = &amp;base64_output[randNum % (<span class="hljs-number">60</span> - end_1 + current1)];<br>    *current1 = *target;<br>    *target = tmp;<br>    v37 = current1 - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( base64_output == current1 - <span class="hljs-number">1</span> )<br>      <span class="hljs-keyword">break</span>;<br>    --current1;<br>  &#125;<br>  end = current1 + <span class="hljs-number">59</span>;<br>  current = v37;<br>  <span class="hljs-keyword">do</span>                                            <span class="hljs-comment">// xor</span><br>    *current++ ^= <span class="hljs-number">0x45u</span>;<br>  <span class="hljs-keyword">while</span> ( end != current );<br>  v40 = enc + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> ( m = <span class="hljs-number">116</span>; ; m = *v40++ )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( *v37 != m )                            <span class="hljs-comment">// 错误处理的输出</span><br>    &#123;<br>      qmemcpy(temp, <span class="hljs-string">&quot;Dfkfjns~&amp;&#x27;wkbftb&#x27;su~&#x27;f`fni&quot;</span>, <span class="hljs-number">26</span>);<br>      v42 = temp;<br>      <span class="hljs-keyword">for</span> ( n = <span class="hljs-number">68</span>; ; n = *v42 )<br>      &#123;<br>        *v42++ = n ^ <span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">if</span> ( &amp;temp[<span class="hljs-number">26</span>] == v42 )<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>      <span class="hljs-built_in">puts</span>(temp);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;                                           <span class="hljs-comment">// 错误处理的输出</span><br>    <span class="hljs-keyword">if</span> ( end == ++v37 )<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br>  v44 = <span class="hljs-number">65</span>;<br>  qmemcpy(temp, <span class="hljs-string">&quot;Ahusrib&amp;@hhc&#x27;Krdl&amp;&quot;</span>, <span class="hljs-number">18</span>);<br>  <span class="hljs-keyword">for</span> ( ii = temp; ; v44 = *ii )<br>  &#123;<br>    *ii++ = v44 ^ <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">if</span> ( &amp;temp[<span class="hljs-number">18</span>] == ii )<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(temp);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>函数出现在程序输入flag的提示之后，应该就是flag检验函数了。函数使用了很多加密手段，甚至连提示词都是实时解密的。可以看到对输入的flag依次进行了格式转换、魔改XXTEA加密、格式转换、base64编码、shuffle洗牌算法打乱、异或处理，最后才和预设的密文进行比较检验。</p>
<p>这里给出一个AI复现的、经过测试等价的脚本，方便理解这个复杂的算法（被函数改写整怕了，所以随机数生成算法也复现了）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">// MSVC-compatible rand</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> rand_seed;<br><span class="hljs-type">void</span> <span class="hljs-title function_">custom_srand</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> seed)</span> &#123; rand_seed = seed; &#125;<br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">custom_rand</span><span class="hljs-params">()</span> &#123;<br>    rand_seed = rand_seed * <span class="hljs-number">214013</span> + <span class="hljs-number">2531011</span>;<br>    <span class="hljs-keyword">return</span> (rand_seed &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0x7FFF</span>;<br>&#125;<br><br><span class="hljs-comment">// XXTEA encryption (as in realMain)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">encrypt_xxtea_variant</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> block[<span class="hljs-number">11</span>], <span class="hljs-type">const</span> <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">uint32_t</span> cureent_block = block[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x9E3779B9U</span>;<br>    <span class="hljs-type">uint32_t</span> key_value = <span class="hljs-number">0x616C6143U</span>; <span class="hljs-comment">// 初始值，但第一轮内循环不用它</span><br>    <span class="hljs-type">uint32_t</span> prev_block = block[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">uint32_t</span>* bptr = &amp;block[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> rounds = <span class="hljs-number">0</span>; ; ++rounds) &#123;<br>            <span class="hljs-type">uint32_t</span> next = bptr[<span class="hljs-number">1</span>];<br>            ++bptr;<br>            <span class="hljs-type">uint32_t</span> k = key[((delta &gt;&gt; <span class="hljs-number">2</span>) ^ rounds) &amp; <span class="hljs-number">3</span>];<br>            <span class="hljs-type">uint32_t</span> term1 = (cureent_block ^ k) + (next ^ delta);<br>            <span class="hljs-type">uint32_t</span> term2 = (<span class="hljs-number">4</span> * next ^ (cureent_block &gt;&gt; <span class="hljs-number">5</span>)) + (<span class="hljs-number">16</span> * cureent_block ^ (next &gt;&gt; <span class="hljs-number">3</span>));<br>            cureent_block = prev_block + (term1 ^ term2);<br>            *(bptr - <span class="hljs-number">1</span>) = cureent_block;<br>            <span class="hljs-keyword">if</span> (rounds == <span class="hljs-number">9</span>) <span class="hljs-keyword">break</span>;<br>            prev_block = *bptr; <span class="hljs-comment">// 此时 *bptr 尚未被修改（是原始值）</span><br>        &#125;<br><br>        prev_block = block[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">uint32_t</span> oriDelta = delta;<br>        delta -= <span class="hljs-number">0x61C88647U</span>;<br>        key_value = key[((oriDelta &gt;&gt; <span class="hljs-number">2</span>) ^ <span class="hljs-number">0xA</span>) &amp; <span class="hljs-number">3</span>];<br>        <span class="hljs-type">uint32_t</span> term1 = ((cureent_block &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * block[<span class="hljs-number">0</span>])) + ((<span class="hljs-number">16</span> * cureent_block) ^ (block[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">3</span>));<br>        <span class="hljs-type">uint32_t</span> term2 = (block[<span class="hljs-number">0</span>] ^ oriDelta) + (key_value ^ cureent_block);<br>        cureent_block = block[<span class="hljs-number">10</span>] + (term1 ^ term2);<br>        block[<span class="hljs-number">10</span>] = cureent_block;<br><br>        <span class="hljs-keyword">if</span> (delta == <span class="hljs-number">0xCC623AF3U</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Base64 encode 44 bytes -&gt; 60 chars</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">base64_encode</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>* input, <span class="hljs-type">char</span>* output)</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* table = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">44</span>; i += <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-type">uint32_t</span> val = (input[i] &lt;&lt; <span class="hljs-number">16</span>) |<br>            ((i + <span class="hljs-number">1</span> &lt; <span class="hljs-number">44</span> ? input[i + <span class="hljs-number">1</span>] : <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-number">8</span>) |<br>            ((i + <span class="hljs-number">2</span> &lt; <span class="hljs-number">44</span> ? input[i + <span class="hljs-number">2</span>] : <span class="hljs-number">0</span>));<br>        output[<span class="hljs-number">0</span>] = table[(val &gt;&gt; <span class="hljs-number">18</span>) &amp; <span class="hljs-number">0x3F</span>];<br>        output[<span class="hljs-number">1</span>] = table[(val &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x3F</span>];<br>        output[<span class="hljs-number">2</span>] = (i + <span class="hljs-number">1</span> &lt; <span class="hljs-number">44</span>) ? table[(val &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0x3F</span>] : <span class="hljs-string">&#x27;=&#x27;</span>;<br>        output[<span class="hljs-number">3</span>] = (i + <span class="hljs-number">2</span> &lt; <span class="hljs-number">44</span>) ? table[val &amp; <span class="hljs-number">0x3F</span>] : <span class="hljs-string">&#x27;=&#x27;</span>;<br>        output += <span class="hljs-number">4</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Step 1: Input flag</span><br>    <span class="hljs-type">char</span> flag[<span class="hljs-number">45</span>] = <span class="hljs-string">&quot;0xGame&#123;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#125;&quot;</span>;<span class="hljs-comment">//测试样例</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Input flag: %s\n&quot;</span>, flag);<br><br>    <span class="hljs-comment">// Step 2: Convert to 11 uint32_t (little-endian)</span><br>    <span class="hljs-type">uint32_t</span> blocks[<span class="hljs-number">11</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>        blocks[i] = (<span class="hljs-type">uint8_t</span>)flag[i * <span class="hljs-number">4</span>] |<br>            ((<span class="hljs-type">uint8_t</span>)flag[i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">8</span>) |<br>            ((<span class="hljs-type">uint8_t</span>)flag[i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">16</span>) |<br>            ((<span class="hljs-type">uint8_t</span>)flag[i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>] &lt;&lt; <span class="hljs-number">24</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Step 3: XXTEA encrypt</span><br>    <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>] = &#123;<br>        <span class="hljs-number">0x616C6143</span>, <span class="hljs-comment">// &#x27;C&#x27;,&#x27;a&#x27;,&#x27;l&#x27;,&#x27;a&#x27;</span><br>        <span class="hljs-number">0x7974696D</span>, <span class="hljs-comment">// &#x27;m&#x27;,&#x27;i&#x27;,&#x27;t&#x27;,&#x27;y&#x27;</span><br>        <span class="hljs-number">0x726F465F</span>, <span class="hljs-comment">// &#x27;_&#x27;,&#x27;F&#x27;,&#x27;o&#x27;,&#x27;r&#x27;</span><br>        <span class="hljs-number">0x656E7574</span>  <span class="hljs-comment">// &#x27;t&#x27;,&#x27;u&#x27;,&#x27;n&#x27;,&#x27;e&#x27;</span><br>    &#125;;<br>    encrypt_xxtea_variant(blocks, key);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TEA encrypted blocks (hex, little-endian order):\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%08x\n&quot;</span>, blocks[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-comment">// Step 4: Convert back to bytes (little-endian)</span><br>    <span class="hljs-type">uint8_t</span> encrypted_bytes[<span class="hljs-number">44</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>        encrypted_bytes[i * <span class="hljs-number">4</span>] = blocks[i] &amp; <span class="hljs-number">0xFF</span>;<br>        encrypted_bytes[i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>] = (blocks[i] &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>;<br>        encrypted_bytes[i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>] = (blocks[i] &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>;<br>        encrypted_bytes[i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>] = (blocks[i] &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Step 5: Base64 encode</span><br>    <span class="hljs-type">char</span> base64_str[<span class="hljs-number">61</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    base64_encode(encrypted_bytes, base64_str);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base64: %s\n&quot;</span>, base64_str);<br><br>    <span class="hljs-comment">// Step 6: Shuffle (Fisher-Yates, i=59 downto 1)</span><br>    custom_srand(<span class="hljs-number">0x65</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">59</span>; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>        <span class="hljs-type">int</span> j = custom_rand() % (i + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// Swap base64_str[i] and base64_str[j]</span><br>        <span class="hljs-type">char</span> tmp = base64_str[i];<br>        base64_str[i] = base64_str[j];<br>        base64_str[j] = tmp;<br>    &#125;<br><br>    <span class="hljs-comment">// Output shuffled result (before XOR)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After shuffle (before XOR): %s\n&quot;</span>, base64_str);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hex dump:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">60</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02x &quot;</span>, (<span class="hljs-type">uint8_t</span>)base64_str[i]);<br>        <span class="hljs-keyword">if</span> ((i + <span class="hljs-number">1</span>) % <span class="hljs-number">16</span> == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">60</span> % <span class="hljs-number">16</span> != <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">60</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02x &quot;</span>, (<span class="hljs-type">uint8_t</span>)base64_str[i] ^ <span class="hljs-number">0x45</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>解密思路：异或模块直接一模一样地重复一遍即可；shuffle模块可以先从加密算法获得随机数序列，这样方便从后往前索引还原；剩下的看脚本吧🫠（对了，要注意enc数据要从栈上提取，笔者让AI从反编译的代码里提取，肉眼检验没发现bytes截取错了，浪费了好多时间）</p>
</li>
<li><p>解密脚本：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">// ========== 你提供的解密函数 ==========</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt_xxtea_variant</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> block[<span class="hljs-number">11</span>], <span class="hljs-type">const</span> <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> TOTAL_ROUNDS = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0xCC623AF3U</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> round = <span class="hljs-number">0</span>; round &lt; TOTAL_ROUNDS; round++) &#123;<br>        <span class="hljs-type">uint32_t</span> oriDelta = delta + <span class="hljs-number">0x61C88647U</span>;<br>        <span class="hljs-type">uint32_t</span> key_value = key[((oriDelta &gt;&gt; <span class="hljs-number">2</span>) ^ <span class="hljs-number">0xA</span>) &amp; <span class="hljs-number">3</span>];<br><br>        <span class="hljs-type">uint32_t</span> C9 = block[<span class="hljs-number">9</span>];<br>        <span class="hljs-type">uint32_t</span> C0 = block[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">uint32_t</span> term1 = ((C9 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * C0)) + ((<span class="hljs-number">16</span> * C9) ^ (C0 &gt;&gt; <span class="hljs-number">3</span>));<br>        <span class="hljs-type">uint32_t</span> term2 = (C0 ^ oriDelta) + (key_value ^ C9);<br>        <span class="hljs-type">uint32_t</span> G = term1 ^ term2;<br>        <span class="hljs-type">uint32_t</span> original_block10 = block[<span class="hljs-number">10</span>] - G;<br><br>        <span class="hljs-type">uint32_t</span> saved_block10 = original_block10;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">9</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-type">uint32_t</span> next = (i == <span class="hljs-number">9</span>) ? saved_block10 : block[i + <span class="hljs-number">1</span>];<br>            <span class="hljs-type">uint32_t</span> prev_C = (i == <span class="hljs-number">0</span>) ? saved_block10 : block[i - <span class="hljs-number">1</span>];<br><br>            <span class="hljs-type">uint32_t</span> k = key[((oriDelta &gt;&gt; <span class="hljs-number">2</span>) ^ i) &amp; <span class="hljs-number">3</span>];<br>            <span class="hljs-type">uint32_t</span> part1 = (prev_C ^ k) + (next ^ oriDelta);<br>            <span class="hljs-type">uint32_t</span> part2 = (<span class="hljs-number">4</span> * next ^ (prev_C &gt;&gt; <span class="hljs-number">5</span>)) + (<span class="hljs-number">16</span> * prev_C ^ (next &gt;&gt; <span class="hljs-number">3</span>));<br>            <span class="hljs-type">uint32_t</span> H = part1 ^ part2;<br><br>            block[i] = block[i] - H;<br>        &#125;<br><br>        block[<span class="hljs-number">10</span>] = original_block10;<br>        delta += <span class="hljs-number">0x61C88647U</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* table = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">base64_decode</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* input, <span class="hljs-type">uint8_t</span>* output)</span> &#123;<br>    <span class="hljs-type">int</span> out_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">60</span>; i += <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-type">uint32_t</span> val = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>            <span class="hljs-type">const</span> <span class="hljs-type">char</span>* p = <span class="hljs-built_in">strchr</span>(table, input[i + j]);<br>            <span class="hljs-keyword">if</span> (p) val = (val &lt;&lt; <span class="hljs-number">6</span>) | (p - table);<br>            <span class="hljs-keyword">else</span> val &lt;&lt;= <span class="hljs-number">6</span>;<br>        &#125;<br>        output[out_len++] = (val &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>;<br>        <span class="hljs-keyword">if</span> (input[i + <span class="hljs-number">2</span>] != <span class="hljs-string">&#x27;=&#x27;</span>) output[out_len++] = (val &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>;<br>        <span class="hljs-keyword">if</span> (input[i + <span class="hljs-number">3</span>] != <span class="hljs-string">&#x27;=&#x27;</span>) output[out_len++] = val &amp; <span class="hljs-number">0xFF</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> out_len;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">deshuffle</span><span class="hljs-params">(<span class="hljs-type">char</span>* cipher, <span class="hljs-type">uint32_t</span>* rand_seq)</span> &#123;<br>    <span class="hljs-comment">// 逆序遍历：t 从 58 到 0</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">58</span>; t &gt;= <span class="hljs-number">0</span>; t--) &#123;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">59</span> - t;          <span class="hljs-comment">// 加密时的 i</span><br>        <span class="hljs-type">int</span> j = rand_seq[t];     <span class="hljs-comment">// 加密时的 j</span><br>        <span class="hljs-comment">// 再次交换 cipher[i] 和 cipher[j]</span><br>        <span class="hljs-type">char</span> temp = cipher[i];<br>        cipher[i] = cipher[j];<br>        cipher[j] = temp;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// ========== 主程序 ==========</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Step 1: 使用你提供的 60 字节目标密文</span><br>    <span class="hljs-type">uint8_t</span> encrypted_target_bytes[<span class="hljs-number">60</span>] = &#123;<br>        <span class="hljs-number">0x74</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x28</span>,<br>        <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x24</span>,<br>        <span class="hljs-number">0x73</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x14</span>,<br>        <span class="hljs-number">0x33</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x0A</span>,<br>        <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xe</span>,<br>        <span class="hljs-number">0x10</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x2F</span>,<br>        <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x77</span>,<br>        <span class="hljs-number">0x04</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x37</span><br>    &#125;;<br><br>    <span class="hljs-comment">// Step 2: XOR 0x45 得到 shuffled base64 字符串</span><br>    <span class="hljs-type">char</span> shuffled_b64[<span class="hljs-number">60</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-comment">//printf(&quot;step1: xor\n&quot;);</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">60</span>; i++) &#123;<br>        shuffled_b64[i] = encrypted_target_bytes[i] ^ <span class="hljs-number">0x45</span>;<br>        <span class="hljs-comment">//printf(&quot;%c&quot;, shuffled_b64[i]);</span><br>    &#125;<br>    <span class="hljs-comment">//printf(&quot;\nstep2: deshuffle\n&quot;);</span><br>    <span class="hljs-comment">// Step 3: 使用你提供的 rand() 序列（原始值，未取模）</span><br>    <span class="hljs-type">uint32_t</span> rand_seq[<span class="hljs-number">59</span>] = &#123;<br>        <span class="hljs-number">8</span>, <span class="hljs-number">46</span>, <span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">35</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">37</span>, <span class="hljs-number">17</span>,<br>        <span class="hljs-number">33</span>, <span class="hljs-number">13</span>, <span class="hljs-number">17</span>, <span class="hljs-number">10</span>, <span class="hljs-number">34</span>, <span class="hljs-number">34</span>, <span class="hljs-number">6</span>, <span class="hljs-number">20</span>, <span class="hljs-number">35</span>, <span class="hljs-number">10</span>,<br>        <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">7</span>, <span class="hljs-number">16</span>, <span class="hljs-number">6</span>, <span class="hljs-number">18</span>, <span class="hljs-number">30</span>, <span class="hljs-number">32</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>,<br>        <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">23</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">16</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>,<br>        <span class="hljs-number">6</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">3</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">10</span>,<br>        <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    &#125;;<br>    deshuffle(shuffled_b64, rand_seq);<br>    <span class="hljs-comment">//for (int i = 0; i &lt; 60; i++) &#123;</span><br>        <span class="hljs-comment">//printf(&quot;%c&quot;, shuffled_b64[i]);</span><br>    <span class="hljs-comment">//&#125;</span><br>    <span class="hljs-type">char</span> original_b64[<span class="hljs-number">61</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">60</span>; i++) &#123;<br>        original_b64[i] = shuffled_b64[i];<br>    &#125;<br>    original_b64[<span class="hljs-number">60</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-comment">//printf(&quot;\n&quot;);</span><br><br>    <span class="hljs-comment">// Step 4: Base64 解码</span><br>    <span class="hljs-type">uint8_t</span> encrypted_bytes[<span class="hljs-number">44</span>];<br>    <span class="hljs-type">int</span> decoded_len = base64_decode(original_b64, encrypted_bytes);<br>    <span class="hljs-keyword">if</span> (decoded_len != <span class="hljs-number">44</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Step 5: 重组为 11 个 uint32_t（小端序）</span><br>    <span class="hljs-type">uint32_t</span> block[<span class="hljs-number">11</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>        block[i] = ((<span class="hljs-type">uint32_t</span>)encrypted_bytes[i * <span class="hljs-number">4</span> + <span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">0</span>) |<br>            ((<span class="hljs-type">uint32_t</span>)encrypted_bytes[i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">8</span>) |<br>            ((<span class="hljs-type">uint32_t</span>)encrypted_bytes[i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">16</span>) |<br>            ((<span class="hljs-type">uint32_t</span>)encrypted_bytes[i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>] &lt;&lt; <span class="hljs-number">24</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Step 6: 设置密钥 &quot;Calamity_Fortune&quot;（16 字节）</span><br>    <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>] = &#123;<br>        <span class="hljs-number">0x616C6143U</span>,<br>        <span class="hljs-number">0x7974696DU</span>,<br>        <span class="hljs-number">0x726F465FU</span>,<br>        <span class="hljs-number">0x656E7574U</span><br>    &#125;;<br><br>    <span class="hljs-comment">// Step 7: 调用你提供的解密函数</span><br>    decrypt_xxtea_variant(block, key);<br><br>    <span class="hljs-comment">// Step 8: 转回 flag 字符串（小端）</span><br>    <span class="hljs-type">char</span> flag[<span class="hljs-number">45</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>        flag[i * <span class="hljs-number">4</span> + <span class="hljs-number">0</span>] = (block[i] &gt;&gt; <span class="hljs-number">0</span>) &amp; <span class="hljs-number">0xFF</span>;<br>        flag[i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>] = (block[i] &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>;<br>        flag[i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>] = (block[i] &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>;<br>        flag[i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>] = (block[i] &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Flag: %s\n&quot;</span>, flag);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>flag：0xGame{f279c1e7-8b0d-4a3b-9c6f-5e4d2a1b0c89}</p>
</blockquote>
]]></content>
      <categories>
        <category>WriteUp与复现</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WriteUp</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day1:数据结构与复杂度</title>
    <url>/2025/09/18/Day1-%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<p>数据结构简述、复杂度初探</p>
<span id="more"></span>

<h2 id="数据结构简述"><a href="#数据结构简述" class="headerlink" title="数据结构简述"></a>数据结构简述</h2><ul>
<li><p>“数据结构（data structure）是组织和存储数据的方式，涵盖数据内容、数据之间关系和数据操作方法”，这是<a href="https://www.hello-algo.com/">Hello 算法</a>中给出的定义。数据结构是人为创造的、服务于数据存储与处理的一种规范，我们可以根据一种数据结构的概念，用不同的语言、不同的特性来实现它。</p>
</li>
<li><p>数据主要有两种存储结构：顺序存储和链式存储。这两种存储结构是后续各种数据结构实现的基础。</p>
<ul>
<li><p>顺序存储，就是数据存储在连续的内存空间上。</p>
</li>
<li><p>链式存储，就是数据存储在不连续的内存空间上，但是每个内存单位之间又有联系，像链条一样串联在一起。</p>
</li>
</ul>
</li>
<li><p>数据结构按照逻辑特征可以分为四种：线性结构、图结构、树形结构、集合结构。</p>
</li>
<li><p>抽象数据类型(ADT)：用于描述数据结构的一种模型，包括了结构特性的描述、相关的运算函数描述。ADT和类很像，但是ADT更像是用代码实现具体数据结构前列的的提纲。</p>
</li>
<li><p>算法是对数据进行处理的策略，即运算方法。算法会依赖数据结构来实现。算法追求效率，即更短的运算时间和更少的资源占用。</p>
</li>
</ul>
<h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul>
<li><p>算法追求时间和空间上的效率，所以描述一个算法的复杂度分为两种：时间复杂度和空间复杂度。</p>
</li>
<li><p>时间复杂度评估的是一段代码的运行时间，由于计算机执行操作的时间都很短，所以时间复杂度的评估往往等同于操作次数的评估。我们通常说的时间复杂度实际上是渐进时间复杂度。标准的时间复杂度考虑代码中所有的操作，比如赋值会记1次操作，两个变量相加会记1次操作等。渐进时间复杂度则只考虑操作数的量级，所以关注的往往是代码中的关键操作。</p>
<p>所谓关键操作，一般是指操作边界含n，即操作的边界含有变量、不同情况下边界不同的的操作。如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        sum+=n;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>其中，for循环中的操作执行次数依赖于边界n，这就是我们需要关注的地方。</p>
<p>以这段代码为例，给sum赋值的语句记1次操作，for循环中，给i赋值记1次操作，i的边界判断记n+1次操作（因为i自增到n+1还会到i&lt;&#x3D;n这里来进行边界判断），for循环中sum累加记n次操作，返回sum记1次操作。这样子，这段代码总共进行了2n+4次操作，只考虑量级的话就是n。</p>
</li>
<li><p>对于渐进时间复杂度，采用大O表示法：O(算法量级)。如上面这段代码，量级为n，渐进时间复杂度记为O(n)。</p>
</li>
<li><p>空间复杂度评估的是一段代码占用的内存空间。空间复杂度和时间复杂度类似，通常只考虑量级，但此处是占用内存空间的量级。内存空间的占用比较直观，关注的重点依旧是边界包含变量的操作，记录的是操作带来的内存空间占用情况。如赋值操作，记1个单位的空间占用；创建长度为n的数组，记n个单位的空间占用等。还用上面的代码为例子，sum赋值记1个单位，i赋值记1个单位，所以这段代码总共就占用2个单位的内存空间，量级为1，空间复杂度记为O(1)。</p>
</li>
<li><p>常见操作的时间复杂度和空间复杂度：</p>
<table>
<thead>
<tr>
<th align="left">语句&#x2F;操作</th>
<th align="left">时间复杂度</th>
<th align="left">空间复杂度</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>赋值操作</strong> (<code>a = b</code>)</td>
<td align="left">O(1)</td>
<td align="left">O(1)</td>
<td align="left">基本数据类型赋值</td>
</tr>
<tr>
<td align="left"><strong>算术运算</strong> (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>)</td>
<td align="left">O(1)</td>
<td align="left">O(1)</td>
<td align="left">固定大小数值运算</td>
</tr>
<tr>
<td align="left"><strong>比较操作</strong> (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>)</td>
<td align="left">O(1)</td>
<td align="left">O(1)</td>
<td align="left">基本数据类型比较</td>
</tr>
<tr>
<td align="left"><strong>数组索引</strong> (<code>arr[i]</code>)</td>
<td align="left">O(1)</td>
<td align="left">O(1)</td>
<td align="left">随机访问</td>
</tr>
<tr>
<td align="left"><strong>函数调用</strong></td>
<td align="left">O(1)</td>
<td align="left">O(1)</td>
<td align="left">调用开销本身</td>
</tr>
<tr>
<td align="left"><strong>if-else</strong></td>
<td align="left">O(1)</td>
<td align="left">O(1)</td>
<td align="left">条件判断本身</td>
</tr>
<tr>
<td align="left"><strong>switch-case</strong></td>
<td align="left">O(1)</td>
<td align="left">O(1)</td>
<td align="left">跳转表实现</td>
</tr>
<tr>
<td align="left"><strong>goto</strong></td>
<td align="left">O(1)</td>
<td align="left">O(1)</td>
<td align="left">跳转指令</td>
</tr>
<tr>
<td align="left"><strong>单层for循环</strong></td>
<td align="left">O(n)</td>
<td align="left">O(1)</td>
<td align="left">循环n次，体为O(1)</td>
</tr>
<tr>
<td align="left"><strong>嵌套for循环</strong></td>
<td align="left">O(n²)</td>
<td align="left">O(1)</td>
<td align="left">两层各n次循环</td>
</tr>
<tr>
<td align="left"><strong>while循环</strong></td>
<td align="left">O(n)</td>
<td align="left">O(1)</td>
<td align="left">循环n次，体为O(1)</td>
</tr>
<tr>
<td align="left"><strong>do-while循环</strong></td>
<td align="left">O(n)</td>
<td align="left">O(1)</td>
<td align="left">循环n次，体为O(1)</td>
</tr>
<tr>
<td align="left"><strong>递归调用</strong></td>
<td align="left">O(n)</td>
<td align="left">O(n)</td>
<td align="left">线性递归，n为深度</td>
</tr>
<tr>
<td align="left"><strong>尾递归优化</strong></td>
<td align="left">O(n)</td>
<td align="left">O(1)</td>
<td align="left">编译器优化后</td>
</tr>
<tr>
<td align="left"><strong>函数返回</strong></td>
<td align="left">O(1)</td>
<td align="left">O(1)</td>
<td align="left">栈帧销毁</td>
</tr>
<tr>
<td align="left"><strong>malloc&#x2F;new</strong></td>
<td align="left">O(1)</td>
<td align="left">O(n)</td>
<td align="left">分配n字节内存</td>
</tr>
<tr>
<td align="left"><strong>free&#x2F;delete</strong></td>
<td align="left">O(1)</td>
<td align="left">O(1)</td>
<td align="left">释放内存</td>
</tr>
<tr>
<td align="left"><strong>内存拷贝</strong></td>
<td align="left">O(n)</td>
<td align="left">O(1)</td>
<td align="left">拷贝n字节</td>
</tr>
<tr>
<td align="left"><strong>内存设置</strong></td>
<td align="left">O(n)</td>
<td align="left">O(1)</td>
<td align="left">设置n字节</td>
</tr>
<tr>
<td align="left"><strong>try-catch</strong></td>
<td align="left">O(1)</td>
<td align="left">O(1)</td>
<td align="left">无异常时开销</td>
</tr>
<tr>
<td align="left"><strong>throw抛出</strong></td>
<td align="left">O(n)</td>
<td align="left">O(1)</td>
<td align="left">n为调用栈深度</td>
</tr>
<tr>
<td align="left"><strong>异常捕获</strong></td>
<td align="left">O(1)</td>
<td align="left">O(1)</td>
<td align="left">匹配异常类型</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Day1:进程与线程（一）</title>
    <url>/2025/10/03/Day1-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>进程与线程、内核对象相关基础知识</p>
<span id="more"></span>

<h2 id="什么是进程-线程"><a href="#什么是进程-线程" class="headerlink" title="什么是进程&#x2F;线程"></a>什么是进程&#x2F;线程</h2><ul>
<li>进程是操作系统分配资源的单位。运行一个程序，操作系统就会给这个程序分配一个进程。</li>
<li>线程是执行任务的基本单位。一个进程可以有多个线程，但是至少有一个线程。比如说运行QQ，操作系统会给QQ分配一个进程，而QQ里的某些操作，比如和好友聊天，就是一个线程。</li>
<li>操作系统会给每个进程分配4GB虚拟内存空间。32位程序下，这4GB内存分为两部分，低2GB给用户层，高2GB给内核层。每个进程有独立的4GB<strong>虚拟内存空间</strong>。但是每个进程并不拥有独立的4GB<strong>物理内存空间</strong>，它们的内核空间是映射到同一块物理内存空间上的，而用户空间在物理内存上确实是独立的。</li>
<li>运行一个程序，操作系统会为它分配一个进程以及4GB的虚拟内存空间，程序涉及的exe、dll文件在需要的时候会被加载到程序的虚拟内存空间上，这些被加载的可执行文件（不仅包括exe，还包括dll）称为模块</li>
</ul>
<h2 id="内核对象"><a href="#内核对象" class="headerlink" title="内核对象"></a>内核对象</h2><ul>
<li><p>Windows系统是一个面向对象的操作系统，但是它是基于C语言的，C语言没有类的概念，所以Windows系统的对象本质上是结构体变量。</p>
</li>
<li><p>通常把Windows系统分为两个层级：R0和R3，R0是内核层，里面是操作系统最底层的东西，包含了操作系统的所有结构体变量，一般不会对外开放，但是会提供一些API接口给R3层来访问其中的内容；R3是用户层，作为内核和外界的过渡，封装了一些内核的操作。即，用户在需要访问内核信息的时候，首先要调用R3的API，然后R3再调用R0的API来访问内核。</p>
</li>
<li><p>Windows的对象可以分成三类：</p>
<ul>
<li>USER对象，对应操作系统的界面，相关dll是user32.dll</li>
<li>GDI对象，对应绘图相关的内容，相关dll是GDI32.dll</li>
<li>内核对象，对应文件、进程、线程等，相关dll是Kernel32.dll</li>
</ul>
</li>
<li><p>为了保证系统安全，Windows系统的结构体变量是不允许直接访问的，只能通过句柄和相应的API来访问。在了解句柄之前，得先了解句柄表。每个进程都有自己的句柄表（类似一维数组），用来记录内核对象的相关信息，但是操作系统不会向我们开放这些信息，只会让我们知道某个内核对象的信息块在句柄表中的索引值，而这个索引值就是句柄。</p>
</li>
<li><p>内核空间在物理上是共享的，因此内核对象是跨进程的，不同的进程可以访问相同的内核对象，只不过不同进程中同一个进程对象的句柄不同。</p>
</li>
<li><p>内核对象有一些特性，如安全描述符（用来说明内核对象接受哪些用户和组的访问和使用）、引用计数（用来记录内核对象被引用的次数，当内核对象不被任何进程引用的时候，它就会被销毁）等</p>
</li>
</ul>
]]></content>
      <categories>
        <category>逆向开发</category>
      </categories>
      <tags>
        <tag>逆向开发</tag>
        <tag>Windows开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Day10:壳与脱壳（二）</title>
    <url>/2025/07/30/Day10-%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>二次断点法、一次断点法、特征查找法（均基于Xdbg）、Dll手动脱壳</p>
<span id="more"></span>

<h2 id="寻找OEP的方法（二）"><a href="#寻找OEP的方法（二）" class="headerlink" title="寻找OEP的方法（二）"></a>寻找OEP的方法（二）</h2><h3 id="二次断点法"><a href="#二次断点法" class="headerlink" title="二次断点法"></a>二次断点法</h3><ul>
<li><p>又叫内存镜像法，原理是壳程序解析时会从.rsrc段获取资源，解析后回到代码段，因此可以通过现在.rsrc段设置内存读取断点，然后在代码段(.text&#x2F;.code)设置内存写入断点来监控壳程序执行。</p>
</li>
<li><p>通常这个方法是基于OllyDbg的，但是从原理出发Xdbg也不是不能用。除了有一步是在OllyDbg中设置忽略所有异常，Xdbg好像没有这个设置选项，但是经过实测是可以用这个方法在Xdbg脱upx壳的。</p>
</li>
<li><p>Upx脱壳示例：</p>
<ul>
<li><p>Xdbg载入程序，先在“断点”模块把预设的断点删除，避免程序在非关注的异常处（断点处）停下</p>
<p><img src="/../images/image-20250730155018782.png" alt="移除断点"></p>
</li>
<li><p>然后到“内存映射”模块找到程序的.rsrc（注意所属方为用户），下一次性内存读取断点</p>
<p><img src="/../images/image-20250730155602928.png" alt="下内存读取断点"></p>
</li>
<li><p>shift+F9运行，然后在上方的upx0处下一次性内存写入断点</p>
<p><img src="/../images/image-20250730155656485.png" alt="下内存写入断点"></p>
</li>
<li><p>shift+F9运行，回到“CPU”模块，会发现下方不远处就有一个大跳（隔得有点远截不到eip和大跳的同框图），在大跳前下断点，F9运行到断点处，然后步进就可以到达OEP了</p>
</li>
</ul>
</li>
<li><p>但是有一点奇怪的地方：结合upx的解析原理，upx好像是从upx1段加载数据解析到upx0段的（AI说的，不确定对不对），所以按道理，在upx1处下内存读取断点不是也有类似的监控效果吗？但是实测这样子会跑飞🤔有过一个想法就是，因为在upx1段下了读取断点，壳程序解析前中断了，然后又在upx0段下写入断点，然后按道理应该停在解析然后写入这一步，就是解析了还没写入，或者说刚刚写入一次，那这样也不至于直接调试终止吧🤔</p>
</li>
</ul>
<h3 id="一次断点法（二次断点法plus"><a href="#一次断点法（二次断点法plus" class="headerlink" title="一次断点法（二次断点法plus)"></a>一次断点法（二次断点法plus)</h3><ul>
<li><p>这个方法是基于二次断点法和upx实测出来的，因为根据壳程序解析的原理，最终都会发生向内存写入解析完的数据的操作，所以直接在写入的地方下内存写入断点，这样调试器中断的地方就离OEP不远了（接近壳程序解析的尾声，但还是远到截不到eip和大跳的同框图）</p>
</li>
<li><p>示例</p>
<ul>
<li><p>首先，同样要先去掉预设断点</p>
<p><img src="/../images/image-20250730163429021.png" alt="去掉预设断点"></p>
</li>
<li><p>然后在“内存映射”模块给upx0下一次性内存写入断点&#x2F;给upx1下一次性内存读取断点</p>
<p><img src="/../images/image-20250730164034182.png" alt="下内存写入断点"></p>
</li>
<li><p>shift+F9运行，中断的地方就差不多是壳程序解析写入&#x2F;开始解析的地方了，在下方大跳前F2断点+F9运行一步到位，然后就可以跳转到OEP了</p>
</li>
</ul>
</li>
</ul>
<h3 id="特征查找法"><a href="#特征查找法" class="headerlink" title="特征查找法"></a>特征查找法</h3><ul>
<li><p>借助特征指令popad，在程序区域搜索指令，然后下断点运行至此，再接着运行到OEP处</p>
</li>
<li><p>示例：</p>
<ul>
<li><p>F9运行到程序区域，此时断在pushad</p>
<p><img src="/../images/image-20250730165414432.png" alt="F9运行"></p>
</li>
<li><p>右键在当前区域搜索命令popad</p>
<p><img src="/../images/image-20250730165457171.png" alt="搜索"></p>
</li>
<li><p>双击搜索结果跳转，下方不远处就是到OEP的大跳了。直接在jmp前一条指令下断点，F9到此，然后步进</p>
<p><img src="/../images/image-20250730165636809.png" alt="搜索结果"></p>
</li>
</ul>
</li>
</ul>
<h2 id="Dll手动脱壳"><a href="#Dll手动脱壳" class="headerlink" title="Dll手动脱壳"></a>Dll手动脱壳</h2><ul>
<li><p>若出现Dll程序加壳的情况，可以先把Dll程序转化成exe程序，然后使用和exe手动脱壳一样的步骤即可</p>
</li>
<li><p>示例：</p>
<ul>
<li><p>用DIE打开Dll程序，可以看到显示加了upx壳</p>
<p><img src="/../images/image-20250730224157270.png" alt="DIE查看"></p>
</li>
<li><p>点击“区块”下方的“&gt;”，打开文件结构界面</p>
<p><img src="/../images/image-20250730224231764.png" alt="文件结构页面"></p>
</li>
<li><p>取消勾选右上角”只读“，然后点击IMAGE_FILE_HEADER，取消勾选”标志“中的”Dll“（图中未取消）</p>
<p><img src="/../images/image-20250730224435928.png" alt="取消勾选Dll"></p>
<p>此时可以发现，Characteristics的值变了</p>
</li>
<li><p>然后把dll后缀改成exe就可以按照exe手动脱壳的步骤进行脱壳了</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day11:花指令</title>
    <url>/2025/07/31/Day11-%E8%8A%B1%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>花指令</p>
<span id="more"></span>

<h2 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2><ul>
<li><p>又叫垃圾指令，不影响程序原始逻辑，但会干扰IDA反编译或者反汇编。</p>
</li>
<li><p>原理：</p>
<p>因为反编译器多是静态分析的，不会通过执行来分析逻辑，只会根据反汇编出来的指令分析，因此有空可乘：例如可以通过内联汇编不完整指令但是跳过不完整指令来模糊指令边界、内联汇编永跳永不跳分支来误导运行逻辑分析、内联汇编无意义指令误导主要逻辑</p>
</li>
<li><p>显著特征是出现红色行，而应对方法是选中花指令所在的区域改为“nop”（空指令）</p>
</li>
</ul>
<h3 id="恒跳型"><a href="#恒跳型" class="headerlink" title="恒跳型"></a>恒跳型</h3><ul>
<li><p>实测IDA9.0.241217不会报红，也就是混淆失效，所以就看看源码吧</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>	_asm&#123;<br>		xor eax, eax;<br>		jz s;<br>		add esp, <span class="hljs-number">0x11</span>;<br>	s:<br>	&#125;;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>	system(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="call-ret相消型"><a href="#call-ret相消型" class="headerlink" title="call-ret相消型"></a>call-ret相消型</h3><ul>
<li><p>来看效果</p>
<p><img src="/../images/image-20250731203000820.png" alt="报红"></p>
</li>
<li><p>可以看到，在函数中间出现了sp-analysis failed，而上面一条就是retn，明显不对。</p>
<p>往前看，rep stosd初始化后，call了$+5，即当前位置+5&#x3D;0046308C，也就是下一条的add</p>
<p>然后给esp的值+7（call的时候push eip即push 0046308c了）</p>
<p>此时esp存放值为0046308c+7&#x3D;00463093，所以retn时会pop 00463093，程序跳到00463093</p>
<p>往下看，00463093正是没识别出来的三个数的最后一个，下面还有一个offset没有指令。</p>
<p>第三个数68h和offset结合刚好是push offset，对应上了下面的call（函数传参）</p>
</li>
<li><p>选中没识别的三个数，按“U”（undefine)，可以看到三个数分开了</p>
<p><img src="/../images/image-20250731203817109.png" alt="按U"></p>
</li>
<li><p>选中db 68h和dd offset aHello，按C转化为汇编指令，可以看到push offset恢复了</p>
<p><img src="/../images/image-20250731204815374.png" alt="恢复push"></p>
</li>
<li><p>选中call $+5到db 34h，右键选择”Fill with NOPs“（实测db 34h会nop不干净，要选中到db 34h下一行）</p>
<p><img src="/../images/image-20250731204858702.png" alt="NOP"></p>
</li>
<li><p>可以看到函数变成这样，这是因为插入了retn导致函数范围分析错误，需要纠正</p>
<p><img src="/../images/image-20250731205500606.png" alt="NOP完"></p>
</li>
<li><p>点击函数名，然后右键edit fuction，把end address改成末尾那个真正的retn的地址就OK了</p>
<p><img src="/../images/image-20250731205807130.png" alt="纠正函数范围"></p>
</li>
</ul>
<h3 id="jz-操作数不全型"><a href="#jz-操作数不全型" class="headerlink" title="jz-操作数不全型"></a>jz-操作数不全型</h3><ul>
<li><p>这种情况下会出现和上一种一样的指令识别错误的问题，且看图：</p>
<p><img src="/../images/image-20250801002342967.png" alt="图"></p>
</li>
<li><p>这是按照MSVS C++初始化规则跳转后，在本来main函数的地方的截图。但是跳转过程中会发现，跳转到main函数的代码是jmp loc_xxxxxx而不是jmp sub_xxxxxx。但是目前还不影响，先分析报错的地方。</p>
</li>
<li><p>可以看到 xor ebp,[eax+50h] 处报红了，并且下面是一段没分析出来的数和字符串”pause”，下面进行分析</p>
</li>
<li><p>首先，rep stosd初始化后，进行了一个恒跳，跳转的地方是0046308E，在 xor ebp,[eax+50h] 这条指令里，所以这里红了</p>
</li>
<li><p>把 xor ebp,[eax+50h] 这条指令undefine一下</p>
<p><img src="/../images/image-20250801002409823.png" alt="undefine一下"></p>
</li>
<li><p>根据逻辑，程序是肯定会跳到0046308E的，所以前面的代码冗余，直接nop掉。选中 xor eax,eax 到0046308E（根据上一种类型的经验，要多覆盖一位才能刚好nop掉目标代码）</p>
<p><img src="/../images/image-20250801002510740.png" alt="NOP"></p>
</li>
<li><p>nop完成后（如果有db 90h就按”C“转成code）就会发现下面没分析的数立刻分析出指令了</p>
<p><img src="/../images/image-20250801002536258.png" alt="去混淆成功"></p>
</li>
<li><p>但是还没完，此时按F5是无法反编译的，因为报错的地方是loc_xxxxxx范围里的，不是一个函数，也就是前面说的jmp loc_xxxxxx而不是jmp sub_xxxxxx的问题了。这里可以看出，IDA这类混淆会导致IDA把函数识别成一个引用而不是函数。</p>
</li>
<li><p>到最开始push ebp开辟栈帧的引用loc_463070处，把它undefine一下，再按“P”重新分析一下，就可以得到main函数了</p>
<p><img src="/../images/image-20250801002703125.png" alt="修复的main函数"></p>
</li>
<li><p>这类有一个特征就是jz loc_xxxxxx+1，据此可以快速找到加了混淆的地方</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>上述三种（实际上有混淆效果的只有两种）是比较基础的花指令。识别花指令的要点主要是看红色错误，也可以结合一些特征来识别。解决方法就是nop掉混淆代码。</li>
<li>在实际设计题目时，笔者意外发现了一些更强力的混淆，单单是在上述三种类型的基础上加一点其他指令，就会导致一个函数完全无法被识别（被放在rdata段而不是text段的那种），但是程序还能正常执行，而报错的地方在无法识别的函数的上级函数里（跳转到这个函数的那个函数），可能要结合AI才能实现快捷的分析。因此，花指令还是一个具有挑战性的混淆方式（当然也可能是笔者太菜了没石粒）</li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day12:反调试（一）</title>
    <url>/2025/08/02/Day12-%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>反调试基本原理、WINAPI检测、数据检测、进程检测</p>
<span id="more"></span>

<h2 id="反调试基本原理"><a href="#反调试基本原理" class="headerlink" title="反调试基本原理"></a>反调试基本原理</h2><ul>
<li>反调试技术通常借助操作系统相关的内容来实现，常见办法有调用WindowsAPI获得相关数据、有意触发异常监测异常处理（调试器会捕获异常）、时间差检测（实际运行过程十分迅速）、硬件断点检测、进程检测等</li>
</ul>
<h2 id="WINAPI检测"><a href="#WINAPI检测" class="headerlink" title="WINAPI检测"></a>WINAPI检测</h2><ul>
<li>由于是直接使用WINAPI，所以一般在IDA或者动态调试器里会有明显的函数名字样，识别会比较容易</li>
<li>此类一般是利用函数的返回值或者函数传递回来的参数作为判断标准，应对方法主要有使用反反调试插件、修改相关值、hook等</li>
</ul>
<h3 id="IsDebuggerPresent"><a href="#IsDebuggerPresent" class="headerlink" title="IsDebuggerPresent"></a>IsDebuggerPresent</h3><ul>
<li><p>原理：</p>
<p>IsDebuggerPresent() 实际上是通过访问PEB（ProcessEnvironmentBlock，进程环境块，一个描述进程相关数据的结构体）中的BeingDebugged标志来判断是否被调试的，被调试的话，函数返回1。有关BeingDebugged的内容，见下文。</p>
</li>
<li><p>IDA和XDbg的效果图：</p>
<p><img src="/../images/image-20250802131116428.png" alt="IDA效果图"></p>
<p><img src="/../images/image-20250802131150198.png" alt="XDbg效果图"></p>
<p>可以看到明显的IsDebuggerPresent字样。</p>
</li>
<li><p>应对方法：</p>
<p>在XDbg中开启scyllahide插件或者在TEST EAX,EAX后改变一下ZF就可以了</p>
</li>
</ul>
<h3 id="CheckRemoteDebuggerPresent"><a href="#CheckRemoteDebuggerPresent" class="headerlink" title="CheckRemoteDebuggerPresent"></a>CheckRemoteDebuggerPresent</h3><ul>
<li><p>原理：</p>
<p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c">BOOL WINAPI <span class="hljs-title function_">CheckRemoteDebuggerPresent</span><span class="hljs-params">(</span><br><span class="hljs-params">	In		HANDLE hProcess,<span class="hljs-comment">//参数1，一个进程句柄，传入当前进程句柄就是checklocal了</span></span><br><span class="hljs-params">	Inout	PBOOL pbDebuggerPresent<span class="hljs-comment">//参数2，一个用来传递的布尔值，用来表示是否被调试</span></span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure>

<p>这个函数实际上是借用了NtQueryInfomationProcess函数来实现调试检测的，简单讲就是通过NtQueryInformationProcess查询一个数据然后和非调试状态下这个数据预期的值进行比较，比较结果再传给自己的参数2。更详细的原理见下一个API</p>
</li>
<li><p>效果图：</p>
<p><img src="/../images/image-20250802151411075.png" alt="IDA效果图"></p>
<p><img src="/../images/image-20250802151613861.png" alt="xdbg效果"></p>
</li>
<li><p>应对方法：</p>
<p>scyllahide依旧管用，也可以在call CheckRemoteDebuggerPresent下面的cmp后改变zf来实现反反调试</p>
</li>
</ul>
<h3 id="NtQueryInformationProcess"><a href="#NtQueryInformationProcess" class="headerlink" title="NtQueryInformationProcess"></a>NtQueryInformationProcess</h3><ul>
<li><p>原理：</p>
<p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c">__kernel_entry NTSTATUS <span class="hljs-title function_">NtQueryInformationProcess</span><span class="hljs-params">(</span><br><span class="hljs-params">    IN HANDLE           ProcessHandle,<span class="hljs-comment">//要查询的进程句柄</span></span><br><span class="hljs-params">    IN PROCESSINFOCLASS ProcessInformationClass,<span class="hljs-comment">//要查询的信息类型</span></span><br><span class="hljs-params">    OUT PVOID           ProcessInformation,<span class="hljs-comment">//接收查询结果的缓冲区（变量）</span></span><br><span class="hljs-params">    IN ULONG            ProcessInformationLength,<span class="hljs-comment">//缓冲区大小</span></span><br><span class="hljs-params">    OUT PULONG          ReturnLength OPTIONAL<span class="hljs-comment">//实际返回的数据大小，可选</span></span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure>

<p>通过设置第二个参数为0x7（表示查询一个叫ProcessDebugPort的变量），函数会通过第三个参数传递调试信息，被调试则传递<strong>非</strong>0</p>
<p>或者设置第二个参数为0x1E（表示查询一个叫ProcessDebugObjectHandle的变量），被调试则传递<strong>非</strong>NULL</p>
<p>或者设置第二个参数为0x1F（表示查询一个叫ProcessDebugFlags的变量），被调试则传递0</p>
<p>原型是这样，但是这个函数是Windows内部API，即系统不想用户使用这个函数（可能是出于安全考虑），所以直接调用是不行的，要动态加载。下面是DS给的实现源码参考：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 1. 定义函数指针类型（必须手动声明）</span><br><span class="hljs-keyword">typedef</span> LONG NTSTATUS;<br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">NTSTATUS</span> <span class="hljs-params">(NTAPI* PNtQueryInformationProcess)</span><span class="hljs-params">(</span><br><span class="hljs-params">    HANDLE ProcessHandle,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> ProcessInformationClass,  <span class="hljs-comment">// 直接使用 int 代替 PROCESSINFOCLASS</span></span><br><span class="hljs-params">    PVOID ProcessInformation,</span><br><span class="hljs-params">    ULONG ProcessInformationLength,</span><br><span class="hljs-params">    PULONG ReturnLength</span><br><span class="hljs-params">)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 2. 动态加载 ntdll.dll</span><br>    HMODULE hNtdll = GetModuleHandleW(<span class="hljs-string">L&quot;ntdll.dll&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!hNtdll) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>        system(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 获取 NtQueryInformationProcess 函数地址</span><br>    PNtQueryInformationProcess NtQueryInformationProcess = <br>        (PNtQueryInformationProcess)GetProcAddress(hNtdll, <span class="hljs-string">&quot;NtQueryInformationProcess&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!NtQueryInformationProcess) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>        system(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 调用函数查询调试端口（0x7 = ProcessDebugPort）</span><br>    DWORD debugPort = <span class="hljs-number">0</span>;<br>    NTSTATUS status = NtQueryInformationProcess(<br>        GetCurrentProcess(),<br>        <span class="hljs-number">0x7</span>,  <span class="hljs-comment">// ProcessDebugPort</span><br>        &amp;debugPort,<br>        <span class="hljs-keyword">sizeof</span>(debugPort),<br>        <span class="hljs-literal">NULL</span><br>    );<br><br>    <span class="hljs-comment">// 5. 严格按照你的逻辑输出</span><br>    <span class="hljs-keyword">if</span> (debugPort)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bye\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello\n&quot;</span>);<br><br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>下面是IDA的反汇编结果</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>000000014007E130 sub_14007E130   proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: sub_14007920B↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E130                                         <span class="hljs-comment">; DATA XREF: .pdata:00000001401AB818↓o</span><br><span class="hljs-symbol">.text:</span>000000014007E130<br><span class="hljs-symbol">.text:</span>000000014007E130 var_180         = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">180h</span><br><span class="hljs-symbol">.text:</span>000000014007E130 var_160         = <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">160h</span><br><span class="hljs-symbol">.text:</span>000000014007E130 var_150         = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">150h</span><br><span class="hljs-symbol">.text:</span>000000014007E130 hModule         = <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">148h</span><br><span class="hljs-symbol">.text:</span>000000014007E130 var_128         = <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">128h</span><br><span class="hljs-symbol">.text:</span>000000014007E130 var_10C         = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">10Ch</span><br><span class="hljs-symbol">.text:</span>000000014007E130 var_EC          = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0ECh</span><br><span class="hljs-symbol">.text:</span>000000014007E130 var_18          = <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">18h</span><br><span class="hljs-symbol">.text:</span>000000014007E130<br><span class="hljs-symbol">.text:</span>000000014007E130 <span class="hljs-comment">; __unwind &#123; // j___GSHandlerCheck</span><br><span class="hljs-symbol">.text:</span>000000014007E130                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span>000000014007E132                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rdi</span><br><span class="hljs-symbol">.text:</span>000000014007E133                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">rsp</span>, <span class="hljs-number">178h</span><br><span class="hljs-symbol">.text:</span>000000014007E13A                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rbp</span>, [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">30h</span>]<br><span class="hljs-symbol">.text:</span>000000014007E13F                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">180h</span>+var_150]<br><span class="hljs-symbol">.text:</span>000000014007E144                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">22h</span> <span class="hljs-comment">; &#x27;&quot;&#x27;</span><br><span class="hljs-symbol">.text:</span>000000014007E149                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span>000000014007E14E                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>000000014007E150                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">cs</span>:__security_cookie<br><span class="hljs-symbol">.text:</span>000000014007E157                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span>000000014007E15A                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_18], <span class="hljs-built_in">rax</span><br><span class="hljs-symbol">.text:</span>000000014007E161                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, unk_1401B80A2<br><span class="hljs-symbol">.text:</span>000000014007E168                 <span class="hljs-keyword">call</span>    sub_14007A313<br><span class="hljs-symbol">.text:</span>000000014007E16D                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E16E                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, ModuleName <span class="hljs-comment">; &quot;ntdll.dll&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E175                 <span class="hljs-keyword">call</span>    <span class="hljs-built_in">cs</span>:GetModuleHandleW	<span class="hljs-comment">;此处加载ntdll库</span><br><span class="hljs-symbol">.text:</span>000000014007E17B                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+hModule], <span class="hljs-built_in">rax</span><br><span class="hljs-symbol">.text:</span>000000014007E17F                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+hModule], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>000000014007E184                 <span class="hljs-keyword">jnz</span>     short loc_14007E1A7<br><span class="hljs-symbol">.text:</span>000000014007E186                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aHello     <span class="hljs-comment">; &quot;hello\n&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E18D                 <span class="hljs-keyword">call</span>    sub_14007886F<br><span class="hljs-symbol">.text:</span>000000014007E192                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E193                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aPause     <span class="hljs-comment">; &quot;pause&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E19A                 <span class="hljs-keyword">call</span>    sub_140078810<br><span class="hljs-symbol">.text:</span>000000014007E19F                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E1A0                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>000000014007E1A2                 <span class="hljs-keyword">jmp</span>     loc_14007E240<br><span class="hljs-symbol">.text:</span>000000014007E1A7 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>000000014007E1A7<br><span class="hljs-symbol">.text:</span>000000014007E1A7 loc_14007E1A7:                          <span class="hljs-comment">; CODE XREF: sub_14007E130+54↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E1A7                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rdx</span>, ProcName   <span class="hljs-comment">; &quot;NtQueryInformationProcess&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E1AE                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+hModule] <span class="hljs-comment">; hModule</span><br><span class="hljs-symbol">.text:</span>000000014007E1B2                 <span class="hljs-keyword">call</span>    <span class="hljs-built_in">cs</span>:GetProcAddress	<span class="hljs-comment">;此处获取NtQueryInformationProcess函数地址</span><br><span class="hljs-symbol">.text:</span>000000014007E1B8                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_128], <span class="hljs-built_in">rax</span>	<span class="hljs-comment">;此处把函数地址传给局部变量</span><br><span class="hljs-symbol">.text:</span>000000014007E1BC                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_128], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>000000014007E1C1                 <span class="hljs-keyword">jnz</span>     short loc_14007E1E1<br><span class="hljs-symbol">.text:</span>000000014007E1C3                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aHello     <span class="hljs-comment">; &quot;hello\n&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E1CA                 <span class="hljs-keyword">call</span>    sub_14007886F<br><span class="hljs-symbol">.text:</span>000000014007E1CF                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E1D0                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aPause     <span class="hljs-comment">; &quot;pause&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E1D7                 <span class="hljs-keyword">call</span>    sub_140078810<br><span class="hljs-symbol">.text:</span>000000014007E1DC                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E1DD                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>000000014007E1DF                 <span class="hljs-keyword">jmp</span>     short loc_14007E240<br><span class="hljs-symbol">.text:</span>000000014007E1E1 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>000000014007E1E1<br><span class="hljs-symbol">.text:</span>000000014007E1E1 loc_14007E1E1:                          <span class="hljs-comment">; CODE XREF: sub_14007E130+91↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E1E1                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_10C], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>000000014007E1E8                 <span class="hljs-keyword">call</span>    <span class="hljs-built_in">cs</span>:GetCurrentProcess	<br><span class="hljs-symbol">.text:</span>000000014007E1EE                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">180h</span>+var_160], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>000000014007E1F7                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r9d</span>, <span class="hljs-number">4</span>	<span class="hljs-comment">;缓冲区大小</span><br><span class="hljs-symbol">.text:</span>000000014007E1FD                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">r8</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_10C]	<span class="hljs-comment">;接收结果的缓冲区</span><br><span class="hljs-symbol">.text:</span>000000014007E201                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">7</span>	<span class="hljs-comment">;指定查询的信息类型</span><br><span class="hljs-symbol">.text:</span>000000014007E206                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rax</span>	<span class="hljs-comment">;查询的进程句柄</span><br><span class="hljs-symbol">.text:</span>000000014007E209                 <span class="hljs-keyword">call</span>    [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_128]	<span class="hljs-comment">;调用NtQueryInformationProcess</span><br><span class="hljs-symbol">.text:</span>000000014007E20C                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_EC], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>000000014007E20F                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_10C], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>000000014007E213                 <span class="hljs-keyword">jz</span>      short loc_14007E224<br><span class="hljs-symbol">.text:</span>000000014007E215                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aBye       <span class="hljs-comment">; &quot;bye\n&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E21C                 <span class="hljs-keyword">call</span>    sub_14007886F<br><span class="hljs-symbol">.text:</span>000000014007E221                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E222                 <span class="hljs-keyword">jmp</span>     short loc_14007E231<br><span class="hljs-symbol">.text:</span>000000014007E224 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>000000014007E224<br><span class="hljs-symbol">.text:</span>000000014007E224 loc_14007E224:                          <span class="hljs-comment">; CODE XREF: sub_14007E130+E3↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E224                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aHello     <span class="hljs-comment">; &quot;hello\n&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E22B                 <span class="hljs-keyword">call</span>    sub_14007886F<br><span class="hljs-symbol">.text:</span>000000014007E230                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E231<br><span class="hljs-symbol">.text:</span>000000014007E231 loc_14007E231:                          <span class="hljs-comment">; CODE XREF: sub_14007E130+F2↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E231                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aPause     <span class="hljs-comment">; &quot;pause&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E238                 <span class="hljs-keyword">call</span>    sub_140078810<br><span class="hljs-symbol">.text:</span>000000014007E23D                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E23E                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>000000014007E240<br><span class="hljs-symbol">.text:</span>000000014007E240 loc_14007E240:                          <span class="hljs-comment">; CODE XREF: sub_14007E130+72↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E240                                         <span class="hljs-comment">; sub_14007E130+AF↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E240                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-symbol">.text:</span>000000014007E243                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_180]<br><span class="hljs-symbol">.text:</span>000000014007E247                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rdx</span>, unk_140171FF0<br><span class="hljs-symbol">.text:</span>000000014007E24E                 <span class="hljs-keyword">call</span>    sub_140079A35<br><span class="hljs-symbol">.text:</span>000000014007E253                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rdi</span><br><span class="hljs-symbol">.text:</span>000000014007E256                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_18]<br><span class="hljs-symbol">.text:</span>000000014007E25D                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rbp</span>        <span class="hljs-comment">; StackCookie</span><br><span class="hljs-symbol">.text:</span>000000014007E260                 <span class="hljs-keyword">call</span>    j___security_check_cookie<br><span class="hljs-symbol">.text:</span>000000014007E265                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rsp</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">148h</span>]<br><span class="hljs-symbol">.text:</span>000000014007E26C                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">rdi</span><br><span class="hljs-symbol">.text:</span>000000014007E26D                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span>000000014007E26E                 <span class="hljs-keyword">retn</span><br><span class="hljs-symbol">.text:</span>000000014007E26E <span class="hljs-comment">; &#125; // starts at 14007E130</span><br><span class="hljs-symbol">.text:</span>000000014007E26E sub_14007E130   endp<br><span class="hljs-symbol">.text:</span>000000014007E26E<br></code></pre></td></tr></table></figure>

<p>特征应该是 call    cs:GetModuleHandleW、call    cs:GetProcAddress、 call    cs:GetCurrentProcess</p>
</li>
<li><p>应对方法：</p>
<p>scyllahide也是支持反NtQueryInformationProcess反调试的，手动绕过一般是更改缓冲区的值与标准值的比较结果，当然在DS给的源码中因为加入了一些错误处理（如ntdll载入失败就跳过反调试），可以通过人为改动错误判断的结果来实现直接跳过反调试</p>
</li>
</ul>
<h3 id="GetLastError"><a href="#GetLastError" class="headerlink" title="GetLastError"></a>GetLastError</h3><ul>
<li><p>这个函数用于获取最近一次异常的返回值。使用的方法一般是故意构造异常，如果处于被调试状态，调试器会捕获异常导致返回的错误码和预期的不符。</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/image-20250802173635007.png" alt="IDA"></p>
<p><img src="/../images/image-20250802173655097.png" alt="XDbg"></p>
</li>
<li><p>应对方法：</p>
<p>可以看到，GetLastError之后，会把返回值和预设的值进行比较，所以修改cmp后的zf就可以了。由于GetLastError的自由度比较高（触发异常的方法多样），所以scyllahide应该是不支持的（笔者没有认出什么相关的设置）</p>
</li>
</ul>
<h2 id="数据检测"><a href="#数据检测" class="headerlink" title="数据检测"></a>数据检测</h2><h3 id="BeingDebugged"><a href="#BeingDebugged" class="headerlink" title="BeingDebugged"></a>BeingDebugged</h3><ul>
<li><p>BeingDebugged是PEB的成员变量之一，用于描述进程是否处于被调试状态，为1时表示处于被调试状态。</p>
<p>PEB结构体具体如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">PEB</span> &#123;</span><br>  BYTE                          Reserved1[<span class="hljs-number">2</span>];<br>  BYTE                          BeingDebugged;<span class="hljs-comment">//偏移为2</span><br>  BYTE                          Reserved2[<span class="hljs-number">1</span>];<br>  PVOID                         Reserved3[<span class="hljs-number">2</span>];<br>  PPEB_LDR_DATA                 Ldr;<br>  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;<br>  PVOID                         Reserved4[<span class="hljs-number">3</span>];<br>  PVOID                         AtlThunkSListPtr;<br>  PVOID                         Reserved5;<br>  ULONG                         Reserved6;<br>  PVOID                         Reserved7;<br>  ULONG                         Reserved8;<br>  ULONG                         AtlThunkSListPtr32;<br>  PVOID                         Reserved9[<span class="hljs-number">45</span>];<br>  BYTE                          Reserved10[<span class="hljs-number">96</span>];<br>  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;<br>  BYTE                          Reserved11[<span class="hljs-number">128</span>];<br>  PVOID                         Reserved12[<span class="hljs-number">1</span>];<br>  ULONG                         SessionId;<br>&#125; PEB, *PPEB;<br></code></pre></td></tr></table></figure>
</li>
<li><p>反调试手段通常是访问进程的该参数（如WINAPI的IsDebuggerPresent()）来判断是否处于被调试状态。32位下，PEB用FS:[0x30]表示；64位下，PEB用FS:[0x60]表示。加上偏移2就是对BeingDebugged的访问了（这就是这种方法的特征了）</p>
</li>
<li><p>效果图：</p>
<p><img src="/../images/image-20250802180316105.png" alt="IDA"></p>
<p><img src="/../images/image-20250802180438104.png" alt="XDbg"></p>
</li>
<li><p>应对方法：</p>
<p>scyllahide可绕过，手动绕过只需要在访问指令下方的cmp后修改ZF即可</p>
</li>
</ul>
<h3 id="NTGlobalFlag"><a href="#NTGlobalFlag" class="headerlink" title="NTGlobalFlag"></a>NTGlobalFlag</h3><ul>
<li><p>NTGlobalFlag也是PEB结构体的成员，但是是非公开的（因此上文的PEB结构体定义中看不到）。32位下，它位于PEB偏移0x68处，64位下，它位于PEB偏移0xBC处（特征）。它本是描述进程堆管理的，但是由于调试器中的进程创建堆的方式和正常情况有所不同，被调试时该值会被设为0x70（又一个特征），因此也被用来判断是否被调试</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/image-20250802181920666.png" alt="IDA"></p>
<p><img src="/../images/image-20250802181950005.png" alt="XDbg"></p>
</li>
<li><p>应对方法：</p>
<p>syllahide可以绕过，也可以在下面的比较逻辑（因为是内联汇编，所以比较逻辑的实现会有不同）后修改ZF绕过</p>
</li>
</ul>
<h2 id="进程检测"><a href="#进程检测" class="headerlink" title="进程检测"></a>进程检测</h2><h3 id="FindWindow"><a href="#FindWindow" class="headerlink" title="FindWindow"></a>FindWindow</h3><ul>
<li><p>实际上是窗口检测，这个函数获取的是进程窗口的类名或者标签，通过与预期的名字进行比较来判断是否处于被调试状态。由于使用的是系统函数，所以实际上也属于WINAPI检测，但是不重要。特征和WINAPI检测一样，会有明显的标记</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/image-20250802184919847.png" alt="IDA"></p>
<p><img src="/../images/image-20250802185121993.png" alt="XDbg"></p>
</li>
<li><p>本例的程序创建了一个判断函数，在主函数中是将返回值test后来判断是否被调试的，所以只需要修改主函数中的test eax,eax后的ZF就可以实现绕过了。scyllahide应该是不支持的</p>
</li>
</ul>
<h3 id="父进程检测"><a href="#父进程检测" class="headerlink" title="父进程检测"></a>父进程检测</h3><ul>
<li><p>原理是正常程序双击运行父进程为explorer.exe，而拖进调试器打开父进程为调试器，通过比较获得的父进程名和预设的父进程名可以判断是否处于被调试状态。一般会通过遍历进程或者通过NtQueryInfomationProcess查询来实现。特征是出现大量和进程相关的api，如遍历进程时会调用CreateToolhelp32Snapshot、th32ParentProcessID、Process32Next等，NtQueryInfomationProcess查询会出现QueryFullProcessImageNameA或者其他相关函数与调试器名称字符串同时出现的情况</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/image-20250802200208452.png" alt="IDA显式体现"></p>
<p><img src="/../images/image-20250802200407372.png" alt="XDbg跳转表中体现"></p>
<p><img src="/../images/image-20250802201532370.png" alt="IDA"></p>
<p><img src="/../images/image-20250802201557678.png" alt="XDbg"></p>
</li>
<li><p>实测scyllahide绕过不了第一种方法但可以绕过第二种方法。手动绕过也可以，主要基于后续对进程名的判断，修改判断结果即可绕过</p>
</li>
</ul>
<h3 id="特征码检测"><a href="#特征码检测" class="headerlink" title="特征码检测"></a>特征码检测</h3><ul>
<li><p>有的调试器在内存中会有特征码，通过遍历进程和搜索特征码可以判断是否被调试。这种情况会比较复杂，难点应该在识别上。一方面可以通过分析是否出现特征码（可能会是很明显的一连串数字初始化），另一方面遍历进程会出现父进程检测中提及的api，但是这些一般不会出现在主函数中，需要跟进函数查看。</p>
<p>特征码示例：</p>
<p><img src="/../images/image-20250802211300649.png" alt="IDA"></p>
<p><img src="/../images/image-20250802211316100.png" alt="XDbg"></p>
</li>
<li><p>scyllahide一般绕过不了，可以在主函数涉及判断结果的逻辑中进行改动绕过。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day13:反调试（二）</title>
    <url>/2025/08/03/Day13-%E5%8F%8D%E8%B0%83%E8%AF%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>时间差检测、断点检测</p>
<span id="more"></span>

<h2 id="时间差检测"><a href="#时间差检测" class="headerlink" title="时间差检测"></a>时间差检测</h2><ul>
<li>CPU的运行十分迅速，一段代码可能在几毫秒内就可以执行完毕，但是调试的时候，代码运行时间会显著地变慢，这就是时间差检测的原理。时间差检测主要通过计算时间差然后与预设的值比较实现。</li>
</ul>
<h3 id="RDTSC指令计算"><a href="#RDTSC指令计算" class="headerlink" title="RDTSC指令计算"></a>RDTSC指令计算</h3><ul>
<li><p>rdtsc是一个汇编指令，用于将时间读入edx:eax寄存器（高32位：低32位）。通过取两次时间把结果相减可以得到一个时间差。显著特征就是rdtsc指令</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/image-20250803103503205.png" alt="IDA"></p>
<p><img src="/../images/image-20250803103510223.png" alt="XDbg"></p>
</li>
<li><p>应对方法：</p>
<p>根据程序的逻辑，可以在计算出时间差并比较之后改变比较结果。</p>
</li>
</ul>
<h3 id="GetTickCount计算"><a href="#GetTickCount计算" class="headerlink" title="GetTickCount计算"></a>GetTickCount计算</h3><ul>
<li><p>原理和RDTSC类似，只不过时间差采用GetTickCount计算。GetTickCount也是WINAPI，会有明显标记。</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/image-20250803110132263.png" alt="IDA"></p>
<p><img src="/../images/image-20250803110151704.png" alt="XDbg"></p>
</li>
<li><p>应对方法：</p>
<p>修改比较结果即可</p>
</li>
</ul>
<h3 id="QueryPerformanceCounter计算"><a href="#QueryPerformanceCounter计算" class="headerlink" title="QueryPerformanceCounter计算"></a>QueryPerformanceCounter计算</h3><ul>
<li><p>原理类似，只是采用QueryPerformanceCounter计算，也是WINAPI，比较好识别</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/image-20250803111252719.png" alt="IDA"></p>
<p><img src="/../images/image-20250803111302239.png" alt="XDbg"></p>
</li>
<li><p>应对方法：</p>
<p>修改比较结果即可</p>
</li>
</ul>
<h2 id="断点检测"><a href="#断点检测" class="headerlink" title="断点检测"></a>断点检测</h2><ul>
<li>断点是调试的一个显著特点。断点可以分为软件断点、硬件断点和内存断点。软件断点通过将目标代码修改为中断指令（X86\X64下一般为INT3\0xCC）实现；硬件断点通过将指令地址写入调试寄存器的DR0-DR3监控地址访问来实现；内存断点通过修改内存页（一片片内存区域）的访问权限实现。三者的实现方法都会触发异常让调试器捕获进而中断。反调试的断点检测主要利用软件断点和硬件断点，内存断点由于针对内存区域而非具体指令，精度太低，一般不考虑。</li>
</ul>
<h3 id="软件断点检测"><a href="#软件断点检测" class="headerlink" title="软件断点检测"></a>软件断点检测</h3><ul>
<li><p>常见手段是在内存区域搜索0xCC（使用汇编指令repnz scasb）</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/image-20250803184326511.png" alt="IDA"></p>
<p><img src="/../images/image-20250803184332179.png" alt="XDbg"></p>
</li>
<li><p>因为进行了比较，所以修改比较结果即可绕过</p>
</li>
</ul>
<h3 id="硬件断点检测"><a href="#硬件断点检测" class="headerlink" title="硬件断点检测"></a>硬件断点检测</h3><ul>
<li><p>常见手段是获取DR寄存器的值并和0比较。特征是GetThreadContext函数（或者其他ThreadContext相关的函数）和与0的比较</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/image-20250803190042096.png" alt="IDA"></p>
<p><img src="/../images/image-20250803190057497.png" alt="XDbg"></p>
</li>
<li><p>应对方法：</p>
<p>还是进行了比较，修改比较结果绕过</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day15:指令虚拟化</title>
    <url>/2025/08/06/Day15-%E6%8C%87%E4%BB%A4%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
    <content><![CDATA[<p>指令虚拟化、实现一个小型虚拟机程序、VM逆向实践</p>
<span id="more"></span>

<h2 id="什么是指令虚拟化"><a href="#什么是指令虚拟化" class="headerlink" title="什么是指令虚拟化"></a>什么是指令虚拟化</h2><ul>
<li><p>CPU厂商在开发CPU前会制定一个规范，建立起数据和操作的对应关系（如x86-64规定0x30对应异或操作），而这个数据又可以根据操作命名出汇编指令（如0x30命名为xor），因此有了数据与操作的对应关系和汇编指令与操作的对应关系，称之为指令集。CPU可以视作一个解释器，负责读取数据或者汇编指令然后带动机器产生操作。</p>
</li>
<li><p>通俗的讲，指令虚拟化实际上就是自定义指令集并为自己的指令集构建解释器，用自定义的指令实现程序的过程。这个过程利用高级语言代码实现，也就是用软件来模拟硬件，类似于虚拟机，因此称之为指令虚拟化。</p>
</li>
<li><p>实现指令虚拟化，需要定义寄存器变量（至少需要一个EIP来指向运行的指令）、内存空间数组、解释器和指令数组。</p>
</li>
<li><p>实现自定义指令集的解释器，可以采用C语言的switch（其中code是自定义指令，通过循环输入）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//解释器：1输出11111，2输出22222，3输出33333</span><br><span class="hljs-keyword">switch</span>(code):<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;11111&quot;</span>);<br>	<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>	print(<span class="hljs-string">&quot;22222&quot;</span>);<br>	<span class="hljs-keyword">break</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>	print(<span class="hljs-string">&quot;33333&quot;</span>);<br>	<span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="实现一个小型虚拟机程序"><a href="#实现一个小型虚拟机程序" class="headerlink" title="实现一个小型虚拟机程序"></a>实现一个小型虚拟机程序</h2><ul>
<li>尝试编写一个输入两个数，输出和的程序</li>
</ul>
<h3 id="声明虚拟硬件结构体"><a href="#声明虚拟硬件结构体" class="headerlink" title="声明虚拟硬件结构体"></a>声明虚拟硬件结构体</h3><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r1;<span class="hljs-comment">//寄存器r1</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r2;<span class="hljs-comment">//寄存器r2</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> eip;<span class="hljs-comment">//寄存器eip</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> mem[<span class="hljs-number">256</span>];<span class="hljs-comment">//虚拟内存数组</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[<span class="hljs-number">1024</span>];<span class="hljs-comment">//指令数组</span><br>&#125; VM;<br></code></pre></td></tr></table></figure>

<h3 id="定义指令集"><a href="#定义指令集" class="headerlink" title="定义指令集"></a>定义指令集</h3><ul>
<li>使用op1、op2表示指令后面跟的操作数，寄存器作为隐式参数不会出现在code中</li>
</ul>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">使用格式</th>
<th align="center">对应汇编指令&#x2F;伪代码</th>
<th align="center">操作解读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0x10</td>
<td align="center">0x10,op1</td>
<td align="center">mov r1,mem[op1]</td>
<td align="center">r1&#x3D;mem[op1]</td>
</tr>
<tr>
<td align="center">0x11</td>
<td align="center">0x11,op1</td>
<td align="center">mov r2,mem[op1]</td>
<td align="center">r2&#x3D;mem[op1]</td>
</tr>
<tr>
<td align="center">0x20</td>
<td align="center">0x20</td>
<td align="center">add r1,r2</td>
<td align="center">r1+&#x3D;r2</td>
</tr>
<tr>
<td align="center">0x30</td>
<td align="center">0x30,op1,op2</td>
<td align="center">scanf-&gt;mem[op1],mem[op2]</td>
<td align="center">输入给mem[op1]，mem[op2]</td>
</tr>
<tr>
<td align="center">0x40</td>
<td align="center">0x40</td>
<td align="center">printf r1</td>
<td align="center">输出r1的值</td>
</tr>
<tr>
<td align="center">0x50</td>
<td align="center">0x50</td>
<td align="center">ret</td>
<td align="center">return 1</td>
</tr>
</tbody></table>
<h3 id="编写解释器"><a href="#编写解释器" class="headerlink" title="编写解释器"></a>编写解释器</h3><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">vm_run</span><span class="hljs-params">(VM* vm)</span> &#123;<br>    <span class="hljs-type">char</span> opcode;<span class="hljs-comment">//用来存放指令</span><br>    <span class="hljs-type">char</span> op1, op2;<span class="hljs-comment">//用来存放操作数</span><br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        opcode = vm-&gt;code[vm-&gt;eip];<span class="hljs-comment">//读取eip指向的指令</span><br><br>        <span class="hljs-keyword">switch</span> (opcode) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x10</span>:<br>            op1 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">1</span>];<span class="hljs-comment">//获取操作数</span><br>            vm-&gt;r1 = vm-&gt;mem[op1];<span class="hljs-comment">//r1=mem[op1]</span><br>            vm-&gt;eip += <span class="hljs-number">2</span>;<span class="hljs-comment">//跳转到下一条指令（指令+操作数占2个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x11</span>:<br>            op1 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">1</span>];<span class="hljs-comment">//获取操作数</span><br>            vm-&gt;r2 = vm-&gt;mem[op1];<span class="hljs-comment">//r2=mem[op1]</span><br>            vm-&gt;eip += <span class="hljs-number">2</span>;<span class="hljs-comment">//跳转到下一条指令（指令+操作数占2个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x20</span>:<br>            vm-&gt;r1 += vm-&gt;r2;<span class="hljs-comment">//r1+=r2</span><br>            vm-&gt;eip += <span class="hljs-number">1</span>;<span class="hljs-comment">//跳转到下一条指令（只有指令，占1个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x30</span>:<br>            op1 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">1</span>];<span class="hljs-comment">//获取操作数1</span><br>            op2 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">2</span>];<span class="hljs-comment">//获取操作数2</span><br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;vm-&gt;mem[op1], &amp;vm-&gt;mem[op2]);<span class="hljs-comment">//输入给mem[op1]，mem[op2]</span><br>            vm-&gt;eip += <span class="hljs-number">3</span>;<span class="hljs-comment">//跳转到下一条指令（指令+操作数占3个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x40</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, vm-&gt;r1);<span class="hljs-comment">//输出r1的值</span><br>            vm-&gt;eip += <span class="hljs-number">1</span>;<span class="hljs-comment">//跳转到下一条指令（只有指令，占1个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x50</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//循环终止，函数返回，虚拟机关机</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="指令数组"><a href="#指令数组" class="headerlink" title="指令数组"></a>指令数组</h3><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[]=&#123;<br>	<span class="hljs-number">0x30</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-comment">//输入给mem[0]，mem[1]</span><br>    <span class="hljs-number">0x10</span>,<span class="hljs-number">0x0</span>,<span class="hljs-comment">//r1=mem[0]</span><br>    <span class="hljs-number">0x11</span>,<span class="hljs-number">0x1</span>,<span class="hljs-comment">//r2=mem[1]</span><br>    <span class="hljs-number">0x20</span>,<span class="hljs-comment">//r1+=r2</span><br>    <span class="hljs-number">0x40</span>,<span class="hljs-comment">//输出r1的值</span><br>    <span class="hljs-number">0x50</span><span class="hljs-comment">//虚拟机关机</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h3><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r1;<span class="hljs-comment">//寄存器r1</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r2;<span class="hljs-comment">//寄存器r2</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> eip;<span class="hljs-comment">//寄存器eip</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> mem[<span class="hljs-number">256</span>];<span class="hljs-comment">//虚拟内存数组</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[<span class="hljs-number">1024</span>];<span class="hljs-comment">//指令数组</span><br>&#125; VM;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[]=&#123;<br>	<span class="hljs-number">0x30</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-comment">//输入给mem[0]，mem[1]</span><br>    <span class="hljs-number">0x10</span>,<span class="hljs-number">0x0</span>,<span class="hljs-comment">//r1=mem[0]</span><br>    <span class="hljs-number">0x11</span>,<span class="hljs-number">0x1</span>,<span class="hljs-comment">//r2=mem[1]</span><br>    <span class="hljs-number">0x20</span>,<span class="hljs-comment">//r1+=r2</span><br>    <span class="hljs-number">0x40</span>,<span class="hljs-comment">//输出r1的值</span><br>    <span class="hljs-number">0x50</span><span class="hljs-comment">//虚拟机关机</span><br>&#125;;<br><br>VM* <span class="hljs-title function_">vm_new</span><span class="hljs-params">()</span> &#123;<br>    VM* vm = (VM*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(VM));<span class="hljs-comment">//为虚拟硬件结构体申请空间</span><br>    <span class="hljs-built_in">memset</span>(vm, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(VM));<span class="hljs-comment">//初始化结构体</span><br>    <span class="hljs-built_in">memcpy</span>(vm-&gt;code, code, <span class="hljs-keyword">sizeof</span>(code));<span class="hljs-comment">//初始化code</span><br>    <span class="hljs-keyword">return</span> vm;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">vm_run</span><span class="hljs-params">(VM* vm)</span> &#123;<br>    <span class="hljs-type">char</span> opcode;<span class="hljs-comment">//用来存放指令</span><br>    <span class="hljs-type">char</span> op1, op2;<span class="hljs-comment">//用来存放操作数</span><br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        opcode = vm-&gt;code[vm-&gt;eip];<span class="hljs-comment">//读取eip指向的指令</span><br><br>        <span class="hljs-keyword">switch</span> (opcode) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x10</span>:<br>            op1 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">1</span>];<span class="hljs-comment">//获取操作数</span><br>            vm-&gt;r1 = vm-&gt;mem[op1];<span class="hljs-comment">//r1=mem[op1]</span><br>            vm-&gt;eip += <span class="hljs-number">2</span>;<span class="hljs-comment">//跳转到下一条指令（指令+操作数占2个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x11</span>:<br>            op1 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">1</span>];<span class="hljs-comment">//获取操作数</span><br>            vm-&gt;r2 = vm-&gt;mem[op1];<span class="hljs-comment">//r2=mem[op1]</span><br>            vm-&gt;eip += <span class="hljs-number">2</span>;<span class="hljs-comment">//跳转到下一条指令（指令+操作数占2个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x20</span>:<br>            vm-&gt;r1 += vm-&gt;r2;<span class="hljs-comment">//r1+=r2</span><br>            vm-&gt;eip += <span class="hljs-number">1</span>;<span class="hljs-comment">//跳转到下一条指令（只有指令，占1个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x30</span>:<br>            op1 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">1</span>];<span class="hljs-comment">//获取操作数1</span><br>            op2 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">2</span>];<span class="hljs-comment">//获取操作数2</span><br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;vm-&gt;mem[op1], &amp;vm-&gt;mem[op2]);<span class="hljs-comment">//输入给mem[op1]，mem[op2]</span><br>            vm-&gt;eip += <span class="hljs-number">3</span>;<span class="hljs-comment">//跳转到下一条指令（指令+操作数占3个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x40</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, vm-&gt;r1);<span class="hljs-comment">//输出r1的值</span><br>            vm-&gt;eip += <span class="hljs-number">1</span>;<span class="hljs-comment">//跳转到下一条指令（只有指令，占1个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x50</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//循环终止，函数返回，虚拟机关机</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    VM* vm = vm_new();<span class="hljs-comment">//生成一个虚拟机</span><br>    <span class="hljs-keyword">if</span> (vm_run(vm))<span class="hljs-comment">//运行虚拟机</span><br>        system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="简单示例的逆向"><a href="#简单示例的逆向" class="headerlink" title="简单示例的逆向"></a>简单示例的逆向</h2><ul>
<li><p>VM题最显著的特征应该就是虚拟硬件结构体的初始化和解释器了。解决这类问题，需要先复刻出一个解释器，通过在解释器中增加打印分析出的代码的操作，来得到去虚拟化的原程序，进而可以正常逆向分析</p>
</li>
<li><p>先来看main函数：</p>
<p><img src="/../images/image-20250806232124465.png" alt="main函数"></p>
<p>下面三个带字符串的函数可以看出是printf和system</p>
</li>
<li><p>看看v1&#x3D;后面的函数</p>
<p><img src="/../images/image-20250806232516529.png" alt="v1&#x3D;后面的函数"></p>
<p>目前没什么明显的VM特征</p>
</li>
<li><p>再看看if括号里的函数</p>
<p><img src="/../images/image-20250806232613438.png" alt="if括号里的函数"></p>
<p>看到出现switch了，开始推测是VM的解释器</p>
<p>回到上一个函数，发现确实和VM的初始化函数很像，最后面一个函数的第二个参数对应出来的是一堆数字，和初始化code对应上了</p>
<p><img src="/../images/image-20250806232947764.png" alt="一堆数字"></p>
</li>
<li><p>OK，那就对伪代码进行一点点优化，然后开始分析解释器</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//推测虚拟硬件结构体</span><br>__int64 __fastcall <span class="hljs-title function_">vm_run</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *vm)</span><br>&#123;<br>  sub_140001940(&amp;unk_1401150A2);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">switch</span> ( *((_BYTE *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">268</span>) )<span class="hljs-comment">//vm+268是code所在，结合下文分析，加上vm[2]就构成了code[eip]</span><br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x10</span>:<br>        *vm = *((<span class="hljs-type">char</span> *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">269</span>);<span class="hljs-comment">//*vm=code[eip+1]，vm应该是一个寄存器，这句是mov r1,op1</span><br>        vm[<span class="hljs-number">2</span>] += <span class="hljs-number">2</span>;<span class="hljs-comment">//每个case都有，推测是eip。+=2，说明有一个操作数                            </span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x11</span>:<br>        vm[<span class="hljs-number">1</span>] = *((<span class="hljs-type">char</span> *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">269</span>);<span class="hljs-comment">//vm[1]=code[eip+1]，vm[1]应该也是一个寄存器,这句是mov r2,op1</span><br>        vm[<span class="hljs-number">2</span>] += <span class="hljs-number">2</span>;<span class="hljs-comment">//有一个操作数</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x20</span>:<br>        *((_BYTE *)vm + *((<span class="hljs-type">char</span> *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">269</span>) + <span class="hljs-number">12</span>) = *((_BYTE *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">270</span>);<br>            <span class="hljs-comment">//*((char *)vm + vm[2] + 269)是code[eip+1]，即op1，所以左边是vm+12+op1，推测vm+12是虚拟内存，刚好跨过三个连续的int型寄存器</span><br>            <span class="hljs-comment">//右边即vm+vm[2]+268+2即code[eip+2]，即op2</span><br>        vm[<span class="hljs-number">2</span>] += <span class="hljs-number">3</span>;<span class="hljs-comment">//有两个操作数</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x30</span>:<br>        *((_BYTE *)vm + *vm + <span class="hljs-number">12</span>) ^= *((_BYTE *)vm + <span class="hljs-number">4</span>);<span class="hljs-comment">//mem[r1]^=r2</span><br>        ++vm[<span class="hljs-number">2</span>];<span class="hljs-comment">//无操作数</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x40</span>:<br>        sub_140001610(&amp;unk_1400D74B0, vm + <span class="hljs-number">3</span>);<span class="hljs-comment">//unk这个是%5s，所以这是scanf。这里的vm是int，加三跳过了单个寄存器，是mem[0]</span><br>        ++vm[<span class="hljs-number">2</span>];<span class="hljs-comment">//无操作数</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x50</span>:<br>        <span class="hljs-keyword">return</span> sub_1400D4430(vm + <span class="hljs-number">3</span>, (<span class="hljs-type">char</span> *)vm + *((<span class="hljs-type">char</span> *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">269</span>) + <span class="hljs-number">12</span>, *((<span class="hljs-type">char</span> *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">270</span>));<br>            <span class="hljs-comment">//三个参数分别为mem[0],mem[op1],op2，推测是memcmp（怎么没暗示操作数个数</span><br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>推测虚拟硬件结构体如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>   	<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r1;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r2;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> eip;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> mem[<span class="hljs-number">268</span><span class="hljs-number">-3</span>*<span class="hljs-number">4</span>=<span class="hljs-number">256</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[<span class="hljs-number">36</span>];<br>&#125; VM;<br></code></pre></td></tr></table></figure>
</li>
<li><p>带输出分析出来的代码的解释器如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">vm_run</span><span class="hljs-params">(VM* vm)</span> &#123;<br>    <span class="hljs-type">char</span> opcode;<br>    <span class="hljs-type">char</span> op1, op2;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        opcode = vm-&gt;code[vm-&gt;eip];<br><br>        <span class="hljs-keyword">switch</span> (opcode) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x10</span>:<br>            vm-&gt;r1 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            vm-&gt;eip += <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mov r1,&quot;</span> &lt;&lt; vm-&gt;r1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x11</span>:<br>            vm-&gt;r2 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            vm-&gt;eip += <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mov r2,&quot;</span> &lt;&lt; vm-&gt;r2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x20</span>:<br>            op1 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            op2 = code[vm-&gt;eip + <span class="hljs-number">2</span>];<br>            vm-&gt;mem[op1] = op2;<br>            vm-&gt;eip += <span class="hljs-number">3</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mov mem[&quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)op1 &lt;&lt; <span class="hljs-string">&quot;],&quot;</span> &lt;&lt; op2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x30</span>:<br>            vm-&gt;mem[vm-&gt;r1] ^= vm-&gt;r2;<br>            ++vm-&gt;eip;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;xor mem[&quot;</span> &lt;&lt; vm-&gt;r1 &lt;&lt; <span class="hljs-string">&quot;],&quot;</span> &lt;&lt; vm-&gt;r2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x40</span>:<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%5s&quot;</span>, &amp;vm-&gt;mem[<span class="hljs-number">0</span>]);<br>            ++vm-&gt;eip;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;scanf mem\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x50</span>:<br>            op1 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            op2 = code[vm-&gt;eip + <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">memcmp</span>(&amp;vm-&gt;mem[<span class="hljs-number">0</span>], &amp;vm-&gt;mem[op1], op2);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>完整的脚本：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r1;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r2;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> eip;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> mem[<span class="hljs-number">256</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[<span class="hljs-number">36</span>];<br>&#125; VM ;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[] = &#123;<br>    <span class="hljs-number">0x20</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x40</span>,<br>    <span class="hljs-number">0x11</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x04</span>,<br>    <span class="hljs-number">0x30</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x05</span><br>&#125;;<br><br>VM* <span class="hljs-title function_">vm_new</span><span class="hljs-params">()</span> &#123;<br>    VM* vm = (VM*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(VM));<br>    <span class="hljs-built_in">memset</span>(vm, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(VM));<br>    <span class="hljs-built_in">memcpy</span>(vm-&gt;code, code, <span class="hljs-keyword">sizeof</span>(code));<br>    <span class="hljs-keyword">return</span> vm;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">vm_run</span><span class="hljs-params">(VM* vm)</span> &#123;<br>    <span class="hljs-type">char</span> opcode;<br>    <span class="hljs-type">char</span> op1, op2;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        opcode = vm-&gt;code[vm-&gt;eip];<br><br>        <span class="hljs-keyword">switch</span> (opcode) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x10</span>:<br>            vm-&gt;r1 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            vm-&gt;eip += <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mov r1,&quot;</span> &lt;&lt; vm-&gt;r1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x11</span>:<br>            vm-&gt;r2 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            vm-&gt;eip += <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mov r2,&quot;</span> &lt;&lt; vm-&gt;r2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x20</span>:<br>            op1 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            op2 = code[vm-&gt;eip + <span class="hljs-number">2</span>];<br>            vm-&gt;mem[op1] = op2;<br>            vm-&gt;eip += <span class="hljs-number">3</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mov mem[&quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)op1 &lt;&lt; <span class="hljs-string">&quot;],&quot;</span> &lt;&lt; op2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x30</span>:<br>            vm-&gt;mem[vm-&gt;r1] ^= vm-&gt;r2;<br>            ++vm-&gt;eip;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;xor mem[&quot;</span> &lt;&lt; vm-&gt;r1 &lt;&lt; <span class="hljs-string">&quot;],&quot;</span> &lt;&lt; vm-&gt;r2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x40</span>:<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%5s&quot;</span>, &amp;vm-&gt;mem[<span class="hljs-number">0</span>]);<br>            ++vm-&gt;eip;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;scanf mem\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x50</span>:<br>            op1 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            op2 = code[vm-&gt;eip + <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">memcmp</span>(&amp;vm-&gt;mem[<span class="hljs-number">0</span>], &amp;vm-&gt;mem[op1], op2);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    VM* vm = vm_new();<br>    <span class="hljs-keyword">if</span> (vm_run(vm))<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;failed\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;good\n&quot;</span>);<br>    <br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>这样我们得到了原程序的汇编代码（参杂着奇怪的代码）</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> mem[<span class="hljs-number">16</span>],H<br><span class="hljs-keyword">mov</span> mem[<span class="hljs-number">17</span>],e<br><span class="hljs-keyword">mov</span> mem[<span class="hljs-number">18</span>],l<br><span class="hljs-keyword">mov</span> mem[<span class="hljs-number">19</span>],l<br><span class="hljs-keyword">mov</span> mem[<span class="hljs-number">20</span>],o<br><span class="hljs-number">12345</span><br>scanf mem<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>,<span class="hljs-number">33</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">xor</span> mem[<span class="hljs-number">0</span>],<span class="hljs-number">33</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">xor</span> mem[<span class="hljs-number">1</span>],<span class="hljs-number">33</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">xor</span> mem[<span class="hljs-number">2</span>],<span class="hljs-number">33</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>,<span class="hljs-number">3</span><br><span class="hljs-keyword">xor</span> mem[<span class="hljs-number">3</span>],<span class="hljs-number">33</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>,<span class="hljs-number">4</span><br><span class="hljs-keyword">xor</span> mem[<span class="hljs-number">4</span>],<span class="hljs-number">33</span><br>failed<br></code></pre></td></tr></table></figure>
</li>
<li><p>可以看到，程序先把”Hello”传给了mem的一片区域，然后获取输入，把输入的数与33异或，最后执行返回处的判断。返回处是对比mem[0]和mem[op1]，对比op2位，结合code最后几位，知道是对比mem[0]和mem[16]，对比5位。所以要求的输入是”Hello”逐位异或的结果（不可见字符，尝试输入失败）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day16:Z3求解器</title>
    <url>/2025/08/21/Day16-Z3/</url>
    <content><![CDATA[<p>z3求解器</p>
<span id="more"></span>

<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul>
<li>Int：整数</li>
<li>BitVec：二进制数据（如BitVec(‘a’,8)：8个比特位的一个变量a）</li>
<li>Real：有理数</li>
<li>Bool：布尔值</li>
<li>Array：数组</li>
</ul>
<h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><h3 id="设变量"><a href="#设变量" class="headerlink" title="设变量"></a>设变量</h3><ul>
<li>使用基本数据类型来声明变量，如：x&#x3D;Int(‘x’)</li>
</ul>
<h3 id="创建求解器"><a href="#创建求解器" class="headerlink" title="创建求解器"></a>创建求解器</h3><ul>
<li>使用函数Solve()创建一个求解器：s&#x3D;Solver()</li>
</ul>
<h3 id="添加约束条件"><a href="#添加约束条件" class="headerlink" title="添加约束条件"></a>添加约束条件</h3><ul>
<li>使用函数add()添加约束条件：s.add(一个方程&#x2F;不等式)</li>
</ul>
<h3 id="判断是否有解"><a href="#判断是否有解" class="headerlink" title="判断是否有解"></a>判断是否有解</h3><ul>
<li>使用函数check()检查是否有解，有解返回’sat’，无解返回’unsat’</li>
</ul>
<h3 id="取解的交集"><a href="#取解的交集" class="headerlink" title="取解的交集"></a>取解的交集</h3><ul>
<li>使用函数model()取满足每个条件的解的交集，返回的是字典，用model[变量名]可以得到变量的解</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>解方程{x,y|30x+15y&#x3D;675,12x+5y&#x3D;265}</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>x=Int(<span class="hljs-string">&#x27;x&#x27;</span>)<br>y=Int(<span class="hljs-string">&#x27;y&#x27;</span>)<br><br>s=Solver()<br>s.add(<span class="hljs-number">30</span>*x+<span class="hljs-number">15</span>*y==<span class="hljs-number">675</span>)<br>s.add(<span class="hljs-number">12</span>*x+<span class="hljs-number">5</span>*y==<span class="hljs-number">265</span>)<br><span class="hljs-keyword">if</span> s.check()==sat:<br>    <span class="hljs-built_in">print</span>(s.model())<br><span class="hljs-comment">#得到解[x = 20, y = 5]</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day3:函数与栈帧、数组与串指令、宏与结构体、x64汇编框架、内联汇编与混合编程</title>
    <url>/2025/07/08/Day3-%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A0%86%E6%A0%88/</url>
    <content><![CDATA[<p>函数与栈帧、数组与串指令、宏与结构体、x64汇编框架、内联汇编与混合编程</p>
<span id="more"></span>

<h2 id="函数与栈帧"><a href="#函数与栈帧" class="headerlink" title="函数与栈帧"></a>函数与栈帧</h2><ul>
<li><p>“栈“是内存中的一部分，可以理解为连续的一块内存，它为程序运行提供了一个暂时的存放数据的地方，地址、数据等可以通过push指令从寄存器中被复制到栈中，进而寄存器可以进行其他操作，等到这些数据再次被需要时再从栈中被pop出来。栈遵循先进后出的规则，先push的在高地址，后push的在低地址</p>
</li>
<li><p>在程序运行时，每个函数都会拥有独立的栈帧，即独立的栈上的一部分空间。有两个寄存器，esp，ebp（x86即32位环境下）负责维护函数的栈空间。ebp存放的是函数栈空间的栈基址，esp存放的是函数栈空间的栈顶。可以理解为ebp是指向函数栈空间最高位的一个指针（因为栈空间从高地址开始分配，因此指向的是最高位，但是是栈空间的起始地址），而esp是指向函数栈空间最低位的一个指针（指向的是最低位，但是会随着后续栈空间的扩充而变化）。</p>
</li>
<li><p>CALL指令：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;call一个函数的时候，会发生以下内容</span><br><span class="hljs-keyword">push</span> 返回地址（<span class="hljs-keyword">call</span>所在指令的下一条）<br><span class="hljs-keyword">jmp</span> 目标函数地址<br></code></pre></td></tr></table></figure>
</li>
<li><p>RET指令：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;函数结束时，RET指令会发生以下内容</span><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">eip</span> <span class="hljs-comment">;从栈上弹出返回地址到eip（保存下一步指令地址的寄存器）</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>栈帧：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;跳转到每一个函数，会发生以下内容以开辟栈帧</span><br><span class="hljs-keyword">push</span> <span class="hljs-built_in">ebp</span>			<span class="hljs-comment">;把上一个函数的ebp值放到栈上</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebp</span>,<span class="hljs-built_in">esp</span>			<span class="hljs-comment">;把esp值给ebp，开辟新函数的栈帧</span><br><span class="hljs-comment">;函数执行完毕后，会发生以下内容清理栈帧</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">esp</span>,<span class="hljs-built_in">ebp</span>			<span class="hljs-comment">;把ebp值给esp，清理函数栈帧</span><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">ebp</span>				<span class="hljs-comment">;恢复ebp原来的值，即上一个函数的ebp</span><br><span class="hljs-keyword">ret</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="数组与串指令"><a href="#数组与串指令" class="headerlink" title="数组与串指令"></a>数组与串指令</h2><ul>
<li><p>声明数组：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.data</span>			<span class="hljs-comment">;在数据段声明</span><br> szHello <span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,<span class="hljs-number">0</span>			<span class="hljs-comment">;声明一个字符串</span><br> nNumber <span class="hljs-built_in">dd</span> <span class="hljs-number">20</span> dup(<span class="hljs-number">0</span>)				<span class="hljs-comment">;声明一个DWORD数组，20位，使用dup()初始化数组内容为0</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>使用数组基址的几种方式：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,szHello<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,offset Nnumber<br></code></pre></td></tr></table></figure>
</li>
<li><p>访问数组成员：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;[数组起始地址+索引寄存器*比例因子+偏移量]（索引寄存器用来存放索引值，比例因子对应类型的字节大小，偏移量可用于结构体数组等场景）</span><br><span class="hljs-comment">;如：</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,offset Array	<span class="hljs-comment">;把数组基址给ebx</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>,<span class="hljs-number">0</span>				<span class="hljs-comment">;esi用来当索引寄存器</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-number">10</span>				<span class="hljs-comment">;ecx用来放索引上限（ecx常用作计数器）</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">loop_start:</span>				<span class="hljs-comment">;创建一个循环</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,[<span class="hljs-built_in">ebx</span>+<span class="hljs-built_in">esi</span>*<span class="hljs-number">4</span>]	<span class="hljs-comment">;取出数组内容放到eax中</span><br>	<span class="hljs-keyword">add</span> <span class="hljs-built_in">esi</span>,<span class="hljs-number">1</span>			<span class="hljs-comment">;索引递增</span><br>	<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">esi</span>,<span class="hljs-built_in">ecx</span>			<span class="hljs-comment">;与索引上限比较，判断是否遍历完数组</span><br>	<span class="hljs-keyword">jl</span> loop_start		<span class="hljs-comment">;还没遍历完数组就循环操作，jump到loop_start再走一遍</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>串指令：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;stos系列:stosb,stosw,stosd,stosq（分别对应byte,word,dword,qword,功能是把al/ax/eax/rax中的内容存到edi/rdi）</span><br><span class="hljs-comment">;lods系列:lodsb,lodsw,lodsd,lodsq（同样分别对应四个类型，功能是把esi/rsi的内容加载到al/ax/eax/rax中）</span><br><span class="hljs-comment">;movs系列:movsb,movsw,movsd,movsq（同样分别对应四个类型，功能是把esi的内容复制到edi中）</span><br><span class="hljs-comment">;cmps系列:cmpsb,cmpsw,cmpsd,cmpsq（同样分别对应四个类型，功能是比较esi和edi的内容并设置标志位）</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="宏与结构体"><a href="#宏与结构体" class="headerlink" title="宏与结构体"></a>宏与结构体</h2><ul>
<li><p>宏：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;无参宏使用关键字EQU，如</span><br>PI <span class="hljs-built_in">EQU</span> <span class="hljs-number">3</span>		<span class="hljs-comment">;定义PI=3</span><br><span class="hljs-comment">;含参宏使用关键字MACRO，用endm结尾，如</span><br>Myadd MACRO Number<br>	<span class="hljs-keyword">add</span> <span class="hljs-built_in">eax</span>,Number<br>endm			<span class="hljs-comment">;定义Myadd函数实现eax加上参数</span><br><span class="hljs-comment">;含参宏的调用：</span><br>Myadd&lt;参数&gt;<br></code></pre></td></tr></table></figure>
</li>
<li><p>结构体：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;使用关键字struct和ends，如</span><br>Point struct<br>	x <span class="hljs-built_in">word</span> ?<br>	y <span class="hljs-built_in">word</span> ?<br>Point ends<br><br><span class="hljs-comment">;实例化结构体</span><br>MyPoint Point&lt;?&gt;	<span class="hljs-comment">;实例化出MyPoint</span><br><br><span class="hljs-comment">;访问结构体成员</span><br><span class="hljs-keyword">mov</span> MyPoint<span class="hljs-number">.</span>x,<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="x64汇编框架-MASM"><a href="#x64汇编框架-MASM" class="headerlink" title="x64汇编框架(MASM)"></a>x64汇编框架(MASM)</h2><figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;x64环境下的代码，传参的时候先使用寄存器(Windows:rcx,rdx,r8,r9  Linux:rdi,rsi,rdx,rcx,r8,r9)再使用栈</span><br><span class="hljs-meta">.code</span><br><span class="hljs-comment">;Add函数声明</span><br><span class="hljs-keyword">Add</span> proc<br>	<span class="hljs-keyword">push</span> <span class="hljs-built_in">rbp</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbp</span>,<span class="hljs-built_in">rsp</span><br>	<span class="hljs-keyword">lea</span> <span class="hljs-built_in">rax</span>,[<span class="hljs-built_in">rdi</span> + <span class="hljs-built_in">rsi</span>]		<span class="hljs-comment">;从寄存器中取参数</span><br>	<span class="hljs-keyword">pop</span> <span class="hljs-built_in">rbp</span><br>	<span class="hljs-keyword">ret</span><br><span class="hljs-keyword">Add</span> endp<br><br>main proc			<br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">2</span>		<span class="hljs-comment">;把参数传入寄存器中</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>,<span class="hljs-number">3</span><br>	<span class="hljs-keyword">call</span> <span class="hljs-keyword">Add</span><br>	<span class="hljs-keyword">ret</span><br>main endp<br>end<br><br><br><span class="hljs-comment">;x86环境下的代码，传参使用栈</span><br><span class="hljs-meta">.code</span><br><span class="hljs-comment">;Add函数声明</span><br><span class="hljs-keyword">Add</span> proc<br>	<span class="hljs-keyword">push</span> <span class="hljs-built_in">ebp</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebp</span>,<span class="hljs-built_in">esp</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,[<span class="hljs-built_in">esp</span>+<span class="hljs-number">8</span>]			<span class="hljs-comment">;从栈上取参数</span><br>	<span class="hljs-keyword">add</span> <span class="hljs-built_in">eax</span>,[<span class="hljs-built_in">esp</span>+<span class="hljs-number">12</span>]<br>	<span class="hljs-keyword">pop</span> <span class="hljs-built_in">ebp</span><br>	<span class="hljs-keyword">ret</span><br><span class="hljs-keyword">Add</span> endp<br><br>main proc<br>	<span class="hljs-keyword">push</span> <span class="hljs-number">3</span>			<span class="hljs-comment">;把参数压入栈中</span><br>	<span class="hljs-keyword">push</span> <span class="hljs-number">2</span><br>	<span class="hljs-keyword">call</span> <span class="hljs-keyword">Add</span><br>	<span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>,<span class="hljs-number">8</span><br>main endp<br></code></pre></td></tr></table></figure>

<h2 id="内联汇编与混合编程"><a href="#内联汇编与混合编程" class="headerlink" title="内联汇编与混合编程"></a>内联汇编与混合编程</h2><ul>
<li><p>x86下，在Microsoft Visual C++ (MSVC)程序中使用汇编，可以通过_asm{}直接写在C++代码中:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    _asm&#123;<br>        <span class="hljs-keyword">xor</span> eax,eax<br>        mov eax,<span class="hljs-number">1</span><br>        add eax,<span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>x64下，在Microsoft Visual C++ (MSVC)程序中使用汇编，需要独立的asm文件，通过extern声明使用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> number1,<span class="hljs-type">long</span> <span class="hljs-type">long</span> number2)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res=<span class="hljs-built_in">Add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    std::cout&lt;&lt;res&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//asm文件</span><br>.code<br>Add proc<br>    push rbp<br>    mov rbp,rsp<br>    <span class="hljs-keyword">xor</span> rax,rax<br>    add rax,rcx<br>    add rax,rdx<br>    pop rbp<br>    ret<br>Add endp<br>end<br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day17:python逆向</title>
    <url>/2025/10/05/Day17-python%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<p>pyc逆向，python可执行文件逆向</p>
<span id="more"></span>

<h2 id="pyc文件"><a href="#pyc文件" class="headerlink" title="pyc文件"></a>pyc文件</h2><ul>
<li>pyc文件是py文件编译过程中产生的中间文件，是一种二进制文件。pyc文件可以由python虚拟机直接执行。不同版本的python编译出来的pyc文件是不同的</li>
</ul>
<h3 id="pyc文件结构"><a href="#pyc文件结构" class="headerlink" title="pyc文件结构"></a>pyc文件结构</h3><ul>
<li><p>一个pyc文件由以下几个部分组成：</p>
<p><img src="/../images/image-20251005201501358.png" alt="pyc文件格式(图片截取自CTF wiki)"></p>
<p>其中CodeObject是经过序列化处理的python源码的二进制码</p>
</li>
</ul>
<h3 id="pyc字节码"><a href="#pyc字节码" class="headerlink" title="pyc字节码"></a>pyc字节码</h3><ul>
<li><p>pyc文件是二进制文件，因此也可以进行反汇编。pyc文件有专门的汇编代码，就像java有smali汇编一样。</p>
</li>
<li><p>下面是一个pyc文件的反汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">原代码行号|指令的偏移|指令符号|指令参数（索引值）|参数实际值	     <br>  0           0 RESUME                   0<br><br>  1           2 LOAD_CONST               0 (&lt;code object add at 0x00000186246D3770, file &quot;test.py&quot;, line 1&gt;)<br>              4 MAKE_FUNCTION            0<br>              6 STORE_NAME               0 (add)//把add函数存入函数表，给索引值0<br><br>  3           8 PUSH_NULL<br>             10 LOAD_NAME                1 (print)//加载函数表索引为1的函数print<br>             12 LOAD_CONST               1 (&#x27;hello python&#x27;)//加载常量表索引为1的&quot;hello python&quot;<br>             14 CALL                     1//call索引为1的函数print<br>             22 POP_TOP<br><br>  4          24 PUSH_NULL<br>             26 LOAD_NAME                1 (print)<br>             28 PUSH_NULL<br>             30 LOAD_NAME                0 (add)<br>             32 LOAD_CONST               2 (1)<br>             34 LOAD_CONST               3 (2)<br>             36 CALL                     2<br>             44 CALL                     1<br>             52 POP_TOP<br>             54 RETURN_CONST             4 (None)<br><br>Disassembly of &lt;code object add at 0x00000186246D3770, file &quot;test.py&quot;, line 1&gt;:<br>  1           0 RESUME                   0<br><br>  2           2 LOAD_FAST                0 (a)<br>              4 LOAD_FAST                1 (b)<br>              6 BINARY_OP                0 (+)<br>             10 RETURN_VALUE<br><br></code></pre></td></tr></table></figure>

<p>对上面的一些指令进行解释：</p>
<ul>
<li>LOAD_CONST用于加载常量，后面跟着的数字是常量在常量表中的索引</li>
<li>LOAD_NAME用于加载函数，后面跟着的数字是函数在函数表中的索引</li>
<li>LOAD_FAST用于加载局部变量（如函数定义时候的参数或者内部变量）</li>
<li>可以注意到LOAD_NAME总是先于LOAD_CONST的，即函数比参数先一步加载</li>
<li>python虚拟机是基于栈的，所以可以看到POP等字眼，LOAD系列操作实际上是入栈操作</li>
</ul>
</li>
</ul>
<h3 id="pyc文件逆向"><a href="#pyc文件逆向" class="headerlink" title="pyc文件逆向"></a>pyc文件逆向</h3><ul>
<li>未经过混淆的pyc文件，可以直接通过在线工具（如：<a href="https://www.lddgo.net/string/pyc-compile-decompile">在线Python pyc文件编译与反编译</a>）或者uncompyle6、decompyle3（均可通过pip install安装）转成python代码</li>
<li>pyc文件的混淆，就类似花指令，通过在汇编层面插入垃圾指令干扰静态分析。解决办法就是修改二进制文件，把垃圾指令的二进制码给删除。可以看看这篇：<a href="https://zhuanlan.zhihu.com/p/145811103"> Python代码保护 | pyc 混淆从入门到工具实现 - 知乎</a></li>
</ul>
<h2 id="python可执行文件"><a href="#python可执行文件" class="headerlink" title="python可执行文件"></a>python可执行文件</h2><ul>
<li><p>python文件可以被打包成可执行文件，默认图标长这样：</p>
<p><img src="/../images/image-20251005213749587.png" alt="图标"></p>
</li>
<li><p>对于此类问题，先使用<a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor</a>解包程序（这里拿一个不知道哪里来的pythonexe文件举例）：</p>
<p><img src="/../images/image-20251005214956424.png" alt="解包"></p>
<p>pyinstxtractor会把可执行文件解包到带后缀extracted的一个文件夹里，除此之外可以看到，程序会给出可能的入口文件，以及可执行文件的python版本，然后就可以分析这些pyc文件了</p>
</li>
<li><p>python文件被打包的时候还可以指定加密参数，解密的时候根据打包的pyinstaller版本可以分为两种，大于4.0的和小于4.0的，可以使用下面的脚本解密：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">//大于<span class="hljs-number">4.0</span>版本<br><span class="hljs-keyword">import</span> tinyaes<br><span class="hljs-keyword">import</span> zlib<br><br>CRYPT_BLOCK_SIZE=<span class="hljs-number">16</span><br><br>key = butes(<span class="hljs-string">&#x27;here_be_your_key&#x27;</span>,<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>inf=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;here_be_your_file_name&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>outf=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;here_be_your_output_file&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><br>iv=inf.read(CRYPT_BLOCK_SIZE)<br><br>cipher=tinyaes.AES(key,iv)<br><br>plaintext=zlib.decompress(cipher.CTR_xcrypt_buffer(inf.read()))<br><br>outf.write(<span class="hljs-string">b&#x27;\x55\x0d\x0d\x0a\0\0\0\0\0\0\0\0\0\0\0\0&#x27;</span>)<span class="hljs-comment">#here be your magic number from pyfile in the same dir,16bytes</span><br><br>outf.write(plaintext)<br><br>inf.close()<br>outf.close()<br><br>//小于<span class="hljs-number">4.0</span>版本<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> zlib<br><br>CRYPT_BLOCK_SIZE=<span class="hljs-number">16</span><br><br>key=<span class="hljs-string">b&#x27;here_be_your_key&#x27;</span><br><br>inf=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;here_be_your_cryptedfile_name&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>outf=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;here_be_your_output_file_name&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><br>iv=inf.read(CRYPT_BLOCK_SIZE)<br><br>cipher-AES.new(key,AES.MODE_CFB,iv)<br><br>plaintext=zlib.decompress(cipher,hecrypt(inf.read()))<br> <br>outf.write(<span class="hljs-string">&#x27;here_be_your_magicnumber&#x27;</span>)<span class="hljs-comment">#8bytes</span><br><br>outf.write(plaintext)<br><br>inf.close()<br>outf.close()<br></code></pre></td></tr></table></figure>

<p>代码里面的key可以找可疑的pyc文件转成python代码查看，而版本可以通过查看pyimod01_archive.pyc导入的加密库来识别（上面两个版本的脚本导入的加密库分别是tinyaes和AES，是不一样的）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day2:寻址方式、标志寄存器、JCC指令</title>
    <url>/2025/07/07/Day2-%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>寻址方式、标志寄存器、JCC指令</p>
<span id="more"></span>

<h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><table>
<thead>
<tr>
<th align="center">寻址方式</th>
<th align="center">示例</th>
<th align="center">典型用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center">立即数寻址</td>
<td align="center">mov eax,42</td>
<td align="center">加载常数</td>
</tr>
<tr>
<td align="center">寄存器寻址</td>
<td align="center">add eax,ebx</td>
<td align="center">寄存器运算</td>
</tr>
<tr>
<td align="center">直接寻址</td>
<td align="center">mov eax,[0x8040000]</td>
<td align="center">访问全局变量</td>
</tr>
<tr>
<td align="center">寄存器间接寻址</td>
<td align="center">mov eax,[esi]</td>
<td align="center">指针解引用</td>
</tr>
<tr>
<td align="center">基址寻址</td>
<td align="center">mov [ebp-4],ecx</td>
<td align="center">栈帧局部变量</td>
</tr>
<tr>
<td align="center">变址寻址</td>
<td align="center">mov eax,[esi*4]</td>
<td align="center">数组遍历</td>
</tr>
<tr>
<td align="center">基址变址寻址</td>
<td align="center">mov eax,[ebx+esi*2+8]</td>
<td align="center">结构体，多维数组</td>
</tr>
<tr>
<td align="center">相对寻址</td>
<td align="center">jmp label</td>
<td align="center">跳转，函数调用</td>
</tr>
</tbody></table>
<h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><table>
<thead>
<tr>
<th align="center">标志位</th>
<th align="center">名称</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CF</td>
<td align="center">Carry Flag 进位标志位</td>
<td align="center">最高位发生进位&#x2F;借位时置1</td>
</tr>
<tr>
<td align="center">PF</td>
<td align="center">Parity Flag 奇偶标志位</td>
<td align="center">1的个数为偶数时置1</td>
</tr>
<tr>
<td align="center">AF</td>
<td align="center">Auxiliary Carry Flag 辅助进位标志位</td>
<td align="center">bit3和bit4之间发生进位&#x2F;借位时置1</td>
</tr>
<tr>
<td align="center">ZF</td>
<td align="center">Zoro Flag 零标志位</td>
<td align="center">为0时置1</td>
</tr>
<tr>
<td align="center">SF</td>
<td align="center">Sign Flag 符号标志位</td>
<td align="center">最高位为1(负数)时置1</td>
</tr>
<tr>
<td align="center">OF</td>
<td align="center">Overflow Flag 溢出标志位</td>
<td align="center">有符号数溢出时置1</td>
</tr>
<tr>
<td align="center">DF</td>
<td align="center">Direction Flag 方向标志位</td>
<td align="center">为1时从高位到低位处理字符串，std打开，cld关闭</td>
</tr>
<tr>
<td align="center">IF</td>
<td align="center">Interrupt Flag 中断标志位</td>
<td align="center">为1时可以响应中断请求，sti打开，cli关闭</td>
</tr>
<tr>
<td align="center">TF</td>
<td align="center">Trap Flag 陷阱标志位</td>
<td align="center">为1时会触发异常，被调试器捕获，用于单步调试</td>
</tr>
</tbody></table>
<h2 id="JCC指令"><a href="#JCC指令" class="headerlink" title="JCC指令"></a>JCC指令</h2><ul>
<li><p>TEST指令：TEST op1,op2</p>
<p>将两个操作数进行&amp;操作（op1 &amp; op2）并更新标志位：</p>
<p>CF&#x3D;0，OF&#x3D;0</p>
<p>&amp;结果为0：ZF&#x3D;1</p>
<p>结果最高位为1：SF&#x3D;1</p>
</li>
<li><p>CMP指令：CMP op1,op2</p>
<p>进行减法操作（op1 - op2）并更新标志位：</p>
<p>若op1 &lt; op2（发生借位），CF&#x3D;1</p>
<p>若发生有符号溢出，OF&#x3D;1</p>
<p>op1 &#x3D;&#x3D; op2（结果为0），ZF&#x3D;1</p>
<p>op1 &lt; op2（结果为负数），SF&#x3D;1</p>
</li>
<li><p>JCC指令：JCC Label</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">条件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">JMP</td>
<td align="center">无条件</td>
<td align="center">无条件跳转</td>
</tr>
<tr>
<td align="center">JE &#x2F; JZ</td>
<td align="center">ZF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>Z</strong>F</td>
</tr>
<tr>
<td align="center">JNE &#x2F; JNZ</td>
<td align="center">ZF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>Z</strong>F</td>
</tr>
<tr>
<td align="center">JS</td>
<td align="center">SF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>S</strong>F</td>
</tr>
<tr>
<td align="center">JNS</td>
<td align="center">SF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>S</strong>F</td>
</tr>
<tr>
<td align="center">JP &#x2F; JPE</td>
<td align="center">PF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>P</strong>F &#x2F; <strong>J</strong>ump if <strong>P</strong>arity <strong>E</strong>ven</td>
</tr>
<tr>
<td align="center">JNP &#x2F; JPO</td>
<td align="center">PF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>P</strong>F &#x2F; <strong>J</strong>ump if <strong>P</strong>arity <strong>O</strong>dd</td>
</tr>
<tr>
<td align="center">JO</td>
<td align="center">OF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>O</strong>F</td>
</tr>
<tr>
<td align="center">JNO</td>
<td align="center">OF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>O</strong>F</td>
</tr>
<tr>
<td align="center">JB &#x2F; JNAE &#x2F; JC</td>
<td align="center">CF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>B</strong>elow &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>A</strong>bove or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>C</strong>F</td>
</tr>
<tr>
<td align="center">JNB &#x2F; JAE &#x2F; JNC</td>
<td align="center">CF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>B</strong>elow &#x2F; <strong>J</strong>ump if <strong>A</strong>bove or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>C</strong>F</td>
</tr>
<tr>
<td align="center">JBE &#x2F; JNA</td>
<td align="center">CF&#x3D;1 或 ZF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>B</strong>elow or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>A</strong>bove</td>
</tr>
<tr>
<td align="center">JA &#x2F; JNBE</td>
<td align="center">CF&#x3D;0 且 ZF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>A</strong>bove &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>B</strong>elow or <strong>E</strong>qual</td>
</tr>
<tr>
<td align="center">JL &#x2F; JNGE</td>
<td align="center">SF ≠ OF</td>
<td align="center"><strong>J</strong>ump if <strong>L</strong>ess &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>G</strong>reater or <strong>E</strong>qual</td>
</tr>
<tr>
<td align="center">JGE &#x2F; JNL</td>
<td align="center">SF &#x3D; OF</td>
<td align="center"><strong>J</strong>ump if <strong>G</strong>reater or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>L</strong>ess</td>
</tr>
<tr>
<td align="center">JLE &#x2F; JNG</td>
<td align="center">ZF&#x3D;1 或 SF ≠ OF</td>
<td align="center"><strong>J</strong>ump if <strong>L</strong>ess or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>G</strong>reater</td>
</tr>
<tr>
<td align="center">JG &#x2F; JNLE</td>
<td align="center">ZF&#x3D;0 且 SF &#x3D; OF</td>
<td align="center"><strong>J</strong>ump if <strong>G</strong>reater &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>L</strong>ess or <strong>E</strong>qual</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day14:IDApython与SMC</title>
    <url>/2025/08/05/Day14-IDApython%E4%B8%8ESMC/</url>
    <content><![CDATA[<p>IDApythonAPI、SMC自修改代码</p>
<span id="more"></span>

<h2 id="IDApython"><a href="#IDApython" class="headerlink" title="IDApython"></a>IDApython</h2><ul>
<li>先贴上官方文档： <a href="https://python.docs.hex-rays.com/index.html">https://python.docs.hex-rays.com/index.html</a></li>
</ul>
<h3 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h3><ul>
<li>idc.here() &#x2F; idc.get_screen_ea()：返回光标所在处的地址</li>
<li>idc.get_inf_attr(INF_MIN_EA) &#x2F; idc.get_inf_attr(INF_MAX_EA)：返回最小&#x2F;最大地址（没有随机化地址情况下）</li>
<li>idc.generate_disasm_line(ea,0)：返回ea所在处的汇编指令</li>
<li>idc.prev_head(ea)&#x2F;next_head(ea)：返回ea处上一条&#x2F;下一条指令地址</li>
<li>idc.print_insn_mnem(ea)：打印ea处的助记符（即mov,add什么的）</li>
<li>idc.print_operand(ea,n)：打印ea处第n个操作数（n&#x3D;0或者1）</li>
</ul>
<h3 id="段相关API"><a href="#段相关API" class="headerlink" title="段相关API"></a>段相关API</h3><ul>
<li>idautils.Segments()：返回段起始地址列表</li>
<li>idc.get_segm_name(ea)：返回ea所在段的名字</li>
<li>idc.get_segm_start(ea)&#x2F;get_segm_end(ea)：返回ea所在段的起始地址&#x2F;结束地址</li>
<li>idc.get_next_seg(ea)：返回ea所在段的下一个段的起始地址</li>
</ul>
<h3 id="函数相关API"><a href="#函数相关API" class="headerlink" title="函数相关API"></a>函数相关API</h3><ul>
<li>idautils.Functions(start_addr,end_addr)：返回地址间的函数对象（不写参数就是所有函数对象）</li>
<li>idautils.FuncItems(ea)：返回ea所在函数所有指令的地址（相当于地址列表）</li>
<li>idaapi.get_func(ea)：获得ea所在函数的对象（含有如start_ea、end_ea、size等属性）</li>
<li>idc.get_func_name(ea)：返回ea所在函数的名字</li>
<li>idc.get_func_attr(ea,FUNCATTR_START) &#x2F; idc.get_func_attr(ea,FUNCATTR_END)：返回ea所在函数的起始地址&#x2F;结束地址</li>
<li>idc.get_next_func(ea) &#x2F; idc.get_prev_func(ea)：返回ea所在函数的上一个&#x2F;下一个函数的起始地址</li>
</ul>
<h3 id="指令相关API"><a href="#指令相关API" class="headerlink" title="指令相关API"></a>指令相关API</h3><ul>
<li>ida_ua.insn_t()，返回一个空的指令对象（或者说创建一个空的指令对象），包含函数的一些属性</li>
<li>idaapi.decode_insn(out,ea)，解析ea所在处的指令，把解析的结果给out（out必须是一个指令对象）<ul>
<li>out.ea：指令的起始地址</li>
<li>out.size：指令占用的字节数</li>
<li>out.get_cannon_mnemonic()：指令的助记符</li>
<li>out.itype：助记符的十进制码</li>
</ul>
</li>
</ul>
<h3 id="操作数相关API"><a href="#操作数相关API" class="headerlink" title="操作数相关API"></a>操作数相关API</h3><ul>
<li>idc.get_operand_value(ea,n)：返回ea处第n个操作数的值</li>
<li>idc.get_operand_type(ea,n)：返回ea处第n个操作数的类型</li>
</ul>
<h3 id="数据读写相关API"><a href="#数据读写相关API" class="headerlink" title="数据读写相关API"></a>数据读写相关API</h3><ul>
<li>idc.get_bytes(ea,size)：返回ea处size大小的bytes</li>
<li>idc.patch_byte(ea,content)：修改ea处的1字节为content</li>
<li>idc.patch_word(ea,content)：修改ea处的2字节为content</li>
<li>idc.patch_dword(ea,content)：修改ea处的4字节为content</li>
<li>idc.patch_qword(ea,content)：修改ea处的8字节为content</li>
</ul>
<h3 id="调试相关API"><a href="#调试相关API" class="headerlink" title="调试相关API"></a>调试相关API</h3><ul>
<li><p>ida_dbg.load_debugger(“local”,0)：启动调试器</p>
</li>
<li><p>ida_dbg.add_bpt(ea)：在ea处下断点</p>
</li>
<li><p>ida_dbg.del_bpt(ea)：删除ea处断点</p>
</li>
<li><p>ida_dbg.start_process(path,args,sdir)：启动调试进程，参数对应路径、命令行参数、工作目录</p>
</li>
<li><p>ida_dbg.step_into()：单步步入</p>
</li>
<li><p>ida_dbg.step_over()：单步步过</p>
</li>
<li><p>ida_dbg.step_until_ret()：运行到返回</p>
</li>
<li><p>idc.get_reg_value(regname)：获取regname寄存器的值</p>
</li>
<li><p>idc.set_reg_value(value,regname)：设置regname寄存器的值</p>
</li>
</ul>
<h3 id="其他操作相关API"><a href="#其他操作相关API" class="headerlink" title="其他操作相关API"></a>其他操作相关API</h3><ul>
<li><p>idautils.XrefsFrom(ea)：返回ea处引用的对象（有属性frm、to、type）</p>
</li>
<li><p>idautils.XrefsTo(ea)：返回所有引用ea处的对象（有属性frm、to、type）（Ctrl+X）</p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idautils,idaapi<br><span class="hljs-keyword">for</span> xref <span class="hljs-keyword">in</span> idautils.XrefsTo(here()):<br>    <span class="hljs-built_in">print</span>(xref.to)<span class="hljs-comment">#here()</span><br>    <span class="hljs-built_in">print</span>(xref.frm)<span class="hljs-comment">#调用here()的函数地址</span><br><span class="hljs-keyword">for</span> xref <span class="hljs-keyword">in</span> idautils.XrefsFrom(here()):<br>    <span class="hljs-built_in">print</span>(xref.frm)<span class="hljs-comment">#here()</span><br>    <span class="hljs-built_in">print</span>(xref.to)<span class="hljs-comment">#here()引用的函数地址</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>idautils.Strings()：返回包含所有字符串的对象（有属性ea、length、strtype）（shift+F12）</p>
</li>
<li><p>idc.get_strlit_contents(ea)：返回ea处的字符串</p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idc,idautils<br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> idautils.Strings():<br>    string=idc.get_strlit_contents(s.ea)<br>    <span class="hljs-built_in">print</span>(string)<br><span class="hljs-comment">#打印所有字符串</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="自修改代码（SMC）"><a href="#自修改代码（SMC）" class="headerlink" title="自修改代码（SMC）"></a>自修改代码（SMC）</h2><ul>
<li><p>自修改代码（Self-Modifying-Code）指某部分代码以加密后的形式存在于程序中，程序执行到这部分代码的时候才会进行动态解密，和加壳有点异曲同工。常用来加密关键逻辑，使其不可直接静态分析</p>
</li>
<li><p>特征：</p>
<p>程序中存在对程序自身某部分的运算，一般还需要VirtualProtect() &#x2F; mprotect()来改变内存的属性以便将解密后的代码数据写入内存，或者使用VirtualAlloc把解密后的代码数据写入堆中执行（为了避免API暴露，还可能会新增一个有RWX属性的段来存放加密后的代码）。</p>
</li>
<li><p>应对方法有两种：一种是动态调试得到解密后的关键逻辑，另一种是使用脚本解密关键逻辑后再覆盖回去</p>
<ul>
<li><p>示例：2021-羊城杯-babysmc</p>
<p>PS：本来想要自己写一个简单程序试试手的，研究了半个下午没研究出来，程序修正到解密函数可以解密出正确代码了，但是调用关键逻辑check的时候莫名其妙跑飞了，在那个安全检查的位置，跳转后像是个畸形函数，不知道是不是改内存属性的时候影响到了，所以只能去找网上的题目了</p>
</li>
<li><p>这是优化后的主函数：</p>
<p><img src="/../images/image-20250805234429100.png" alt="主函数"></p>
<p>优化的来源就是，enc的位置是一团数字，而loc_7FF6BF081D00处开始是正常代码，加上对下面的decrypt函数的分析，可以确定enc就是被加密后的first_part</p>
</li>
<li><p>这是decrypt函数：</p>
<p><img src="/../images/image-20250805234728191.png" alt="decrypt函数"></p>
<p>非常明显地调用了VirtualProtect函数，解密逻辑很简单，就是ror后异或0x5a（ror查出来是循环右移，3就是右移的位数了，这点看汇编可能更清晰点）</p>
</li>
<li><p>下面就是今天的成果展示了（ror由DS协助实现），SMC解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idautils,idc,idaapi<br><br>enc=idc.get_bytes(<span class="hljs-number">0x00007FF6BF081085</span>,<span class="hljs-number">0x00007FF6BF081D00</span>-<span class="hljs-number">0x00007FF6BF081085</span>)<br>loc=<span class="hljs-number">0x00007FF6BF081085</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ror</span>(<span class="hljs-params">value, shift, bits=<span class="hljs-number">8</span></span>):<br>    shift %= bits  <span class="hljs-comment"># 确保位移量在有效范围内</span><br>    <span class="hljs-keyword">return</span> (value &gt;&gt; shift) | ((value &lt;&lt; (bits - shift)) &amp; ((<span class="hljs-number">1</span> &lt;&lt; bits) - <span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br>    idc.patch_byte(loc,(ror(i,<span class="hljs-number">3</span>)^<span class="hljs-number">0x5a</span>)&amp;<span class="hljs-number">0xff</span>)<br>    loc+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;done&quot;</span>)<br></code></pre></td></tr></table></figure>
</li>
<li><p>本来是要写完的，但是first_part的函数解析完好几百行了，是我看不懂的加密🫠去找WP，发现是非常混淆的base64，还加了异或，但是我没看出逻辑，索性点到为止，改天把编码和密码的部分补上再说。</p>
</li>
<li><p>本来也尝试了动调解密，但是调着调着给我下起东西来了，虽然链接看着是微软的，但是还是有点怕，就舍弃这个方法了（下的是kernel.pdb好像，DS说是缺失符号文件🫠🫠）</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day4:Linux汇编框架、操作系统与汇编器、主函数跳转流程</title>
    <url>/2025/07/11/Day4-Linux%E6%B1%87%E7%BC%96%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>Linux汇编框架、操作系统与汇编器、主函数跳转流程</p>
<span id="more"></span>

<h2 id="Linux-NASM-汇编框架"><a href="#Linux-NASM-汇编框架" class="headerlink" title="Linux(NASM)汇编框架"></a>Linux(NASM)汇编框架</h2><ul>
<li><p>Linux和Windows的不同主要有：</p>
<ul>
<li><p>系统调用方式不同：</p>
<ul>
<li><p>Windows提供API，可以直接利用系统函数</p>
</li>
<li><p>Linux需要用系统调用号触发系统调用。系统调用号存入特定寄存器后使用触发指令，触发系统调用</p>
<p>触发指令：</p>
<p>​    32位(x86)：int 0x80</p>
<p>​    64位(x64)：syscall</p>
<p>参数传递：</p>
<p>​    32位：eax（系统调用号），ebx、ecx、edx、esi、edi、ebp（参数）。</p>
<p>​    64位：rax（系统调用号），rdi、rsi、rdx、r10、r8、r9（参数）。</p>
<p>32位下exit示例：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">1</span>		<span class="hljs-comment">;32位下，exit的系统调用号为1</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">0x80</span>		<span class="hljs-comment">;系统调用号存入寄存器后，触发系统调用</span><br></code></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>可执行文件格式不同：</p>
<ul>
<li>Windows使用PE文件格式</li>
<li>Linux使用ELF文件格式</li>
</ul>
</li>
<li><p>其他细节：</p>
<ul>
<li>Linux在段名前必须添加section，只有.text段没有.code段（实际上由汇编器决定，详见下一部分）</li>
<li>Linux使用0xA作为字符串结束符</li>
</ul>
</li>
</ul>
</li>
<li><p>32位汇编框架</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">section</span> .data<br>	msg <span class="hljs-built_in">db</span> <span class="hljs-string">&quot;HelloWorld&quot;</span>,<span class="hljs-number">0xA</span><br>	len <span class="hljs-built_in">equ</span> $ - msg				<span class="hljs-comment">;用变量len记录msg的长度（$表示当前变量的地址，减去msg的地址就是msg的长度）</span><br>	<br><span class="hljs-meta">section</span> .text<br>	<span class="hljs-meta">global</span> _start<br><span class="hljs-symbol">_start:</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">4</span>					<span class="hljs-comment">;eax存放系统调用号4：sys_write</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-number">1</span>					<span class="hljs-comment">;参数1：文件描述符，1表示标准输出stdout</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,msg					<span class="hljs-comment">;参数2：要打印的数据地址</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,len					<span class="hljs-comment">;参数3：打印的字节数</span><br>	<span class="hljs-keyword">int</span> <span class="hljs-number">0x80</span><br>	<br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">1</span>					<span class="hljs-comment">;eax存放系统调用号1：sys_exit</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-number">0</span>					<span class="hljs-comment">;参数1：退出状态码（0表示成功）</span><br>	<span class="hljs-keyword">int</span> <span class="hljs-number">0x80</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>64位汇编框架</p>
</li>
</ul>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">section</span> .data<br>	msg <span class="hljs-built_in">db</span> <span class="hljs-string">&quot;HelloWorld&quot;</span>,<span class="hljs-number">0xA</span><br>	len <span class="hljs-built_in">equ</span> $ - msg				<br>	<br><span class="hljs-meta">section</span> .text<br>	<span class="hljs-meta">global</span> _start<br><span class="hljs-symbol">_start:</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">1</span>					<span class="hljs-comment">;rax存放系统调用号1：sys_write</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">1</span>					<span class="hljs-comment">;参数1：文件描述符，1表示标准输出stdout</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>,msg					<span class="hljs-comment">;参数2：要打印的数据地址</span><br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>,len					<span class="hljs-comment">;参数3：打印的字节数</span><br>	<span class="hljs-keyword">syscall</span><br>	<br>	<span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span>					<span class="hljs-comment">;rax存放系统调用号60：sys_exit</span><br>	<span class="hljs-keyword">xor</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">rdi</span>					<span class="hljs-comment">;参数1：退出状态码（0表示成功）</span><br>	<span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure>

<h2 id="操作系统与汇编器"><a href="#操作系统与汇编器" class="headerlink" title="操作系统与汇编器"></a>操作系统与汇编器</h2><ul>
<li>Windows：主要有MASM和NASM两种汇编器<ul>
<li>MASM（Microsoft Macro Assembler），主要集成在visual studio中<ul>
<li>段名前不要求加section，可以直接用 <strong>.段名</strong> 声明</li>
<li>指令存放在.code段</li>
<li>.code段，函数以 <strong>func_name proc</strong> 开始，以 <strong>func_name endp</strong> 结束</li>
<li>使用Intel风格，即 <strong>指令   目标操作数，源操作数</strong></li>
</ul>
</li>
<li>NASM（Netwide Assembler），跨平台汇编器，支持Windows、Linux、macOS<ul>
<li>段名前要求加section，用 <strong>sectino .段名</strong> 声明</li>
<li>指令存放在.text段</li>
<li>.text段，函数用 <strong>global func_name</strong> 声明后再定义 </li>
<li>使用Intel风格</li>
</ul>
</li>
</ul>
</li>
<li>Linux：主要有NASM和GAS两种汇编器<ul>
<li>NASM同上 </li>
<li>GAS（GNU Assembler），Linux默认汇编器<ul>
<li>段名前要求加.section，用 <strong>.section .段名</strong> 声明</li>
<li>指令存放在.text段</li>
<li>.text段，函数用 <strong>.global func_name</strong> 声明后再定义</li>
<li>使用AT&amp;T风格，即 <strong>指令   源操作数，目标操作数</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="主函数跳转流程"><a href="#主函数跳转流程" class="headerlink" title="主函数跳转流程"></a>主函数跳转流程</h2><ul>
<li><p>环境：vs2022，Debug  x86&#x2F;x64，Release x86&#x2F;x64</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;x86 debug 跳转特征</span><br><span class="hljs-comment">;step1</span><br><span class="hljs-keyword">jmp</span>			<span class="hljs-comment">;直接jmp</span><br><br><span class="hljs-comment">;step2</span><br><span class="hljs-keyword">call</span>		<span class="hljs-comment">;第一个call</span><br><br><span class="hljs-comment">;step3</span><br><span class="hljs-keyword">call</span><br><span class="hljs-keyword">call</span> &lt;--	<span class="hljs-comment">;连续两个call，进第二个</span><br><br><span class="hljs-comment">;step4</span><br><span class="hljs-number">2</span>*<span class="hljs-keyword">jz</span>--&gt;<span class="hljs-keyword">call</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">call</span>		<span class="hljs-comment">;两个jz指向的同一个call且此call后紧跟mov和call</span><br><br><span class="hljs-comment">;step5</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">push</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">push</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">push</span><br><span class="hljs-keyword">call</span>		<span class="hljs-comment">;连续push3个参数入栈后的call</span><br><br><span class="hljs-comment">;step6</span><br><span class="hljs-keyword">jmp</span><br></code></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;x86 Release 跳转特征</span><br><span class="hljs-comment">;step1</span><br><span class="hljs-keyword">call</span><br><span class="hljs-keyword">jmp</span>			<span class="hljs-comment">;call后的jmp</span><br><br><span class="hljs-comment">;step2</span><br><span class="hljs-keyword">push</span><br><span class="hljs-keyword">push</span><br><span class="hljs-keyword">push</span><br><span class="hljs-keyword">call</span>		<span class="hljs-comment">;连续push3个参数入栈后的call</span><br></code></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;x64 Debug 跳转特征 </span><br><span class="hljs-comment">;step1</span><br><span class="hljs-keyword">jmp</span>			<span class="hljs-comment">;直接jmp</span><br><br><span class="hljs-comment">;step2</span><br><span class="hljs-keyword">call</span>		<span class="hljs-comment">;第一个call</span><br><br><span class="hljs-comment">;step3</span><br><span class="hljs-keyword">call</span><br><span class="hljs-keyword">call</span> &lt;--	<span class="hljs-comment">;连续两个call进第二个</span><br><br><span class="hljs-comment">;step4</span><br><span class="hljs-number">2</span>*<span class="hljs-keyword">jz</span>--&gt;<span class="hljs-keyword">call</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">call</span>		<span class="hljs-comment">;两个jz指向的同一个call且此call后紧跟mov和call</span><br><br><span class="hljs-comment">;step5</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">call</span>		<span class="hljs-comment">;连续5个mov后的call（传参）</span><br><br><span class="hljs-comment">;step6</span><br><span class="hljs-keyword">jmp</span>			<span class="hljs-comment">;直接jmp</span><br></code></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;x64 Release 跳转特征 </span><br><span class="hljs-comment">;step1</span><br><span class="hljs-keyword">call</span><br><span class="hljs-keyword">jmp</span>			<span class="hljs-comment">;call后的jmp</span><br><br><span class="hljs-comment">;step2</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">call</span><br><span class="hljs-keyword">mov</span><br><span class="hljs-keyword">call</span>		<span class="hljs-comment">;三个mov后的call（传参）且此call后紧跟mov和call</span><br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day6:if-else语句识别、switch语句识别、循环语句识别</title>
    <url>/2025/07/15/Day6-switch%E8%AF%AD%E5%8F%A5%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p>if-else语句识别、switch语句识别、循环语句识别</p>
<span id="more"></span>

<h2 id="if-else语句识别"><a href="#if-else语句识别" class="headerlink" title="if-else语句识别"></a>if-else语句识别</h2><ul>
<li><p>第一种，数值比较作为条件（x86debug为例，其余类似，仅是比较方法（如使用sub而不是cmp）和模式特征上的差异）</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>004702D0                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br><span class="hljs-symbol">.text:</span>004702D3                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004702D4                 <span class="hljs-keyword">push</span>    offset unk_545E50 <span class="hljs-comment">; %d</span><br><span class="hljs-symbol">.text:</span>004702D9                 <span class="hljs-keyword">call</span>    sub_4681E0      <span class="hljs-comment">; scanf</span><br><span class="hljs-symbol">.text:</span>004702DE                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>004702E1                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_C], <span class="hljs-number">1</span><br><span class="hljs-symbol">.text:</span>004702E5                 <span class="hljs-keyword">jnz</span>     short loc_4702F6 <span class="hljs-comment">; if [ebp+var_C]!=1, jump to loc_4702f6</span><br><span class="hljs-symbol">.text:</span>004702E7                 <span class="hljs-keyword">push</span>    offset aNEquales1 <span class="hljs-comment">; &quot;n equales 1&quot;</span><br><span class="hljs-symbol">.text:</span>004702EC                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>004702F1                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span>004702F4                 <span class="hljs-keyword">jmp</span>     short loc_470303<br><span class="hljs-symbol">.text:</span>004702F6 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>004702F6<br><span class="hljs-symbol">.text:</span>004702F6 loc_4702F6:                             <span class="hljs-comment">; CODE XREF: main+45↑j</span><br><span class="hljs-symbol">.text:</span>004702F6                 <span class="hljs-keyword">push</span>    offset aNDoesNotEqual1 <span class="hljs-comment">; &quot;n does not equal 1&quot;</span><br><span class="hljs-symbol">.text:</span>004702FB                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470300</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>

<p>源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equales 1&quot;</span>);<br><span class="hljs-keyword">else</span><br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n does not equal 1&quot;</span>);<br></code></pre></td></tr></table></figure>
</li>
<li><p>第二种，变量直接作为条件</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00470303</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_18]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470306</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470307</span>                 <span class="hljs-keyword">push</span>    offset unk_545E50 <span class="hljs-comment">; %d</span><br><span class="hljs-symbol">.text:</span>0047030C                 <span class="hljs-keyword">call</span>    sub_4681E0      <span class="hljs-comment">; scanf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470311</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470314</span>                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_18], <span class="hljs-number">0</span> <span class="hljs-comment">; 和&#x27;0&#x27;比较</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470318</span>                 <span class="hljs-keyword">jz</span>      short loc_470327 <span class="hljs-comment">; if [ebp+var_18]==0, jump to loc_470327, 跳过printf</span><br><span class="hljs-symbol">.text:</span>0047031A                 <span class="hljs-keyword">push</span>    offset aJudgeIsNotZero <span class="hljs-comment">; &quot;judge is not zero&quot;</span><br><span class="hljs-symbol">.text:</span>0047031F                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470324</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>

<p>源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> judge;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;judge);<br><span class="hljs-keyword">if</span> (judge)<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;judge is not zero&quot;</span>);<br></code></pre></td></tr></table></figure>
</li>
<li><p>第三种，返回值（函数式）作为条件</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00470387</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span>0047038A                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0047038B                 <span class="hljs-keyword">push</span>    offset unk_545E50 <span class="hljs-comment">; %d</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470390</span>                 <span class="hljs-keyword">call</span>    sub_4681E0      <span class="hljs-comment">; scanf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470395</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470398</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span>0047039B                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span>             <span class="hljs-comment">; 输入的值入栈，即函数传参</span><br><span class="hljs-symbol">.text:</span>0047039C                 <span class="hljs-keyword">call</span>    sub_46B214      <span class="hljs-comment">; 自定义函数</span><br><span class="hljs-symbol">.text:</span>004703A1                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span>004703A4                 <span class="hljs-keyword">test</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span>        <span class="hljs-comment">; 1 &amp; 1 = 0； 0 &amp; 0 = 1</span><br><span class="hljs-symbol">.text:</span>004703A6                 <span class="hljs-keyword">jz</span>      short loc_4703B5<br><span class="hljs-symbol">.text:</span>004703A8                 <span class="hljs-keyword">push</span>    offset aItS0    <span class="hljs-comment">; &quot;it&#x27;s 0\n&quot;</span><br><span class="hljs-symbol">.text:</span>004703AD                 <span class="hljs-keyword">call</span>    sub_468D1B<br><span class="hljs-symbol">.text:</span>004703B2                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><br><span class="hljs-comment">;sub_46b214</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470110</span> arg_0           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470110</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470110</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470111</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470113</span>                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470119</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>0047011A                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>0047011B                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>0047011C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edi</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>0047011E                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470120</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470125</span>                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470127</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_57500E<br><span class="hljs-symbol">.text:</span>0047012C                 <span class="hljs-keyword">call</span>    sub_46B660<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470131</span>                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470132</span>                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+arg_0], <span class="hljs-number">0</span>  <span class="hljs-comment">; [ebp+8], eax在栈上的位置</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470136</span>                 <span class="hljs-keyword">jnz</span>     short loc_470141 <span class="hljs-comment">; eax=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470138</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; if [ebp+arg_0]==0, eax=1, return 1(eax)</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047013D</span>                 <span class="hljs-keyword">jmp</span>     short loc_470143<br><span class="hljs-symbol">.text:</span>0047013F <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>0047013F                 <span class="hljs-keyword">jmp</span>     short loc_470143<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470141</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470141</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470141</span> loc_470141:                             <span class="hljs-comment">; CODE XREF: sub_470110+26↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470141</span>                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span>        <span class="hljs-comment">; eax=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470143</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470143</span> loc_470143:                             <span class="hljs-comment">; CODE XREF: sub_470110+2D↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470143</span>                                         <span class="hljs-comment">; sub_470110+2F↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470143</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470144</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470145</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470146</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><br><span class="hljs-symbol">.text:</span>0047014C                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>0047014E                 <span class="hljs-keyword">call</span>    sub_46A62A<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470153</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470155</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470156</span>                 <span class="hljs-keyword">retn</span><br></code></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">IfZero</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>	<span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>)<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">else</span><br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> a;<br>	<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<br>	<span class="hljs-keyword">if</span>(IfZero(a))<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;it&#x27;s 0\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="switch语句识别"><a href="#switch语句识别" class="headerlink" title="switch语句识别"></a>switch语句识别</h2><ul>
<li><p>比较简单的情况下：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00470327</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span>0047032A                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0047032B                 <span class="hljs-keyword">push</span>    offset unk_545E50 <span class="hljs-comment">; %d</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470330</span>                 <span class="hljs-keyword">call</span>    sub_4681E0      <span class="hljs-comment">; scanf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470335</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470338</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span>0047033B                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_EC], <span class="hljs-built_in">eax</span> <span class="hljs-comment">; [ebp+var_EC]==[ebp+var_24], 用临时变量[ebp+var_EC]来检验case</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470341</span>                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_EC], <span class="hljs-number">1</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470348</span>                 <span class="hljs-keyword">jz</span>      short loc_47035E <span class="hljs-comment">; case1输出</span><br><span class="hljs-symbol">.text:</span>0047034A                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_EC], <span class="hljs-number">5</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470351</span>                 <span class="hljs-keyword">jz</span>      short loc_470371 <span class="hljs-comment">; case5输出</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470353</span>                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_EC], <span class="hljs-number">0Ah</span><br><span class="hljs-symbol">.text:</span>0047035A                 <span class="hljs-keyword">jz</span>      short loc_470384 <span class="hljs-comment">; case10输出</span><br><span class="hljs-symbol">.text:</span>0047035C                 <span class="hljs-keyword">jmp</span>     short loc_470395 <span class="hljs-comment">; break然后system(&quot;pause&quot;)</span><br><span class="hljs-symbol">.text:</span>0047035E <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>0047035E<br><span class="hljs-symbol">.text:</span>0047035E loc_47035E:                             <span class="hljs-comment">; CODE XREF: main+A8↑j</span><br><span class="hljs-symbol">.text:</span>0047035E                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470361</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470362</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470367</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>0047036C                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>0047036F                 <span class="hljs-keyword">jmp</span>     short loc_470395<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470371</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470371</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470371</span> loc_470371:                             <span class="hljs-comment">; CODE XREF: main+B1↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470371</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470374</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470375</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span>0047037A                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>0047037F                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470382</span>                 <span class="hljs-keyword">jmp</span>     short loc_470395<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470384</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470384</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470384</span> loc_470384:                             <span class="hljs-comment">; CODE XREF: main+BA↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470384</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470387</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470388</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047038D</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470392</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470395</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470395</span> loc_470395:                             <span class="hljs-comment">; CODE XREF: main+BC↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470395</span>                                         <span class="hljs-comment">; main+CF↑j ...</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470395</span>                 <span class="hljs-keyword">push</span>    offset aPause   <span class="hljs-comment">; &quot;pause&quot;</span><br><span class="hljs-symbol">.text:</span>0047039A                 <span class="hljs-keyword">call</span>    sub_46AFAD      <span class="hljs-comment">; system(&quot;pause&quot;)</span><br><span class="hljs-symbol">.text:</span>0047039F                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>

<p>源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> number;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;number);<br><span class="hljs-keyword">switch</span> (number) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br>	<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br>	<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br>	<span class="hljs-keyword">break</span>;<br>&#125;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br></code></pre></td></tr></table></figure>
</li>
<li><p>再复杂点，会优化出跳转表，即每个case跳转的地址会被集合成一个数组，像表一样</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>004702D3                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004702D4                 <span class="hljs-keyword">push</span>    offset unk_545E50 <span class="hljs-comment">; %d</span><br><span class="hljs-symbol">.text:</span>004702D9                 <span class="hljs-keyword">call</span>    sub_4681E0      <span class="hljs-comment">; scanf</span><br><span class="hljs-symbol">.text:</span>004702DE                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>004702E1                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br><span class="hljs-symbol">.text:</span>004702E4                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_D4], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004702EA                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+var_D4] <span class="hljs-comment">; 把输入值传到ecx，下一步减去1，减1的原因见后面的解释</span><br><span class="hljs-symbol">.text:</span>004702F0                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; switch 67 cases</span><br><span class="hljs-symbol">.text:</span>004702F3                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_D4], <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>004702F9                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_D4], <span class="hljs-number">42h</span> <span class="hljs-comment">; 把输入值和42h(66)比较，下一步是大于66就跳出case的判断</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470300</span>                 <span class="hljs-keyword">ja</span>      def_470313      <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470306</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ebp</span>+var_D4]<br><span class="hljs-symbol">.text:</span>0047030C                 <span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ds</span>:byte_470418[<span class="hljs-built_in">edx</span>] <span class="hljs-comment">; 跳转表索引值表，即预判了输入值的范围并且为每个可能的值建立了索引值表（比如说现在确定了范围是0-66，就枚举了0-66这些数值对应的索引，然后再根据索引找到应改跳转的地址</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470313</span>                 <span class="hljs-keyword">jmp</span>     <span class="hljs-built_in">ds</span>:jpt_470313[<span class="hljs-built_in">eax</span>*<span class="hljs-number">4</span>] <span class="hljs-comment">; switch jump</span><br><span class="hljs-symbol">.text:</span>0047031A <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>0047031A<br><span class="hljs-symbol">.text:</span>0047031A loc_47031A:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span>0047031A                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span>0047031A                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 1</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047031D</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0047031E                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470323</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470328</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>0047032B                 <span class="hljs-keyword">jmp</span>     short def_470313 <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047032D</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047032D</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047032D</span> loc_47032D:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047032D</span>                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047032D</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 5</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470330</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470331</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470336</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>0047033B                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>0047033E                 <span class="hljs-keyword">jmp</span>     short def_470313 <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470340</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470340</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470340</span> loc_470340:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470340</span>                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470340</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 10</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470343</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470344</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470349</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>0047034E                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470351</span>                 <span class="hljs-keyword">jmp</span>     short def_470313 <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470353</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470353</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470353</span> loc_470353:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470353</span>                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470353</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 17</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470356</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470357</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span>0047035C                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470361</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470364</span>                 <span class="hljs-keyword">jmp</span>     short def_470313 <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470366</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470366</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470366</span> loc_470366:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470366</span>                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470366</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 11</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470369</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0047036A                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span>0047036F                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470374</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470377</span>                 <span class="hljs-keyword">jmp</span>     short def_470313 <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470379</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470379</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470379</span> loc_470379:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470379</span>                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470379</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 67</span><br><span class="hljs-symbol">.text:</span>0047037C                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047037D</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470382</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470387</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>0047038A                 <span class="hljs-keyword">jmp</span>     short def_470313 <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span>0047038C <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>0047038C<br><span class="hljs-symbol">.text:</span>0047038C loc_47038C:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span>0047038C                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span>0047038C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 3</span><br><span class="hljs-symbol">.text:</span>0047038F                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470390</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470395</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>0047039A                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047039D</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047039D</span> def_470313:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+60↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047039D</span>                                         <span class="hljs-comment">; sub_4702A0+73↑j ...</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047039D</span>                 <span class="hljs-keyword">push</span>    offset aPause   <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span>004703A2                 <span class="hljs-keyword">call</span>    sub_46AFAD      <span class="hljs-comment">; system</span><br><span class="hljs-symbol">.text:</span>004703A7                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> number;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;number);<br><span class="hljs-keyword">switch</span> (number) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br>	<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br>	<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br>	<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">17</span>:<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br>	<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br>	<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">67</span>:<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br>	<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br>	<span class="hljs-keyword">break</span>;<br>&#125;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br></code></pre></td></tr></table></figure>
</li>
<li><p>对跳转表和索引值表进行进一步解释：</p>
<p>先看跳转表：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-16%20000211.png" alt="跳转表"></p>
<p>可以看到跳转表只有简单的8种情况。但是编译器（反编译器？）只能根据case的最大值用笨方法枚举可能的值，这时候，就可以给这些枚举的值分成两种：一种是case里有的，一种是case里没有的。看跳转表的最后一个，叫def而不是loc，这个就是给case里没有的枚举值准备的。因为分为case里有的和没有的，因此，case里有的，会给出具体的索引值；case里没有的，统一导向跳转表的最后一个。再看索引值表：</p>
<p><img src="/../images/image-20250716001640839.png" alt="索引值表"></p>
<p>可以看到，里面枚举了0到66对应的索引值。看汇编代码，是将输入的值作为索引值表的索引来用的，索引出来的值再作为跳转表的索引。注意看，索引值表的最小值为0，因此，跳转表和数组一样从0开始索引，而0-7对应跳转表的八种情况。通过进一步挖掘信息，还可以知道跳转表是把case按照从小到大的顺序排列的。因此，最开始会对输入值有一个减的操作。至于为什么减1，我们就可以推测最小的case是1了，因为索引从0开始，而最小的case在索引0处。</p>
</li>
<li><p>这样解释下来可能还有点绕，所以我们按照机器的动作走一遍：</p>
<p>首先，把case按顺序排出跳转表。</p>
<p>然后，假设我们拿到输入的值。作为机器，我们知道case有：1，3，5，10，17，11，67，所以先给输入的值减1，以便这个值是1的时候我们可以索引到跳转表下标0处。同时，如果这个值大于66，我们还可以直接跳过case检查，直接导出去（刚好和在case最大最小值范围内但不是case的值一样对待）</p>
<p>再然后，我们枚举0-66的值，并且把这些值和case里有的值一一比较，分出两种值：一种在case里，一种不再case里。</p>
<p>ok，然后我们建立索引值表，给在case里的枚举值对应的跳转表索引值，比如说枚举值2（输入值是3），刚好case里有3，按顺序排第二，我们就给索引值1（从0开始索引）。回头看截出来的索引值表，在下标2的地方刚好是1（枚举值索引出跳转表索引）；给不在case里的值索引到7，对应跳转表最后一位（为没在case里的值专门准备的那一位）。</p>
<p>最后，我们就准备好我们的解决方案了，对于任意输入的值我们就都有对策了。</p>
</li>
<li><p>请务必真正理解上述内容，因为在逆向工程中，这么绕的操作很常见。在PE文件结构部分，我们或许还有机会再接触到这么绕的操作。（其实只需要写出程序拿到ida里点开跳转表和索引值表（如果有的话）看几眼就明白了，亲身实践总比阅读文字来的有效，因为文字还取决于书写者的表达水平(●’◡’●)）</p>
</li>
</ul>
<h2 id="循环语句识别"><a href="#循环语句识别" class="headerlink" title="循环语句识别"></a>循环语句识别</h2><ul>
<li><p>第一种，for循环</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00464096</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-number">0</span>  <span class="hljs-comment">; 一个变量初始化为0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046409D</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_14], <span class="hljs-number">1</span> <span class="hljs-comment">; 另一个变量初始化为1</span><br><span class="hljs-symbol">.text:</span>004640A4                 <span class="hljs-keyword">jmp</span>     short loc_4640AF<br><span class="hljs-symbol">.text:</span>004640A6 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>004640A6<br><span class="hljs-symbol">.text:</span>004640A6 loc_4640A6:                             <span class="hljs-comment">; CODE XREF: sub_464070+4E↓j</span><br><span class="hljs-symbol">.text:</span>004640A6                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_14]<br><span class="hljs-symbol">.text:</span>004640A9                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; 用eax过渡，给[ebp+var_14]加1</span><br><span class="hljs-symbol">.text:</span>004640AC                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_14], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004640AF<br><span class="hljs-symbol">.text:</span>004640AF loc_4640AF:                             <span class="hljs-comment">; CODE XREF: sub_464070+34↑j</span><br><span class="hljs-symbol">.text:</span>004640AF                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_14], <span class="hljs-number">0Ah</span><br><span class="hljs-symbol">.text:</span>004640B3                 <span class="hljs-keyword">jg</span>      short loc_4640C0 <span class="hljs-comment">; [ebp+var_14]大于0Ah时跳转（出循环）</span><br><span class="hljs-symbol">.text:</span>004640B5                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span>004640B8                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_14] <span class="hljs-comment">; 用eax过渡，把[ebp+var_14]的值加到[ebp+var_8]上</span><br><span class="hljs-symbol">.text:</span>004640BB                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004640BE                 <span class="hljs-keyword">jmp</span>     short loc_4640A6 <span class="hljs-comment">; 跳回去，形成循环</span><br><span class="hljs-symbol">.text:</span>004640C0 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>004640C0<br><span class="hljs-symbol">.text:</span>004640C0 loc_4640C0:                             <span class="hljs-comment">; CODE XREF: sub_464070+43↑j</span><br><span class="hljs-symbol">.text:</span>004640C0                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span>004640C3                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004640C4                 <span class="hljs-keyword">push</span>    offset aCountD  <span class="hljs-comment">; &quot;count : %d &quot;</span><br><span class="hljs-symbol">.text:</span>004640C9                 <span class="hljs-keyword">call</span>    sub_45DB54      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>004640CE                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>	count += i;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count : %d &quot;</span>, count);<br></code></pre></td></tr></table></figure>
</li>
<li><p>第二种，while循环</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>004640D1                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-number">0</span>  <span class="hljs-comment">; 一个变量初始化为0</span><br><span class="hljs-symbol">.text:</span>004640D8                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_20], <span class="hljs-number">0Ah</span> <span class="hljs-comment">; 另一个变量初始化为10</span><br><span class="hljs-symbol">.text:</span>004640DF<br><span class="hljs-symbol">.text:</span>004640DF loc_4640DF:                             <span class="hljs-comment">; CODE XREF: sub_464070+87↓j</span><br><span class="hljs-symbol">.text:</span>004640DF                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_20], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>004640E3                 <span class="hljs-keyword">jle</span>     short loc_4640F9 <span class="hljs-comment">; [ebp+var_20]小于等于0时跳转（出循环）</span><br><span class="hljs-symbol">.text:</span>004640E5                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span>004640E8                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_20] <span class="hljs-comment">; eax过渡，把[ebp+var_20]值加到[ebp+var_8]上</span><br><span class="hljs-symbol">.text:</span>004640EB                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004640EE                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_20]<br><span class="hljs-symbol">.text:</span>004640F1                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; eax过渡，给[ebp+var_20]减1</span><br><span class="hljs-symbol">.text:</span>004640F4                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_20], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004640F7                 <span class="hljs-keyword">jmp</span>     short loc_4640DF <span class="hljs-comment">; 回跳，形成循环</span><br><span class="hljs-symbol">.text:</span>004640F9 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>004640F9<br><span class="hljs-symbol">.text:</span>004640F9 loc_4640F9:                             <span class="hljs-comment">; CODE XREF: sub_464070+73↑j</span><br><span class="hljs-symbol">.text:</span>004640F9                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span>004640FC                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004640FD                 <span class="hljs-keyword">push</span>    offset aCountD  <span class="hljs-comment">; &quot;count : %d &quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464102</span>                 <span class="hljs-keyword">call</span>    sub_45DB54      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464107</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>	count += n;<br>	n--;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count : %d &quot;</span>, count);<br></code></pre></td></tr></table></figure>
</li>
<li><p>第三种，do-while循环</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>0046410A                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-number">0</span>  <span class="hljs-comment">; 一个变量初始化为0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464111</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_2C], <span class="hljs-number">0Ah</span> <span class="hljs-comment">; 另一个变量初始化为10</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464118</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464118</span> loc_464118:                             <span class="hljs-comment">; CODE XREF: sub_464070+BE↓j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464118</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span>0046411B                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_2C] <span class="hljs-comment">; eax过渡，把[ebp+var_2C]值加到[ebp+var_8]上</span><br><span class="hljs-symbol">.text:</span>0046411E                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464121</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_2C]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464124</span>                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; eax过渡，给[ebp+var_2C]减1</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464127</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_2C], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0046412A                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_2C], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>0046412E                 <span class="hljs-keyword">jg</span>      short loc_464118 <span class="hljs-comment">; [ebp+var_2C]大于0时回跳</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464130</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464133</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464134</span>                 <span class="hljs-keyword">push</span>    offset aCountD  <span class="hljs-comment">; &quot;count : %d &quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464139</span>                 <span class="hljs-keyword">call</span>    sub_45DB54      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>0046413E                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">do</span> &#123;<br>	count += i;<br>	i--;<br>&#125; <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count : %d &quot;</span>, count);<br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day5:函数调用约定</title>
    <url>/2025/07/12/Day5-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/</url>
    <content><![CDATA[<p>函数调用约定</p>
<span id="more"></span>

<h2 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h2><ul>
<li><p>主要有三种：cdecl、stdcall、fastcall。以求和函数为例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//求和</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span>&#123;<br>    <span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> res=sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>cdecl：完全栈传参，参数从右往左入栈，由调用者清理参数占用的栈空间</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">; int __cdecl main()</span><br>_main           proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: j__main↑j</span><br>  <br>var_C           = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ch</span><br>res             = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br>  <br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitStart_2:</span><br>                <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">3</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br>                <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitEnd_2:</span>                   <span class="hljs-comment">; JMC_flag</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset _6005466B_entry@cpp<br>                <span class="hljs-keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="hljs-number">4</span> <span class="hljs-comment">; __CheckForDebuggerJustMyCode(x)</span><br>                <span class="hljs-keyword">nop</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">3</span>               <span class="hljs-comment">; 参数c入栈</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">2</span>               <span class="hljs-comment">; 参数b入栈</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">1</span>               <span class="hljs-comment">; 参数a入栈</span><br>                <span class="hljs-keyword">call</span>    j_?sum@@YAHHHH@Z <span class="hljs-comment">; sum(int,int,int)</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0Ch</span>			<span class="hljs-comment">;这里调用者进行了清理参数占用的栈空间的操作(3个参数×4字节)，被调用者不负责</span><br>                <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+res], <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+res]<br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">push</span>    offset _Format  <span class="hljs-comment">; &quot;%d\n&quot;</span><br>                <span class="hljs-keyword">call</span>    j__printf<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br>                <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br>                <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">call</span>    j___RTC_CheckEsp<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">retn</span><br>_main           endp<br><br><span class="hljs-comment">; int __cdecl sum(int a, int b, int c)</span><br>?sum@@YAHHHH@Z  proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: sum(int,int,int)↑j</span><br>  <br>a               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br>b               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">0Ch</span><br>c               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">10h</span><br>  <br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span>		<span class="hljs-comment">;sum函数自身的栈空间</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitStart:</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edi</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ecx</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br>                <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitEnd:</span>                     <span class="hljs-comment">; JMC_flag</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset _6005466B_entry@cpp<br>                <span class="hljs-keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="hljs-number">4</span> <span class="hljs-comment">; __CheckForDebuggerJustMyCode(x)</span><br>                <span class="hljs-keyword">nop</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+a]<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+b]<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+c]<br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span>		<span class="hljs-comment">;清理自身栈空间</span><br>                <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">call</span>    j___RTC_CheckEsp<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">retn</span><br>?sum@@YAHHHH@Z  endp<br></code></pre></td></tr></table></figure>
</li>
<li><p>stdcall：完全栈传参，参数从右往左入栈，由被调用者清理参数占用的栈空间</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">; int __cdecl main()</span><br>_main           proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: j__main↑j</span><br>  <br>var_C           = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ch</span><br>res             = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br>  <br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitStart_2:</span><br>                <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">3</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br>                <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitEnd_2:</span>                   <span class="hljs-comment">; JMC_flag</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset _6005466B_entry@cpp<br>                <span class="hljs-keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="hljs-number">4</span> <span class="hljs-comment">; __CheckForDebuggerJustMyCode(x)</span><br>                <span class="hljs-keyword">nop</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">3</span>               <span class="hljs-comment">; 参数c入栈</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">2</span>               <span class="hljs-comment">; 参数b入栈</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">1</span>               <span class="hljs-comment">; 参数a入栈</span><br>                <span class="hljs-keyword">call</span>    j_?sum@@YGHHHH@Z <span class="hljs-comment">; sum(int,int,int)</span><br>                <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+res], <span class="hljs-built_in">eax</span>		<span class="hljs-comment">;这里直接到把返回值给res了，调用者不负责清理参数占用的栈空间</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+res]<br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">push</span>    offset _Format  <span class="hljs-comment">; &quot;%d\n&quot;</span><br>                <span class="hljs-keyword">call</span>    j__printf<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br>                <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br>                <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">call</span>    j___RTC_CheckEsp<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">retn</span><br>_main           endp<br>  <br><span class="hljs-comment">; int __stdcall sum(int a, int b, int c)</span><br>?sum@@YGHHHH@Z  proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: sum(int,int,int)↑j</span><br>  <br>a               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br>b               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">0Ch</span><br>c               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">10h</span><br>  <br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span>		<span class="hljs-comment">;sum的栈空间</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitStart:</span><br>              	 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edi</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ecx</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br>                <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitEnd:</span>                     <span class="hljs-comment">; JMC_flag</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset _6005466B_entry@cpp<br>                <span class="hljs-keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="hljs-number">4</span> <span class="hljs-comment">; __CheckForDebuggerJustMyCode(x)</span><br>                <span class="hljs-keyword">nop</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+a]<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+b]<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+c]<br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span>		<span class="hljs-comment">;清理自身栈空间</span><br>                <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">call</span>    j___RTC_CheckEsp<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">retn</span>    <span class="hljs-number">0Ch</span>			<span class="hljs-comment">;被调用者通过返回指令给esp增加0Ch，清理参数占用的栈空间</span><br>?sum@@YGHHHH@Z  endp<br></code></pre></td></tr></table></figure>
</li>
<li><p>fastcall：寄存器+栈传参，优先使用寄存器，剩余参数从右往左入栈，由被调用者清理参数占用的栈空间</p>
<p>寄存器传参优先级：</p>
<p>x86：ecx  edx  栈</p>
<p>x64：rcx  rdx  r8  r9  栈</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">; int __cdecl main()</span><br>_main           proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: j__main↑j</span><br>  <br>var_C           = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ch</span><br>res             = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br>  <br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitStart_2:</span><br>                <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">3</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br>                <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitEnd_2:</span>                   <span class="hljs-comment">; JMC_flag</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset _6005466B_entry@cpp<br>                <span class="hljs-keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="hljs-number">4</span> <span class="hljs-comment">; __CheckForDebuggerJustMyCode(x)</span><br>                <span class="hljs-keyword">nop</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">3</span>               <span class="hljs-comment">; 参数c入栈</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">2</span>          <span class="hljs-comment">; 参数b存入寄存器</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; 参数a存入寄存器</span><br>                <span class="hljs-keyword">call</span>    j_?sum@@YIHHHH@Z <span class="hljs-comment">; sum(int,int,int)</span><br>                <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+res], <span class="hljs-built_in">eax</span>		<span class="hljs-comment">;这里也是没有调用者对参数占用的栈空间的清理</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+res]<br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">push</span>    offset _Format  <span class="hljs-comment">; &quot;%d\n&quot;</span><br>                <span class="hljs-keyword">call</span>    j__printf<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br>                <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br>                <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">call</span>    j___RTC_CheckEsp<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">retn</span><br>_main           endp<br><br><span class="hljs-comment">; int __fastcall sum(int a, int b, int c)</span><br>?sum@@YIHHHH@Z  proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: sum(int,int,int)↑j</span><br>  <br>var_18          = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">18h</span><br>b               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">14h</span><br>a               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br>c               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br>  <br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0D8h</span>		<span class="hljs-comment">;sum开辟栈空间</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitStart:</span><br>                <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_18]<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">6</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br>                <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitEnd:</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ecx</span><br>                <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+b], <span class="hljs-built_in">edx</span><br>                <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+a], <span class="hljs-built_in">ecx</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset _6005466B_entry@cpp <span class="hljs-comment">; JMC_flag</span><br>                <span class="hljs-keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="hljs-number">4</span> <span class="hljs-comment">; __CheckForDebuggerJustMyCode(x)</span><br>                <span class="hljs-keyword">nop</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+a]<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+b]<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+c]<br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0D8h</span>		<span class="hljs-comment">;sum清理栈空间</span><br>                <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">call</span>    j___RTC_CheckEsp<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">retn</span>    <span class="hljs-number">4</span>				<span class="hljs-comment">;由于只有一个参数被push到栈上，所以被调用者返回4，清理参数占用的栈空间</span><br>?sum@@YIHHHH@Z  endp<br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day7:数组与指针识别</title>
    <url>/2025/07/17/Day7-%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p>数组与指针识别</p>
<span id="more"></span>

<h2 id="数组与指针识别"><a href="#数组与指针识别" class="headerlink" title="数组与指针识别"></a>数组与指针识别</h2><ul>
<li><p>整型一维数组</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00464260</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_14], <span class="hljs-number">1</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464267</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_10], <span class="hljs-number">2</span><br><span class="hljs-symbol">.text:</span>0046426E                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_C], <span class="hljs-number">3</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464275</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_14] <span class="hljs-comment">; 数组首地址</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464278</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span>             <span class="hljs-comment">; 传参</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464279</span>                 <span class="hljs-keyword">call</span>    sub_45D447<br><span class="hljs-symbol">.text:</span>0046427E                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><br><span class="hljs-comment">;sub_45D447</span><br><span class="hljs-symbol">.text:</span>004640D0 arg_0           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>004640D0<br><span class="hljs-symbol">.text:</span>004640D0                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>004640D1                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>004640D3                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><br><span class="hljs-symbol">.text:</span>004640D9                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>004640DA                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>004640<span class="hljs-built_in">DB</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>004640DC                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edi</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>004640DE                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>004640E0                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span>004640E5                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>004640E7                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_54D014<br><span class="hljs-symbol">.text:</span>004640EC                 <span class="hljs-keyword">call</span>    sub_45FF35<br><span class="hljs-symbol">.text:</span>004640F1                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>004640F2                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span>004640F7                 <span class="hljs-keyword">shl</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; eax=4*2^1=8</span><br><span class="hljs-symbol">.text:</span>004640F9                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+arg_0] <span class="hljs-comment">; [ebp+arg_0]是传入的参数，即数组首地址</span><br><span class="hljs-symbol">.text:</span>004640FC                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ecx</span>+<span class="hljs-built_in">eax</span>]  <span class="hljs-comment">; [ecx+eax]即[ebp+arg_0+eax]，即[ebp+10h]</span><br><span class="hljs-symbol">.text:</span>004640FF                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464100</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464105</span>                 <span class="hljs-keyword">shl</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span>          <span class="hljs-comment">; eax=4*2^0=4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464108</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+arg_0]<br><span class="hljs-symbol">.text:</span>0046410B                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ecx</span>+<span class="hljs-built_in">eax</span>]  <span class="hljs-comment">; 即[ebp+0Ch]</span><br><span class="hljs-symbol">.text:</span>0046410E                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span>0046410F                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464114</span>                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span>     <span class="hljs-comment">; ecx=4*0=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464117</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ebp</span>+arg_0]<br><span class="hljs-symbol">.text:</span>0046411A                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">edx</span>+<span class="hljs-built_in">ecx</span>]  <span class="hljs-comment">; 即[ebp+8]，即[ebp+arg_0]，数组首位</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046411D</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0046411E                 <span class="hljs-keyword">push</span>    offset aDDD     <span class="hljs-comment">; &quot;%d %d %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464123</span>                 <span class="hljs-keyword">call</span>    sub_45DB5E      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464128</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">10h</span><br><span class="hljs-symbol">.text:</span>0046412B                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>0046412C                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046412D</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>0046412E                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464134</span>                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464136</span>                 <span class="hljs-keyword">call</span>    sub_45F17F<br><span class="hljs-symbol">.text:</span>0046413B                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046413D</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>0046413E                 <span class="hljs-keyword">retn</span><br></code></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">IntShow</span><span class="hljs-params">(<span class="hljs-type">int</span>* n)</span> &#123;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, n[<span class="hljs-number">0</span>], n[<span class="hljs-number">1</span>], n[<span class="hljs-number">2</span>]);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;;<br>	IntShow(arr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>字符型一维数组</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00464281</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ds</span>:dword_520E60 <span class="hljs-comment">; &#x27;lleh&#x27;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464286</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_24], <span class="hljs-built_in">eax</span> <span class="hljs-comment">; 用eax过渡，传给局部变量</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464289</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">cx</span>, <span class="hljs-built_in">ds</span>:word_520E64 <span class="hljs-comment">; &#x27;o&#x27;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464290</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_20], <span class="hljs-built_in">cx</span> <span class="hljs-comment">; 用cx过渡，传给局部变量</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464294</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464297</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span>             <span class="hljs-comment">; 前半段的地址入栈</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464298</span>                 <span class="hljs-keyword">call</span>    sub_45E3AB<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046429D</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><br><span class="hljs-comment">;sub_45E3AB</span><br><span class="hljs-symbol">.text:</span>00463FC0 arg_0           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>00463FC0<br><span class="hljs-symbol">.text:</span>00463FC0                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>00463FC1                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>00463FC3                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><br><span class="hljs-symbol">.text:</span>00463FC9                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>00463FCA                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>00463FCB                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>00463FCC                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edi</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>00463FCE                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>00463FD0                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span>00463FD5                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>00463FD7                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_54D014<br><span class="hljs-symbol">.text:</span>00463FDC                 <span class="hljs-keyword">call</span>    sub_45FF35<br><span class="hljs-symbol">.text:</span>00463FE1                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>00463FE2                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+arg_0] <span class="hljs-comment">; 参数传给eax</span><br><span class="hljs-symbol">.text:</span>00463FE5                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>00463FE6                 <span class="hljs-keyword">push</span>    offset aS       <span class="hljs-comment">; &quot;%s&quot;</span><br><span class="hljs-symbol">.text:</span>00463FEB                 <span class="hljs-keyword">call</span>    sub_45DB5E      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>00463FF0                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>00463FF3                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>00463FF4                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>00463FF5                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>00463FF6                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><br><span class="hljs-symbol">.text:</span>00463FFC                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>00463FFE                 <span class="hljs-keyword">call</span>    sub_45F17F<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464003</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464005</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464006</span>                 <span class="hljs-keyword">retn</span><br></code></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CharShow</span><span class="hljs-params">(<span class="hljs-type">char</span>* n)</span> &#123;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, n);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> buf[] = &#123; <span class="hljs-string">&quot;hello&quot;</span> &#125;;<br>	CharShow(buf);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>数组作为返回值</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>004642C3                 <span class="hljs-keyword">call</span>    sub_45FC79<br><span class="hljs-symbol">.text:</span>004642C8                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_40], <span class="hljs-built_in">eax</span> <span class="hljs-comment">; 从返回值中取出传到局部变量</span><br><span class="hljs-symbol">.text:</span>004642CB                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_40] <span class="hljs-comment">; 放入寄存器中push作为参数</span><br><span class="hljs-symbol">.text:</span>004642CE                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004642CF                 <span class="hljs-keyword">push</span>    offset aS       <span class="hljs-comment">; &quot;%s&quot;</span><br><span class="hljs-symbol">.text:</span>004642D4                 <span class="hljs-keyword">call</span>    sub_45DB59      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>004642D9                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><br><span class="hljs-comment">;sub_45FC79</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span> var_14          = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">14h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span> var_10          = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">10h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span> var_C           = <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ch</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span> var_A           = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ah</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span> var_4           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464021</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464023</span>                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0D4h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464029</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>0046402A                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>0046402B                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>0046402C                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_14]<br><span class="hljs-symbol">.text:</span>0046402F                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">5</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464034</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464039</span>                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>0046403B                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, ___security_cookie<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464040</span>                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464042</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_4], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464045</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_54E014<br><span class="hljs-symbol">.text:</span>0046404A                 <span class="hljs-keyword">call</span>    sub_45FF35<br><span class="hljs-symbol">.text:</span>0046404F                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464050</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ds</span>:dword_521E60 <span class="hljs-comment">; &#x27;oviv&#x27;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464055</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_10], <span class="hljs-built_in">eax</span> <span class="hljs-comment">; eax过渡，传给局部变量</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464058</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">cx</span>, <span class="hljs-built_in">ds</span>:word_521E64 <span class="hljs-comment">; &#x27;05&#x27;</span><br><span class="hljs-symbol">.text:</span>0046405F                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_C], <span class="hljs-built_in">cx</span> <span class="hljs-comment">; cx过渡，传给局部变量</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464063</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">dl</span>, <span class="hljs-built_in">ds</span>:byte_521E66<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464069</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_A], <span class="hljs-built_in">dl</span><br><span class="hljs-symbol">.text:</span>0046406C                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_10] <span class="hljs-comment">; 前半段给eax，作为返回值传递</span><br><span class="hljs-symbol">.text:</span>0046406F                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464070</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464072</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464073</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edx</span>, dword_4640A0<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464079</span>                 <span class="hljs-keyword">call</span>    sub_45EC52<br><span class="hljs-symbol">.text:</span>0046407E                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0046407F                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464080</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464081</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464082</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464083</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+var_4]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464086</span>                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ebp</span>        <span class="hljs-comment">; StackCookie</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464088</span>                 <span class="hljs-keyword">call</span>    j_@__security_check_cookie@<span class="hljs-number">4</span> <span class="hljs-comment">; __security_check_cookie(x)</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046408D</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0D4h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464093</span>                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464095</span>                 <span class="hljs-keyword">call</span>    sub_45F17A<br><span class="hljs-symbol">.text:</span>0046409A                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>0046409C                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046409D</span>                 <span class="hljs-keyword">retn</span><br></code></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>* <span class="hljs-title function_">CrZT</span><span class="hljs-params">()</span> &#123;<br>	<span class="hljs-type">char</span> temp[<span class="hljs-number">7</span>] = <span class="hljs-string">&quot;vivo50&quot;</span>;<br>	<span class="hljs-keyword">return</span> temp;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span>* p = CrZT();<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>整形二维数组（和一维数组没有本质上的区别，都是占用一段连续的内存空间）</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>004642DC                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_58], <span class="hljs-number">1</span><br><span class="hljs-symbol">.text:</span>004642E3                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_54], <span class="hljs-number">2</span><br><span class="hljs-symbol">.text:</span>004642EA                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_50], <span class="hljs-number">3</span><br><span class="hljs-symbol">.text:</span>004642F1                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_4C], <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span>004642F8                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>004642FD                 <span class="hljs-keyword">shl</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span>          <span class="hljs-comment">; eax=8*2^0=8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464300</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+<span class="hljs-built_in">eax</span>+var_58] <span class="hljs-comment">; 即[ebp+var_58+8]，即[ebp+var_50]</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464304</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464309</span>                 <span class="hljs-keyword">shl</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">0</span>          <span class="hljs-comment">; edx=4*2^0=4</span><br><span class="hljs-symbol">.text:</span>0046430C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ecx</span>+<span class="hljs-built_in">edx</span>]  <span class="hljs-comment">; 即[ebp+var_58+0Ch]，即[ebp+var_4C]</span><br><span class="hljs-symbol">.text:</span>0046430F                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464310</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464315</span>                 <span class="hljs-keyword">shl</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">0</span>          <span class="hljs-comment">; ecx=8*2^0=8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464318</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ebp</span>+<span class="hljs-built_in">ecx</span>+var_58] <span class="hljs-comment">; 即[ebp+var_58+8]，即[ebp+var_50]</span><br><span class="hljs-symbol">.text:</span>0046431C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464321</span>                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span>     <span class="hljs-comment">; ecx=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464324</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">edx</span>+<span class="hljs-built_in">ecx</span>]  <span class="hljs-comment">; 即[ebp+var_50]</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464327</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464328</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046432D</span>                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span>     <span class="hljs-comment">; ecx=8*0=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464330</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ebp</span>+<span class="hljs-built_in">ecx</span>+var_58] <span class="hljs-comment">; 即[ebp+var_58]</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464334</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464339</span>                 <span class="hljs-keyword">shl</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span>          <span class="hljs-comment">; eax=4*2^0=4</span><br><span class="hljs-symbol">.text:</span>0046433C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">edx</span>+<span class="hljs-built_in">eax</span>]  <span class="hljs-comment">; 即[ebp+var_54]</span><br><span class="hljs-symbol">.text:</span>0046433F                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464340</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464345</span>                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">edx</span>, <span class="hljs-number">0</span>     <span class="hljs-comment">; eax=8*0=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464348</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+<span class="hljs-built_in">eax</span>+var_58] <span class="hljs-comment">; 即[ebp+var_58]</span><br><span class="hljs-symbol">.text:</span>0046434C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464351</span>                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">edx</span>, <span class="hljs-number">0</span>     <span class="hljs-comment">; ecx=4*0=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464354</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ecx</span>+<span class="hljs-built_in">eax</span>]  <span class="hljs-comment">; 即[ebp+var_58]</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464357</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464358</span>                 <span class="hljs-keyword">push</span>    offset aDDDD    <span class="hljs-comment">; &quot;%d,%d,%d,%d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046435D</span>                 <span class="hljs-keyword">call</span>    sub_45DB59      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464362</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">14h</span><br></code></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> num[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = &#123; &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125; &#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d,%d,%d&quot;</span>, num[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], num[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>], num[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], num[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day8:thiscall、类</title>
    <url>/2025/07/21/Day8-%E7%B1%BB/</url>
    <content><![CDATA[<p>thiscall、类</p>
<span id="more"></span>

<h2 id="调用约定：thiscall"><a href="#调用约定：thiscall" class="headerlink" title="调用约定：thiscall"></a>调用约定：thiscall</h2><ul>
<li>对于C++this指针的特性，有一种专门的调用约定叫thiscall，主要用于类出现的场景</li>
<li>无论x86&#x2F;x64，this指针均由ecx&#x2F;rcx扮演，指向对象的内存地址</li>
<li>thiscall由被调用者清理参数占用的栈空间</li>
</ul>
<h2 id="类（一）"><a href="#类（一）" class="headerlink" title="类（一）"></a>类（一）</h2><ul>
<li><p>简单的构造析构分析</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;main函数</span><br><span class="hljs-symbol">.text:</span>004641E0 var_EC          = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0ECh</span><br><span class="hljs-symbol">.text:</span>004641E0 var_30          = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">30h</span><br><span class="hljs-symbol">.text:</span>004641E0 var_20          = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">20h</span><br><span class="hljs-symbol">.text:</span>004641E0 var_4           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span>004641E0<br><span class="hljs-symbol">.text:</span>004641E0                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>004641E1                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>004641E3                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0F0h</span><br><span class="hljs-symbol">.text:</span>004641E9                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>004641EA                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>004641EB                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>004641EC                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_30]<br><span class="hljs-symbol">.text:</span>004641EF                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">0Ch</span><br><span class="hljs-symbol">.text:</span>004641F4                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span>004641F9                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>004641FB                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, ___security_cookie<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464200</span>                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464202</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_4], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464205</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_54D014<br><span class="hljs-symbol">.text:</span>0046420A                 <span class="hljs-keyword">call</span>    sub_45FF30<br><span class="hljs-symbol">.text:</span>0046420F                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464210</span>                 <span class="hljs-keyword">push</span>    offset aXiaoming <span class="hljs-comment">; 参数&quot;xiaoming&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464215</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-number">1</span>               <span class="hljs-comment">; 另一个参数</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464217</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+var_20] <span class="hljs-comment">; [ebp+var_20]是一个对象，this指针指向该对象</span><br><span class="hljs-symbol">.text:</span>0046421A                 <span class="hljs-keyword">call</span>    sub_46062E      <span class="hljs-comment">; 构造函数</span><br><span class="hljs-symbol">.text:</span>0046421F                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464220</span>                 <span class="hljs-keyword">push</span>    offset aPause   <span class="hljs-comment">; &quot;pause&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464225</span>                 <span class="hljs-keyword">call</span>    sub_45F98B      <span class="hljs-comment">; system</span><br><span class="hljs-symbol">.text:</span>0046422A                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046422D</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_EC], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464237</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+var_20] <span class="hljs-comment">; this指针</span><br><span class="hljs-symbol">.text:</span>0046423A                 <span class="hljs-keyword">call</span>    sub_45D38E      <span class="hljs-comment">; 析构函数</span><br><span class="hljs-symbol">.text:</span>0046423F                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_EC]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464245</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464246</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464248</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464249</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edx</span>, dword_464274<br><span class="hljs-symbol">.text:</span>0046424F                 <span class="hljs-keyword">call</span>    sub_45EC4D<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464254</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464255</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464256</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464257</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464258</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464259</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+var_4]<br><span class="hljs-symbol">.text:</span>0046425C                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ebp</span>        <span class="hljs-comment">; StackCookie</span><br><span class="hljs-symbol">.text:</span>0046425E                 <span class="hljs-keyword">call</span>    j_@__security_check_cookie@<span class="hljs-number">4</span> <span class="hljs-comment">; __security_check_cookie(x)</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464263</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0F0h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464269</span>                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>0046426B                 <span class="hljs-keyword">call</span>    sub_45F175<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464270</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464272</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464273</span>                 <span class="hljs-keyword">retn</span><br><br><span class="hljs-comment">;构造函数</span><br><span class="hljs-symbol">.text:</span>00463FC0 var_C           = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ch</span><br><span class="hljs-symbol">.text:</span>00463FC0 var_8           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>00463FC0 arg_0           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>00463FC0 arg_4           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">0Ch</span><br><span class="hljs-symbol">.text:</span>00463FC0<br><span class="hljs-symbol">.text:</span>00463FC0                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>00463FC1                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>00463FC3                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br><span class="hljs-symbol">.text:</span>00463FC9                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>00463FCA                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>00463FCB                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>00463FCC                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>00463FCD                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br><span class="hljs-symbol">.text:</span>00463FD0                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">3</span><br><span class="hljs-symbol">.text:</span>00463FD5                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span>00463FDA                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>00463FDC                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>00463FDD                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-built_in">ecx</span> <span class="hljs-comment">; 当前对象地址保存到[ebp+var_8]</span><br><span class="hljs-symbol">.text:</span>00463FE0                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_54D014<br><span class="hljs-symbol">.text:</span>00463FE5                 <span class="hljs-keyword">call</span>    sub_45FF30<br><span class="hljs-symbol">.text:</span>00463FEA                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>00463FEB                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8] <span class="hljs-comment">; 第一个对象成员</span><br><span class="hljs-symbol">.text:</span>00463FEE                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+arg_0] <span class="hljs-comment">; 第一个参数1</span><br><span class="hljs-symbol">.text:</span>00463FF1                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">eax</span>], <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>00463FF3                 <span class="hljs-keyword">push</span>    <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span>00463FF5                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+arg_4] <span class="hljs-comment">; 第二个参数&quot;xiaoming&quot;</span><br><span class="hljs-symbol">.text:</span>00463FF8                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>00463FF9                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span>00463FFC                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">4</span>          <span class="hljs-comment">; 第二个对象成员</span><br><span class="hljs-symbol">.text:</span>00463FFF                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464000</span>                 <span class="hljs-keyword">call</span>    sub_45FCF1      <span class="hljs-comment">; memcpy()</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464005</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0Ch</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464008</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8] <span class="hljs-comment">; 返回的是对象地址</span><br><span class="hljs-symbol">.text:</span>0046400B                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>0046400C                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046400D</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>0046400E                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464014</span>                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464016</span>                 <span class="hljs-keyword">call</span>    sub_45F175<br><span class="hljs-symbol">.text:</span>0046401B                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046401D</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>0046401E                 <span class="hljs-keyword">retn</span>    <span class="hljs-number">8</span><br><br><span class="hljs-comment">;析构函数</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464040</span> var_C           = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ch</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464040</span> var_8           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464040</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464040</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464041</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464043</span>                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464049</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>0046404A                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>0046404B                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>0046404C                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046404D</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464050</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">3</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464055</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span>0046405A                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>0046405C                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046405D</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-built_in">ecx</span> <span class="hljs-comment">; 把对象地址存到[ebp+var_8]</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464060</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_54D014<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464065</span>                 <span class="hljs-keyword">call</span>    sub_45FF30<br><span class="hljs-symbol">.text:</span>0046406A                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>0046406B                 <span class="hljs-keyword">push</span>    offset aDestructing <span class="hljs-comment">; &quot;destructing......&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464070</span>                 <span class="hljs-keyword">call</span>    sub_45DB59      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464075</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464078</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464079</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>0046407A                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>0046407B                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464081</span>                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464083</span>                 <span class="hljs-keyword">call</span>    sub_45F175<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464088</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>0046408A                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>0046408B                 <span class="hljs-keyword">retn</span><br></code></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> ID;<br>	<span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">Student</span>(<span class="hljs-type">int</span> n = <span class="hljs-number">0</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* na = <span class="hljs-string">&quot;NONE&quot;</span>) :<span class="hljs-built_in">ID</span>(n) &#123;<br>		<span class="hljs-built_in">memcpy</span>(name, na, <span class="hljs-built_in">sizeof</span>(na));<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>	~<span class="hljs-built_in">Student</span>();<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Student::show</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s\n&quot;</span>, ID, name);<br>&#125;<br>Student::~<span class="hljs-built_in">Student</span>() &#123;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;destructing......&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-function">Student <span class="hljs-title">stu</span><span class="hljs-params">(<span class="hljs-number">001</span>, <span class="hljs-string">&quot;xiaoming&quot;</span>)</span></span>;<br>	<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Day9:壳与脱壳（一）</title>
    <url>/2025/07/29/Day9-%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>壳、壳的加载过程、工具脱壳、手动脱壳流程、esp定律（基于Xdbg）</p>
<span id="more"></span>

<h2 id="壳"><a href="#壳" class="headerlink" title="壳"></a>壳</h2><ul>
<li><p>先看ctf-wiki对壳的介绍：</p>
<p><strong>壳</strong> 是在一些计算机软件里一段专门负责保护软件不被非法修改或反编译的程序。</p>
<p>它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。</p>
</li>
<li><p>因此，加壳程序包含壳程序和原程序两个部分，且原程序在壳程序运行后才恢复到独立可执行的状态。因此，可以借助动态调试器在壳程序运行完后进行dump，从而获得独立可执行的原程序</p>
</li>
<li><p>常见的壳有压缩壳和加密壳两种：</p>
<p>压缩壳：upx、ASpack、PECompat等</p>
<p>加密壳：VMProtect、Themida、ASProtector等</p>
</li>
</ul>
<h2 id="壳的加载过程"><a href="#壳的加载过程" class="headerlink" title="壳的加载过程"></a>壳的加载过程</h2><ul>
<li>壳和原程序在逻辑上基本没有关联，因此，壳程序在解析加壳后的二进制文件前，会先保存各寄存器的值，通常用pushad&#x2F;puahfd实现</li>
<li>解析完成后，是原程序的逻辑部分，此时，壳程序给出控制权，寄存器恢复到解析前的状态，通常用popad&#x2F;popfd实现</li>
<li>最后，程序跳到原程序入口点开始执行</li>
</ul>
<h2 id="工具脱壳"><a href="#工具脱壳" class="headerlink" title="工具脱壳"></a>工具脱壳</h2><ul>
<li><p>直接使用工具脱壳的情况主要有两种：一种是无修改的、只使用加壳程序加壳；另一种是使用加壳程序加壳后修改了区块名的。前者可以直接使用加壳程序脱壳（如果具备脱壳功能的话），后者先修改区块名再使用加壳程序脱壳。</p>
</li>
<li><p>upx无修改加壳示例：</p>
<p>拿到可执行文件，先到DIE查看，发现有壳。对壳的信息描述没有出现“modified”字眼，因此判断是无修改加壳，直接使用工具脱壳</p>
<p><img src="/../images/image-20250729103439484.png" alt="查看壳信息"></p>
<p>直接使用upx -d脱壳</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-29%20103724.png" alt="upx-d脱壳"></p>
<p>再次用DIE打开，发现没有识别出壳了</p>
<p><img src="/../images/image-20250729104311684.png" alt="脱壳后查看壳信息"></p>
</li>
<li><p>upx修改区块名加壳示例：</p>
<p>先到DIE查看壳信息，发现是upx modified</p>
<p><img src="/../images/image-20250729110711262.png" alt="查看壳信息"></p>
<p>点击“区块“下方的”&gt;“查看区块信息，发现区块名有改动</p>
<p><img src="/../images/image-20250729110752177.png" alt="区块名改动"></p>
<p>010editor修改区块名</p>
<p><img src="/../images/image-20250729111002665.png" alt="修改区块名"></p>
<p>再次查看壳信息，变成无修改加壳了，直接工具脱壳</p>
<p><img src="/../images/image-20250729111128932.png" alt="再次查看壳信息"></p>
</li>
</ul>
<h2 id="手动脱壳流程"><a href="#手动脱壳流程" class="headerlink" title="手动脱壳流程"></a>手动脱壳流程</h2><ul>
<li><p>步骤：</p>
<ul>
<li>查壳：使用DIE、ExeinfoPE、PEiD等工具查壳</li>
<li>寻找程序原入口点(OEP)：通过各种方法找到壳代码结束、程序真正开始的地方</li>
<li>dump内存：借助插件从OEP开始dump出原程序</li>
<li>输入表(IAT)重建：借助插件重建输入表</li>
<li>关闭程序重定位：使用DIE等工具关闭程序重定位</li>
</ul>
</li>
<li><p>寻找OEP的方法有很多，而dump和IAT重建以及关闭重定位的方法基本固定。先用一个例子展示整体流程，再详细展开寻找OEP的方法。upx手动脱壳示例：</p>
<ul>
<li><p>查壳：显示是upx</p>
<p><img src="/../images/image-20250729133015652.png" alt="查壳"></p>
</li>
<li><p>寻找OEP：</p>
<p>采用esp定律法（详见下文）找到push ebp开头的一段代码</p>
<p><img src="/../images/image-20250729134006853.png" alt="寻找OEP"></p>
</li>
<li><p>dump内存：</p>
<p>打开插件scylla，点击“转储”栏中的“转储”，会获得一个_dump后缀的exe文件</p>
<p><img src="/../images/image-20250729134119537.png" alt="dump"></p>
</li>
<li><p>IAT重建：</p>
<p>点击“IAT自动搜索”，会有弹窗问是否使用高级搜索结果，点“是”。这时候，VA和“大小”两个框会被填充。</p>
<p><img src="/../images/image-20250729134901607.png" alt="IAT自动搜索"></p>
<p>接下来点“获取导入”，上方的大框中会出现dll结尾的东西，需要把带红色X的取消勾选</p>
<p><img src="/../images/image-20250729134937163.png" alt="获取导入"></p>
<p>然后点击修复转储，选择刚刚dump出来的文件，会得到一个再加上_SCY的exe文件。</p>
<p>此时程序大概率运行不了，会闪退。但是对于静态分析来说，到这一步已经足够了。</p>
</li>
<li><p>关闭重定位：把得到的_dump_SCY.exe文件拖到DIE，点击“区块”栏的“&gt;”，会弹出文件结构界面</p>
<p><img src="/../images/image-20250729135914719.png" alt="文件结构界面"></p>
<p>先取消勾选右上角的“只读”</p>
<p><img src="/../images/image-20250729140239276.png" alt="取消只读"></p>
<p>点击IMAGE_NT_HEADERS下的IMAGE_FILE_HEADER，在“标志”选项中勾选“RELOCS_STRIPPED”（图中未勾选）</p>
<p><img src="/../images/image-20250729140145721.png" alt="勾选RELOCS_STRIPPED"></p>
<p>再点击IMAGE_OPTIONAL_HEADERS，找到另一个标志(DllCharacteristics)，取消勾选“DYNAMIC_BASE”（图中未取消）</p>
<p><img src="/../images/image-20250729140545940.png" alt="取消勾选DYNAMIC_BASE"></p>
<p>这样子，我们的程序就脱完壳并且可以正常运行了</p>
</li>
<li><p>PS：关于IAT重建这一步骤，为什么不能IAT自动搜索再转储一步到位？</p>
<p>结合AI的解释，个人见解是IAT自动搜索的过程可能会运行程序，导致地址刷新，OEP失效，dump出来的程序不完整或者不对。因此，dump和IAT重建实际上是两个步骤，不过被集成到了一个界面。其实还有手动重建IAT的方法，这种情况下就确确实实需要先dump再导入重建的IAT了，因为在调试器中找到OEP后还要继续找IAT</p>
</li>
</ul>
</li>
</ul>
<h2 id="寻找OEP的方法（一）"><a href="#寻找OEP的方法（一）" class="headerlink" title="寻找OEP的方法（一）"></a>寻找OEP的方法（一）</h2><h3 id="ESP定律"><a href="#ESP定律" class="headerlink" title="ESP定律"></a>ESP定律</h3><ul>
<li><p>前文，我们知道了壳程序解析时会有pushad\popad或者pushfd\popfd的操作。pushad时，随着通用寄存器值的入栈，esp的值会发生变化，又因为栈平衡的特性，最终esp的值会回到pushad后的这个值。因此，可以借助这一点，给pushad后的esp值下硬件访问断点，popad后就会触发断点，中断调试，进而实现跳过整个壳解析过程。当然，中断处还不是OEP，一般在中断处后会有一个跨度明显的jmp，甚至jmp后还有一个跳转表jmp才会到达真正的OEP</p>
</li>
<li><p>具体操作如下：</p>
<ul>
<li><p>xdbg打开，F9到程序所在内存区域</p>
<p><img src="/../images/image-20250729172225632.png" alt="xdbg打开"></p>
</li>
<li><p>可以看到EIP所在就是pushad</p>
<p><img src="/../images/image-20250729172310628.png" alt="pushad"></p>
</li>
<li><p>F8步过，esp更新</p>
<p><img src="/../images/image-20250729172402698.png" alt="esp更新"></p>
</li>
<li><p>在右下角栈窗口设上硬件访问断点</p>
<p><img src="/../images/image-20250729172449826.png" alt="设置硬件访问断点"></p>
</li>
<li><p>点击工具栏“视图”下方的“-&gt;”，程序会执行过popad。可以看到下方不远处有个大跳</p>
<p><img src="/../images/image-20250729172606653.png" alt="popad"></p>
</li>
<li><p>F8到大跳处F7步入，有跳转表继续F7步入，可以看到开辟栈帧操作，这里就是OEP了，在此处直接使用scylla dump出程序</p>
<p><img src="/../images/image-20250729172759829.png" alt="OEP"></p>
</li>
</ul>
</li>
</ul>
<h3 id="单步跟踪法"><a href="#单步跟踪法" class="headerlink" title="单步跟踪法"></a>单步跟踪法</h3><ul>
<li>如名，就是一直按F8，让程序尽量向下走，遇到循环就跳过，遇到近call就步入，重点关注大跳</li>
<li>参考ctf-wiki <a href="https://ctf-wiki.org/reverse/platform/windows/unpack/trace/">https://ctf-wiki.org/reverse/platform/windows/unpack/trace/</a></li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Moectf2025ReverseWriteUp</title>
    <url>/2025/10/12/Moectf2025ReverseWriteUp/</url>
    <content><![CDATA[<p>Moectf2025 Reverse方向全解&amp;详解</p>
<span id="more"></span>

<h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="upx"><a href="#upx" class="headerlink" title="upx"></a>upx</h3><ul>
<li><p>附件程序用010editor打开，可以看到upx版本，可以找对应版本upx程序脱壳，也可以手动脱壳（采用内存镜像法）：</p>
<p>用x64dbg打开程序，先移除预设断点</p>
<p><img src="/../images/image-20250828230432945-1760193218428-1.png" alt="移除预设断点"></p>
<p>在“内存映射”窗口给程序的.rsrc段下一次性内存访问断点，F9运行</p>
<p><img src="/../images/image-20250828230606530-1760193218428-2.png" alt="下一次性读取断点"></p>
<p>然后在UPX0段或者UPX1段下一次性内存写入断点，F9运行</p>
<p><img src="/../images/image-20250828230727951-1760193218429-4.png" alt="下一次性内存写入断点"></p>
<p>回到“CPU”窗口，可以看到在RIP不远处有一个大跳（RIP在0x00007FF7BB887423处)</p>
<p><img src="/../images/image-20250828231133499-1760193218429-8.png" alt="大跳"></p>
<p>跟进去，还有个跳转表，继续跟进，可以看到程序的OEP了</p>
<p><img src="/../images/image-20250828231234644-1760193218428-3.png" alt="OEP"></p>
<p>然后在此处使用scylla dump出程序，并且修复IAT，得到upx_dump_SCY.exe，可以分析了</p>
</li>
<li><p>分析main函数，发现每个输入的字符异或了0x21，而非末位字符还异或了原来的下一位。由于异或有交换律，所以解密逻辑可以是：先对每个处理完的字符异或0x21，然后再从倒数第二位开始和下一位异或，这样就恢复了复原出了flag（但是给的密文少了最后一位，即字符串的结束符。根据最后一位和倒数第二位的关系0x56&#x3D;125 ^ 0x21 ^ 末位 得出：末位&#x3D;10，所以末位^0x21&#x3D;43，将密文补充完整）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//main函数</span><br>__int64 <span class="hljs-title function_">sub_7FF6FC2718A0</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> *v0; <span class="hljs-comment">// rdi</span><br>  __int64 i; <span class="hljs-comment">// rcx</span><br>  FILE *Stream; <span class="hljs-comment">// rax</span><br>  _BYTE v4[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-20h] BYREF</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// [rsp+20h] [rbp+0h] BYREF</span><br>  _DWORD cipher[<span class="hljs-number">44</span>]; <span class="hljs-comment">// [rsp+30h] [rbp+10h]</span><br>  <span class="hljs-type">char</span> flag[<span class="hljs-number">132</span>]; <span class="hljs-comment">// [rsp+E0h] [rbp+C0h] BYREF</span><br>  <span class="hljs-type">int</span> length; <span class="hljs-comment">// [rsp+164h] [rbp+144h]</span><br>  _BYTE v9[<span class="hljs-number">60</span>]; <span class="hljs-comment">// [rsp+188h] [rbp+168h]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+1C4h] [rbp+1A4h]</span><br>  <span class="hljs-type">int</span> Char; <span class="hljs-comment">// [rsp+1E4h] [rbp+1C4h]</span><br>  <span class="hljs-type">int</span> k; <span class="hljs-comment">// [rsp+204h] [rbp+1E4h]</span><br><br>  v0 = &amp;v5;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">130LL</span>; i; --i )<br>  &#123;<br>    *(_DWORD *)v0 = <span class="hljs-number">-858993460</span>;<br>    v0 += <span class="hljs-number">4</span>;<br>  &#125;<br>  sub_7FF6FC271375((__int64)&amp;word_7FF6FC28200E);<br>  cipher[<span class="hljs-number">0</span>] = <span class="hljs-number">35</span>;<br>  cipher[<span class="hljs-number">1</span>] = <span class="hljs-number">43</span>;<br>  cipher[<span class="hljs-number">2</span>] = <span class="hljs-number">39</span>;<br>  cipher[<span class="hljs-number">3</span>] = <span class="hljs-number">54</span>;<br>  cipher[<span class="hljs-number">4</span>] = <span class="hljs-number">51</span>;<br>  cipher[<span class="hljs-number">5</span>] = <span class="hljs-number">60</span>;<br>  cipher[<span class="hljs-number">6</span>] = <span class="hljs-number">3</span>;<br>  cipher[<span class="hljs-number">7</span>] = <span class="hljs-number">72</span>;<br>  cipher[<span class="hljs-number">8</span>] = <span class="hljs-number">100</span>;<br>  cipher[<span class="hljs-number">9</span>] = <span class="hljs-number">11</span>;<br>  cipher[<span class="hljs-number">10</span>] = <span class="hljs-number">29</span>;<br>  cipher[<span class="hljs-number">11</span>] = <span class="hljs-number">118</span>;<br>  cipher[<span class="hljs-number">12</span>] = <span class="hljs-number">123</span>;<br>  cipher[<span class="hljs-number">13</span>] = <span class="hljs-number">16</span>;<br>  cipher[<span class="hljs-number">14</span>] = <span class="hljs-number">11</span>;<br>  cipher[<span class="hljs-number">15</span>] = <span class="hljs-number">58</span>;<br>  cipher[<span class="hljs-number">16</span>] = <span class="hljs-number">63</span>;<br>  cipher[<span class="hljs-number">17</span>] = <span class="hljs-number">101</span>;<br>  cipher[<span class="hljs-number">18</span>] = <span class="hljs-number">118</span>;<br>  cipher[<span class="hljs-number">19</span>] = <span class="hljs-number">41</span>;<br>  cipher[<span class="hljs-number">20</span>] = <span class="hljs-number">21</span>;<br>  cipher[<span class="hljs-number">21</span>] = <span class="hljs-number">55</span>;<br>  cipher[<span class="hljs-number">22</span>] = <span class="hljs-number">28</span>;<br>  cipher[<span class="hljs-number">23</span>] = <span class="hljs-number">10</span>;<br>  cipher[<span class="hljs-number">24</span>] = <span class="hljs-number">8</span>;<br>  cipher[<span class="hljs-number">25</span>] = <span class="hljs-number">33</span>;<br>  cipher[<span class="hljs-number">26</span>] = <span class="hljs-number">62</span>;<br>  cipher[<span class="hljs-number">27</span>] = <span class="hljs-number">60</span>;<br>  cipher[<span class="hljs-number">28</span>] = <span class="hljs-number">61</span>;<br>  cipher[<span class="hljs-number">29</span>] = <span class="hljs-number">22</span>;<br>  cipher[<span class="hljs-number">30</span>] = <span class="hljs-number">11</span>;<br>  cipher[<span class="hljs-number">31</span>] = <span class="hljs-number">36</span>;<br>  cipher[<span class="hljs-number">32</span>] = <span class="hljs-number">41</span>;<br>  cipher[<span class="hljs-number">33</span>] = <span class="hljs-number">36</span>;<br>  cipher[<span class="hljs-number">34</span>] = <span class="hljs-number">86</span>;<br>  sub_7FF6FC27119F((__int64)aPleaseInputYou);   <span class="hljs-comment">// &quot;please input your flag: &quot;</span><br>  Stream = _acrt_iob_func(<span class="hljs-number">0</span>);<br>  fgets(flag, <span class="hljs-number">100</span>, Stream);<br>  length = j_strlen(flag);<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; length; ++j )<br>  &#123;<br>    Char = flag[j] ^ <span class="hljs-number">0x21</span>;<br>    <span class="hljs-keyword">if</span> ( j &lt; length - <span class="hljs-number">1</span> )<br>      Char ^= flag[j + <span class="hljs-number">1</span>];<br>    v9[j] = Char;<br>  &#125;<br>  <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">35</span>; ++k )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">char</span>)v9[k] != cipher[k] )<br>    &#123;<br>      sub_7FF6FC27119F((__int64)aYouWillNeverGe);<span class="hljs-comment">// &quot;you will never get the flag!!!!\n&quot;</span><br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  sub_7FF6FC271311(v4, qword_7FF6FC27AD00);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">enc=[<br>    <span class="hljs-number">0x23</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x48</span>,<br>    <span class="hljs-number">0x64</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x3a</span>,<br>    <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x0a</span>,<br>    <span class="hljs-number">0x08</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x24</span>,<br>    <span class="hljs-number">0x29</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">43</span>			<br>]<br>xored=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    xored.append(enc[i]^<span class="hljs-number">0x21</span>)<br><span class="hljs-comment">#print(xored)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xored)-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    xored[i]=xored[i]^xored[i+<span class="hljs-number">1</span>]<br>flag=<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xored)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h3><ul>
<li><p>附件程序main函数逻辑如下，wasd迷宫题，迷宫在函数maze_init中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 count; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// ebx</span><br>  __int64 index; <span class="hljs-comment">// r9</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// r11d</span><br>  <span class="hljs-type">unsigned</span> __int64 y; <span class="hljs-comment">// r8</span><br>  __int64 x; <span class="hljs-comment">// r10</span><br>  <span class="hljs-type">unsigned</span> __int64 n0x37_1; <span class="hljs-comment">// rdi</span><br>  <span class="hljs-type">char</span> *Format; <span class="hljs-comment">// rcx</span><br>  _BYTE flag[<span class="hljs-number">1008</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-408h]</span><br><br>  maze_init();<br>  <span class="hljs-built_in">printf</span>(asc_140004138);<br>  <span class="hljs-built_in">printf</span>(&amp;Format_);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>LABEL_2:<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      <span class="hljs-built_in">printf</span>(asc_140004190);<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>);<br>      count = <span class="hljs-number">-1LL</span>;<br>      <span class="hljs-keyword">do</span><br>        ++count;<br>      <span class="hljs-keyword">while</span> ( flag[count] );<br>      <span class="hljs-keyword">if</span> ( count &lt;= <span class="hljs-number">999</span> )<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-built_in">printf</span>(&amp;Format__0);<br>    &#125;<br>    v4 = <span class="hljs-number">1</span>;<br>    index = <span class="hljs-number">0LL</span>;<br>    v6 = <span class="hljs-number">1</span>;<br>    y = <span class="hljs-number">1LL</span>;<span class="hljs-comment">// 起点y</span><br>    x = <span class="hljs-number">1LL</span>;<span class="hljs-comment">// 起点x</span><br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)count &gt; <span class="hljs-number">0</span> )<br>      <span class="hljs-keyword">break</span>;<br>LABEL_19:<br>    Format = (<span class="hljs-type">char</span> *)&amp;byte_140004118;<br>LABEL_20:<br>    <span class="hljs-built_in">printf</span>(Format);<br>    <span class="hljs-built_in">printf</span>(&amp;Format__1);<br>  &#125;<br>  n0x37_1 = <span class="hljs-number">1LL</span>;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">switch</span> ( flag[index] )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>        --v4;<br>        --x;<br>        --n0x37_1;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>        ++v4;<br>        ++x;<br>        ++n0x37_1;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;S&#x27;</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>        ++v6;<br>        ++y;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;W&#x27;</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;w&#x27;</span>:<br>        --v6;<br>        --y;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(&amp;Format__2);<br>        <span class="hljs-built_in">printf</span>(&amp;Format__1);<br>        <span class="hljs-keyword">goto</span> LABEL_2;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( y &gt; <span class="hljs-number">0x37</span> || n0x37_1 &gt; <span class="hljs-number">0x37</span> )<br>    &#123;<br>      Format = (<span class="hljs-type">char</span> *)&amp;unk_1400040D8;<br>      <span class="hljs-keyword">goto</span> LABEL_20;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( byte_140005660[<span class="hljs-number">56</span> * y + x] == <span class="hljs-number">49</span> )<br>    &#123;<br>      Format = (<span class="hljs-type">char</span> *)&amp;unk_1400040F8;<br>      <span class="hljs-keyword">goto</span> LABEL_20;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( y == <span class="hljs-number">15</span> &amp;&amp; x == <span class="hljs-number">32</span> )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> ( ++index &gt;= (<span class="hljs-type">int</span>)count )<br>      <span class="hljs-keyword">goto</span> LABEL_19;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(asc_1400041E0);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;moectf&#123;%s&#125;\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>maze_init函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">maze_init</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *all_1; <span class="hljs-comment">// r9</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> **v1; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">int</span> n56_2; <span class="hljs-comment">// r11d</span><br>  __int64 v3; <span class="hljs-comment">// r10</span><br>  __int64 n56; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// r8d</span><br>  __int64 i; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v7; <span class="hljs-comment">// dl</span><br>  __int64 v8; <span class="hljs-comment">// rcx</span><br>  _QWORD v9[<span class="hljs-number">56</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-E0h] BYREF</span><br><br>  v9[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;10100000000000000010000011011101011111111101011100000111&quot;</span>;<br>  all_1 = <span class="hljs-string">&quot;11111111111111111111111111111111111111111111111111111111&quot;</span>;<br>  v9[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;11111111111111111111111111111111111111111111111111111111&quot;</span>;<br>  v9[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;10111010111111111010111011000001000001000001000101110111&quot;</span>;<br>  v9[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;10000010000010000010001011011111111101110111011101110111&quot;</span>;<br>  v9[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;10111111111011101110111011010000000000010100010001110111&quot;</span>;<br>  v9[<span class="hljs-number">5</span>] = <span class="hljs-string">&quot;10100000001000101000100011010101111111011101110101110111&quot;</span>;<br>  v9[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;10101011111110111011101011010101000001000000010101110111&quot;</span>;<br>  v9[<span class="hljs-number">7</span>] = <span class="hljs-string">&quot;10101010000010100000101011110101110101111101111111110111&quot;</span>;<br>  v9[<span class="hljs-number">8</span>] = <span class="hljs-string">&quot;10111010111010101111101011100101000100000101000101110111&quot;</span>;<br>  v9[<span class="hljs-number">9</span>] = <span class="hljs-string">&quot;10000010001010001000001011001111011111010101011101110111&quot;</span>;<br>  v9[<span class="hljs-number">10</span>] = <span class="hljs-string">&quot;11111011101011111011111111101000100000101100101001110111&quot;</span>;<br>  v9[<span class="hljs-number">11</span>] = <span class="hljs-string">&quot;10001010001000100010000010001010011000100010010011000001&quot;</span>;<br>  v9[<span class="hljs-number">12</span>] = <span class="hljs-string">&quot;10111010111110101010111011011001011111010101011101011101&quot;</span>;<br>  v9[<span class="hljs-number">13</span>] = <span class="hljs-string">&quot;10001010001000001010001011000101000100000101000101011101&quot;</span>;<br>  v9[<span class="hljs-number">14</span>] = <span class="hljs-string">&quot;11101011101111111011101011110101110111111101110101011101&quot;</span>;<br>  v9[<span class="hljs-number">15</span>] = <span class="hljs-string">&quot;10001000101000001010001011000100010100000101000101011101&quot;</span>;<br>  v9[<span class="hljs-number">16</span>] = <span class="hljs-string">&quot;10111111101011101110111011011111110101110111011101011101&quot;</span>;<br>  v9[<span class="hljs-number">17</span>] = <span class="hljs-string">&quot;10001000001000100000001011000100000100010000000101011001&quot;</span>;<br>  v9[<span class="hljs-number">18</span>] = <span class="hljs-string">&quot;11101011111011111111101011110101111101111111110101011011&quot;</span>;<br>  v9[<span class="hljs-number">19</span>] = <span class="hljs-string">&quot;10101000000010001000101011010100000001000100010101011011&quot;</span>;<br>  v9[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;10101111111110101010101011010111111111010101010101011011&quot;</span>;<br>  v9[<span class="hljs-number">21</span>] = <span class="hljs-string">&quot;10100000000000100010101011010000000000010001010101011011&quot;</span>;<br>  v9[<span class="hljs-number">22</span>] = <span class="hljs-string">&quot;10111111111111111110111011011111111111111111011101011011&quot;</span>;<br>  v9[<span class="hljs-number">23</span>] = <span class="hljs-string">&quot;10000000001111000000000011110111010000111100011111011011&quot;</span>;<br>  v9[<span class="hljs-number">24</span>] = <span class="hljs-string">&quot;11101111100000011011011111111010110111011101100001011011&quot;</span>;<br>  v9[<span class="hljs-number">25</span>] = <span class="hljs-string">&quot;11101111111111111011011111111101110111101101100001011011&quot;</span>;<br>  v9[<span class="hljs-number">26</span>] = <span class="hljs-string">&quot;10001000111111000010000011111010110111011101100001011011&quot;</span>;<br>  v9[<span class="hljs-number">27</span>] = <span class="hljs-string">&quot;10111010111111111010111011110111010000111101100001010011&quot;</span>;<br>  v9[<span class="hljs-number">28</span>] = <span class="hljs-string">&quot;10000010000010000010001011111111111111111101100001010111&quot;</span>;<br>  v9[<span class="hljs-number">29</span>] = <span class="hljs-string">&quot;10111111111011101110111011110001000110001101100001010001&quot;</span>;<br>  v9[<span class="hljs-number">30</span>] = <span class="hljs-string">&quot;10100000001000101000100011110111011101111101100001011101&quot;</span>;<br>  v9[<span class="hljs-number">31</span>] = <span class="hljs-string">&quot;10101011111110111011101011110001000101111101100001011101&quot;</span>;<br>  v9[<span class="hljs-number">32</span>] = <span class="hljs-string">&quot;10101010000010100000101011111101011101111101100001011101&quot;</span>;<br>  v9[<span class="hljs-number">33</span>] = <span class="hljs-string">&quot;10111010111010101111101011110001000110001101100001011101&quot;</span>;<br>  v9[<span class="hljs-number">34</span>] = <span class="hljs-string">&quot;10000010001010101000001011111111111111111101100001011101&quot;</span>;<br>  v9[<span class="hljs-number">35</span>] = <span class="hljs-string">&quot;11111011101011111011111110000000000000001101100001011101&quot;</span>;<br>  v9[<span class="hljs-number">36</span>] = <span class="hljs-string">&quot;10001010001000100010000011111111111111111100110011011101&quot;</span>;<br>  v9[<span class="hljs-number">37</span>] = <span class="hljs-string">&quot;10111010111110101010111010010000000011111110001111011101&quot;</span>;<br>  v9[<span class="hljs-number">38</span>] = <span class="hljs-string">&quot;10001010001000001010001010110111000001111110100101011101&quot;</span>;<br>  v9[<span class="hljs-number">39</span>] = <span class="hljs-string">&quot;11101011101111111011101000110011001111111100110111011101&quot;</span>;<br>  v9[<span class="hljs-number">40</span>] = <span class="hljs-string">&quot;10001000101000001010001011111111111111111111110111010001&quot;</span>;<br>  v1 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> **)v9;<br>  v9[<span class="hljs-number">55</span>] = <span class="hljs-string">&quot;11111111111111111111111111111111111111111111111111111111&quot;</span>;<br>  v9[<span class="hljs-number">41</span>] = <span class="hljs-string">&quot;10111111101011101110111010100001001100000000000011011011&quot;</span>;<br>  n56_2 = <span class="hljs-number">0</span>;<br>  v9[<span class="hljs-number">42</span>] = <span class="hljs-string">&quot;10001000001000100000001011111111111101011101111001011011&quot;</span>;<br>  v3 = <span class="hljs-number">0LL</span>;<br>  v9[<span class="hljs-number">43</span>] = <span class="hljs-string">&quot;10101011111011111111101011000000000001000100010111011011&quot;</span>;<br>  v9[<span class="hljs-number">44</span>] = <span class="hljs-string">&quot;10101000000010001000101010010111111111111111111111011011&quot;</span>;<br>  v9[<span class="hljs-number">45</span>] = <span class="hljs-string">&quot;10101111111110101010101010110111111111111111111101011011&quot;</span>;<br>  v9[<span class="hljs-number">46</span>] = <span class="hljs-string">&quot;10100000000000100010101011100000000000000000000011011011&quot;</span>;<br>  v9[<span class="hljs-number">47</span>] = <span class="hljs-string">&quot;10111111111111111110011011111111111111111111111011011011&quot;</span>;<br>  v9[<span class="hljs-number">48</span>] = <span class="hljs-string">&quot;10000011111111111111000010000000000000000000000000011001&quot;</span>;<br>  v9[<span class="hljs-number">49</span>] = <span class="hljs-string">&quot;11111011111111111111111111111111111111111111111111111101&quot;</span>;<br>  v9[<span class="hljs-number">50</span>] = <span class="hljs-string">&quot;11111011100001100110110111000000000000000000000111111101&quot;</span>;<br>  v9[<span class="hljs-number">51</span>] = <span class="hljs-string">&quot;11111011101111011010000111011111111111111111110111111101&quot;</span>;<br>  v9[<span class="hljs-number">52</span>] = <span class="hljs-string">&quot;11111011100001000010110110000111111111111111110000000001&quot;</span>;<br>  v9[<span class="hljs-number">53</span>] = <span class="hljs-string">&quot;11111011101111011010110111101111111111111111111111111111&quot;</span>;<br>  v9[<span class="hljs-number">54</span>] = <span class="hljs-string">&quot;11110000000000011000110000000000000000000000000000000011&quot;</span>;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    n56 = <span class="hljs-number">-1LL</span>;<br>    <span class="hljs-keyword">do</span><br>      ++n56;<br>    <span class="hljs-keyword">while</span> ( all_1[n56] );<br>    <span class="hljs-keyword">if</span> ( n56 != <span class="hljs-number">56</span> )<br>    &#123;<br>      <span class="hljs-built_in">printf</span>((<span class="hljs-type">char</span> *)&amp;Format__3);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    v5 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0LL</span>; i &lt; <span class="hljs-number">56</span>; ++i )<br>    &#123;<br>      v7 = all_1[i];<br>      <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)(v7 - <span class="hljs-number">48</span>) &gt; <span class="hljs-number">1u</span> )<br>      &#123;<br>        <span class="hljs-built_in">printf</span>((<span class="hljs-type">char</span> *)&amp;Format__4);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>      &#125;<br>      v8 = v3 + i;<br>      ++v5;<br>      byte_140005660[v8] = v7;<br>    &#125;<br>    ++n56_2;<br>    ++v1;<br>    v3 += <span class="hljs-number">56LL</span>;<br>    <span class="hljs-keyword">if</span> ( n56_2 &gt;= <span class="hljs-number">56</span> )<br>      <span class="hljs-keyword">break</span>;<br>    all_1 = *v1;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( n48 != <span class="hljs-number">48</span> )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>((<span class="hljs-type">char</span> *)&amp;Format);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( n48_0 != <span class="hljs-number">48</span> )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>((<span class="hljs-type">char</span> *)&amp;Format__5);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>使用神奇妙妙工具得到迷宫路径：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> mycode <span class="hljs-keyword">import</span> maze<br>Maze = [<br>    <span class="hljs-string">&quot;11111111111111111111111111111111111111111111111111111111&quot;</span>,<br>    <span class="hljs-string">&quot;10100000000000000010000011011101011111111101011100000111&quot;</span>,<br>    <span class="hljs-string">&quot;10111010111111111010111011000001000001000001000101110111&quot;</span>,<br>    <span class="hljs-string">&quot;10000010000010000010001011011111111101110111011101110111&quot;</span>,<br>    <span class="hljs-string">&quot;10111111111011101110111011010000000000010100010001110111&quot;</span>,<br>    <span class="hljs-string">&quot;10100000001000101000100011010101111111011101110101110111&quot;</span>,<br>    <span class="hljs-string">&quot;10101011111110111011101011010101000001000000010101110111&quot;</span>,<br>    <span class="hljs-string">&quot;10101010000010100000101011110101110101111101111111110111&quot;</span>,<br>    <span class="hljs-string">&quot;10111010111010101111101011100101000100000101000101110111&quot;</span>,<br>    <span class="hljs-string">&quot;10000010001010001000001011001111011111010101011101110111&quot;</span>,<br>    <span class="hljs-string">&quot;11111011101011111011111111101000100000101100101001110111&quot;</span>,<br>    <span class="hljs-string">&quot;10001010001000100010000010001010011000100010010011000001&quot;</span>,<br>    <span class="hljs-string">&quot;10111010111110101010111011011001011111010101011101011101&quot;</span>,<br>    <span class="hljs-string">&quot;10001010001000001010001011000101000100000101000101011101&quot;</span>,<br>    <span class="hljs-string">&quot;11101011101111111011101011110101110111111101110101011101&quot;</span>,<br>    <span class="hljs-string">&quot;10001000101000001010001011000100010100000101000101011101&quot;</span>,<br>    <span class="hljs-string">&quot;10111111101011101110111011011111110101110111011101011101&quot;</span>,<br>    <span class="hljs-string">&quot;10001000001000100000001011000100000100010000000101011001&quot;</span>,<br>    <span class="hljs-string">&quot;11101011111011111111101011110101111101111111110101011011&quot;</span>,<br>    <span class="hljs-string">&quot;10101000000010001000101011010100000001000100010101011011&quot;</span>,<br>    <span class="hljs-string">&quot;10101111111110101010101011010111111111010101010101011011&quot;</span>,<br>    <span class="hljs-string">&quot;10100000000000100010101011010000000000010001010101011011&quot;</span>,<br>    <span class="hljs-string">&quot;10111111111111111110111011011111111111111111011101011011&quot;</span>,<br>    <span class="hljs-string">&quot;10000000001111000000000011110111010000111100011111011011&quot;</span>,<br>    <span class="hljs-string">&quot;11101111100000011011011111111010110111011101100001011011&quot;</span>,<br>    <span class="hljs-string">&quot;11101111111111111011011111111101110111101101100001011011&quot;</span>,<br>    <span class="hljs-string">&quot;10001000111111000010000011111010110111011101100001011011&quot;</span>,<br>    <span class="hljs-string">&quot;10111010111111111010111011110111010000111101100001010011&quot;</span>,<br>    <span class="hljs-string">&quot;10000010000010000010001011111111111111111101100001010111&quot;</span>,<br>    <span class="hljs-string">&quot;10111111111011101110111011110001000110001101100001010001&quot;</span>,<br>    <span class="hljs-string">&quot;10100000001000101000100011110111011101111101100001011101&quot;</span>,<br>    <span class="hljs-string">&quot;10101011111110111011101011110001000101111101100001011101&quot;</span>,<br>    <span class="hljs-string">&quot;10101010000010100000101011111101011101111101100001011101&quot;</span>,<br>    <span class="hljs-string">&quot;10111010111010101111101011110001000110001101100001011101&quot;</span>,<br>    <span class="hljs-string">&quot;10000010001010101000001011111111111111111101100001011101&quot;</span>,<br>    <span class="hljs-string">&quot;11111011101011111011111110000000000000001101100001011101&quot;</span>,<br>    <span class="hljs-string">&quot;10001010001000100010000011111111111111111100110011011101&quot;</span>,<br>    <span class="hljs-string">&quot;10111010111110101010111010010000000011111110001111011101&quot;</span>,<br>    <span class="hljs-string">&quot;10001010001000001010001010110111000001111110100101011101&quot;</span>,<br>    <span class="hljs-string">&quot;11101011101111111011101000110011001111111100110111011101&quot;</span>,<br>    <span class="hljs-string">&quot;10001000101000001010001011111111111111111111110111010001&quot;</span>,<br>    <span class="hljs-string">&quot;10111111101011101110111010100001001100000000000011011011&quot;</span>,<br>    <span class="hljs-string">&quot;10001000001000100000001011111111111101011101111001011011&quot;</span>,<br>    <span class="hljs-string">&quot;10101011111011111111101011000000000001000100010111011011&quot;</span>,<br>    <span class="hljs-string">&quot;10101000000010001000101010010111111111111111111111011011&quot;</span>,<br>    <span class="hljs-string">&quot;10101111111110101010101010110111111111111111111101011011&quot;</span>,<br>    <span class="hljs-string">&quot;10100000000000100010101011100000000000000000000011011011&quot;</span>,<br>    <span class="hljs-string">&quot;10111111111111111110011011111111111111111111111011011011&quot;</span>,<br>    <span class="hljs-string">&quot;10000011111111111111000010000000000000000000000000011001&quot;</span>,<br>    <span class="hljs-string">&quot;11111011111111111111111111111111111111111111111111111101&quot;</span>,<br>    <span class="hljs-string">&quot;11111011100001100110110111000000000000000000000111111101&quot;</span>,<br>    <span class="hljs-string">&quot;11111011101111011010000111011111111111111111110111111101&quot;</span>,<br>    <span class="hljs-string">&quot;11111011100001000010110110000111111111111111110000000001&quot;</span>,<br>    <span class="hljs-string">&quot;11111011101111011010110111101111111111111111111111111111&quot;</span>,<br>    <span class="hljs-string">&quot;11110000000000011000110000000000000000000000000000000011&quot;</span>,<br>    <span class="hljs-string">&quot;11111111111111111111111111111111111111111111111111111111&quot;</span><br>]<br>start=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>end=(<span class="hljs-number">15</span>,<span class="hljs-number">32</span>)<br>path=maze.solve(Maze,start,end)<br><span class="hljs-built_in">print</span>(path)<br><br><br><span class="hljs-comment">#mycode.maze:</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">maze, start, end, directions=<span class="hljs-literal">None</span>, wall=<span class="hljs-string">&#x27;1&#x27;</span>, free=<span class="hljs-string">&#x27;0&#x27;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    参数:</span><br><span class="hljs-string">        maze: 二维字符串列表</span><br><span class="hljs-string">        start: 起点坐标 (row, col)</span><br><span class="hljs-string">        end: 终点坐标 (row, col)</span><br><span class="hljs-string">        directions: 自定义方向指令 (默认WASD)</span><br><span class="hljs-string">        wall: 墙字符 (默认&#x27;1&#x27;)</span><br><span class="hljs-string">        free: 通路字符 (默认&#x27;0&#x27;)</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    返回:</span><br><span class="hljs-string">        移动指令字符串 或 None(无解)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> directions <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        directions = &#123;<br>            <span class="hljs-string">&#x27;W&#x27;</span>: (-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>),  <span class="hljs-comment"># 上</span><br>            <span class="hljs-string">&#x27;A&#x27;</span>: (<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>),   <span class="hljs-comment"># 左</span><br>            <span class="hljs-string">&#x27;S&#x27;</span>: (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>),    <span class="hljs-comment"># 下</span><br>            <span class="hljs-string">&#x27;D&#x27;</span>: (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)     <span class="hljs-comment"># 右</span><br>        &#125;<br>    <br>    rows, cols = <span class="hljs-built_in">len</span>(maze), <span class="hljs-built_in">len</span>(maze[<span class="hljs-number">0</span>])<br>    <br>    <span class="hljs-comment"># 坐标验证</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid</span>(<span class="hljs-params">pos</span>):<br>        r, c = pos<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span> &lt;= r &lt; rows <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= c &lt; cols <span class="hljs-keyword">and</span> maze[r][c] == free)<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_valid(start):<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;无效起点 <span class="hljs-subst">&#123;start&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_valid(end):<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;无效终点 <span class="hljs-subst">&#123;end&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment"># BFS核心（修复了变量名冲突）</span><br>    queue = deque([(start[<span class="hljs-number">0</span>], start[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;&quot;</span>)])<br>    visited = <span class="hljs-built_in">set</span>([(start[<span class="hljs-number">0</span>], start[<span class="hljs-number">1</span>])])<br>    <br>    <span class="hljs-keyword">while</span> queue:<br>        row, col, current_path = queue.popleft()  <span class="hljs-comment"># 改名为 current_path</span><br>        <br>        <span class="hljs-keyword">if</span> (row, col) == end:<br>            <span class="hljs-keyword">return</span> current_path<br>        <br>        <span class="hljs-keyword">for</span> move, (dr, dc) <span class="hljs-keyword">in</span> directions.items():<br>            new_row, new_col = row + dr, col + dc<br>            <br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt;= new_row &lt; rows <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= new_col &lt; cols <span class="hljs-keyword">and</span> <br>                maze[new_row][new_col] == free <span class="hljs-keyword">and</span>  <span class="hljs-comment"># 使用通路字符 free</span><br>                (new_row, new_col) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> visited):<br>                <br>                visited.add((new_row, new_col))<br>                queue.append((new_row, new_col, current_path + move))  <span class="hljs-comment"># 使用 current_path</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>  <span class="hljs-comment"># 无解</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="flower"><a href="#flower" class="headerlink" title="flower"></a>flower</h3><ul>
<li><p>附件程序用IDA打开，在汇编界面上下滑动可以找到花指令引起的红色栈帧报错。打开IDA工具栏的“Options”选项的“General”，勾选“Stackpointer”，可以看到栈帧信息</p>
<p><img src="/../images/image-20250829121800223-1760193218429-5.png" alt="General"></p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-29%20121722-1760193218429-7.png" alt="Stackpointer"></p>
<p>可以看到红色报错的函数栈帧超过了1000，有点反常，找到栈帧发生突变的地方，发现用sub rsp,1000h改变了栈帧，把这条指令nop掉。本题这个类型的花指令占绝大多数，需要耐心的一个一个nop掉。（还有sub rsp,400h的，主要留意栈帧大于100）</p>
<p><img src="/../images/image-20250829122250848-1760193218429-6.png" alt="nop花指令"></p>
<p>还有另一种花指令：</p>
<p><img src="/../images/image-20250829130321938-1760193218429-9.png" alt="第二种花指令"></p>
<p>图中Label+1是0x004048EF，被0x004048EE处的指令覆盖住了，所以undefine一下，IDA就会自动纠错。把没用的指令nop掉</p>
<p><img src="/../images/image-20250829133142939-1760193218429-10.png" alt="自动纠错"></p>
<p>接下来要做的修改有2点。首先可以看到0x004048E5处有一个恒跳花指令，这个要nop掉。</p>
<p><img src="/../images/image-20250829140959636-1760193218429-11.png" alt="nop掉恒跳"></p>
<p>然后是call loc_4048EF，由于call是会占用栈帧的，更何况call一个标签没有ret恢复栈帧，后面栈帧还是会报错（这里有一个试错过程，不把call改成jmp的话，函数undefine+code+create function后依旧反编译不了）。做法就是工具栏edit-&gt;patch program-&gt;change byte，把十六进制码E8改成E9</p>
<p><img src="/../images/image-20250829141054207-1760193218429-12.png" alt="call改jmp"></p>
<p>然后就是选中函数名undefine+code+create function了，就可以正常反编译了</p>
</li>
<li><p>main函数逻辑主要是把flag掐头去尾，中间部分加密后比对</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title function_">solve</span><span class="hljs-params">(_QWORD *flag)</span><br>&#123;<br>  <span class="hljs-type">char</span> v1; <span class="hljs-comment">// bl</span><br>  <span class="hljs-type">bool</span> v2; <span class="hljs-comment">// r12</span><br>  __int64 v3; <span class="hljs-comment">// rax</span><br>  __int64 v4; <span class="hljs-comment">// rbx</span><br>  __int64 v5; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> *flag[i]; <span class="hljs-comment">// rax</span><br>  __int64 v7; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v9; <span class="hljs-comment">// [rsp+17h] [rbp-59h] BYREF</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+18h] [rbp-58h]</span><br>  <span class="hljs-type">int</span> len; <span class="hljs-comment">// [rsp+1Ch] [rbp-54h]</span><br>  __int64 flag_start; <span class="hljs-comment">// [rsp+20h] [rbp-50h] BYREF</span><br>  __int64 flag_end; <span class="hljs-comment">// [rsp+28h] [rbp-48h] BYREF</span><br>  <span class="hljs-type">void</span> *fl4g[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-40h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v15; <span class="hljs-comment">// [rsp+58h] [rbp-18h]</span><br>  __int64 savedregs; <span class="hljs-comment">// [rsp+70h] [rbp+0h] BYREF</span><br><br>  v15 = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  v1 = <span class="hljs-number">0</span>;<br>  v2 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int64)length((__int64)flag) &gt; <span class="hljs-number">7</span> )<br>  &#123;<br>    substr(fl4g, flag, <span class="hljs-number">0LL</span>, <span class="hljs-number">7uLL</span>);<br>    v1 = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( !(<span class="hljs-type">unsigned</span> __int8)cmp((__int64)fl4g, (__int64)<span class="hljs-string">&quot;moectf&#123;&quot;</span>) &amp;&amp; *(_BYTE *)get_last_str(flag) == <span class="hljs-number">125</span> )<br>      v2 = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v1 )<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(fl4g);<br>  <span class="hljs-keyword">if</span> ( v2 )<br>  &#123;<br>    v3 = <span class="hljs-built_in">cout</span>((<span class="hljs-built_in">std</span>::ostream *)&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>);<br>    out(v3, (__int64 (*)(<span class="hljs-type">void</span>))<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>&lt;<span class="hljs-type">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;::allocator((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;savedregs - <span class="hljs-number">89</span>);<br>    flag_end = getEnd(flag);<br>    v4 = cutTail(&amp;flag_end, <span class="hljs-number">1LL</span>);<br>    flag_start = getStart((__int64)flag);<br>    v5 = cutHead(&amp;flag_start, <span class="hljs-number">7LL</span>);<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::basic_string&lt;__gnu_cxx::__normal_iterator&lt;<span class="hljs-type">char</span> *,<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;,<span class="hljs-type">void</span>&gt;(fl4g, v5, v4, (__int64)&amp;v9);<span class="hljs-comment">// 掐头去尾</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::operator=(flag, fl4g);<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(fl4g);<br>    <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;::~allocator();<br>    len = length((__int64)flag);<br>    <span class="hljs-keyword">if</span> ( len == <span class="hljs-number">32</span> )<br>    &#123;<br>      <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; len; ++i )<br>      &#123;<br>        flag[i] = (<span class="hljs-type">char</span> *)toList(flag, i);      <span class="hljs-comment">// flag[i]</span><br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)encode(*flag[i]) != enc[i] )<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    v7 = <span class="hljs-built_in">cout</span>((<span class="hljs-built_in">std</span>::ostream *)&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>);<br>    out(v7, (__int64 (*)(<span class="hljs-type">void</span>))<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>&lt;<span class="hljs-type">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;);<br>  &#125;<br>  <span class="hljs-keyword">return</span> v15 - __readfsqword(<span class="hljs-number">0x28u</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>加密函数encode如下，就是把flag[i]和key异或，key会递增。需要注意的是，静态分析下得到的key是不正确的（静态分析得到的key是0x23，但是动态调试会发现程序运行到此处key变成0x29），动调得到的key才能解密出flag</p>
<p><img src="/../images/image-20250829141947673-1760193218429-13.png" alt="encode函数"></p>
</li>
<li><p>解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">data = [<br>    <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x7E</span>,<br>    <span class="hljs-number">0x44</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x52</span>,<br>    <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x2B</span><br>]<br>key=<span class="hljs-number">0x29</span><br>result=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>    plaintext=(data[i]^key)&amp;<span class="hljs-number">0xff</span><br>    key+=<span class="hljs-number">1</span><br>    result.append(plaintext)<br>flag=<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> result)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="tea"><a href="#tea" class="headerlink" title="tea"></a>tea</h3><ul>
<li><p>IDA打开附件程序，main函数逻辑是将输入的flag分成10份，每次取两份进行加密，加密出来的数据和enc比较。key和enc已经给定</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//main函数</span><br><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> *v3; <span class="hljs-comment">// rdi</span><br>  __int64 i; <span class="hljs-comment">// rcx</span><br>  _BYTE v6[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-20h] BYREF</span><br>  <span class="hljs-type">char</span> v7; <span class="hljs-comment">// [rsp+20h] [rbp+0h] BYREF</span><br>  _DWORD key[<span class="hljs-number">12</span>]; <span class="hljs-comment">// [rsp+28h] [rbp+8h] BYREF</span><br>  _DWORD enc[<span class="hljs-number">20</span>]; <span class="hljs-comment">// [rsp+58h] [rbp+38h]</span><br>  _DWORD fl4g[<span class="hljs-number">20</span>]; <span class="hljs-comment">// [rsp+A8h] [rbp+88h] BYREF</span><br>  _DWORD Flag[<span class="hljs-number">20</span>]; <span class="hljs-comment">// [rsp+F8h] [rbp+D8h] BYREF</span><br>  <span class="hljs-type">char</span> flag[<span class="hljs-number">64</span>]; <span class="hljs-comment">// [rsp+148h] [rbp+128h] BYREF</span><br>  <span class="hljs-type">size_t</span> length; <span class="hljs-comment">// [rsp+188h] [rbp+168h]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+1A4h] [rbp+184h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> part1; <span class="hljs-comment">// [rsp+1C8h] [rbp+1A8h] BYREF</span><br>  <span class="hljs-type">int</span> part2; <span class="hljs-comment">// [rsp+1CCh] [rbp+1ACh]</span><br>  <span class="hljs-type">int</span> v17; <span class="hljs-comment">// [rsp+1E4h] [rbp+1C4h]</span><br>  <span class="hljs-type">int</span> k; <span class="hljs-comment">// [rsp+204h] [rbp+1E4h]</span><br><br>  v3 = &amp;v7;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">130LL</span>; i; --i )<br>  &#123;<br>    *(_DWORD *)v3 = <span class="hljs-number">-858993460</span>;<br>    v3 += <span class="hljs-number">4</span>;<br>  &#125;<br>  sub_7FF6DAA21384(byte_7FF6DAA33015);<br>  key[<span class="hljs-number">0</span>] = <span class="hljs-number">289739801</span>;<br>  key[<span class="hljs-number">1</span>] = <span class="hljs-number">427884820</span>;<br>  key[<span class="hljs-number">2</span>] = <span class="hljs-number">1363251608</span>;<br>  key[<span class="hljs-number">3</span>] = <span class="hljs-number">269567252</span>;<br>  enc[<span class="hljs-number">0</span>] = <span class="hljs-number">2026214571</span>;<br>  enc[<span class="hljs-number">1</span>] = <span class="hljs-number">578894681</span>;<br>  enc[<span class="hljs-number">2</span>] = <span class="hljs-number">1193947460</span>;<br>  enc[<span class="hljs-number">3</span>] = <span class="hljs-number">-229306230</span>;<br>  enc[<span class="hljs-number">4</span>] = <span class="hljs-number">73202484</span>;<br>  enc[<span class="hljs-number">5</span>] = <span class="hljs-number">961145356</span>;<br>  enc[<span class="hljs-number">6</span>] = <span class="hljs-number">-881456792</span>;<br>  enc[<span class="hljs-number">7</span>] = <span class="hljs-number">358205817</span>;<br>  enc[<span class="hljs-number">8</span>] = <span class="hljs-number">-554069347</span>;<br>  enc[<span class="hljs-number">9</span>] = <span class="hljs-number">119347883</span>;<br>  enc[<span class="hljs-number">10</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(fl4g, <span class="hljs-number">0</span>, <span class="hljs-number">44uLL</span>);<br>  <span class="hljs-built_in">memset</span>(Flag, <span class="hljs-number">0</span>, <span class="hljs-number">44uLL</span>);<br>  <span class="hljs-built_in">printf</span>(&amp;You_are_wrong___);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, flag);<br>  length = j_strlen(flag);<br>  j_memcpy(fl4g, flag, length);<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; ++j )<br>  &#123;<br>    part1 = fl4g[<span class="hljs-number">2</span> * j];<br>    part2 = fl4g[<span class="hljs-number">2</span> * j + <span class="hljs-number">1</span>];<br>    tea(&amp;part1, key);<span class="hljs-comment">// 这里传的是地址，tea内可以通过part1的地址得到part2</span><br>    Flag[<span class="hljs-number">2</span> * j] = part1;<br>    Flag[<span class="hljs-number">2</span> * j + <span class="hljs-number">1</span>] = part2;<br>  &#125;<br>  v17 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">11</span>; ++k )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( Flag[k] != enc[k] )<br>    &#123;<br>      v17 = <span class="hljs-number">0</span>;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You are wrong!!&quot;</span>);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v17 == <span class="hljs-number">1</span> )<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Congratulations!!!!&quot;</span>);<br>  sub_7FF6DAA21320(v6, &amp;unk_7FF6DAA2AE60);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>加密函数是改动的tea加密</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">Tea</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *part1, _DWORD *key)</span><br>&#123;<br>  __int64 n4; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> delta; <span class="hljs-comment">// [rsp+24h] [rbp+4h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> p1; <span class="hljs-comment">// [rsp+44h] [rbp+24h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> p2; <span class="hljs-comment">// [rsp+64h] [rbp+44h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+A4h] [rbp+84h]</span><br><br>  sub_7FF6DAA21384((__int64)&amp;byte_7FF6DAA33015);<br>  delta = <span class="hljs-number">0</span>;<br>  p1 = *part1;<br>  p2 = part1[<span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; ++i )<br>  &#123;<br>    delta += <span class="hljs-number">1131796</span>;<br>    p1 += (key[<span class="hljs-number">1</span>] + (p2 &gt;&gt; <span class="hljs-number">5</span>)) ^ (delta + p2) ^ (*key + <span class="hljs-number">16</span> * p2);<br>    p2 += (key[<span class="hljs-number">3</span>] + (p1 &gt;&gt; <span class="hljs-number">5</span>)) ^ (delta + p1) ^ (key[<span class="hljs-number">2</span>] + <span class="hljs-number">16</span> * p1);<br>  &#125;<br>  *part1 = p1;<br>  n4 = <span class="hljs-number">4LL</span>;<br>  part1[<span class="hljs-number">1</span>] = p2;<br>  <span class="hljs-keyword">return</span> n4;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>解密逻辑：将tea内的p1 p2位置对调，”+”改成”-“，然后delta从最后一轮的值往回递减就可以了。解密脚本：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">tea_decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *a,<span class="hljs-type">uint32_t</span> *k)</span> &#123;<br>	<span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">1131796</span> * <span class="hljs-number">32</span>;<br>	<span class="hljs-type">uint32_t</span> p1 = *a;<br>	<span class="hljs-type">uint32_t</span> p2 = *(a + <span class="hljs-number">1</span>);<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>		p2 -= ((k[<span class="hljs-number">3</span>] + (p1 &gt;&gt; <span class="hljs-number">5</span>)) ^ (delta + p1) ^ (k[<span class="hljs-number">2</span>] + <span class="hljs-number">16</span> * p1));<br>		p1 -= ((k[<span class="hljs-number">1</span>] + (p2 &gt;&gt; <span class="hljs-number">5</span>)) ^ (delta + p2) ^ (*k + <span class="hljs-number">16</span> * p2));<br>		delta -= <span class="hljs-number">1131796</span>;<br>	&#125;<br>	*a = p1;<br>	*(a+<span class="hljs-number">1</span>)= p2;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>	<span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>];<br>	<span class="hljs-type">uint32_t</span> enc[<span class="hljs-number">11</span>];<br>	key[<span class="hljs-number">0</span>] = <span class="hljs-number">289739801</span>;<br>	key[<span class="hljs-number">1</span>] = <span class="hljs-number">427884820</span>;<br>	key[<span class="hljs-number">2</span>] = <span class="hljs-number">1363251608</span>;<br>	key[<span class="hljs-number">3</span>] = <span class="hljs-number">269567252</span>;<br>	enc[<span class="hljs-number">0</span>] = <span class="hljs-number">2026214571</span>;<br>	enc[<span class="hljs-number">1</span>] = <span class="hljs-number">578894681</span>;<br>	enc[<span class="hljs-number">2</span>] = <span class="hljs-number">1193947460</span>;<br>	enc[<span class="hljs-number">3</span>] = <span class="hljs-number">-229306230</span>;<br>	enc[<span class="hljs-number">4</span>] = <span class="hljs-number">73202484</span>;<br>	enc[<span class="hljs-number">5</span>] = <span class="hljs-number">961145356</span>;<br>	enc[<span class="hljs-number">6</span>] = <span class="hljs-number">-881456792</span>;<br>	enc[<span class="hljs-number">7</span>] = <span class="hljs-number">358205817</span>;<br>	enc[<span class="hljs-number">8</span>] = <span class="hljs-number">-554069347</span>;<br>	enc[<span class="hljs-number">9</span>] = <span class="hljs-number">119347883</span>;<br>	enc[<span class="hljs-number">10</span>] = <span class="hljs-number">0</span>;<br>	<span class="hljs-type">char</span> flag[<span class="hljs-number">45</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>		<span class="hljs-type">uint32_t</span> block[<span class="hljs-number">2</span>] = &#123;enc[<span class="hljs-number">2</span>*i],enc[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>]&#125;;<br>		tea_decrypt(block, key);<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>			flag[<span class="hljs-number">8</span> * i + j] = (block[<span class="hljs-number">0</span>] &gt;&gt; (j * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xff</span>;<span class="hljs-comment">//右移j个字符，然后取最后一个</span><br>			flag[<span class="hljs-number">8</span> * i + j + <span class="hljs-number">4</span>] = (block[<span class="hljs-number">1</span>] &gt;&gt; (j * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xff</span>;<br>		&#125;<br>	&#125;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, flag);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="ez3"><a href="#ez3" class="headerlink" title="ez3"></a>ez3</h3><ul>
<li><p>附件程序main函数逻辑主要是获取flag，然后掐头去尾，对中间部分进行check。main函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> v3; <span class="hljs-comment">// bl</span><br>  <span class="hljs-type">bool</span> v4; <span class="hljs-comment">// r12</span><br>  __int64 v5; <span class="hljs-comment">// rbx</span><br>  __int64 v6; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v8; <span class="hljs-comment">// [rsp+Fh] [rbp-71h] BYREF</span><br>  __int64 Start; <span class="hljs-comment">// [rsp+10h] [rbp-70h] BYREF</span><br>  __int64 end; <span class="hljs-comment">// [rsp+18h] [rbp-68h] BYREF</span><br>  _BYTE flag[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-60h] BYREF</span><br>  _QWORD fl4g[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-40h] BYREF</span><br><br>  fl4g[<span class="hljs-number">5</span>] = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Input your flag:\n&gt; &quot;</span>, argv, envp);<br>  fflush(<span class="hljs-built_in">stdout</span>);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::basic_string(flag);<br>  <span class="hljs-built_in">cin</span>(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>);<br>  <span class="hljs-keyword">if</span> ( length(flag) == <span class="hljs-number">42</span> )<br>  &#123;<br>    v3 = <span class="hljs-number">0</span>;<br>    v4 = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( length(flag) &gt; <span class="hljs-number">7</span> )<br>    &#123;<br>      substr(fl4g, flag, <span class="hljs-number">0LL</span>, <span class="hljs-number">7LL</span>);<br>      v3 = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">if</span> ( !cmp(fl4g, <span class="hljs-string">&quot;moectf&#123;&quot;</span>) &amp;&amp; *get_last_str(flag) == <span class="hljs-number">125</span> )<br>        v4 = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v3 )<br>      <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(fl4g);<br>    <span class="hljs-keyword">if</span> ( v4 )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;FORMAT ERROR!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;::allocator(&amp;v8);<br>      end = getEnd(flag);<br>      v5 = cutTail(&amp;end, <span class="hljs-number">1LL</span>);<br>      Start = getStart(flag);<br>      v6 = cutHead(&amp;Start, <span class="hljs-number">7LL</span>);<br>      <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::basic_string&lt;__gnu_cxx::__normal_iterator&lt;<span class="hljs-type">char</span> *,<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;,<span class="hljs-type">void</span>&gt;(fl4g, v6, v5, &amp;v8);<br>      strcopy(flag, fl4g);<br>      <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(fl4g);<br>      <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;::~allocator(&amp;v8);<br>      <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::basic_string(fl4g, flag);<br>      LOBYTE(v5) = check(fl4g);<br>      <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(fl4g);<br>      <span class="hljs-keyword">if</span> ( v5 )<br>      &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OK&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;But I don&#x27;t know what the true flag is&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;try again~&quot;</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Length error!&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(flag);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>check函数：</p>
<p><img src="/../images/image-20250829115915331-1760193218429-15.png" alt="check函数"></p>
<p>题目提示了z3，所以使用z3约束求解。思路就是复现check函数逻辑，爆破出flag</p>
</li>
<li><p>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>enc = [<br>    <span class="hljs-number">0x0B1B0</span>, <span class="hljs-number">0x5678</span>, <span class="hljs-number">0x7FF2</span>, <span class="hljs-number">0xA332</span>, <span class="hljs-number">0xA0E8</span>, <span class="hljs-number">0x364C</span>, <span class="hljs-number">0x2BD4</span>,<br>    <span class="hljs-number">0xC8FE</span>, <span class="hljs-number">0x4A7C</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x2BE4</span>, <span class="hljs-number">0x4144</span>, <span class="hljs-number">0x3BA6</span>, <span class="hljs-number">0xBE8C</span>, <span class="hljs-number">0x8F7E</span>,<br>    <span class="hljs-number">0x35F8</span>, <span class="hljs-number">0x61AA</span>, <span class="hljs-number">0x2B4A</span>, <span class="hljs-number">0x6828</span>, <span class="hljs-number">0xB39E</span>, <span class="hljs-number">0xB542</span>, <span class="hljs-number">0x33EC</span>, <span class="hljs-number">0xC7D8</span>,<br>    <span class="hljs-number">0x448C</span>, <span class="hljs-number">0x9310</span>, <span class="hljs-number">0x8808</span>, <span class="hljs-number">0xADD4</span>, <span class="hljs-number">0x3CC2</span>, <span class="hljs-number">0x796</span>, <span class="hljs-number">0xC940</span>, <span class="hljs-number">0x4E32</span>,<br>    <span class="hljs-number">0x4E2E</span>, <span class="hljs-number">0x924A</span>, <span class="hljs-number">0x5B5C</span><br>]<br><br>s=Solver()<br>flag=[BitVec(<span class="hljs-string">f&#x27;flag_<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>,<span class="hljs-number">32</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">34</span>)]<br>b=[BitVec(<span class="hljs-string">f&#x27;b_<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>,<span class="hljs-number">32</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">34</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">34</span>):<br>    s.add(flag[i]&gt;=<span class="hljs-number">32</span>,flag[i]&lt;=<span class="hljs-number">126</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">34</span>):<br>    <span class="hljs-keyword">if</span> i==<span class="hljs-number">0</span>:<br>        s.add(b[<span class="hljs-number">0</span>]==(<span class="hljs-number">47806</span>*flag[<span class="hljs-number">0</span>])%<span class="hljs-number">51966</span>)<br>    <span class="hljs-keyword">else</span>:<br>        b_value=<span class="hljs-number">47806</span>*(flag[i]+i)<br>        b_xored=b_value^(b[i-<span class="hljs-number">1</span>]^<span class="hljs-number">0x114514</span>)<br>        s.add(b[i]==b_xored%<span class="hljs-number">51966</span>)<br>    s.add(b[i]==enc[i])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;solutions found:&quot;</span>)<br><span class="hljs-keyword">while</span> s.check()==sat:<br>    model=s.model()<br>    solution=<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(model[flag[i]].as_long())<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">34</span>)])<br>    <span class="hljs-built_in">print</span>(solution)<br>    exception=Or([flag[i]!=model[flag[i]]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">34</span>)])<span class="hljs-comment">#避免重复情况</span><br>    s.add(exception)<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="逆向工程入门指北"><a href="#逆向工程入门指北" class="headerlink" title="逆向工程入门指北"></a>逆向工程入门指北</h3><ul>
<li><p>IDA打开附件程序，在字符串窗口可以直接看到flag</p>
<p><img src="/../images/image-20250829104220942-1760193218429-14.png" alt="字符串窗口"></p>
</li>
</ul>
<h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h3 id="base"><a href="#base" class="headerlink" title="base"></a>base</h3><ul>
<li><p>运行附件程序，直接让输入flag。IDA打开分析main函数，发现使用了标准base64加密，并且密文直接给了。cyberchef一把梭</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//main函数</span><br><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  FILE *Stream; <span class="hljs-comment">// rax</span><br>  __int64 v4; <span class="hljs-comment">// rdx</span><br>  __int64 length; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> __int64 n; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> *Str1; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> *Format; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-type">char</span> v11[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-98h] BYREF</span><br>  <span class="hljs-type">char</span> flag[<span class="hljs-number">112</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-88h] BYREF</span><br><br>  <span class="hljs-built_in">printf</span>(::Format);<br>  <span class="hljs-built_in">printf</span>((<span class="hljs-type">char</span> *)&amp;Format_);<br>  Stream = _acrt_iob_func(<span class="hljs-number">0</span>);<br>  fgets(flag, <span class="hljs-number">100</span>, Stream);<br>  v4 = <span class="hljs-number">-1LL</span>;<br>  length = <span class="hljs-number">-1LL</span>;<br>  <span class="hljs-keyword">do</span><br>    ++length;<br>  <span class="hljs-keyword">while</span> ( flag[length] );<br>  <span class="hljs-keyword">if</span> ( length &amp;&amp; v11[length + <span class="hljs-number">15</span>] == <span class="hljs-number">10</span> )<br>  &#123;<br>    n = length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( n &gt;= <span class="hljs-number">0x64</span> )<br>      _report_securityfailure_(flag);<br>    flag[n] = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">do</span><br>    ++v4;<br>  <span class="hljs-keyword">while</span> ( flag[v4] );<br>  Str1 = (<span class="hljs-type">char</span> *)baseEncode(flag, v4, v11);<span class="hljs-comment">// 标准base64加密</span><br>  v8 = <span class="hljs-built_in">strcmp</span>(Str1, <span class="hljs-string">&quot;bW9lY3Rme1kwdV9DNG5fRzAwZF9BdF9CNDVlNjQhIX0=&quot;</span>);<br>  Format = (<span class="hljs-type">char</span> *)&amp;unk_140003300;<br>  <span class="hljs-keyword">if</span> ( v8 )<br>    Format = (<span class="hljs-type">char</span> *)&amp;byte_140003318;<br>  <span class="hljs-built_in">printf</span>(Format);<br>  <span class="hljs-built_in">free</span>(Str1);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/../images/image-20250821000019398-1760193218429-16.png" alt="cyberchef一把梭"></p>
</li>
</ul>
<h3 id="speed"><a href="#speed" class="headerlink" title="speed"></a>speed</h3><ul>
<li><p>附件程序运行出现一道黑影，看不清。IDA分析main函数，发现使用了WNDCLASSA结构体（详细信息见：<a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-wndclassa">WNDCLASSA （winuser.h） - Win32 apps | Microsoft Learn</a>），主要逻辑是创建窗口，关键部分是窗口结构体变量lpfnWndProc，它指向了窗口的逻辑（即代码中的WndProc函数）</p>
<p><img src="/../images/image-20250828214030322-1760193218429-17.png" alt="main函数"></p>
</li>
<li><p>分析WndProc函数发现，窗口似乎直接输出flag。于是下断点，动态调试</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//WndProc函数</span><br>LRESULT __fastcall <span class="hljs-title function_">WndProc</span><span class="hljs-params">(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)</span><br>&#123;<br>  tagPAINTSTRUCT Paint; <span class="hljs-comment">// [rsp+30h] [rbp-50h] BYREF</span><br>  <span class="hljs-type">char</span> Destination[<span class="hljs-number">14</span>]; <span class="hljs-comment">// [rsp+80h] [rbp+0h] BYREF</span><br>  __int16 v7; <span class="hljs-comment">// [rsp+8Eh] [rbp+Eh]</span><br>  __int64 v8; <span class="hljs-comment">// [rsp+90h] [rbp+10h]</span><br>  __int64 v9; <span class="hljs-comment">// [rsp+98h] [rbp+18h]</span><br>  __int64 v10; <span class="hljs-comment">// [rsp+A0h] [rbp+20h]</span><br>  __int64 v11; <span class="hljs-comment">// [rsp+A8h] [rbp+28h]</span><br>  __int64 v12; <span class="hljs-comment">// [rsp+B0h] [rbp+30h]</span><br>  __int64 v13; <span class="hljs-comment">// [rsp+B8h] [rbp+38h]</span><br>  __int64 v14; <span class="hljs-comment">// [rsp+C0h] [rbp+40h]</span><br>  __int64 v15; <span class="hljs-comment">// [rsp+C8h] [rbp+48h]</span><br>  __int64 v16; <span class="hljs-comment">// [rsp+D0h] [rbp+50h]</span><br>  __int64 v17; <span class="hljs-comment">// [rsp+D8h] [rbp+58h]</span><br>  __int64 v18; <span class="hljs-comment">// [rsp+E0h] [rbp+60h]</span><br>  __int64 v19; <span class="hljs-comment">// [rsp+E8h] [rbp+68h]</span><br>  __int64 v20; <span class="hljs-comment">// [rsp+F0h] [rbp+70h]</span><br>  __int64 v21; <span class="hljs-comment">// [rsp+F8h] [rbp+78h]</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tagRECT</span> <span class="hljs-title">Rect</span>;</span> <span class="hljs-comment">// [rsp+100h] [rbp+80h] BYREF</span><br>  <span class="hljs-type">char</span> mylittlepony[<span class="hljs-number">13</span>]; <span class="hljs-comment">// [rsp+113h] [rbp+93h] BYREF</span><br>  <span class="hljs-type">char</span> Source[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+120h] [rbp+A0h] BYREF</span><br>  __int64 v25; <span class="hljs-comment">// [rsp+128h] [rbp+A8h]</span><br>  _QWORD v26[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+130h] [rbp+B0h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+140h] [rbp+C0h]</span><br>  <span class="hljs-type">int</span> n12; <span class="hljs-comment">// [rsp+144h] [rbp+C4h]</span><br>  HDC hdc; <span class="hljs-comment">// [rsp+148h] [rbp+C8h]</span><br><br>  <span class="hljs-keyword">if</span> ( Msg == <span class="hljs-number">2</span> )<br>  &#123;<br>    PostQuitMessage(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( Msg == <span class="hljs-number">15</span> )<br>  &#123;<br>    hdc = BeginPaint(hWnd, &amp;Paint);<br>    <span class="hljs-built_in">strcpy</span>(Destination, <span class="hljs-string">&quot;Your flag is &quot;</span>);<br>    v7 = <span class="hljs-number">0</span>;<br>    v8 = <span class="hljs-number">0LL</span>;<br>    v9 = <span class="hljs-number">0LL</span>;<br>    v10 = <span class="hljs-number">0LL</span>;<br>    v11 = <span class="hljs-number">0LL</span>;<br>    v12 = <span class="hljs-number">0LL</span>;<br>    v13 = <span class="hljs-number">0LL</span>;<br>    v14 = <span class="hljs-number">0LL</span>;<br>    v15 = <span class="hljs-number">0LL</span>;<br>    v16 = <span class="hljs-number">0LL</span>;<br>    v17 = <span class="hljs-number">0LL</span>;<br>    v18 = <span class="hljs-number">0LL</span>;<br>    v19 = <span class="hljs-number">0LL</span>;<br>    v20 = <span class="hljs-number">0LL</span>;<br>    v21 = <span class="hljs-number">0LL</span>;<br>    *(_QWORD *)Source = <span class="hljs-number">0x7F1B3E885EF9160L</span>L;<br>    v25 = <span class="hljs-number">0x2CD336BCB0464A89L</span>L;<br>    v26[<span class="hljs-number">0</span>] = <span class="hljs-number">0xEF5FC91642917EE1u</span>LL;<br>    *(_QWORD *)((<span class="hljs-type">char</span> *)v26 + <span class="hljs-number">6</span>) = <span class="hljs-number">0x739D40A4E356EF5FL</span>L;<br>    <span class="hljs-built_in">strcpy</span>(mylittlepony, <span class="hljs-string">&quot;mylittlepony&quot;</span>);<br>    n12 = <span class="hljs-number">12</span>;<br>    i = <span class="hljs-built_in">strlen</span>(Source);<br>    RC4Crypt((<span class="hljs-type">unsigned</span> __int8 *)Source, i, (<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> __int8 *)mylittlepony, <span class="hljs-number">12</span>);<br>    <span class="hljs-built_in">strcat</span>(Destination, Source);<br>    GetClientRect(hWnd, &amp;Rect);<br>    DrawTextA(hdc, Destination, <span class="hljs-number">-1</span>, &amp;Rect, <span class="hljs-number">0x40005u</span>);<br>    EndPaint(hWnd, &amp;Paint);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> DefWindowProcA(hWnd, Msg, wParam, lParam);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>动态调试结果如图：</p>
<p><img src="/../images/image-20250828214156948-1760193218429-19.png" alt="动态调试"></p>
</li>
</ul>
<h3 id="ezpy"><a href="#ezpy" class="headerlink" title="ezpy"></a>ezpy</h3><ul>
<li><p>使用decompyle3反编译得到：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">caesar_cipher_encrypt</span>(<span class="hljs-params">text, shift</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> text:<br>        <span class="hljs-keyword">if</span> char.isalpha():<br>            <span class="hljs-keyword">if</span> char.islower():<br>                new_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;a&quot;</span>) + shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;a&quot;</span>))<br>            <span class="hljs-keyword">elif</span> char.isupper():<br>                new_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;A&quot;</span>) + shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;A&quot;</span>))<br>            result.append(new_char)<br>        <span class="hljs-keyword">else</span>:<br>            result.append(char)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(result)<br><br><br>user_input = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please input your flag：&quot;</span>)<br>a = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> a != <span class="hljs-number">1</span>:<br>    plaintext = user_input<br>    shift = <span class="hljs-number">114514</span><br>    encrypted_text = caesar_cipher_encrypt(plaintext, shift)<br>    <span class="hljs-keyword">if</span> encrypted_text == <span class="hljs-string">&quot;wyomdp&#123;I0e_Ux0G_zim&#125;&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Correct!!!!&quot;</span>)<br></code></pre></td></tr></table></figure>
</li>
<li><p>可以看出实现了一个凯撒加密，分析逻辑可以看出实际上是给每个字母移位了10（ascii码+10），所以给字母减10就ok了，可以基于源码进行微小改动得到解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">caesar_cipher_decrypt</span>(<span class="hljs-params">text, shift</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> text:<br>        <span class="hljs-keyword">if</span> char.isalpha():<br>            <span class="hljs-keyword">if</span> char.islower():<br>                new_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;a&quot;</span>) - shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;a&quot;</span>))<span class="hljs-comment">#&#x27;+&#x27;改为-&quot;</span><br>            <span class="hljs-keyword">elif</span> char.isupper():<br>                new_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;A&quot;</span>) - shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;A&quot;</span>))<br>            result.append(new_char)<br>        <span class="hljs-keyword">else</span>:<br>            result.append(char)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(result)<br>enc=<span class="hljs-string">&quot;wyomdp&#123;I0e_Ux0G_zim&#125;&quot;</span><br>flag=caesar_cipher_decrypt(enc,<span class="hljs-number">114514</span>)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h3><ul>
<li><p>先看main函数反编译结果，发现只有简单的两个函数，其中solve函数有更复杂的逻辑：</p>
<p><img src="/../images/image-20250828215740728-1760193218429-18.png" alt="main函数"></p>
</li>
<li><p>然而solve函数并不能看出什么有用的逻辑出来，sub_114514出现了flag字样，但是动调发现没有用处</p>
<p><img src="/../images/image-20250828215832225-1760193218429-20.png" alt="solve函数"></p>
</li>
<li><p>结合题目提示try catch不能被正确反编译，于是直接查看汇编代码。在汇编代码里看到一个类似flag格式的字符串，分析后续逻辑发现对这个字符串进行了处理，分析发现处理结果就是flag</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>00000001400014D6 <span class="hljs-comment">; =============== S U B R O U T I N E =======================================</span><br><span class="hljs-symbol">.text:</span>00000001400014D6<br><span class="hljs-symbol">.text:</span>00000001400014D6 <span class="hljs-comment">; Attributes: bp-based frame fpd=10h</span><br><span class="hljs-symbol">.text:</span>00000001400014D6<br><span class="hljs-symbol">.text:</span>00000001400014D6 <span class="hljs-comment">; void __noreturn solve(void)</span><br><span class="hljs-symbol">.text:</span>00000001400014D6                 <span class="hljs-meta">public</span> _Z5solvev<br><span class="hljs-symbol">.text:</span>00000001400014D6 _Z5solvev       proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: main+D↓p</span><br><span class="hljs-symbol">.text:</span>00000001400014D6                                         <span class="hljs-comment">; DATA XREF: .pdata:000000014002D078↓o ...</span><br><span class="hljs-symbol">.text:</span>00000001400014D6<br><span class="hljs-symbol">.text:</span>00000001400014D6 length          = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">1Ch</span><br><span class="hljs-symbol">.text:</span>00000001400014D6 C               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">18h</span><br><span class="hljs-symbol">.text:</span>00000001400014D6 count           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">14h</span><br><span class="hljs-symbol">.text:</span>00000001400014D6<br><span class="hljs-symbol">.text:</span>00000001400014D6 <span class="hljs-comment">; __unwind &#123; // __gxx_personality_seh0</span><br><span class="hljs-symbol">.text:</span>00000001400014D6                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span>00000001400014D7                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rsi</span><br><span class="hljs-symbol">.text:</span>00000001400014D8                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rbx</span><br><span class="hljs-symbol">.text:</span>00000001400014D9                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">rsp</span>, <span class="hljs-number">30h</span><br><span class="hljs-symbol">.text:</span>00000001400014<span class="hljs-built_in">DD</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rbp</span>, [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">30h</span>]<br><span class="hljs-symbol">.text:</span>00000001400014E2                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rax</span>, aMyFlagIsHidden <span class="hljs-comment">; &quot;my flag is hidden in this program. Can &quot;...</span><br><span class="hljs-symbol">.text:</span>00000001400014E9                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rax</span>        <span class="hljs-comment">; char *</span><br><span class="hljs-symbol">.text:</span>00000001400014EC                 <span class="hljs-keyword">call</span>    print<br><span class="hljs-symbol">.text:</span>00000001400014F1 <span class="hljs-comment">;   try &#123;</span><br><span class="hljs-symbol">.text:</span>00000001400014F1                 <span class="hljs-keyword">call</span>    _Z10sub_114514v <span class="hljs-comment">; sub_114514(void)</span><br><span class="hljs-symbol">.text:</span>00000001400014F1 <span class="hljs-comment">;   &#125; // starts at 1400014F1</span><br><span class="hljs-symbol">.text:</span>00000001400014F6                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">10h</span>        <span class="hljs-comment">; thrown_size</span><br><span class="hljs-symbol">.text:</span>00000001400014FB                 <span class="hljs-keyword">call</span>    __cxa_allocate_exception<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001500</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001503</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rax</span>, aNothingButErro <span class="hljs-comment">; &quot;nothing but error&quot;</span><br><span class="hljs-symbol">.text:</span>000000014000150A                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">rax</span>        <span class="hljs-comment">; char *</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">000000014000150D</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rbx</span>        <span class="hljs-comment">; this</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001510</span> <span class="hljs-comment">;   try &#123;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001510</span>                 <span class="hljs-keyword">call</span>    _ZNSt11logic_errorC1EPKc <span class="hljs-comment">; std::logic_error::logic_error(char const*)</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001510</span> <span class="hljs-comment">;   &#125; // starts at 140001510</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001515</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">cs</span>:_refptr__ZNSt11logic_errorD1Ev <span class="hljs-comment">; void (*)(void *)</span><br><span class="hljs-symbol">.text:</span>000000014000151C                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rax</span>, _ZTISt11logic_error <span class="hljs-comment">; `typeinfo for&#x27;std::logic_error</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001523</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">rax</span>        <span class="hljs-comment">; lptinfo</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001526</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rbx</span>        <span class="hljs-comment">; void *</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001529</span> <span class="hljs-comment">;   try &#123;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001529</span>                 <span class="hljs-keyword">call</span>    __cxa_throw<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001529</span> <span class="hljs-comment">;   &#125; // starts at 140001529</span><br><span class="hljs-symbol">.text:</span>000000014000152E <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>000000014000152E <span class="hljs-comment">;   cleanup() // owned by 140001510</span><br><span class="hljs-symbol">.text:</span>000000014000152E                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001531</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rbx</span>        <span class="hljs-comment">; void *</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001534</span>                 <span class="hljs-keyword">call</span>    __cxa_free_exception<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001539</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rsi</span><br><span class="hljs-symbol">.text:</span>000000014000153C                 <span class="hljs-keyword">jmp</span>     short $+<span class="hljs-number">2</span><br><span class="hljs-symbol">.text:</span>000000014000153E <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>000000014000153E<br><span class="hljs-symbol">.text:</span>000000014000153E loc_14000153E:                          <span class="hljs-comment">; CODE XREF: solve(void)+66↑j</span><br><span class="hljs-symbol">.text:</span>000000014000153E <span class="hljs-comment">;   catch(...) // owned by 1400014F1    ; void *</span><br><span class="hljs-symbol">.text:</span>000000014000153E <span class="hljs-comment">;   catch(...) // owned by 140001529</span><br><span class="hljs-symbol">.text:</span>000000014000153E                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001541</span>                 <span class="hljs-keyword">call</span>    __cxa_begin_catch<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001546</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rax</span>, enc        <span class="hljs-comment">; &quot;zbrpgs&#123;F4z3_Ge1px_jvgu_@sybjre_qrfhjn&#125;&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">000000014000154D</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rax</span>        <span class="hljs-comment">; Str</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001550</span>                 <span class="hljs-keyword">call</span>    strlen<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001555</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+length], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001558</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+count], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>000000014000155F                 <span class="hljs-keyword">jmp</span>     loc_14000160E<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001564</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001564</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001564</span> loc_140001564:                          <span class="hljs-comment">; CODE XREF: solve(void)+13E↓j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001564</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+count]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001567</span>                 <span class="hljs-keyword">cdqe</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001569</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rdx</span>, enc        <span class="hljs-comment">; &quot;zbrpgs&#123;F4z3_Ge1px_jvgu_@sybjre_qrfhjn&#125;&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001570</span>                 <span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span>+<span class="hljs-built_in">rdx</span>]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001574</span>                 <span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">al</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001577</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+C], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>000000014000157A                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+C]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">000000014000157D</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span>        <span class="hljs-comment">; C</span><br><span class="hljs-symbol">.text:</span>000000014000157F                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">cs</span>:__imp_islower<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001586</span>                 <span class="hljs-keyword">call</span>    <span class="hljs-built_in">rax</span> <span class="hljs-comment">; __imp_islower ; 判断字母大小写</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001588</span>                 <span class="hljs-keyword">test</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>000000014000158A                 <span class="hljs-keyword">jz</span>      short loc_1400015B9 <span class="hljs-comment">; 大写字母跳转</span><br><span class="hljs-symbol">.text:</span>000000014000158C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+C] <span class="hljs-comment">; enc[count]</span><br><span class="hljs-symbol">.text:</span>000000014000158F                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">rax</span>-<span class="hljs-number">54h</span>]  <span class="hljs-comment">; enc[count]-0x54</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001592</span>                 <span class="hljs-keyword">movsxd</span>  <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001595</span>                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-number">4EC4EC4Fh</span>  <span class="hljs-comment">; 从这里开始</span><br><span class="hljs-symbol">.text:</span>000000014000159C                 <span class="hljs-keyword">shr</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-number">20h</span><br><span class="hljs-symbol">.text:</span>00000001400015A0                 <span class="hljs-keyword">sar</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">3</span><br><span class="hljs-symbol">.text:</span>00000001400015A3                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span>00000001400015A5                 <span class="hljs-keyword">sar</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">1Fh</span><br><span class="hljs-symbol">.text:</span>00000001400015A8                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>00000001400015AA                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span>, <span class="hljs-number">1Ah</span><br><span class="hljs-symbol">.text:</span>00000001400015AD                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span>00000001400015AF                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span>        <span class="hljs-comment">; 到这里结束，实现的是除以26</span><br><span class="hljs-symbol">.text:</span>00000001400015B1                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">61h</span> <span class="hljs-comment">; &#x27;a&#x27;  ; 加上0x61</span><br><span class="hljs-symbol">.text:</span>00000001400015B4                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+C], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>00000001400015B7                 <span class="hljs-keyword">jmp</span>     short loc_1400015F6<br><span class="hljs-symbol">.text:</span>00000001400015B9 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>00000001400015B9<br><span class="hljs-symbol">.text:</span>00000001400015B9 loc_1400015B9:                          <span class="hljs-comment">; CODE XREF: solve(void)+B4↑j</span><br><span class="hljs-symbol">.text:</span>00000001400015B9                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+C]<br><span class="hljs-symbol">.text:</span>00000001400015BC                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span>        <span class="hljs-comment">; C</span><br><span class="hljs-symbol">.text:</span>00000001400015BE                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">cs</span>:__imp_isupper<br><span class="hljs-symbol">.text:</span>00000001400015C5                 <span class="hljs-keyword">call</span>    <span class="hljs-built_in">rax</span> <span class="hljs-comment">; __imp_isupper ; 判断字母大小写</span><br><span class="hljs-symbol">.text:</span>00000001400015C7                 <span class="hljs-keyword">test</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>00000001400015C9                 <span class="hljs-keyword">jz</span>      short loc_1400015F6 <span class="hljs-comment">; 非字母跳转</span><br><span class="hljs-symbol">.text:</span>00000001400015CB                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+C] <span class="hljs-comment">; enc[count]</span><br><span class="hljs-symbol">.text:</span>00000001400015CE                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">rax</span>-<span class="hljs-number">34h</span>]  <span class="hljs-comment">; enc[count]-0x34</span><br><span class="hljs-symbol">.text:</span>00000001400015D1                 <span class="hljs-keyword">movsxd</span>  <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span>00000001400015D4                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-number">4EC4EC4Fh</span>  <span class="hljs-comment">; 从这里开始</span><br><span class="hljs-symbol">.text:</span>00000001400015<span class="hljs-built_in">DB</span>                 <span class="hljs-keyword">shr</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-number">20h</span><br><span class="hljs-symbol">.text:</span>00000001400015DF                 <span class="hljs-keyword">sar</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">3</span><br><span class="hljs-symbol">.text:</span>00000001400015E2                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span>00000001400015E4                 <span class="hljs-keyword">sar</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">1Fh</span><br><span class="hljs-symbol">.text:</span>00000001400015E7                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>00000001400015E9                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span>, <span class="hljs-number">1Ah</span><br><span class="hljs-symbol">.text:</span>00000001400015EC                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span>00000001400015EE                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span>        <span class="hljs-comment">; 到这里结束，实现的是除以26</span><br><span class="hljs-symbol">.text:</span>00000001400015F0                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">41h</span> <span class="hljs-comment">; &#x27;A&#x27;  ; 加上0x41</span><br><span class="hljs-symbol">.text:</span>00000001400015F3                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+C], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>00000001400015F6<br><span class="hljs-symbol">.text:</span>00000001400015F6 loc_1400015F6:                          <span class="hljs-comment">; CODE XREF: solve(void)+E1↑j</span><br><span class="hljs-symbol">.text:</span>00000001400015F6                                         <span class="hljs-comment">; solve(void)+F3↑j</span><br><span class="hljs-symbol">.text:</span>00000001400015F6                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+C]<br><span class="hljs-symbol">.text:</span>00000001400015F9                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>00000001400015FB                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+count]<br><span class="hljs-symbol">.text:</span>00000001400015FE                 <span class="hljs-keyword">cdqe</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001600</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rdx</span>, enc        <span class="hljs-comment">; &quot;zbrpgs&#123;F4z3_Ge1px_jvgu_@sybjre_qrfhjn&#125;&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001607</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rax</span>+<span class="hljs-built_in">rdx</span>], <span class="hljs-built_in">cl</span><br><span class="hljs-symbol">.text:</span>000000014000160A                 <span class="hljs-keyword">add</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+count], <span class="hljs-number">1</span><br><span class="hljs-symbol">.text:</span>000000014000160E<br><span class="hljs-symbol">.text:</span>000000014000160E loc_14000160E:                          <span class="hljs-comment">; CODE XREF: solve(void)+89↑j</span><br><span class="hljs-symbol">.text:</span>000000014000160E                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+count]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001611</span>                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">10h</span>+length]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001614</span>                 <span class="hljs-keyword">jl</span>      loc_140001564<br><span class="hljs-symbol">.text:</span>000000014000161A                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rax</span>, aSoYouDidnTCatc <span class="hljs-comment">; &quot;so you didn&#x27;t catch me?\n&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001621</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rax</span>        <span class="hljs-comment">; char *</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001624</span> <span class="hljs-comment">;   try &#123;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001624</span>                 <span class="hljs-keyword">call</span>    print<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001624</span> <span class="hljs-comment">;   &#125; // starts at 140001624</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001629</span>                 <span class="hljs-keyword">call</span>    __cxa_end_catch<br><span class="hljs-symbol">.text:</span>000000014000162E                 <span class="hljs-keyword">jmp</span>     short loc_140001644<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001630</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001630</span> <span class="hljs-comment">;   cleanup() // owned by 140001624</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001630</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001633</span>                 <span class="hljs-keyword">call</span>    __cxa_end_catch<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001638</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rbx</span><br><span class="hljs-symbol">.text:</span>000000014000163B                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rax</span>        <span class="hljs-comment">; gcc_exc</span><br><span class="hljs-symbol">.text:</span>000000014000163E                 <span class="hljs-keyword">call</span>    _Unwind_Resume<br><span class="hljs-symbol">.text:</span>000000014000163E <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001643</span>                 <span class="hljs-meta">align</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001644</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001644</span> loc_140001644:                          <span class="hljs-comment">; CODE XREF: solve(void)+158↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001644</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">rsp</span>, <span class="hljs-number">30h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001648</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">rbx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000140001649</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">rsi</span><br><span class="hljs-symbol">.text:</span>000000014000164A                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span>000000014000164B                 <span class="hljs-keyword">retn</span><br><span class="hljs-symbol">.text:</span>000000014000164B <span class="hljs-comment">; &#125; // starts at 1400014D6</span><br><span class="hljs-symbol">.text:</span>000000014000164B _Z5solvev       endp<br></code></pre></td></tr></table></figure>
</li>
<li><p>解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">s</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-comment">#小写字母</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span> &lt;= char &lt;= <span class="hljs-string">&#x27;z&#x27;</span>:<br>            new_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-number">0x54</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">0x61</span>)<br>            result.append(new_char)<br>        <span class="hljs-comment">#大写字母</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;A&#x27;</span> &lt;= char &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>:<br>            new_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-number">0x34</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">0x41</span>)<br>            result.append(new_char)<br>        <span class="hljs-comment">#非字母</span><br>        <span class="hljs-keyword">else</span>:<br>            result.append(char)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(result)<br><br>enc = <span class="hljs-string">&quot;zbrpgs&#123;F4z3_Ge1px_jvgu_@sybjre_qrfhjn&#125;&quot;</span><br>flag = decode(enc)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="upx-revenge"><a href="#upx-revenge" class="headerlink" title="upx_revenge"></a>upx_revenge</h3><ul>
<li><p>附件程序运行不了，如图：</p>
<p><img src="/../images/image-20251003124237857-1760193218429-23.png" alt="运行报错"></p>
<p>题目提示upx特征段魔改，但是自己尝试后发现魔改特征段不会导致程序运行不了</p>
<p>后来琢磨了半天，拷打<del>(bushi</del>了一下出题人，才发现这个程序缺了bytes（看了官方WriteUp，发现这确实是一个考点😭，我真傻，真的，我单知道upx魔改会改特征段数据，我不知道还可以删数据😭）</p>
<p><img src="/../images/image-20251003124409938-1760193218429-22.png" alt="这是week1_upx的结尾"></p>
<p><img src="/../images/image-20251003124456921-1760193218429-21.png" alt="这是本题程序的结尾"></p>
<p>缺少的地方在upx特征段，可以发现upx1段开头的四个字节错位了，错位到upx特征段上了，所以要给特征段插入四个字节</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-03%20124610-1760193218429-24.png" alt="这是week1_upx的特征段"></p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-10-03%20124713-1760193218429-26.png" alt="这是本题程序的特征段"></p>
<p>用010editor在49 01 00 C3后面按Ctrl+shift+I插入4bytes（默认填充为0），会发现程序可以运行了</p>
<p><img src="/../images/image-20251003125528890-1760193218429-25.png" alt="插入4字节"></p>
<p><img src="/../images/image-20251003125621022-1760193218429-29.png" alt="程序可以运行了"></p>
</li>
<li><p>采用手动脱壳的办法。具体操作可以参考week1_upx的解法或者看看<a href="http://sydzi.github.io/2025/07/29/Day9-%E5%A3%B3/">Day9:壳与脱壳（一）</a>和<a href="http://sydzi.github.io/2025/07/30/Day10-%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%EF%BC%88%E4%BA%8C%EF%BC%89/">Day10:壳与脱壳（二）</a><del>（王婆卖瓜这一块</del>，这里从找到OEP开始：</p>
<p><img src="/../images/image-20251003131740100-1760193218429-28.png" alt="OEP"></p>
<p>下断点F9运行到上图这个大跳，然后F7步入</p>
<p><img src="/../images/image-20251003131847409-1760193218429-31.png" alt="OEP位置"></p>
<p>RIP指向此处时，打开scylla进行转储和IAT重建修复转储。这里需要注意，IAT搜索出来的结果里有一个损坏的导入，需要把它删掉</p>
<p><img src="/../images/image-20251003132216493-1760193218429-27.png" alt="删除无效导入结点"></p>
<p>脱壳后的_dump_SCY.exe文件就可以用IDA打开正常分析了</p>
</li>
<li><p>首先查看字符串表，可以发现可疑的的提示”correct”</p>
<p><img src="/../images/image-20251003132623642-1760193218429-30.png" alt="可疑的提示"></p>
</li>
<li><p>跟踪correct可以找到main函数。下面是优化后的main函数和相关的函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Hidden C++ exception states: #wind=5</span><br><span class="hljs-function"><span class="hljs-type">int</span> __fastcall <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  __int64 v3; <span class="hljs-comment">// rax</span><br>  __int64 v4; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">unsigned</span> __int8 v5; <span class="hljs-comment">// al</span><br>  __int64 v6; <span class="hljs-comment">// r8</span><br>  <span class="hljs-type">void</span> **v7; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">void</span> **v8; <span class="hljs-comment">// rsi</span><br>  <span class="hljs-type">size_t</span> length; <span class="hljs-comment">// rdi</span><br>  <span class="hljs-type">void</span> *v10; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">void</span> *v11; <span class="hljs-comment">// rcx</span><br>  _QWORD *newBuffer; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> *v13; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">char</span> *enc; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> *v15; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">void</span> **encryptedFlag; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-type">int</span> v17; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> *outString; <span class="hljs-comment">// rdx</span><br>  __int64 v19; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">void</span> *v20; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-type">void</span> *v21; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-type">void</span> *v22; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-type">void</span> *v23; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-type">void</span> *CopiedFlag[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+28h] [rbp-51h] BYREF</span><br>  <span class="hljs-type">char</span> *bufferEnd; <span class="hljs-comment">// [rsp+38h] [rbp-41h]</span><br>  <span class="hljs-type">void</span> *flag[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-39h] BYREF</span><br>  __m128i si128; <span class="hljs-comment">// [rsp+50h] [rbp-29h]</span><br>  <span class="hljs-type">void</span> *encodeResult[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+60h] [rbp-19h] BYREF</span><br>  <span class="hljs-type">size_t</span> Size; <span class="hljs-comment">// [rsp+70h] [rbp-9h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v31; <span class="hljs-comment">// [rsp+78h] [rbp-1h]</span><br>  <span class="hljs-type">void</span> *modifiedBaseTable[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+80h] [rbp+7h] BYREF</span><br>  __m128i v33; <span class="hljs-comment">// [rsp+90h] [rbp+17h]</span><br>  __int128 v34; <span class="hljs-comment">// [rsp+A0h] [rbp+27h]</span><br>  __int64 v35; <span class="hljs-comment">// [rsp+B0h] [rbp+37h]</span><br>  __int64 v36; <span class="hljs-comment">// [rsp+B8h] [rbp+3Fh]</span><br><br>  v3 = <span class="hljs-built_in">output</span>(std::cout, pleaseEnterYourFlag);<br>  std::istream::<span class="hljs-keyword">operator</span>&gt;&gt;(v3, out_flush);<br>  *flag = <span class="hljs-number">0LL</span>;<br>  si128 = _mm_load_si128(&amp;xmmword_7FF7420B44B0);<br>  <span class="hljs-built_in">LOBYTE</span>(flag[<span class="hljs-number">0</span>]) = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">LOBYTE</span>(v4) = <span class="hljs-number">10</span>;<br>  v5 = std::ios::<span class="hljs-built_in">widen</span>(&amp;std::cin + *(std::cin + <span class="hljs-number">4LL</span>), v4);<br>  <span class="hljs-built_in">input</span>(std::cin, flag, v5);<br>  v7 = flag;<br>  <span class="hljs-keyword">if</span> ( si<span class="hljs-number">128.</span>m128i_i64[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">0xFuLL</span> )            <span class="hljs-comment">// si128.m128i_i64[1]是输入的flag的长度</span><br>    v7 = flag[<span class="hljs-number">0</span>];<br>  v8 = flag;<br>  <span class="hljs-keyword">if</span> ( si<span class="hljs-number">128.</span>m128i_i64[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">0xFuLL</span> )<br>    v8 = flag[<span class="hljs-number">0</span>];<br>  *CopiedFlag = <span class="hljs-number">0LL</span>;<br>  bufferEnd = <span class="hljs-number">0LL</span>;<br>  length = v7 + si<span class="hljs-number">128.</span>m128i_i64[<span class="hljs-number">0</span>] - v8;<br>  <span class="hljs-keyword">if</span> ( length )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( length &gt; <span class="hljs-number">0x7FFFFFFFFFFFFFFFLL</span> )<br>      <span class="hljs-built_in">lengthError</span>();<br>    <span class="hljs-keyword">if</span> ( length &lt; <span class="hljs-number">0x1000</span> )<br>    &#123;<br>      newBuffer = <span class="hljs-keyword">operator</span> <span class="hljs-built_in">new</span>(length);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( length + <span class="hljs-number">39</span> &lt; length )<br>        <span class="hljs-built_in">sub_7FF7420B1170</span>();<br>      v10 = <span class="hljs-keyword">operator</span> <span class="hljs-built_in">new</span>(length + <span class="hljs-number">39</span>);<br>      v11 = v10;<br>      <span class="hljs-keyword">if</span> ( !v10 )<br>LABEL_31:<br>        <span class="hljs-built_in">invalid_parameter_noinfo_noreturn</span>();<br>      newBuffer = ((v10 + <span class="hljs-number">39</span>) &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFE0uLL</span>);<br>      *(newBuffer - <span class="hljs-number">1</span>) = v11;<br>    &#125;<br>    CopiedFlag[<span class="hljs-number">0</span>] = newBuffer;<br>    v13 = newBuffer + length;<br>    bufferEnd = newBuffer + length;<br>    <span class="hljs-built_in">memmove</span>(newBuffer, v8, length);<br>    CopiedFlag[<span class="hljs-number">1</span>] = v13;<br>  &#125;<br>  <span class="hljs-built_in">XORencrypt</span>(modifiedBaseTable, v7, v6);        <span class="hljs-comment">// 魔改base64的编码表</span><br>  <span class="hljs-built_in">baseEncode</span>(encodeResult, CopiedFlag, modifiedBaseTable);<span class="hljs-comment">// base64编码</span><br>  v34 = <span class="hljs-number">0LL</span>;<br>  enc = <span class="hljs-keyword">operator</span> <span class="hljs-built_in">new</span>(<span class="hljs-number">0x30uLL</span>);<br>  v15 = enc;<br>  *&amp;v34 = enc;<br>  v35 = <span class="hljs-number">44LL</span>;<br>  v36 = <span class="hljs-number">47LL</span>;<br>  <span class="hljs-built_in">strcpy</span>(enc, <span class="hljs-string">&quot;lY7bW=\\ck?eyjX7]TZ\\&#125;CVbh\\tOyTH6&gt;jH7XmFifG]H7&quot;</span>);<br>  encryptedFlag = encodeResult;<br>  <span class="hljs-keyword">if</span> ( v31 &gt; <span class="hljs-number">0xF</span> )<br>    encryptedFlag = encodeResult[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">if</span> ( Size != <span class="hljs-number">44</span> || (v17 = <span class="hljs-built_in">memcmp</span>(encryptedFlag, enc, <span class="hljs-number">0x2CuLL</span>), outString = aCorrect, v17) )<br>    outString = aWrong;<br>  v19 = <span class="hljs-built_in">output</span>(std::cout, outString);<br>  std::istream::<span class="hljs-keyword">operator</span>&gt;&gt;(v19, out_flush);<br>  <span class="hljs-built_in">j_j_free</span>(v15);<br>  <span class="hljs-keyword">if</span> ( v31 &gt; <span class="hljs-number">0xF</span> )<br>  &#123;<br>    v20 = encodeResult[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> ( v31 + <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0x1000</span> )<br>    &#123;<br>      v20 = *(encodeResult[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span> ( (encodeResult[<span class="hljs-number">0</span>] - v20 - <span class="hljs-number">8</span>) &gt; <span class="hljs-number">0x1F</span> )<br>        <span class="hljs-built_in">invalid_parameter_noinfo_noreturn</span>();<br>    &#125;<br>    <span class="hljs-built_in">j_j_free</span>(v20);<br>  &#125;<br>  Size = <span class="hljs-number">0LL</span>;<br>  v31 = <span class="hljs-number">15LL</span>;<br>  <span class="hljs-built_in">LOBYTE</span>(encodeResult[<span class="hljs-number">0</span>]) = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( v<span class="hljs-number">33.</span>m128i_i64[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">0xFuLL</span> )<br>  &#123;<br>    v21 = modifiedBaseTable[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> ( (v<span class="hljs-number">33.</span>m128i_i64[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0x1000</span> )<br>    &#123;<br>      v21 = *(modifiedBaseTable[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span> ( (modifiedBaseTable[<span class="hljs-number">0</span>] - v21 - <span class="hljs-number">8</span>) &gt; <span class="hljs-number">0x1F</span> )<br>        <span class="hljs-built_in">invalid_parameter_noinfo_noreturn</span>();<br>    &#125;<br>    <span class="hljs-built_in">j_j_free</span>(v21);<br>  &#125;<br>  v33 = _mm_load_si128(&amp;xmmword_7FF7420B44B0);<br>  <span class="hljs-built_in">LOBYTE</span>(modifiedBaseTable[<span class="hljs-number">0</span>]) = <span class="hljs-number">0</span>;<br>  v22 = CopiedFlag[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">if</span> ( CopiedFlag[<span class="hljs-number">0</span>] )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( (bufferEnd - CopiedFlag[<span class="hljs-number">0</span>]) &gt;= <span class="hljs-number">0x1000</span> )<br>    &#123;<br>      v22 = *(CopiedFlag[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span> ( (CopiedFlag[<span class="hljs-number">0</span>] - v22 - <span class="hljs-number">8</span>) &gt; <span class="hljs-number">0x1F</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_31;<br>    &#125;<br>    <span class="hljs-built_in">j_j_free</span>(v22);<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( si<span class="hljs-number">128.</span>m128i_i64[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">0xFuLL</span> )<br>  &#123;<br>    v23 = flag[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> ( (si<span class="hljs-number">128.</span>m128i_i64[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0x1000</span> )<br>    &#123;<br>      v23 = *(flag[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span> ( (flag[<span class="hljs-number">0</span>] - v23 - <span class="hljs-number">8</span>) &gt; <span class="hljs-number">0x1F</span> )<br>        <span class="hljs-built_in">invalid_parameter_noinfo_noreturn</span>();<br>    &#125;<br>    <span class="hljs-built_in">j_j_free</span>(v23);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// Hidden C++ exception states: #wind=5</span><br><span class="hljs-function">_QWORD *__fastcall <span class="hljs-title">XORencrypt</span><span class="hljs-params">(_QWORD *modifiedTable, __int64 a2, __int64 a3)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">void</span> **pTableStart; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">void</span> **pCurrentPos; <span class="hljs-comment">// rdi</span><br>  <span class="hljs-type">void</span> **i; <span class="hljs-comment">// rsi</span><br>  <span class="hljs-type">char</span> xored; <span class="hljs-comment">// r9</span><br>  <span class="hljs-type">unsigned</span> __int64 cucrrentSize; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-type">unsigned</span> __int64 capacity; <span class="hljs-comment">// rdx</span><br>  _QWORD *Table; <span class="hljs-comment">// rax</span><br><br>  *modifiedTable = <span class="hljs-number">0LL</span>;<br>  modifiedTable[<span class="hljs-number">2</span>] = <span class="hljs-number">0LL</span>;<br>  modifiedTable[<span class="hljs-number">3</span>] = <span class="hljs-number">15LL</span>;<br>  *modifiedTable = <span class="hljs-number">0</span>;<br>  pTableStart = &amp;oriTable;<br>  pCurrentPos = &amp;oriTable;<br>  <span class="hljs-keyword">if</span> ( *(&amp;xmmword_7FF7420B6760 + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">0xFuLL</span> )<br>  &#123;<br>    pCurrentPos = oriTable;                     <span class="hljs-comment">// oriTable是原始的base64编码表</span><br>    pTableStart = oriTable;<br>  &#125;<br>  <span class="hljs-keyword">for</span> ( i = (pTableStart + xmmword_7FF7420B6760); pCurrentPos != i; pCurrentPos = (pCurrentPos + <span class="hljs-number">1</span>) )<br>  &#123;<br>    xored = *pCurrentPos ^ <span class="hljs-number">0xE</span>;                 <span class="hljs-comment">// 遍历Table并异或0xE，创建一个魔改的编码表</span><br>    cucrrentSize = modifiedTable[<span class="hljs-number">2</span>];<br>    capacity = modifiedTable[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">if</span> ( cucrrentSize &gt;= capacity )<br>    &#123;<br>      <span class="hljs-built_in">needExpand</span>(modifiedTable, capacity, a3, xored);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      modifiedTable[<span class="hljs-number">2</span>] = cucrrentSize + <span class="hljs-number">1</span>;      <span class="hljs-comment">// 此处开始写入xor处理后的table字符</span><br>      Table = modifiedTable;<br>      <span class="hljs-keyword">if</span> ( capacity &gt; <span class="hljs-number">0xF</span> )<br>        Table = *modifiedTable;<br>      *(Table + cucrrentSize) = xored;<br>      *(Table + cucrrentSize + <span class="hljs-number">1</span>) = <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> modifiedTable;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>可以看出逻辑就是先魔改base64的编码表，然后再用魔改的编码表对flag进行base64编码，最后和给定的密文比较。可以先对enc进行异或，然后再base64解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">enc = <span class="hljs-string">&quot;lY7bW=\\ck?eyjX7]TZ\\&#125;CVbh\\tOyTH6&gt;jH7XmFifG]H7&quot;</span><br>data = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> enc:<br>    data += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(char) ^ <span class="hljs-number">0xE</span>)<br><span class="hljs-built_in">print</span>(data)<br><span class="hljs-comment">#bW9lY3Rme1kwdV9SZTRsMXlfRzAwZF80dF9VcHghISF9</span><br></code></pre></td></tr></table></figure>

<p><img src="/../images/image-20251003134212864-1760193218429-34.png" alt="base64解码"></p>
</li>
</ul>
<h3 id="Two-cups-of-tea"><a href="#Two-cups-of-tea" class="headerlink" title="Two cups of tea"></a>Two cups of tea</h3><ul>
<li><p>反编译的代码分析优化后大概是这样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//main函数部分</span><br><span class="hljs-function"><span class="hljs-type">int</span> __fastcall <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  __int64 n; <span class="hljs-comment">// rbx</span><br>  FILE *Stream; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">size_t</span> length; <span class="hljs-comment">// rax</span><br>  __int64 v6; <span class="hljs-comment">// rdx</span><br>  __int64 count; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> __int64 tmp4key; <span class="hljs-comment">// [rsp+20h] [rbp-E0h] BYREF</span><br>  <span class="hljs-type">char</span> key_2; <span class="hljs-comment">// [rsp+28h] [rbp-D8h]</span><br>  __int64 key_1; <span class="hljs-comment">// [rsp+30h] [rbp-D0h] BYREF</span><br>  <span class="hljs-type">int</span> key_3; <span class="hljs-comment">// [rsp+38h] [rbp-C8h]</span><br>  <span class="hljs-type">int</span> key_4; <span class="hljs-comment">// [rsp+3Ch] [rbp-C4h]</span><br>  _DWORD enc[<span class="hljs-number">10</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-C0h]</span><br>  _OWORD flag[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+68h] [rbp-98h] BYREF</span><br>  __int64 v16; <span class="hljs-comment">// [rsp+88h] [rbp-78h]</span><br>  <span class="hljs-type">char</span> Buffer[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+90h] [rbp-70h] BYREF</span><br>  __int128 v18; <span class="hljs-comment">// [rsp+A0h] [rbp-60h]</span><br>  __int64 v19; <span class="hljs-comment">// [rsp+B0h] [rbp-50h]</span><br><br>  n = <span class="hljs-number">0LL</span>;<br>  key_1 = <span class="hljs-number">2LL</span>;<br>  key_2 = <span class="hljs-number">0</span>;<br>  key_3 = <span class="hljs-number">2</span>;<br>  key_4 = <span class="hljs-number">5</span>;<br>  enc[<span class="hljs-number">0</span>] = <span class="hljs-number">0x5D624C34</span>;<br>  enc[<span class="hljs-number">1</span>] = <span class="hljs-number">0x8629FEAD</span>;<br>  enc[<span class="hljs-number">2</span>] = <span class="hljs-number">0x9D11379B</span>;<br>  enc[<span class="hljs-number">3</span>] = <span class="hljs-number">0xFCD53211</span>;<br>  enc[<span class="hljs-number">4</span>] = <span class="hljs-number">0x460F63CE</span>;<br>  enc[<span class="hljs-number">5</span>] = <span class="hljs-number">0xC5816E68</span>;<br>  enc[<span class="hljs-number">6</span>] = <span class="hljs-number">0xFE5300AD</span>;<br>  enc[<span class="hljs-number">7</span>] = <span class="hljs-number">0xA0015EE</span>;<br>  enc[<span class="hljs-number">8</span>] = <span class="hljs-number">0x9806DBBB</span>;<br>  enc[<span class="hljs-number">9</span>] = <span class="hljs-number">0xEF4A2648</span>;<br>  tmp4key = <span class="hljs-number">0xD0FCC6A7B8941CAFuLL</span>;<br>  <span class="hljs-built_in">key_init</span>(*&amp;argc, &amp;tmp4key, &amp;key_1);<span class="hljs-comment">// 这里初始化了key,不必理会具体实现，可以动调得到结果</span><br>  <span class="hljs-built_in">printf</span>(&amp;pleaseEnterYourFlag);<br>  Stream = _acrt_iob_func(<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">fgets</span>(Buffer, <span class="hljs-number">100</span>, Stream);<br>  length = <span class="hljs-built_in">strcspn</span>(Buffer, <span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">// 获取flag的长度</span><br>  <span class="hljs-keyword">if</span> ( length &gt;= <span class="hljs-number">0x64</span> )<br>    _report_securityfailure_();<br>  Buffer[length] = <span class="hljs-number">0</span>;<br>  flag[<span class="hljs-number">0</span>] = *Buffer;<br>  key_1 = tmp4key;<br>  v16 = v19;<br>  flag[<span class="hljs-number">1</span>] = v18;<br>  key_3 = <span class="hljs-number">0x12345678</span>;<br>  key_4 = <span class="hljs-number">0x9ABCDEF0</span>;<br>  <span class="hljs-built_in">modefiedTea</span>(flag, v6, &amp;key_1);<span class="hljs-comment">// 魔改的tea，加密flag以便比对验证</span><br>  count = <span class="hljs-number">-1LL</span>;<br>  <span class="hljs-keyword">do</span><br>    ++count;<br>  <span class="hljs-keyword">while</span> ( Buffer[count] );<span class="hljs-comment">// 确认flag长度</span><br>  <span class="hljs-keyword">if</span> ( count == <span class="hljs-number">40</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( *(flag + n * <span class="hljs-number">4</span>) == enc[n] )<span class="hljs-comment">// 比对验证</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( ++n &gt;= <span class="hljs-number">10</span> )<br>      &#123;<br>        <span class="hljs-built_in">printf</span>(right);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(wrong);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(Format_0);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">//魔改tea部分</span><br><span class="hljs-function">__int64 __fastcall <span class="hljs-title">modefiedTea</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *flag, __int64 a2, __int64 key)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag_9; <span class="hljs-comment">// r9d</span><br>  <span class="hljs-type">int</span> delta; <span class="hljs-comment">// r11d</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag_eight; <span class="hljs-comment">// edx</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag_1; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag_2; <span class="hljs-comment">// ebp</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag_3; <span class="hljs-comment">// r14d</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag_4; <span class="hljs-comment">// r15d</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag_5; <span class="hljs-comment">// r12d</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag_6; <span class="hljs-comment">// r13d</span><br>  <span class="hljs-type">int</span> flag_o; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag_7; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> key_0; <span class="hljs-comment">// edi</span><br>  <span class="hljs-type">int</span> key_1; <span class="hljs-comment">// ebx</span><br>  __int64 key_3; <span class="hljs-comment">// r10</span><br>  <span class="hljs-type">int</span> key_2; <span class="hljs-comment">// r11d</span><br>  <span class="hljs-type">int</span> v18; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">bool</span> Count; <span class="hljs-comment">// zf</span><br>  __int64 flag_seven; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag_0; <span class="hljs-comment">// [rsp+0h] [rbp-58h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag_nine; <span class="hljs-comment">// [rsp+4h] [rbp-54h]</span><br>  <span class="hljs-type">int</span> count; <span class="hljs-comment">// [rsp+8h] [rbp-50h]</span><br>  <span class="hljs-type">int</span> delta_1; <span class="hljs-comment">// [rsp+68h] [rbp+10h]</span><br>  __int64 Key; <span class="hljs-comment">// [rsp+70h] [rbp+18h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flag_8; <span class="hljs-comment">// [rsp+78h] [rbp+20h]</span><br><br>  Key = key;<br>  flag_9 = flag[<span class="hljs-number">9</span>];<br>  delta = <span class="hljs-number">0</span>;<br>  flag_eight = flag[<span class="hljs-number">8</span>];<br>  flag_1 = flag[<span class="hljs-number">1</span>];<br>  flag_2 = flag[<span class="hljs-number">2</span>];<br>  flag_3 = flag[<span class="hljs-number">3</span>];<br>  flag_4 = flag[<span class="hljs-number">4</span>];<br>  flag_5 = flag[<span class="hljs-number">5</span>];<br>  flag_6 = flag[<span class="hljs-number">6</span>];<br>  flag_o = *flag;<br>  flag_7 = flag[<span class="hljs-number">7</span>];<br>  flag_8 = flag_eight;<br>  flag_nine = flag_9;<br>  count = <span class="hljs-number">11</span>;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    delta_1 = delta - <span class="hljs-number">1640531527</span>;<br>    key_0 = *(key + <span class="hljs-number">4LL</span> * (((delta - <span class="hljs-number">1640531527</span>) &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>));<br>    flag_0 = flag_o<br>           + ((((<span class="hljs-number">16</span> * flag_9) ^ (flag_1 &gt;&gt; <span class="hljs-number">3</span>)) + ((flag_9 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag_1))) ^ (((delta - <span class="hljs-number">1640531527</span>) ^ flag_1)<br>                                                                                  + (key_0 ^ flag_9)));<br>    key_1 = *(Key + <span class="hljs-number">4</span> * (((delta - <span class="hljs-number">1640531527</span>) &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span> ^ <span class="hljs-number">1LL</span>));<br>    flag_1 += ((flag_0 ^ key_1) + ((delta - <span class="hljs-number">1640531527</span>) ^ flag_2)) ^ (((<span class="hljs-number">16</span> * flag_0) ^ (flag_2 &gt;&gt; <span class="hljs-number">3</span>))<br>                                                                    + ((flag_0 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag_2)));<br>    key_3 = ((delta - <span class="hljs-number">1640531527</span>) &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span> ^ <span class="hljs-number">3LL</span>;<br>    key_2 = *(Key + <span class="hljs-number">4</span> * (((delta - <span class="hljs-number">1640531527</span>) &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span> ^ <span class="hljs-number">2LL</span>));<br>    flag_2 += ((flag_1 ^ key_2) + (delta_1 ^ flag_3)) ^ (((<span class="hljs-number">16</span> * flag_1) ^ (flag_3 &gt;&gt; <span class="hljs-number">3</span>)) + ((flag_1 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag_3)));<br>    flag_3 += ((delta_1 ^ flag_4) + (flag_2 ^ *(Key + <span class="hljs-number">4</span> * key_3))) ^ (((<span class="hljs-number">16</span> * flag_2) ^ (flag_4 &gt;&gt; <span class="hljs-number">3</span>))<br>                                                                    + ((flag_2 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag_4)));<br>    flag_4 += ((flag_3 ^ key_0) + (delta_1 ^ flag_5)) ^ (((<span class="hljs-number">16</span> * flag_3) ^ (flag_5 &gt;&gt; <span class="hljs-number">3</span>)) + ((flag_3 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag_5)));<br>    flag_5 += ((flag_4 ^ key_1) + (delta_1 ^ flag_6)) ^ (((<span class="hljs-number">16</span> * flag_4) ^ (flag_6 &gt;&gt; <span class="hljs-number">3</span>)) + ((flag_4 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag_6)));<br>    v18 = (flag_5 ^ key_2) + (delta_1 ^ flag_7);<br>    delta = delta_1;<br>    flag_6 += v18 ^ (((<span class="hljs-number">16</span> * flag_5) ^ (flag_7 &gt;&gt; <span class="hljs-number">3</span>)) + ((flag_5 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag_7)));<br>    flag_7 += ((flag_6 ^ *(Key + <span class="hljs-number">4</span> * key_3)) + (delta_1 ^ flag_8)) ^ (((<span class="hljs-number">16</span> * flag_6) ^ (flag_8 &gt;&gt; <span class="hljs-number">3</span>))<br>                                                                    + ((flag_6 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag_8)));<br>    flag_8 += ((flag_7 ^ key_0) + (delta_1 ^ flag_nine)) ^ (((<span class="hljs-number">16</span> * flag_7) ^ (flag_nine &gt;&gt; <span class="hljs-number">3</span>))<br>                                                          + ((flag_7 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag_nine)));<br>    flag_9 = (((flag_8 ^ key_1) + (delta_1 ^ flag_0)) ^ (((<span class="hljs-number">16</span> * flag_8) ^ (flag_0 &gt;&gt; <span class="hljs-number">3</span>)) + ((flag_8 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag_0))))<br>           + flag_nine;<br>    key = Key;<br>    Count = count-- == <span class="hljs-number">1</span>;<br>    flag_nine = flag_9;<br>    <span class="hljs-keyword">if</span> ( Count )<br>      <span class="hljs-keyword">break</span>;<br>    flag_o = flag_0;<br>  &#125;<br>  flag_seven = flag_7;<br>  flag[<span class="hljs-number">1</span>] = flag_1;<br>  flag[<span class="hljs-number">2</span>] = flag_2;<br>  flag[<span class="hljs-number">3</span>] = flag_3;<br>  flag[<span class="hljs-number">4</span>] = flag_4;<br>  flag[<span class="hljs-number">5</span>] = flag_5;<br>  flag[<span class="hljs-number">6</span>] = flag_6;<br>  flag[<span class="hljs-number">7</span>] = flag_7;<br>  flag[<span class="hljs-number">8</span>] = flag_8;<br>  flag[<span class="hljs-number">9</span>] = flag_9;<br>  *flag = flag_0;<br>  <span class="hljs-keyword">return</span> flag_seven;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>由于加密主要依赖的是异或，只要复原出加密时的环境（相关变量），就可以再次加密实现复原。下图是AI给的加密逻辑分析。首先每轮加密的密钥不同，其次每个字符块的加密都依赖前一块和后一块。突破口：对于flag9而言，它的前一块和后一块都是经过本轮加密的，也就是说在最后一轮，flag9依赖的是最终密文的flag0和flag8，可以利用最终密文直接解密。解密出最后一轮的未加密flag9后，就可以往回解密flag8-flag0，就这样11轮解密回去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">┌─────────────────────────────────────────────────────────────────────────┐<br>│               修改版TEA加密（10块Feistel结构，11轮）                        │<br>└─────────────────────────────────────────────────────────────────────────┘<br><br>输入: flag[0]...flag[9] (10个32位字), key[0]...key[3] (128位密钥)<br><br>初始化:<br>   delta = 0<br>   count = 11<br><br>开始循环（11轮）:<br>   delta_1 = delta - 0x61C88647  (无符号减法，1640531527的十六进制)<br><br>   密钥调度:<br>        k0 = key[(delta_1&gt;&gt;2) &amp; 3]<br>        k1 = key[((delta_1&gt;&gt;2) &amp; 3) ^ 1]<br>        k2 = key[((delta_1&gt;&gt;2) &amp; 3) ^ 2]<br>        k3 = key[((delta_1&gt;&gt;2) &amp; 3) ^ 3]<br><br>   加密链（每轮更新所有10个字，顺序依赖）:<br>        flag0 += F(flag9, flag1, delta_1, k0)<br>        flag1 += F(flag0, flag2, delta_1, k1)<br>        flag2 += F(flag1, flag3, delta_1, k2)<br>        flag3 += F(flag2, flag4, delta_1, k3)<br>        flag4 += F(flag3, flag5, delta_1, k0)<br>        flag5 += F(flag4, flag6, delta_1, k1)<br>        flag6 += F(flag5, flag7, delta_1, k2)<br>        flag7 += F(flag6, flag8, delta_1, k3)<br>        flag8 += F(flag7, flag9, delta_1, k0)<br>        flag9 += F(flag8, flag0, delta_1, k1)<br><br>   其中 F(a, b, delta, k) = <br>        ((16*a) ^ (b&gt;&gt;3)) + ((a&gt;&gt;5) ^ (4*b))) ^ ( (delta ^ b) + (k ^ a) )<br><br>   更新delta = delta_1<br><br>循环结束（count减至1）<br><br>输出: 加密后的flag[0]...flag[9]<br></code></pre></td></tr></table></figure>
</li>
<li><p>解密脚本：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modefiedTea_decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* flag, <span class="hljs-type">uint32_t</span>* key)</span> </span>&#123;<br>    <span class="hljs-type">int32_t</span> deltas[<span class="hljs-number">11</span>];<br>    <span class="hljs-type">int32_t</span> delta = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>        delta -= <span class="hljs-number">1640531527</span>; <br>        deltas[i] = delta;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> round = <span class="hljs-number">10</span>; round &gt;= <span class="hljs-number">0</span>; round--) &#123;<br>        <span class="hljs-type">uint32_t</span> delta_1 = deltas[round];<br><br>        <span class="hljs-type">uint32_t</span> k0 = key[((delta_1 &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>)];<br>        <span class="hljs-type">uint32_t</span> k1 = key[((delta_1 &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>) ^ <span class="hljs-number">1</span>];<br>        <span class="hljs-type">uint32_t</span> k2 = key[((delta_1 &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>) ^ <span class="hljs-number">2</span>];<br>        <span class="hljs-type">uint32_t</span> k3 = key[((delta_1 &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>) ^ <span class="hljs-number">3</span>];<br><br>        flag[<span class="hljs-number">9</span>] -= ((flag[<span class="hljs-number">8</span>] ^ k1) + (delta_1 ^ flag[<span class="hljs-number">0</span>])) ^ (((<span class="hljs-number">16</span> * flag[<span class="hljs-number">8</span>]) ^ (flag[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">3</span>)) + ((flag[<span class="hljs-number">8</span>] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag[<span class="hljs-number">0</span>])));<br>        flag[<span class="hljs-number">8</span>] -= ((flag[<span class="hljs-number">7</span>] ^ k0) + (delta_1 ^ flag[<span class="hljs-number">9</span>])) ^ (((<span class="hljs-number">16</span> * flag[<span class="hljs-number">7</span>]) ^ (flag[<span class="hljs-number">9</span>] &gt;&gt; <span class="hljs-number">3</span>)) + ((flag[<span class="hljs-number">7</span>] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag[<span class="hljs-number">9</span>])));<br>        flag[<span class="hljs-number">7</span>] -= ((flag[<span class="hljs-number">6</span>] ^ k3) + (delta_1 ^ flag[<span class="hljs-number">8</span>])) ^ (((<span class="hljs-number">16</span> * flag[<span class="hljs-number">6</span>]) ^ (flag[<span class="hljs-number">8</span>] &gt;&gt; <span class="hljs-number">3</span>)) + ((flag[<span class="hljs-number">6</span>] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag[<span class="hljs-number">8</span>])));<br>        flag[<span class="hljs-number">6</span>] -= ((flag[<span class="hljs-number">5</span>] ^ k2) + (delta_1 ^ flag[<span class="hljs-number">7</span>])) ^ (((<span class="hljs-number">16</span> * flag[<span class="hljs-number">5</span>]) ^ (flag[<span class="hljs-number">7</span>] &gt;&gt; <span class="hljs-number">3</span>)) + ((flag[<span class="hljs-number">5</span>] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag[<span class="hljs-number">7</span>])));<br>        flag[<span class="hljs-number">5</span>] -= ((flag[<span class="hljs-number">4</span>] ^ k1) + (delta_1 ^ flag[<span class="hljs-number">6</span>])) ^ (((<span class="hljs-number">16</span> * flag[<span class="hljs-number">4</span>]) ^ (flag[<span class="hljs-number">6</span>] &gt;&gt; <span class="hljs-number">3</span>)) + ((flag[<span class="hljs-number">4</span>] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag[<span class="hljs-number">6</span>])));<br>        flag[<span class="hljs-number">4</span>] -= ((flag[<span class="hljs-number">3</span>] ^ k0) + (delta_1 ^ flag[<span class="hljs-number">5</span>])) ^ (((<span class="hljs-number">16</span> * flag[<span class="hljs-number">3</span>]) ^ (flag[<span class="hljs-number">5</span>] &gt;&gt; <span class="hljs-number">3</span>)) + ((flag[<span class="hljs-number">3</span>] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag[<span class="hljs-number">5</span>])));<br>        flag[<span class="hljs-number">3</span>] -= ((flag[<span class="hljs-number">2</span>] ^ k3) + (delta_1 ^ flag[<span class="hljs-number">4</span>])) ^ (((<span class="hljs-number">16</span> * flag[<span class="hljs-number">2</span>]) ^ (flag[<span class="hljs-number">4</span>] &gt;&gt; <span class="hljs-number">3</span>)) + ((flag[<span class="hljs-number">2</span>] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag[<span class="hljs-number">4</span>])));<br>        flag[<span class="hljs-number">2</span>] -= ((flag[<span class="hljs-number">1</span>] ^ k2) + (delta_1 ^ flag[<span class="hljs-number">3</span>])) ^ (((<span class="hljs-number">16</span> * flag[<span class="hljs-number">1</span>]) ^ (flag[<span class="hljs-number">3</span>] &gt;&gt; <span class="hljs-number">3</span>)) + ((flag[<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag[<span class="hljs-number">3</span>])));<br>        flag[<span class="hljs-number">1</span>] -= ((flag[<span class="hljs-number">0</span>] ^ k1) + (delta_1 ^ flag[<span class="hljs-number">2</span>])) ^ (((<span class="hljs-number">16</span> * flag[<span class="hljs-number">0</span>]) ^ (flag[<span class="hljs-number">2</span>] &gt;&gt; <span class="hljs-number">3</span>)) + ((flag[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag[<span class="hljs-number">2</span>])));<br>        flag[<span class="hljs-number">0</span>] -= ((flag[<span class="hljs-number">9</span>] ^ k0) + (delta_1 ^ flag[<span class="hljs-number">1</span>])) ^ (((<span class="hljs-number">16</span> * flag[<span class="hljs-number">9</span>]) ^ (flag[<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">3</span>)) + ((flag[<span class="hljs-number">9</span>] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">4</span> * flag[<span class="hljs-number">1</span>])));<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">uint32_t</span> enc[<span class="hljs-number">10</span>] = &#123;<br>        <span class="hljs-number">0x5D624C34</span>, <span class="hljs-number">0x8629FEAD</span>, <span class="hljs-number">0x9D11379B</span>, <span class="hljs-number">0xFCD53211</span>,<br>        <span class="hljs-number">0x460F63CE</span>, <span class="hljs-number">0xC5816E68</span>, <span class="hljs-number">0xFE5300AD</span>, <span class="hljs-number">0x0A0015EE</span>,<br>        <span class="hljs-number">0x9806DBBB</span>, <span class="hljs-number">0xEF4A2648</span><br>    &#125;;<br>    <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>] = &#123;<br>        <span class="hljs-number">0x63656F6D</span>, <span class="hljs-number">0x21216674</span>, <span class="hljs-number">0x12345678</span>, <span class="hljs-number">0x9ABCDEF0</span><br>    &#125;;<br><br>    <span class="hljs-built_in">modefiedTea_decrypt</span>(enc, key);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* flag_str = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)enc;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (flag_str[i] &gt;= <span class="hljs-number">32</span> &amp;&amp; flag_str[i] &lt;= <span class="hljs-number">126</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, flag_str[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\\x%02X&quot;</span>, flag_str[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h3 id="have-fun"><a href="#have-fun" class="headerlink" title="have_fun"></a>have_fun</h3><ul>
<li><p>附件是一个Windows GUI程序，界面如图。工具栏的“交互”实现flag的验证。</p>
<p><img src="/../images/image-20250828184625164-1760193218429-35.png" alt="界面"></p>
</li>
<li><p>main函数主要实现的是创建窗口，涉及到WNDCLASSEXW结构体（详细信息见：<a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-wndclassexw">WNDCLASSEXW （winuser.h） - Win32 apps | Microsoft Learn</a>）。其中，结构体变量lpfnWndProc涉及窗口过程的实现，所以flag验证的相关逻辑在lpfnWndProc指向的函数中查看（图中重命名为ToolBar）</p>
<p><img src="/../images/image-20250828184701147-1760193218429-32.png" alt="main函数"></p>
</li>
<li><p>ToolBar中，实现了工具栏三个选项的交互逻辑，其中，DialogBoxParamW实现的是”交互“选项（因为参数DialogFunc看着最复杂，最像flag验证逻辑）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//ToolBar函数</span><br>LRESULT __fastcall <span class="hljs-title function_">ToolBar</span><span class="hljs-params">(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)</span><br>&#123;<br>  HDC hdc; <span class="hljs-comment">// rsi</span><br>  HFONT FontW; <span class="hljs-comment">// rdi</span><br>  HGDIOBJ h; <span class="hljs-comment">// rbx</span><br>  tagPAINTSTRUCT Paint; <span class="hljs-comment">// [rsp+70h] [rbp-88h] BYREF</span><br><br>  <span class="hljs-keyword">switch</span> ( Msg )<br>  &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2u</span>:<br>      PostQuitMessage(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0xFu</span>:<br>      hdc = BeginPaint(hWnd, &amp;Paint);<br>      SetTextColor(hdc, <span class="hljs-number">0xFFu</span>);<br>      SetBkMode(hdc, <span class="hljs-number">1</span>);<br>      FontW = CreateFontW(<span class="hljs-number">36</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">700</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1u</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x20u</span>, &amp;pszFaceName);<br>      h = SelectObject(hdc, FontW);<br>      TextOutW(hdc, <span class="hljs-number">500</span>, <span class="hljs-number">160</span>, &amp;String, <span class="hljs-number">15</span>);<br>      TextOutW(hdc, <span class="hljs-number">500</span>, <span class="hljs-number">200</span>, &amp;word_7FF6D7EA3350, <span class="hljs-number">10</span>);<br>      SelectObject(hdc, h);<br>      DeleteObject(FontW);<br>      EndPaint(hWnd, &amp;Paint);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x111u</span>:<br>      <span class="hljs-keyword">switch</span> ( wParam )<br>      &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x68u</span>:<br>          DialogBoxParamW(hInstance, <span class="hljs-number">0x67</span>, hWnd, sub_7FF6D7EA1420, <span class="hljs-number">0LL</span>);<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x69u</span>:<br>          DestroyWindow(hWnd);<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x9C42u</span>:<br>          DialogBoxParamW(hInstance, <span class="hljs-number">0x66</span>, hWnd, DialogFunc, <span class="hljs-number">0LL</span>);<span class="hljs-comment">//“交互”选项</span><br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>          <span class="hljs-keyword">return</span> DefWindowProcW(hWnd, Msg, wParam, lParam);<br>      &#125;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-keyword">return</span> DefWindowProcW(hWnd, Msg, wParam, lParam);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>DialogFunc函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c">INT_PTR __fastcall <span class="hljs-title function_">DialogFunc</span><span class="hljs-params">(HWND hDlg, <span class="hljs-type">int</span> a2, <span class="hljs-type">unsigned</span> __int16 n1003)</span><br>&#123;<br>  HWND hDlg_1; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// edx</span><br>  __int64 length; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> n32_2; <span class="hljs-comment">// r8d</span><br>  __m128 si128; <span class="hljs-comment">// xmm2</span><br>  __int64 v8; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">unsigned</span> __int64 v9; <span class="hljs-comment">// rcx</span><br>  __m128 v10; <span class="hljs-comment">// xmm0</span><br>  __m128 v11; <span class="hljs-comment">// xmm1</span><br>  __m128 v12; <span class="hljs-comment">// xmm0</span><br>  __m128 v13; <span class="hljs-comment">// xmm1</span><br>  __int64 count; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">unsigned</span> __int16 *currentChar; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">int</span> currentEnc; <span class="hljs-comment">// r8d</span><br>  <span class="hljs-type">int</span> judgeNumber; <span class="hljs-comment">// r9d</span><br>  <span class="hljs-type">const</span> WCHAR *PrintText; <span class="hljs-comment">// r8</span><br>  _OWORD v20[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-1D8h] BYREF</span><br>  WCHAR flag[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-1B8h] BYREF</span><br>  _OWORD v22[<span class="hljs-number">12</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-1A8h] BYREF</span><br>  _WORD flag_xored[<span class="hljs-number">104</span>]; <span class="hljs-comment">// [rsp+F0h] [rbp-E8h] BYREF</span><br><br>  hDlg_1 = hDlg;<br>  v4 = a2 - <span class="hljs-number">272</span>;<br>  <span class="hljs-keyword">if</span> ( !v4 )<br>  &#123;<br>    PrintText = &amp;word_7FF6D7EA3368;<br>LABEL_22:<br>    SetDlgItemTextW(hDlg, <span class="hljs-number">1002</span>, PrintText);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v4 != <span class="hljs-number">1</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">if</span> ( (n1003 - <span class="hljs-number">1</span>) &gt; <span class="hljs-number">1u</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( n1003 == <span class="hljs-number">1003</span> )<br>    &#123;<br>      GetDlgItemTextW(hDlg, <span class="hljs-number">1001</span>, flag, <span class="hljs-number">100</span>);<br>      length = <span class="hljs-number">-1LL</span>;<br>      <span class="hljs-keyword">do</span><br>        ++length;<br>      <span class="hljs-keyword">while</span> ( flag[length] );<br>      n32_2 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> ( length &gt;= <span class="hljs-number">32</span> )<span class="hljs-comment">// flag长度大于32的情况（实际上不能是这种情况）</span><br>      &#123;<br>        si128 = _mm_load_si128(&amp;xmmword_7FF6D7EA33F0);<br>        v8 = <span class="hljs-number">0LL</span>;<br>        v9 = <span class="hljs-number">0LL</span>;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>          v10 = _mm_loadu_si128(&amp;flag[v9 / <span class="hljs-number">2</span>]);<br>          n32_2 += <span class="hljs-number">32</span>;<br>          v8 += <span class="hljs-number">32LL</span>;<br>          v11 = _mm_loadu_si128(&amp;v22[v9 / <span class="hljs-number">0x10</span>]);<br>          v9 += <span class="hljs-number">64LL</span>;<br>          v22[v9 / <span class="hljs-number">0x10</span> + <span class="hljs-number">8</span>] = _mm_xor_ps(v10, si128);<br>          v12 = _mm_loadu_si128(&amp;v20[v9 / <span class="hljs-number">0x10</span>]);<br>          v22[v9 / <span class="hljs-number">0x10</span> + <span class="hljs-number">9</span>] = _mm_xor_ps(v11, si128);<br>          v13 = _mm_loadu_si128(&amp;v20[v9 / <span class="hljs-number">0x10</span> + <span class="hljs-number">1</span>]);<br>          v22[v9 / <span class="hljs-number">0x10</span> + <span class="hljs-number">10</span>] = _mm_xor_ps(v12, si128);<br>          v22[v9 / <span class="hljs-number">0x10</span> + <span class="hljs-number">11</span>] = _mm_xor_ps(v13, si128);<br>        &#125;<br>        <span class="hljs-keyword">while</span> ( v8 &lt; (length - (length &amp; <span class="hljs-number">31</span>)) );<br>      &#125;<br>      count = n32_2;<span class="hljs-comment">// 上述情况应不成立，因此n32_2为0</span><br>      <span class="hljs-keyword">if</span> ( n32_2 &lt; length )<br>      &#123;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>          flag_xored[count] = flag[count] ^ <span class="hljs-number">0x2A</span>;<br>          ++count;<br>        &#125;<br>        <span class="hljs-keyword">while</span> ( count &lt; length );<br>      &#125;<br>      flag_xored[length] = <span class="hljs-number">0</span>;<br>      currentChar = flag_xored;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        currentEnc = *(currentChar + &amp;enc - flag_xored);<span class="hljs-comment">// enc[currentChar-flag_xored]</span><br>        judgeNumber = *currentChar - currentEnc;<br>        <span class="hljs-keyword">if</span> ( judgeNumber )<br>          <span class="hljs-keyword">break</span>;<br>        ++currentChar;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( currentEnc );<br>      <span class="hljs-keyword">if</span> ( judgeNumber || (PrintText = &amp;right, length != <span class="hljs-number">16</span>) )<span class="hljs-comment">// flag长度由此处得出</span><br>        PrintText = &amp;wrong;<br>      hDlg = hDlg_1;<br>      <span class="hljs-keyword">goto</span> LABEL_22;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  &#125;<br>  EndDialog(hDlg, n1003);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>逻辑很明显，遍历flag，每个字符异或0x2A，然后和enc比较。解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">enc = [<br>    <span class="hljs-number">0x0047</span>, <span class="hljs-number">0x0045</span>, <span class="hljs-number">0x004F</span>, <span class="hljs-number">0x0049</span>, <span class="hljs-number">0x005E</span>, <span class="hljs-number">0x004C</span>, <span class="hljs-number">0x0051</span>, <span class="hljs-number">0x0062</span>, <span class="hljs-number">0x006A</span>, <span class="hljs-number">0x005C</span>, <span class="hljs-number">0x001E</span>, <span class="hljs-number">0x0075</span>, <span class="hljs-number">0x004C</span>, <span class="hljs-number">0x007F</span>, <span class="hljs-number">0x0044</span>, <span class="hljs-number">0x0057</span><br>]<br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(b ^ <span class="hljs-number">0x2A</span>) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> enc)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="guess"><a href="#guess" class="headerlink" title="guess"></a>guess</h3><ul>
<li><p>附件程序是一个猜数字游戏，用IDA打开，通过字符串表的关键数据”You are right!\n”可以快速定位到main函数的位置</p>
<p><img src="/../images/image-20250907190954175-1760193218429-33.png" alt="关键数据"></p>
</li>
<li><p>main函数F5反编译不了，sp value报错，说明有花指令。把栈指针勾选上，会发现栈帧突变的位置：</p>
<p><img src="/../images/image-20250907191116300-1760193218429-36.png" alt="栈帧突变"></p>
<p>栈帧改变太多，明显不对，把sub rsp, rax给nop掉。然后可以发现函数末尾栈帧会有点问题：</p>
<p><img src="/../images/image-20250907191353142-1760193218429-37.png" alt="函数末尾栈帧"></p>
<p>把add rsp, 1428h也给nop掉，这样main函数基本上可以反编译了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//优化后的main函数</span><br><span class="hljs-comment">// bad sp value at call has been detected, the output may be wrong!</span><br><span class="hljs-function"><span class="hljs-type">int</span> __fastcall <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">bool</span> v3; <span class="hljs-comment">// dl</span><br>  std::ostream *v4; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// eax</span><br>  _QWORD *v6; <span class="hljs-comment">// rax</span><br>  std::ostream *v8; <span class="hljs-comment">// rax</span><br>  __int64 v9; <span class="hljs-comment">// rax</span><br>  __int64 v10; <span class="hljs-comment">// rbx</span><br>  std::ostream *v11; <span class="hljs-comment">// rax</span><br>  std::ostream *v12; <span class="hljs-comment">// rax</span><br>  std::ostream *v13; <span class="hljs-comment">// rax</span><br>  std::ostream *v14; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n0x64; <span class="hljs-comment">// [rsp+2Ch] [rbp-54h]</span><br>  _BYTE v17[<span class="hljs-number">2512</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-50h] BYREF</span><br>  _BYTE v18[<span class="hljs-number">2512</span>]; <span class="hljs-comment">// [rsp+A00h] [rbp+980h] BYREF</span><br>  _BYTE v19[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+13D0h] [rbp+1350h] BYREF</span><br>  _BYTE v20[<span class="hljs-number">40</span>]; <span class="hljs-comment">// [rsp+13F0h] [rbp+1370h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n0x64_1; <span class="hljs-comment">// [rsp+1418h] [rbp+1398h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+141Ch] [rbp+139Ch]</span><br><br>  _main(argc, argv, envp);<br>  std::ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0LL</span>, v3);<br>  std::ios::<span class="hljs-built_in">tie</span>((<span class="hljs-type">char</span> *)in + <span class="hljs-number">16</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">cout</span>(out, <span class="hljs-string">&quot;Welcome to MoeCTF 2025!\n&quot;</span>);<br>  <span class="hljs-built_in">cout</span>(out, <span class="hljs-string">&quot;Let&#x27;s play a game!\n&quot;</span>);<br>  <span class="hljs-built_in">cout</span>(out, <span class="hljs-string">&quot;I have a secret number between 0 and 99, and you can guess it 10 times.\n&quot;</span>);<br>  v4 = (std::ostream *)<span class="hljs-built_in">cout</span>(out, <span class="hljs-string">&quot;If you successly guessed it, I will give you the flag!&quot;</span>);<br>  <span class="hljs-built_in">endl</span>(v4);<br>  <span class="hljs-built_in">random_device</span>((std::random_device *)v18);<br>  v5 = <span class="hljs-built_in">random_operator</span>(v18);<br>  <span class="hljs-built_in">mersenne_twister_engine</span>(v17, v5);<br>  std::random_device::~<span class="hljs-built_in">random_device</span>((std::random_device *)v18);<br>  n0x64_1 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">mersenne_twister_engine_operator</span>(v17) % <span class="hljs-number">0x64</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; ++i )<br>  &#123;<br>    <span class="hljs-built_in">cout</span>(out, <span class="hljs-string">&quot;Please input your number: &quot;</span>);<br>    std::ostream::<span class="hljs-built_in">flush</span>(out);<br>    v6 = (_QWORD *)<span class="hljs-built_in">cin</span>(in);<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)std::ios::<span class="hljs-keyword">operator</span>!((<span class="hljs-type">char</span> *)v6 + *(_QWORD *)(*v6 - <span class="hljs-number">24LL</span>)) || n0x64 &gt;= <span class="hljs-number">0x64</span> )<br>    &#123;<br>      v8 = (std::ostream *)<span class="hljs-built_in">cout</span>(out, <span class="hljs-string">&quot;Invalid input&quot;</span>);<br>      <span class="hljs-built_in">endl</span>(v8);<br>      std::ios::<span class="hljs-built_in">clear</span>((<span class="hljs-type">char</span> *)in + <span class="hljs-number">16</span>, <span class="hljs-number">0LL</span>);<br>      v9 = std::numeric_limits&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt;::<span class="hljs-built_in">max</span>();<br>      std::istream::<span class="hljs-built_in">ignore</span>(in, v9, <span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( n0x64_1 == n0x64 )<br>      &#123;<br>        <span class="hljs-built_in">cout</span>(out, <span class="hljs-string">&quot;You are right!\n&quot;</span>);<br>        v10 = <span class="hljs-built_in">cout</span>(out, <span class="hljs-string">&quot;The flag is moectf&#123;&quot;</span>);<br>        <span class="hljs-built_in">hex_to_binary</span>(v20, &amp;enc[abi:cxx11]);<br>        <span class="hljs-built_in">rc4_decrypt</span>(v19, v20, &amp;key[abi:cxx11]);<br>        v11 = (std::ostream *)std::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;<span class="hljs-type">char</span>&gt;(v10, v19);<br>        v12 = (std::ostream *)<span class="hljs-built_in">cout</span>(v11, <span class="hljs-string">&quot;&#125;.&quot;</span>);<br>        <span class="hljs-built_in">endl</span>(v12);<br>        std::string::~<span class="hljs-built_in">string</span>(v19);<br>        std::string::~<span class="hljs-built_in">string</span>(v20);<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      v13 = (std::ostream *)<span class="hljs-built_in">cout</span>(out, <span class="hljs-string">&quot;That&#x27;s not right...&quot;</span>);<br>      <span class="hljs-built_in">endl</span>(v13);<br>    &#125;<br>  &#125;<br>  v14 = (std::ostream *)<span class="hljs-built_in">cout</span>(out, <span class="hljs-string">&quot;Thanks for your playing!&quot;</span>);<br>  <span class="hljs-built_in">endl</span>(v14);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>可以看出，main函数的逻辑是先获取一个数字输入，然后经过和随机数有关的各种操作来判断是否符合条件，符合条件就输出flag。既然可以直接输出flag，不妨就动调改变判断结果直接得到flag。找到和输出有关的判断逻辑的位置：</p>
<p><img src="/../images/image-20250907193423247-1760193218429-39.png" alt="跳转的关键逻辑"></p>
<p>动调程序步过此处后，改一下ZF即可让程序跳到”You are right!\n”处获得flag输出。好在本题没有给动调挖坑，可以直接得到flag：</p>
<p><img src="/../images/image-20250907193656681-1760193218429-40.png" alt="得到flag"></p>
</li>
</ul>
<h3 id="rusty-sudoku"><a href="#rusty-sudoku" class="headerlink" title="rusty_sudoku"></a>rusty_sudoku</h3><ul>
<li><p>rust语言的数独游戏。运行附件程序，提示逆向分析程序找到数独并求解。用IDA打开，结合AI辅助优化后main函数长这样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">rusty_sudoku::main</span><span class="hljs-params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="hljs-function"></span>&#123;<br>  __int128 *md5_ctx_prt; <span class="hljs-comment">// rdi</span><br>  __int64 temp; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">size_t</span> cupy_size; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">unsigned</span> __int8 *input_end; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-type">unsigned</span> __int8 *trimmed_length; <span class="hljs-comment">// rsi</span><br>  <span class="hljs-type">unsigned</span> __int8 *trimmed_start; <span class="hljs-comment">// r9</span><br>  <span class="hljs-type">unsigned</span> __int8 *input_ptr; <span class="hljs-comment">// r8</span><br>  <span class="hljs-type">char</span> is_whitespace; <span class="hljs-comment">// r11</span><br>  <span class="hljs-type">unsigned</span> __int8 *current_ptr; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">unsigned</span> __int8 *trimmed_count; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> codepoint; <span class="hljs-comment">// r11d</span><br>  <span class="hljs-type">int</span> v14; <span class="hljs-comment">// r9d</span><br>  <span class="hljs-type">int</span> temp_val1; <span class="hljs-comment">// r14d</span><br>  <span class="hljs-type">int</span> temp_val2; <span class="hljs-comment">// ebp</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> high_byte; <span class="hljs-comment">// ebx</span><br>  __int64 alloc_result; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">char</span> is_whitespace2; <span class="hljs-comment">// bl</span><br>  <span class="hljs-type">unsigned</span> __int8 *end_ptr; <span class="hljs-comment">// r11</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> codepoint2; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">char</span> byte1; <span class="hljs-comment">// bl</span><br>  <span class="hljs-type">char</span> byte2; <span class="hljs-comment">// bp</span><br>  <span class="hljs-type">int</span> temp_val3; <span class="hljs-comment">// ebp</span><br>  <span class="hljs-type">int</span> temp_val4; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> high_byte2; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">size_t</span> actual_size; <span class="hljs-comment">// r15</span><br>  __int64 alloc_size; <span class="hljs-comment">// r14</span><br>  __int64 allocated_mem; <span class="hljs-comment">// rax</span><br>  __int64 expected_char; <span class="hljs-comment">// r9</span><br>  __int64 input_data; <span class="hljs-comment">// rdx</span><br>  __int64 index; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> user_char; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v34; <span class="hljs-comment">// edx</span><br>  <span class="hljs-type">int</span> temp_val5; <span class="hljs-comment">// r8d</span><br>  __int64 result; <span class="hljs-comment">// rax</span><br>  __int64 user_index; <span class="hljs-comment">// rax</span><br>  __int64 sudoku_index; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">int</span> user_codepointer; <span class="hljs-comment">// r8d</span><br>  <span class="hljs-type">int</span> v40; <span class="hljs-comment">// r9d</span><br>  <span class="hljs-type">int</span> temp_val6; <span class="hljs-comment">// r11d</span><br>  <span class="hljs-type">int</span> temp_val7; <span class="hljs-comment">// r10d</span><br>  <span class="hljs-type">int</span> v43; <span class="hljs-comment">// r10d</span><br>  <span class="hljs-type">int</span> temp_val8; <span class="hljs-comment">// ebp</span><br>  <span class="hljs-type">int</span> temp_val9; <span class="hljs-comment">// r11d</span><br>  __int64 temp_arg1; <span class="hljs-comment">// rdx</span><br>  __int64 temp_arg2; <span class="hljs-comment">// rdx</span><br>  __int64 temp_arg3; <span class="hljs-comment">// rdx</span><br>  _BYTE buf[<span class="hljs-number">88</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-178h] BYREF</span><br>  __int128 fmt_arg1; <span class="hljs-comment">// [rsp+90h] [rbp-118h] BYREF</span><br>  __int128 fmt_arg2; <span class="hljs-comment">// [rsp+A0h] [rbp-108h]</span><br>  __int128 fmt_arg3; <span class="hljs-comment">// [rsp+B0h] [rbp-F8h]</span><br>  __int128 fmt_arg4; <span class="hljs-comment">// [rsp+C0h] [rbp-E8h]</span><br>  __int128 fmt_arg5; <span class="hljs-comment">// [rsp+D0h] [rbp-D8h]</span><br>  __int64 fmt_arg6; <span class="hljs-comment">// [rsp+E0h] [rbp-C8h]</span><br>  _OWORD stdin_handle[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [rsp+F0h] [rbp-B8h] BYREF</span><br>  <span class="hljs-type">char</span> board_data; <span class="hljs-comment">// [rsp+140h] [rbp-68h]</span><br>  _BYTE md5_hash[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+150h] [rbp-58h] BYREF</span><br><br>  *buf = &amp;welcome;                              <span class="hljs-comment">// &quot;Welcome to MoeCTF 2025!\nPlease **find** my sudoku and fill it correctly.\nAnd then I will give you the flag.\nInput your answer in one line (without spaces).\nfor example, 854219763397865421261473985785126394649538172132947856926384517513792648478651239 represents:\n854|219|763\n397|865|421\n261|473|985\n-----------\n785|126|394\n649|538|172\n132|947|856\n-----------\n926|384|517\n513|792|648\n478|651|239\n\nYour answer:\n&quot;</span><br>  *&amp;buf[<span class="hljs-number">8</span>] = <span class="hljs-number">1LL</span>;<br>  *&amp;buf[<span class="hljs-number">16</span>] = <span class="hljs-number">8LL</span>;<br>  *&amp;buf[<span class="hljs-number">24</span>] = <span class="hljs-number">0LL</span>;<br>  std::io::stdio::_print(a1, a2, a3, buf);<br>  *buf = <span class="hljs-number">0LL</span>;<br>  *&amp;buf[<span class="hljs-number">8</span>] = <span class="hljs-number">1LL</span>;<br>  *&amp;buf[<span class="hljs-number">16</span>] = <span class="hljs-number">0LL</span>;<br>  *&amp;stdin_handle[<span class="hljs-number">0</span>] = std::io::stdio::<span class="hljs-built_in">stdin</span>();<br>  md5_ctx_prt = stdin_handle;<br>  <span class="hljs-keyword">if</span> ( (std::io::stdio::Stdin::<span class="hljs-built_in">read_line</span>(stdin_handle, a2, buf, stdin_handle) &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> )<br>  &#123;<br>    *&amp;fmt_arg1 = temp;<br>    core::result::<span class="hljs-built_in">unwrap_failed</span>(stdin_handle, a2, <span class="hljs-number">14</span>, <span class="hljs-string">&quot;Invalid input.src\\main.rs&quot;</span>, &amp;fmt_arg1, &amp;off_7FF6BF752050);<br>  &#125;<br>  cupy_size = *&amp;buf[<span class="hljs-number">8</span>];<br>  input_end = (*&amp;buf[<span class="hljs-number">8</span>] + *&amp;buf[<span class="hljs-number">16</span>]);<br>  <span class="hljs-keyword">if</span> ( *&amp;buf[<span class="hljs-number">16</span>] )<br>  &#123;<br>    trimmed_length = <span class="hljs-number">0LL</span>;<br>    trimmed_start = <span class="hljs-number">0LL</span>;<br>    input_ptr = *&amp;buf[<span class="hljs-number">8</span>];<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      current_ptr = input_ptr;<br>      trimmed_count = trimmed_start;<br>      codepoint = *input_ptr;<br>      <span class="hljs-keyword">if</span> ( (codepoint &amp; <span class="hljs-number">0x80u</span>) != <span class="hljs-number">0</span> )<br>      &#123;<br>        v14 = codepoint &amp; <span class="hljs-number">0x1F</span>;<br>        temp_val1 = input_ptr[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3F</span>;<br>        <span class="hljs-keyword">if</span> ( codepoint &lt;= <span class="hljs-number">0xDFu</span> )<br>        &#123;<br>          input_ptr += <span class="hljs-number">2</span>;<br>          codepoint = temp_val1 | (v14 &lt;&lt; <span class="hljs-number">6</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          temp_val2 = (temp_val1 &lt;&lt; <span class="hljs-number">6</span>) | input_ptr[<span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x3F</span>;<br>          <span class="hljs-keyword">if</span> ( codepoint &lt; <span class="hljs-number">0xF0u</span> )<br>          &#123;<br>            input_ptr += <span class="hljs-number">3</span>;<br>            codepoint = (v14 &lt;&lt; <span class="hljs-number">12</span>) | temp_val2;<br>          &#125;<br>          <span class="hljs-keyword">else</span><br>          &#123;<br>            input_ptr += <span class="hljs-number">4</span>;<br>            codepoint = ((codepoint &amp; <span class="hljs-number">7</span>) &lt;&lt; <span class="hljs-number">18</span>) | (temp_val2 &lt;&lt; <span class="hljs-number">6</span>) | current_ptr[<span class="hljs-number">3</span>] &amp; <span class="hljs-number">0x3F</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        ++input_ptr;<br>      &#125;<br>      trimmed_start = &amp;trimmed_count[input_ptr - current_ptr];<br>      <span class="hljs-keyword">if</span> ( codepoint - <span class="hljs-number">9</span> &gt;= <span class="hljs-number">5</span> &amp;&amp; codepoint != <span class="hljs-number">32</span> )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( codepoint &lt; <span class="hljs-number">0x80</span> )<br>          <span class="hljs-keyword">goto</span> LABEL_27;<br>        high_byte = codepoint &gt;&gt; <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">if</span> ( codepoint &gt;&gt; <span class="hljs-number">8</span> &gt; <span class="hljs-number">0x1F</span> )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( high_byte == <span class="hljs-number">32</span> )<br>          &#123;<br>            is_whitespace = *(core::unicode::unicode_data::white_space::WHITESPACE_MAP + codepoint) &gt;&gt; <span class="hljs-number">1</span>;<br>          &#125;<br>          <span class="hljs-keyword">else</span><br>          &#123;<br>            <span class="hljs-keyword">if</span> ( high_byte != <span class="hljs-number">48</span> )<br>              <span class="hljs-keyword">goto</span> LABEL_27;<br>            is_whitespace = codepoint == <span class="hljs-number">12288</span>;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( high_byte )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( high_byte != <span class="hljs-number">22</span> )<br>            <span class="hljs-keyword">goto</span> LABEL_27;<br>          is_whitespace = codepoint == <span class="hljs-number">5760</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          is_whitespace = *(core::unicode::unicode_data::white_space::WHITESPACE_MAP + codepoint);<br>        &#125;<br>        <span class="hljs-keyword">if</span> ( (is_whitespace &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>          <span class="hljs-keyword">goto</span> LABEL_27;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( input_ptr == input_end )<br>      &#123;<br>        alloc_result = <span class="hljs-number">1LL</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_58;<br>      &#125;<br>    &#125;<br>  &#125;<br>  trimmed_start = <span class="hljs-number">0LL</span>;<br>  input_ptr = *&amp;buf[<span class="hljs-number">8</span>];<br>  trimmed_count = <span class="hljs-number">0LL</span>;<br>LABEL_27:<br>  <span class="hljs-keyword">if</span> ( input_ptr == input_end )<br>    <span class="hljs-keyword">goto</span> LABEL_53;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    end_ptr = input_end;<br>    codepoint2 = *(input_end - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> ( (codepoint2 &amp; <span class="hljs-number">0x80000000</span>) != <span class="hljs-number">0</span> )<br>    &#123;<br>      byte1 = *(input_end - <span class="hljs-number">2</span>);<br>      <span class="hljs-keyword">if</span> ( byte1 &gt;= <span class="hljs-number">-64</span> )<br>      &#123;<br>        input_end -= <span class="hljs-number">2</span>;<br>        temp_val4 = byte1 &amp; <span class="hljs-number">0x1F</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        byte2 = *(input_end - <span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">if</span> ( byte2 &gt;= <span class="hljs-number">-64</span> )<br>        &#123;<br>          input_end -= <span class="hljs-number">3</span>;<br>          temp_val3 = byte2 &amp; <span class="hljs-number">0xF</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          input_end -= <span class="hljs-number">4</span>;<br>          temp_val3 = ((*(end_ptr - <span class="hljs-number">4</span>) &amp; <span class="hljs-number">7</span>) &lt;&lt; <span class="hljs-number">6</span>) | byte2 &amp; <span class="hljs-number">0x3F</span>;<br>        &#125;<br>        temp_val4 = (temp_val3 &lt;&lt; <span class="hljs-number">6</span>) | byte1 &amp; <span class="hljs-number">0x3F</span>;<br>      &#125;<br>      codepoint2 = (temp_val4 &lt;&lt; <span class="hljs-number">6</span>) | codepoint2 &amp; <span class="hljs-number">0x3F</span>;<br>      <span class="hljs-keyword">if</span> ( codepoint2 - <span class="hljs-number">9</span> &lt; <span class="hljs-number">5</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_31;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      --input_end;<br>      <span class="hljs-keyword">if</span> ( codepoint2 - <span class="hljs-number">9</span> &lt; <span class="hljs-number">5</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_31;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( codepoint2 == <span class="hljs-number">32</span> )<br>      <span class="hljs-keyword">goto</span> LABEL_31;<br>    <span class="hljs-keyword">if</span> ( codepoint2 &lt; <span class="hljs-number">0x80</span> )<br>      <span class="hljs-keyword">break</span>;<br>    high_byte2 = codepoint2 &gt;&gt; <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">if</span> ( codepoint2 &gt;&gt; <span class="hljs-number">8</span> &lt;= <span class="hljs-number">0x1F</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( high_byte2 )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( high_byte2 != <span class="hljs-number">22</span> )<br>          <span class="hljs-keyword">break</span>;<br>        is_whitespace2 = codepoint2 == <span class="hljs-number">5760</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        is_whitespace2 = *(core::unicode::unicode_data::white_space::WHITESPACE_MAP + codepoint2);<br>      &#125;<br>      <span class="hljs-keyword">goto</span> LABEL_30;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( high_byte2 == <span class="hljs-number">32</span> )<br>    &#123;<br>      is_whitespace2 = *(core::unicode::unicode_data::white_space::WHITESPACE_MAP + codepoint2) &gt;&gt; <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">goto</span> LABEL_30;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( high_byte2 != <span class="hljs-number">48</span> )<br>      <span class="hljs-keyword">break</span>;<br>    is_whitespace2 = codepoint2 == <span class="hljs-number">12288</span>;<br>LABEL_30:<br>    <span class="hljs-keyword">if</span> ( (is_whitespace2 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>      <span class="hljs-keyword">break</span>;<br>LABEL_31:<br>    <span class="hljs-keyword">if</span> ( input_ptr == input_end )<br>      <span class="hljs-keyword">goto</span> LABEL_53;<br>  &#125;<br>  trimmed_start = &amp;end_ptr[trimmed_start - input_ptr];<br>LABEL_53:<br>  trimmed_length = (trimmed_start - trimmed_count);<br>  <span class="hljs-keyword">if</span> ( trimmed_start - trimmed_count &lt; <span class="hljs-number">0</span> )<br>  &#123;<br>    alloc_size = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-keyword">goto</span> LABEL_110;<br>  &#125;<br>  cupy_size = &amp;trimmed_count[*&amp;buf[<span class="hljs-number">8</span>]];<br>  <span class="hljs-keyword">if</span> ( trimmed_start == trimmed_count )<br>  &#123;<br>    alloc_result = <span class="hljs-number">1LL</span>;<br>    trimmed_length = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-keyword">goto</span> LABEL_58;<br>  &#125;<br>  actual_size = &amp;trimmed_count[*&amp;buf[<span class="hljs-number">8</span>]];<br>  <span class="hljs-built_in">RNvCs73fAdSrgOJL_7___rustc35___rust_no_alloc_shim_is_unstable_v2</span>(stdin_handle, trimmed_length);<br>  alloc_size = <span class="hljs-number">1LL</span>;<br>  allocated_mem = __rustc::__rust_alloc(stdin_handle, trimmed_length, <span class="hljs-number">1LL</span>, trimmed_length);<br>  <span class="hljs-keyword">if</span> ( !allocated_mem )<br>LABEL_110:<br>    alloc::raw_vec::<span class="hljs-built_in">handle_error</span>(stdin_handle, trimmed_length, trimmed_length, alloc_size, &amp;off_7FF6BF7521D8);<span class="hljs-comment">// &quot;/rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2\\library\\alloc\\src\\slice.rs&quot;</span><br>  alloc_result = allocated_mem;<br>  cupy_size = actual_size;<br>LABEL_58:<br>  <span class="hljs-built_in">memcpy</span>(stdin_handle, trimmed_length, cupy_size);<br>  input_data = *buf;<br>  <span class="hljs-keyword">if</span> ( *buf )<br>    __rustc::__rust_dealloc(stdin_handle, trimmed_length, *buf, *&amp;buf[<span class="hljs-number">8</span>], <span class="hljs-number">1LL</span>);<br>  <span class="hljs-keyword">if</span> ( trimmed_length == <span class="hljs-number">81</span> )<br>  &#123;<br>    index = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-keyword">while</span> ( index != <span class="hljs-number">81</span> )<br>    &#123;<br>      user_char = *(alloc_result + index);<br>      <span class="hljs-keyword">if</span> ( (user_char &amp; <span class="hljs-number">0x80u</span>) == <span class="hljs-number">0</span> )<br>      &#123;<br>        ++index;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        v34 = user_char &amp; <span class="hljs-number">0x1F</span>;<br>        expected_char = *(alloc_result + index + <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0x3F</span>;<br>        <span class="hljs-keyword">if</span> ( user_char &lt;= <span class="hljs-number">0xDFu</span> )<br>        &#123;<br>          index += <span class="hljs-number">2LL</span>;<br>          input_data = expected_char | (v34 &lt;&lt; <span class="hljs-number">6</span>);<br>          user_char = input_data;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          expected_char = (expected_char &lt;&lt; <span class="hljs-number">6</span>);<br>          temp_val5 = expected_char | *(alloc_result + index + <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0x3F</span>;<br>          <span class="hljs-keyword">if</span> ( user_char &lt; <span class="hljs-number">0xF0u</span> )<br>          &#123;<br>            index += <span class="hljs-number">3LL</span>;<br>            input_data = (v34 &lt;&lt; <span class="hljs-number">12</span>);<br>            user_char = input_data | temp_val5;<br>          &#125;<br>          <span class="hljs-keyword">else</span><br>          &#123;<br>            input_data = (user_char &amp; <span class="hljs-number">7</span>) &lt;&lt; <span class="hljs-number">18</span>;<br>            user_char = input_data | (temp_val5 &lt;&lt; <span class="hljs-number">6</span>) | *(alloc_result + index + <span class="hljs-number">3</span>) &amp; <span class="hljs-number">0x3F</span>;<br>            <span class="hljs-keyword">if</span> ( user_char == <span class="hljs-number">1114112</span> )<br>              <span class="hljs-keyword">break</span>;<br>            index += <span class="hljs-number">4LL</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( (user_char - <span class="hljs-number">58</span>) &lt; <span class="hljs-number">0xFFFFFFF6</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_72;<br>    &#125;<br>    user_index = <span class="hljs-number">0LL</span>;<br>    sudoku_index = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-keyword">while</span> ( user_index != <span class="hljs-number">81</span> )<br>    &#123;<br>      user_codepointer = *(alloc_result + user_index);<br>      <span class="hljs-keyword">if</span> ( (user_codepointer &amp; <span class="hljs-number">0x80u</span>) != <span class="hljs-number">0</span> )<br>      &#123;<br>        v40 = user_codepointer &amp; <span class="hljs-number">0x1F</span>;<br>        temp_val6 = *(alloc_result + user_index + <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0x3F</span>;<br>        <span class="hljs-keyword">if</span> ( user_codepointer &lt;= <span class="hljs-number">0xDFu</span> )<br>        &#123;<br>          user_index += <span class="hljs-number">2LL</span>;<br>          expected_char = temp_val6 | (v40 &lt;&lt; <span class="hljs-number">6</span>);<br>          user_codepointer = expected_char;<br>          <span class="hljs-keyword">if</span> ( sudoku_index == <span class="hljs-number">81</span> )<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          temp_val7 = (temp_val6 &lt;&lt; <span class="hljs-number">6</span>) | *(alloc_result + user_index + <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0x3F</span>;<br>          <span class="hljs-keyword">if</span> ( user_codepointer &lt; <span class="hljs-number">0xF0u</span> )<br>          &#123;<br>            user_index += <span class="hljs-number">3LL</span>;<br>            expected_char = (v40 &lt;&lt; <span class="hljs-number">12</span>);<br>            user_codepointer = expected_char | temp_val7;<br>            <span class="hljs-keyword">if</span> ( sudoku_index == <span class="hljs-number">81</span> )<br>              <span class="hljs-keyword">break</span>;<br>          &#125;<br>          <span class="hljs-keyword">else</span><br>          &#123;<br>            expected_char = (user_codepointer &amp; <span class="hljs-number">7</span>) &lt;&lt; <span class="hljs-number">18</span>;<br>            user_codepointer = expected_char | (temp_val7 &lt;&lt; <span class="hljs-number">6</span>) | *(alloc_result + user_index + <span class="hljs-number">3</span>) &amp; <span class="hljs-number">0x3F</span>;<br>            <span class="hljs-keyword">if</span> ( user_codepointer == <span class="hljs-number">1114112</span> )<br>              <span class="hljs-keyword">break</span>;<br>            user_index += <span class="hljs-number">4LL</span>;<br>            <span class="hljs-keyword">if</span> ( sudoku_index == <span class="hljs-number">81</span> )<br>              <span class="hljs-keyword">break</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        ++user_index;<br>        <span class="hljs-keyword">if</span> ( sudoku_index == <span class="hljs-number">81</span> )<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>      expected_char = sudoku[sudoku_index];<br>      <span class="hljs-keyword">if</span> ( (expected_char &amp; <span class="hljs-number">0x80u</span>) != <span class="hljs-number">0LL</span> )<br>      &#123;<br>        v43 = expected_char &amp; <span class="hljs-number">0x1F</span>;<br>        temp_val8 = sudoku[sudoku_index + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3F</span>;<br>        <span class="hljs-keyword">if</span> ( expected_char &lt;= <span class="hljs-number">0xDFu</span> )<br>        &#123;<br>          sudoku_index += <span class="hljs-number">2LL</span>;<br>          expected_char = temp_val8 | (v43 &lt;&lt; <span class="hljs-number">6</span>);<br>          <span class="hljs-keyword">if</span> ( user_codepointer == <span class="hljs-number">1114112</span> )<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          temp_val9 = (temp_val8 &lt;&lt; <span class="hljs-number">6</span>) | sudoku[sudoku_index + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x3F</span>;<br>          <span class="hljs-keyword">if</span> ( expected_char &lt; <span class="hljs-number">0xF0u</span> )<br>          &#123;<br>            sudoku_index += <span class="hljs-number">3LL</span>;<br>            expected_char = (v43 &lt;&lt; <span class="hljs-number">12</span>) | temp_val9;<br>            <span class="hljs-keyword">if</span> ( user_codepointer == <span class="hljs-number">1114112</span> )<br>              <span class="hljs-keyword">break</span>;<br>          &#125;<br>          <span class="hljs-keyword">else</span><br>          &#123;<br>            expected_char = ((expected_char &amp; <span class="hljs-number">7</span>) &lt;&lt; <span class="hljs-number">18</span>) | (temp_val9 &lt;&lt; <span class="hljs-number">6</span>) | sudoku[sudoku_index + <span class="hljs-number">3</span>] &amp; <span class="hljs-number">0x3Fu</span>;<br>            <span class="hljs-keyword">if</span> ( expected_char == <span class="hljs-number">1114112</span> )<br>              <span class="hljs-keyword">break</span>;<br>            sudoku_index += <span class="hljs-number">4LL</span>;<br>            <span class="hljs-keyword">if</span> ( user_codepointer == <span class="hljs-number">1114112</span> )<br>              <span class="hljs-keyword">break</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        ++sudoku_index;<br>        <span class="hljs-keyword">if</span> ( user_codepointer == <span class="hljs-number">1114112</span> )<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( expected_char != <span class="hljs-number">46</span> &amp;&amp; user_codepointer != expected_char )<br>      &#123;<br>        *&amp;stdin_handle[<span class="hljs-number">0</span>] = aYouShouldNotCh;<br>        *(&amp;stdin_handle[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>) = <span class="hljs-number">32LL</span>;<br>        *&amp;fmt_arg1 = stdin_handle;<br>        *(&amp;fmt_arg1 + <span class="hljs-number">1</span>) = &lt;&amp;T_as_core::fmt::Display&gt;::fmt;<br>        *buf = &amp;unk_7FF6BF<span class="hljs-number">7524E0</span>;<br>        *&amp;buf[<span class="hljs-number">8</span>] = <span class="hljs-number">2LL</span>;<br>        *&amp;buf[<span class="hljs-number">32</span>] = <span class="hljs-number">0LL</span>;<br>        *&amp;buf[<span class="hljs-number">16</span>] = &amp;fmt_arg1;<br>        *&amp;buf[<span class="hljs-number">24</span>] = <span class="hljs-number">1LL</span>;<br>        result = std::io::stdio::_print(stdin_handle, <span class="hljs-number">81LL</span>, sudoku_index, buf);<br>        <span class="hljs-keyword">goto</span> LABEL_73;<br>      &#125;<br>    &#125;<br>    sudoku::board::sudoku::Sudoku::<span class="hljs-built_in">from_str_line</span>(stdin_handle, <span class="hljs-number">81LL</span>, alloc_result, buf, <span class="hljs-number">81LL</span>, expected_char);<br>    <span class="hljs-keyword">if</span> ( buf[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span> )<br>    &#123;<br>      *&amp;fmt_arg1 = *&amp;buf[<span class="hljs-number">4</span>];<br>      core::result::<span class="hljs-built_in">unwrap_failed</span>(<br>        stdin_handle,<br>        <span class="hljs-number">81</span>,<br>        <span class="hljs-number">43</span>,<br>        <span class="hljs-string">&quot;called `Result::unwrap()` on an `Err` value&quot;</span>,<br>        &amp;fmt_arg1,<br>        &amp;unk_7FF6BF752070);<br>    &#125;<br>    board_data = buf[<span class="hljs-number">81</span>];<br>    stdin_handle[<span class="hljs-number">4</span>] = *&amp;buf[<span class="hljs-number">65</span>];<br>    stdin_handle[<span class="hljs-number">3</span>] = *&amp;buf[<span class="hljs-number">49</span>];<br>    stdin_handle[<span class="hljs-number">2</span>] = *&amp;buf[<span class="hljs-number">33</span>];<br>    stdin_handle[<span class="hljs-number">1</span>] = *&amp;buf[<span class="hljs-number">17</span>];<br>    stdin_handle[<span class="hljs-number">0</span>] = *&amp;buf[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> ( sudoku::board::sudoku::Sudoku::<span class="hljs-built_in">is_solved</span>(stdin_handle, <span class="hljs-number">81LL</span>, temp_arg1, stdin_handle) )<br>    &#123;<br>      *buf = &amp;off_7FF6BF752490;                 <span class="hljs-comment">// &quot;Congratulation!\n&quot;</span><br>      *&amp;buf[<span class="hljs-number">8</span>] = <span class="hljs-number">1LL</span>;<br>      *&amp;buf[<span class="hljs-number">16</span>] = <span class="hljs-number">8LL</span>;<br>      *&amp;buf[<span class="hljs-number">24</span>] = <span class="hljs-number">0LL</span>;<br>      std::io::stdio::_print(stdin_handle, <span class="hljs-number">81LL</span>, temp_arg2, buf);<br>      fmt_arg4 = <span class="hljs-number">0LL</span>;<br>      fmt_arg3 = <span class="hljs-number">0LL</span>;<br>      fmt_arg2 = <span class="hljs-number">0LL</span>;<br>      fmt_arg1 = <span class="hljs-number">0LL</span>;<br>      fmt_arg6 = <span class="hljs-number">0LL</span>;<br>      fmt_arg5 = ::fmt_arg5;<br>      md5_ctx_prt = &amp;fmt_arg1;<br>      md5::<span class="hljs-built_in">consume</span>(&amp;fmt_arg1, <span class="hljs-number">81LL</span>, alloc_result, &amp;fmt_arg1, <span class="hljs-number">81LL</span>);<br>      *&amp;buf[<span class="hljs-number">80</span>] = fmt_arg6;<br>      *&amp;buf[<span class="hljs-number">64</span>] = fmt_arg5;<br>      *&amp;buf[<span class="hljs-number">48</span>] = fmt_arg4;<br>      *&amp;buf[<span class="hljs-number">32</span>] = fmt_arg3;<br>      *&amp;buf[<span class="hljs-number">16</span>] = fmt_arg2;<br>      *buf = fmt_arg1;<br>      md5::Context::<span class="hljs-built_in">finalize</span>(&amp;fmt_arg1, <span class="hljs-number">81LL</span>, buf, md5_hash);<br>      *&amp;fmt_arg1 = md5_hash;<br>      *(&amp;fmt_arg1 + <span class="hljs-number">1</span>) = &lt;md5::Digest_as_core::fmt::LowerHex&gt;::fmt;<br>      *buf = &amp;YourFlagIs;                       <span class="hljs-comment">// &quot;Your flag is moectf&#123;&quot;</span><br>      *&amp;buf[<span class="hljs-number">8</span>] = <span class="hljs-number">2LL</span>;<br>      *&amp;buf[<span class="hljs-number">32</span>] = <span class="hljs-number">0LL</span>;<br>      *&amp;buf[<span class="hljs-number">16</span>] = &amp;fmt_arg1;<br>      *&amp;buf[<span class="hljs-number">24</span>] = <span class="hljs-number">1LL</span>;<br>      result = std::io::stdio::_print(&amp;fmt_arg1, <span class="hljs-number">81LL</span>, temp_arg3, buf);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      *buf = &amp;TryAgain;                         <span class="hljs-comment">// &quot;try again~\n&quot;</span><br>      *&amp;buf[<span class="hljs-number">8</span>] = <span class="hljs-number">1LL</span>;<br>      *&amp;buf[<span class="hljs-number">16</span>] = <span class="hljs-number">8LL</span>;<br>      *&amp;buf[<span class="hljs-number">24</span>] = <span class="hljs-number">0LL</span>;<br>      result = std::io::stdio::_print(stdin_handle, <span class="hljs-number">81LL</span>, temp_arg2, buf);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>LABEL_72:<br>    *buf = &amp;Invalid;                            <span class="hljs-comment">// &quot;Invalid Solution.\n&quot;</span><br>    *&amp;buf[<span class="hljs-number">8</span>] = <span class="hljs-number">1LL</span>;<br>    *&amp;buf[<span class="hljs-number">16</span>] = <span class="hljs-number">8LL</span>;<br>    *&amp;buf[<span class="hljs-number">24</span>] = <span class="hljs-number">0LL</span>;<br>    result = std::io::stdio::_print(stdin_handle, trimmed_length, input_data, buf);<br>  &#125;<br>LABEL_73:<br>  <span class="hljs-keyword">if</span> ( trimmed_length )<br>    <span class="hljs-keyword">return</span> __rustc::__rust_dealloc(md5_ctx_prt, trimmed_length, trimmed_length, alloc_result, <span class="hljs-number">1LL</span>);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>rust逆向的伪代码不好分析，但是作为数独游戏，只需要找到数独就可以了，可以shift+F12在字符串表窗口找到可疑的数据：</p>
<p><img src="/../images/image-20250910112618179-1760193218429-38.png" alt="可疑的数据"></p>
</li>
<li><p>结合伪代码，可以分析出程序接受用户输入的已求解的数独后会进行检验，若数独正确且求解成功，会输出flag，flag是md5加密后的数独。所以直接利用程序得到flag即可。网上找一个数独求解工具求解：<a href="https://sudoku.vc/zh-CN/sudoku-solver">数独求解器 - 免费在线数独方案解题工具</a>（建议不要直接把数独复制给AI求解，因为AI会乱改数据，笔者卡在求解这一步好久😅）</p>
<p><img src="/../images/image-20250910112549164-1760193218429-42.png" alt="求解数独"></p>
</li>
<li><p>IDA动态调试（直接运行程序输入正确数独貌似会闪退），把解出来的数独按提示的顺序输入，就可以得到flag：</p>
<p><img src="/../images/image-20250910112516212-1760193218429-41.png" alt="得到flag"></p>
</li>
</ul>
<h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="ezandroid"><a href="#ezandroid" class="headerlink" title="ezandroid"></a>ezandroid</h3><ul>
<li><p>附件apk用JEB打开，发现逻辑主要是将输入的文本base64加密后进行比较</p>
<p><img src="/../images/image-20250907203522833-1760193218429-43.png" alt="函数逻辑"></p>
</li>
<li><p>cyberchef一把梭</p>
<p><img src="/../images/image-20250907203551932-1760193218429-44.png" alt="cyberchef一把梭"></p>
</li>
</ul>
<h3 id="ezandroid-pro"><a href="#ezandroid-pro" class="headerlink" title="ezandroid.pro"></a>ezandroid.pro</h3><ul>
<li><p>附件apk用JEB打开，可以发现使用了一个从native层ezandroidpro库载入的函数check，由check判断输入是否正确</p>
<p><img src="/../images/image-20250907212718438-1760193218429-45.png" alt="JEB反编译结果"></p>
</li>
<li><p>把apk解压，在IDA中打开lib&#x2F;armeabi-v7a&#x2F;libezandroidpro.so，在Exports界面找到Java_com_example_ezandroidpro_MainActivity_check函数，即apk载入的check函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> __fastcall <span class="hljs-title">Java_com_example_ezandroidpro_MainActivity_check</span><span class="hljs-params">(<span class="hljs-type">int</span> JENV, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3)</span></span><br><span class="hljs-function"></span>&#123;<br>  _BOOL4 ret; <span class="hljs-comment">// r5</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *flag; <span class="hljs-comment">// r0</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src; <span class="hljs-comment">// r4</span><br>  <span class="hljs-type">size_t</span> length; <span class="hljs-comment">// r0</span><br>  <span class="hljs-type">size_t</span> n; <span class="hljs-comment">// r5</span><br>  <span class="hljs-type">char</span> *dest; <span class="hljs-comment">// r9</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v11; <span class="hljs-comment">// r10</span><br>  <span class="hljs-type">char</span> *str; <span class="hljs-comment">// r4</span><br>  <span class="hljs-type">int</span> n96; <span class="hljs-comment">// r2</span><br>  <span class="hljs-type">int</span> v14; <span class="hljs-comment">// r0</span><br>  <span class="hljs-type">unsigned</span> __int8 *v15; <span class="hljs-comment">// r2</span><br>  <span class="hljs-type">int</span> v16; <span class="hljs-comment">// r1</span><br>  <span class="hljs-type">char</span> *_str; <span class="hljs-comment">// r3</span><br>  <span class="hljs-type">void</span> *s1_1; <span class="hljs-comment">// r6</span><br>  <span class="hljs-type">unsigned</span> __int8 v20; <span class="hljs-comment">// [sp+4h] [bp-44h] BYREF</span><br>  _BYTE v21[<span class="hljs-number">7</span>]; <span class="hljs-comment">// [sp+5h] [bp-43h] BYREF</span><br>  <span class="hljs-type">void</span> *s1; <span class="hljs-comment">// [sp+Ch] [bp-3Ch]</span><br>  _DWORD v23[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [sp+10h] [bp-38h] BYREF</span><br>  <span class="hljs-type">void</span> *key; <span class="hljs-comment">// [sp+18h] [bp-30h]</span><br>  _DWORD v25[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [sp+1Ch] [bp-2Ch] BYREF</span><br>  <span class="hljs-type">void</span> *dest_1; <span class="hljs-comment">// [sp+24h] [bp-24h]</span><br><br>  ret = <span class="hljs-number">0</span>;<br>  flag = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)(*(<span class="hljs-built_in">int</span> (__fastcall **)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, _DWORD))(*(_DWORD *)JENV + <span class="hljs-number">676</span>))(JENV, a3, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( !flag )<br>    <span class="hljs-keyword">return</span> ret;<br>  src = flag;<br>  length = <span class="hljs-built_in">strlen</span>(flag);<br>  <span class="hljs-keyword">if</span> ( length &gt;= <span class="hljs-number">0xFFFFFFF0</span> )<br>    std::__basic_string_common&lt;<span class="hljs-literal">true</span>&gt;::__throw_length_error(v25);<br>  n = length;<br>  <span class="hljs-keyword">if</span> ( length &gt;= <span class="hljs-number">0xB</span> )<br>  &#123;<br>    v11 = (length + <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFFFFFFF0</span>;<br>    dest = (<span class="hljs-type">char</span> *)<span class="hljs-keyword">operator</span> <span class="hljs-built_in">new</span>(v11);<br>    v25[<span class="hljs-number">1</span>] = n;<br>    dest_1 = dest;<br>    v25[<span class="hljs-number">0</span>] = v11 + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">goto</span> LABEL_7;<br>  &#125;<br>  <span class="hljs-built_in">LOBYTE</span>(v25[<span class="hljs-number">0</span>]) = <span class="hljs-number">2</span> * length;<br>  dest = (<span class="hljs-type">char</span> *)v25 + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( length )<br>LABEL_7:<br>    <span class="hljs-built_in">j_memcpy</span>(dest, src, n);<br>  dest[n] = <span class="hljs-number">0</span>;<br>  (*(<span class="hljs-built_in">void</span> (__fastcall **)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *))(*(_DWORD *)JENV + <span class="hljs-number">680</span>))(JENV, a3, src);<br>  key = (<span class="hljs-type">void</span> *)<span class="hljs-keyword">operator</span> <span class="hljs-built_in">new</span>(<span class="hljs-number">0x20u</span>);<br>  <span class="hljs-built_in">strcpy</span>((<span class="hljs-type">char</span> *)key, <span class="hljs-string">&quot;moectf2025!!!!!!&quot;</span>);<br>  v23[<span class="hljs-number">1</span>] = <span class="hljs-number">16</span>;<br>  v23[<span class="hljs-number">0</span>] = <span class="hljs-number">33</span>;<br>  str = (<span class="hljs-type">char</span> *)<span class="hljs-keyword">operator</span> <span class="hljs-built_in">new</span>(<span class="hljs-number">0x70u</span>);<br>  <span class="hljs-built_in">strcpy</span>(str, <span class="hljs-string">&quot;4EEB1EEF2914D79BFA8C5006332097ED2EF06C4A59CAE31C827A08D45CC649C0B971BF2EFBCB160E531A646DF7A6AC0B&quot;</span>);<br>  <span class="hljs-built_in">sm4Encrypt</span>((<span class="hljs-type">int</span>)&amp;v20, (<span class="hljs-type">int</span>)v25, (<span class="hljs-type">int</span>)v23);<br>  n96 = *(_DWORD *)&amp;v21[<span class="hljs-number">3</span>];<br>  v14 = v20 &amp; <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( !v14 )<br>    n96 = v20 &gt;&gt; <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( n96 == <span class="hljs-number">96</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v14 )<br>    &#123;<br>      s1_1 = s1;<br>      ret = <span class="hljs-built_in">memcmp</span>(s1, str, <span class="hljs-number">0x60u</span>) == <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">goto</span> LABEL_20;<br>    &#125;<br>    v15 = v21;<br>    v16 = v20 &gt;&gt; <span class="hljs-number">1</span>;<br>    _str = str;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>      ret = *v15 == (<span class="hljs-type">unsigned</span> __int8)*_str;<br>      <span class="hljs-keyword">if</span> ( *v15 != (<span class="hljs-type">unsigned</span> __int8)*_str )<br>        <span class="hljs-keyword">break</span>;<br>      ++_str;<br>      ++v15;<br>      --v16;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ( v16 );<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    ret = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v14 )<br>  &#123;<br>    s1_1 = s1;<br>LABEL_20:<br>    <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(s1_1)</span></span>;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(str)</span></span>;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">LOBYTE</span>(v23[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">31</span> )<br>    <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(key)</span></span>;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">LOBYTE</span>(v25[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">31</span> )<br>    <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(dest_1)</span></span>;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>可以看到，check函数使用了sm4加密，密钥可能是“moectf2025!!!!!!”，还需要知道加密模式。借助AI分析具体加密函数知道采用ECB加密模式，cyberchef一把梭：</p>
<p><img src="/../images/image-20250907220527950-1760193218429-47.png" alt="cyberchef一把梭"></p>
</li>
</ul>
<h3 id="A-simple-program"><a href="#A-simple-program" class="headerlink" title="A simple program"></a>A simple program</h3><ul>
<li><p>附件程序main函数反编译出来大概是这样：</p>
<p><img src="/../images/image-20250909145857318-1760193218429-48.png" alt="main函数"></p>
<p>但是Str2这个像模像样的flag是假的，提交会显示错误。结合题目提示，flag应该藏在其他地方。</p>
</li>
<li><p>IDA看不出有什么套路在里面，但是在X32Dbg，strncmp是可以点进去的（在IDA中，strncmp是粉色的导入函数，点击函数没有详细内容），点进去会发现，里面还有一个strncmp</p>
<p><img src="/../images/image-20250909150500077-1760193218429-49.png" alt="strncmp:别有洞天"></p>
<p>加上注释：</p>
<p><img src="/../images/image-20250909195444724-1760193218429-46.png" alt="加上注释"></p>
</li>
<li><p>所以真正的检验逻辑在strncmp里，程序从chall.4D31A4取出真正的密文，然后把输入的flag进行异或处理再比较。在转储中跟随4D31A4可以获得密文：</p>
<p><img src="/../images/image-20250909195828121-1760193218429-50.png" alt="转储中的密文"></p>
</li>
<li><p>解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">enc=[<span class="hljs-number">0x4E</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x5E</span>]<br>flag=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br>    flag+=<span class="hljs-built_in">chr</span>(i^<span class="hljs-number">0x23</span>)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="week5"><a href="#week5" class="headerlink" title="week5"></a>week5</h2><h3 id="2048-master-re"><a href="#2048-master-re" class="headerlink" title="2048_master_re"></a>2048_master_re</h3><ul>
<li><p>附件程序是一个2048小游戏，通过方向键来操作数字整体移动。根据游戏窗口可以推测这也是一个GUI程序。</p>
<p><img src="/../images/image-20250927191149395-1760193218429-51.png" alt="游戏窗口"></p>
</li>
<li><p>用IDA打开附件程序，shift+F12可以在字符串窗口看见一些蛛丝马迹（因为是MFC GUI程序，也可以直接找WinMain函数，然后再从中找出和flag检验有关的逻辑）：</p>
<p><img src="/../images/image-20250927191413499-1760193218429-52.png" alt="字符串窗口"></p>
</li>
<li><p>跟踪flag.txt可以发现一个疑似的关键函数：</p>
<p><img src="/../images/image-20250927191650957-1760193218429-54.png" alt="疑似关键逻辑的函数"></p>
<p>通过粗略分析可以推测程序从flag.txt里读取数据，然后进行检验。但是此处没有直接的和flag相关的提示，跟踪到上级函数看看。选中函数名按X查找交叉引用，跳转到上一级函数：</p>
<p><img src="/../images/image-20250927192543291-1760193218429-53.png" alt="出题人的提示"></p>
<p>出题人根据可疑函数的返回值设置了提示，看来flag检验逻辑在此没错了。回到可疑函数，可以看到函数后半部分是对Block的检验，所以推测sub_401A81是一个加密函数。跟踪进去可以找到一个魔改xxtea函数和一个疑似数据格式转换的函数。这是优化后的样子：</p>
<p><img src="/../images/image-20250927194329834-1760193218429-55.png" alt="sub_401A81"></p>
<p>到这里大概掌握了一些信息了。但还是要完整分析一下程序的整体逻辑，继续找上级函数，回溯到WinMain函数。下面是沿着正向调用逻辑的分析：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> __stdcall <span class="hljs-title">WinMain</span><span class="hljs-params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="hljs-type">int</span> nShowCmd)</span></span><br><span class="hljs-function"></span>&#123;<br>  MSG Msg; <span class="hljs-comment">// [rsp+60h] [rbp-90h] BYREF</span><br>  WNDCLASSEXA v6; <span class="hljs-comment">// [rsp+90h] [rbp-60h] BYREF</span><br><br>  <span class="hljs-built_in">memset</span>(&amp;v6, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(v6));<br>  v<span class="hljs-number">6.</span>cbSize = <span class="hljs-number">80</span>;<br>  v<span class="hljs-number">6.l</span>pfnWndProc = check_2048;                  <span class="hljs-comment">// 游戏的检验逻辑</span><br>  v<span class="hljs-number">6.</span>hInstance = hInstance;<br>  v<span class="hljs-number">6.</span>hCursor = <span class="hljs-built_in">LoadCursorA</span>(<span class="hljs-number">0LL</span>, <span class="hljs-number">0x7F00</span>);<br>  v<span class="hljs-number">6.</span>hbrBackground = <span class="hljs-number">5</span>;<br>  v<span class="hljs-number">6.l</span>pszClassName = <span class="hljs-string">&quot;WindowClass&quot;</span>;<br>  v<span class="hljs-number">6.</span>hIcon = <span class="hljs-built_in">LoadIconA</span>(<span class="hljs-number">0LL</span>, <span class="hljs-number">0x7F00</span>);<br>  v<span class="hljs-number">6.</span>hIconSm = <span class="hljs-built_in">LoadIconA</span>(<span class="hljs-number">0LL</span>, <span class="hljs-number">0x7F00</span>);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">RegisterClassExA</span>(&amp;v6) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">CreateWindowExA</span>(<br>           <span class="hljs-number">0x200u</span>,<br>           <span class="hljs-string">&quot;WindowClass&quot;</span>,<br>           <span class="hljs-string">&quot;2048&quot;</span>,<br>           <span class="hljs-number">0x10CF0000u</span>,<br>           <span class="hljs-number">0x80000000</span>,<br>           <span class="hljs-number">0x80000000</span>,<br>           <span class="hljs-number">640</span>,<br>           <span class="hljs-number">480</span>,<br>           <span class="hljs-number">0LL</span>,<br>           <span class="hljs-number">0LL</span>,<br>           hInstance,<br>           <span class="hljs-number">0LL</span>) )<br>    &#123;<br>      <span class="hljs-keyword">while</span> ( <span class="hljs-built_in">GetMessageA</span>(&amp;Msg, <span class="hljs-number">0LL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) &gt; <span class="hljs-number">0</span> )<br>      &#123;<br>        <span class="hljs-built_in">TranslateMessage</span>(&amp;Msg);<br>        <span class="hljs-built_in">DispatchMessageA</span>(&amp;Msg);<br>      &#125;<br>      <span class="hljs-keyword">return</span> Msg.wParam;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-number">0LL</span>, <span class="hljs-string">&quot;Window Creation Failed!&quot;</span>, <span class="hljs-string">&quot;Error!&quot;</span>, <span class="hljs-number">0x30u</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-number">0LL</span>, <span class="hljs-string">&quot;Window Registration Failed!&quot;</span>, <span class="hljs-string">&quot;Error!&quot;</span>, <span class="hljs-number">0x30u</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//游戏检验函数</span><br><span class="hljs-function">LRESULT __fastcall <span class="hljs-title">check_2048</span><span class="hljs-params">(HWND hWnd, UINT n20, WPARAM wParam, LPARAM lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v4; <span class="hljs-comment">// eax</span><br>  tagPAINTSTRUCT Paint; <span class="hljs-comment">// [rsp+50h] [rbp-30h] BYREF</span><br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">tagRECT</span> Rect; <span class="hljs-comment">// [rsp+230h] [rbp+1B0h] BYREF</span><br>  HGDIOBJ h; <span class="hljs-comment">// [rsp+248h] [rbp+1C8h]</span><br>  HDC hdcSrc; <span class="hljs-comment">// [rsp+250h] [rbp+1D0h]</span><br>  HDC hdc; <span class="hljs-comment">// [rsp+258h] [rbp+1D8h]</span><br>  LONG dwNewLong; <span class="hljs-comment">// [rsp+264h] [rbp+1E4h]</span><br>  HMENU SystemMenu; <span class="hljs-comment">// [rsp+268h] [rbp+1E8h]</span><br>  <span class="hljs-type">int</span> i2; <span class="hljs-comment">// [rsp+274h] [rbp+1F4h]</span><br>  <span class="hljs-type">int</span> i1; <span class="hljs-comment">// [rsp+278h] [rbp+1F8h]</span><br>  <span class="hljs-type">int</span> nn; <span class="hljs-comment">// [rsp+27Ch] [rbp+1FCh]</span><br>  <span class="hljs-type">int</span> mm; <span class="hljs-comment">// [rsp+280h] [rbp+200h]</span><br>  <span class="hljs-type">int</span> kk; <span class="hljs-comment">// [rsp+284h] [rbp+204h]</span><br>  <span class="hljs-type">int</span> v18; <span class="hljs-comment">// [rsp+288h] [rbp+208h]</span><br>  <span class="hljs-type">int</span> jj; <span class="hljs-comment">// [rsp+28Ch] [rbp+20Ch]</span><br>  <span class="hljs-type">int</span> i14; <span class="hljs-comment">// [rsp+290h] [rbp+210h]</span><br>  <span class="hljs-type">int</span> i13; <span class="hljs-comment">// [rsp+294h] [rbp+214h]</span><br>  <span class="hljs-type">int</span> i12; <span class="hljs-comment">// [rsp+298h] [rbp+218h]</span><br>  <span class="hljs-type">int</span> i11; <span class="hljs-comment">// [rsp+29Ch] [rbp+21Ch]</span><br>  <span class="hljs-type">int</span> i10; <span class="hljs-comment">// [rsp+2A0h] [rbp+220h]</span><br>  <span class="hljs-type">int</span> v25; <span class="hljs-comment">// [rsp+2A4h] [rbp+224h]</span><br>  <span class="hljs-type">int</span> i9; <span class="hljs-comment">// [rsp+2A8h] [rbp+228h]</span><br>  <span class="hljs-type">int</span> i8; <span class="hljs-comment">// [rsp+2ACh] [rbp+22Ch]</span><br>  <span class="hljs-type">int</span> i7; <span class="hljs-comment">// [rsp+2B0h] [rbp+230h]</span><br>  <span class="hljs-type">int</span> i6; <span class="hljs-comment">// [rsp+2B4h] [rbp+234h]</span><br>  <span class="hljs-type">int</span> i5; <span class="hljs-comment">// [rsp+2B8h] [rbp+238h]</span><br>  <span class="hljs-type">int</span> i4; <span class="hljs-comment">// [rsp+2BCh] [rbp+23Ch]</span><br>  <span class="hljs-type">int</span> v32; <span class="hljs-comment">// [rsp+2C0h] [rbp+240h]</span><br>  <span class="hljs-type">int</span> i3; <span class="hljs-comment">// [rsp+2C4h] [rbp+244h]</span><br>  <span class="hljs-type">int</span> ii; <span class="hljs-comment">// [rsp+2C8h] [rbp+248h]</span><br>  <span class="hljs-type">int</span> n; <span class="hljs-comment">// [rsp+2CCh] [rbp+24Ch]</span><br>  <span class="hljs-type">int</span> m; <span class="hljs-comment">// [rsp+2D0h] [rbp+250h]</span><br>  <span class="hljs-type">int</span> k; <span class="hljs-comment">// [rsp+2D4h] [rbp+254h]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+2D8h] [rbp+258h]</span><br>  <span class="hljs-type">int</span> v39; <span class="hljs-comment">// [rsp+2DCh] [rbp+25Ch]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+2E0h] [rbp+260h]</span><br>  <span class="hljs-type">char</span> v41; <span class="hljs-comment">// [rsp+2E7h] [rbp+267h]</span><br>  <span class="hljs-type">int</span> i16; <span class="hljs-comment">// [rsp+2E8h] [rbp+268h]</span><br>  <span class="hljs-type">int</span> i15; <span class="hljs-comment">// [rsp+2ECh] [rbp+26Ch]</span><br><br>  <span class="hljs-keyword">if</span> ( n20 == <span class="hljs-number">15</span> )                              <span class="hljs-comment">// 下面开始是一大串的检验操作</span><br>  &#123;<br>    hdc = <span class="hljs-built_in">BeginPaint</span>(hWnd, &amp;Paint);<br>    hdcSrc = <span class="hljs-built_in">CreateCompatibleDC</span>(hdc);<br>    <span class="hljs-built_in">GetClientRect</span>(hWnd, &amp;Rect);<br>    h = <span class="hljs-built_in">CreateCompatibleBitmap</span>(hdc, Rect.right, Rect.bottom);<br>    <span class="hljs-built_in">SelectObject</span>(hdcSrc, h);<br>    <span class="hljs-built_in">sub_4022AF</span>(hdcSrc);<br>    <span class="hljs-built_in">BitBlt</span>(hdc, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, Rect.right, Rect.bottom, hdcSrc, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0xCC0020u</span>);<br>    <span class="hljs-built_in">DeleteObject</span>(h);<br>    <span class="hljs-built_in">DeleteDC</span>(hdcSrc);<br>    <span class="hljs-built_in">EndPaint</span>(hWnd, &amp;Paint);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( n20 &gt; <span class="hljs-number">0xF</span> )<br>  &#123;<br>	<span class="hljs-comment">//...此处省略</span><br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( n20 == <span class="hljs-number">1</span> )<br>  &#123;<br>    SystemMenu = <span class="hljs-built_in">GetSystemMenu</span>(hWnd, <span class="hljs-number">0</span>);<br>    dwNewLong = <span class="hljs-built_in">GetWindowLongA</span>(hWnd, <span class="hljs-number">-16</span>) &amp; <span class="hljs-number">0xFFF8FFFF</span>;<br>    <span class="hljs-built_in">SetWindowLongA</span>(hWnd, <span class="hljs-number">-16</span>, dwNewLong);<br>    <span class="hljs-built_in">SetWindowPos</span>(hWnd, <span class="hljs-number">0LL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3u</span>);<br>    <span class="hljs-built_in">ShowWindow</span>(hWnd, <span class="hljs-number">1</span>);<br>    v4 = <span class="hljs-built_in">time64</span>(<span class="hljs-number">0LL</span>);<br>    <span class="hljs-built_in">srand</span>(v4);<br>    hThread = <span class="hljs-built_in">CreateThread</span>(<span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>, StartAddress, <span class="hljs-number">0LL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0LL</span>);<br>    <span class="hljs-built_in">CreateThread</span>(<span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>, check_flag, <span class="hljs-number">0LL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0LL</span>);<span class="hljs-comment">// 这里创建了线程，而flag的检验函数就在这个线程里</span><br>    <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">sub_401DBF</span>(<span class="hljs-string">&quot;layout.dat&quot;</span>) )<br>    &#123;<br>      <span class="hljs-built_in">sub_4645D0</span>(&amp;Paint, <span class="hljs-string">&quot;layout.dat&quot;</span>, <span class="hljs-number">8</span>);<br>      <span class="hljs-keyword">for</span> ( i15 = <span class="hljs-number">1</span>; i15 &lt;= <span class="hljs-number">4</span>; ++i15 )<br>      &#123;<br>        <span class="hljs-keyword">for</span> ( i16 = <span class="hljs-number">1</span>; i16 &lt;= <span class="hljs-number">4</span>; ++i16 )<br>          <span class="hljs-built_in">sub_453880</span>(&amp;Paint, &amp;dword_4B6040[<span class="hljs-number">5</span> * i15 + i16]);<br>      &#125;<br>      <span class="hljs-built_in">sub_453880</span>(&amp;Paint, &amp;dword_4B60A4);<br>      <span class="hljs-built_in">sub_464580</span>(&amp;Paint);<br>      <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-number">0LL</span>, <span class="hljs-string">&quot;Continue?&quot;</span>, <span class="hljs-string">&quot;E=hv&quot;</span>, <span class="hljs-number">4u</span>) == <span class="hljs-number">7</span> )<br>      &#123;<br>        <span class="hljs-built_in">memset</span>(dword_4B6040, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(dword_4B6040));<br>        <span class="hljs-built_in">check</span>();<br>        <span class="hljs-built_in">check</span>();<br>        <span class="hljs-built_in">InvalidateRect</span>(hWnd, <span class="hljs-number">0LL</span>, <span class="hljs-number">1</span>);<br>        dword_4B60A4 = <span class="hljs-number">0</span>;<br>      &#125;<br>      <span class="hljs-built_in">sub_464C70</span>(&amp;Paint);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">check</span>();<br>      <span class="hljs-built_in">check</span>();<br>      dword_4B60A4 = <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">if</span> ( n20 != <span class="hljs-number">2</span> )<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">DefWindowProcA</span>(hWnd, n20, wParam, lParam);<br>    <span class="hljs-built_in">TerminateThread</span>(hThread, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">PostQuitMessage</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br><br><span class="hljs-comment">//flag的检验函数</span><br><span class="hljs-function">__int64 __fastcall <span class="hljs-title">check_flag</span><span class="hljs-params">(LPVOID lpThreadParameter)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">sub_401DBF</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">get_check_flag</span>() )                       <span class="hljs-comment">// 获取并检验flag</span><br>  &#123;<br>    <span class="hljs-built_in">MessageBoxA</span>(<br>      hWnd,<br>      <span class="hljs-string">&quot;It seems you&#x27;ve uncovered some clues, but they&#x27;re not enough to unlock the deepest secrets.&quot;</span>,<br>      <span class="hljs-string">&quot;sandtea&quot;</span>,<br>      <span class="hljs-number">0x30u</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">MessageBoxA</span>(hWnd, <span class="hljs-string">&quot;You have found the final secret of 2048! - sandtea&quot;</span>, <span class="hljs-string">&quot;Congratulations&quot;</span>, <span class="hljs-number">0x40u</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//获取并检验flag的函数</span><br><span class="hljs-function">__int64 <span class="hljs-title">get_check_flag</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">size_t</span> length; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> flag[<span class="hljs-number">136</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-D0h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 block_num; <span class="hljs-comment">// [rsp+A8h] [rbp-48h] BYREF</span><br>  <span class="hljs-type">char</span> key[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+B0h] [rbp-40h] BYREF</span><br>  <span class="hljs-type">void</span> *Block; <span class="hljs-comment">// [rsp+D0h] [rbp-20h]</span><br>  FILE *FILE; <span class="hljs-comment">// [rsp+D8h] [rbp-18h]</span><br>  <span class="hljs-type">unsigned</span> __int64 i; <span class="hljs-comment">// [rsp+E0h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+ECh] [rbp-4h]</span><br><br>  FILE = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>  <span class="hljs-built_in">file_read</span>(FILE, <span class="hljs-string">&quot;%100s&quot;</span>, flag);<br>  <span class="hljs-built_in">fclose</span>(FILE);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(flag) != <span class="hljs-number">37</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>  <span class="hljs-built_in">strcpy</span>(key, <span class="hljs-string">&quot;2048master2048ma&quot;</span>);<br>  length = <span class="hljs-built_in">strlen</span>(flag);<br>  Block = <span class="hljs-built_in">encrypt</span>(flag, length, key, &amp;block_num);<br>  <span class="hljs-keyword">if</span> ( Block )<br>  &#123;<br>    v8 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0LL</span>; i &lt; block_num; ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( *(Block + i) != byte_495280[i] )<br>        v8 = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(Block);<br>    <span class="hljs-keyword">return</span> v8;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">sub_428D00</span>(<span class="hljs-string">&quot;Encryption failed\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//加密函数</span><br><span class="hljs-function">__int64 __fastcall <span class="hljs-title">encrypt</span><span class="hljs-params">(__int64 flag, <span class="hljs-type">unsigned</span> __int64 length, _QWORD *key, __int64 block_num)</span></span><br><span class="hljs-function"></span>&#123;<br>  __int64 v5; <span class="hljs-comment">// rdx</span><br>  _QWORD Key[<span class="hljs-number">3</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-30h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 word_num; <span class="hljs-comment">// [rsp+38h] [rbp-18h] BYREF</span><br>  _WORD *block; <span class="hljs-comment">// [rsp+40h] [rbp-10h]</span><br>  <span class="hljs-type">void</span> *mem; <span class="hljs-comment">// [rsp+48h] [rbp-8h]</span><br><br>  mem = <span class="hljs-built_in">new_mem</span>(flag, length, &amp;word_num);       <span class="hljs-comment">// 根据传入的flag申请了一块内存，word_num是申请的word个数</span><br>  <span class="hljs-keyword">if</span> ( !mem )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v5 = key[<span class="hljs-number">1</span>];                                  <span class="hljs-comment">// 这是传入的密钥</span><br>  Key[<span class="hljs-number">0</span>] = *key;<br>  Key[<span class="hljs-number">1</span>] = v5;<br>  <span class="hljs-built_in">modifiedXXTea</span>(mem, word_num, Key);            <span class="hljs-comment">// xxtea加密</span><br>  block = <span class="hljs-built_in">make_blocks</span>(mem, word_num, block_num);<span class="hljs-comment">// 对加密后的数据进行一些转换，以便后续和给定的数据进行校验</span><br>  <span class="hljs-built_in">free</span>(mem);<br>  <span class="hljs-keyword">return</span> block;<br>&#125;<br><br><span class="hljs-comment">//申请内存的函数</span><br><span class="hljs-function">_DWORD *__fastcall <span class="hljs-title">new_mem</span><span class="hljs-params">(__int64 flag, <span class="hljs-type">unsigned</span> __int64 length, <span class="hljs-type">unsigned</span> __int64 *word_num)</span></span><br><span class="hljs-function"></span>&#123;<br>  _DWORD *mem; <span class="hljs-comment">// [rsp+28h] [rbp-18h]</span><br>  <span class="hljs-type">unsigned</span> __int64 Word_num; <span class="hljs-comment">// [rsp+30h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 i; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br><br>  Word_num = (length + <span class="hljs-number">3</span>) &gt;&gt; <span class="hljs-number">2</span>;                 <span class="hljs-comment">// 10</span><br>  mem = <span class="hljs-built_in">calloc</span>(Word_num, <span class="hljs-number">4uLL</span>);                 <span class="hljs-comment">// 10*4字节的内存空间</span><br>  <span class="hljs-keyword">if</span> ( !mem )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0LL</span>; i &lt; length; ++i )<br>    mem[i &gt;&gt; <span class="hljs-number">2</span>] |= *(flag + i) &lt;&lt; (<span class="hljs-number">8</span> * (i &amp; <span class="hljs-number">3</span>));<br><br>  *word_num = Word_num;<br>  <span class="hljs-keyword">return</span> mem;<br>&#125;<br><br><span class="hljs-comment">//魔改xxtea函数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> __fastcall <span class="hljs-title">modifiedXXTea</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *block, <span class="hljs-type">int</span> word_num, __int64 key)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *p1; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *last_one1; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">bool</span> result; <span class="hljs-comment">// al</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *v6; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br>  <span class="hljs-type">int</span> round; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> delta; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> delta1; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> last_one; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v16; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v17; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> p2; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v19; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br>  <span class="hljs-type">int</span> v20; <span class="hljs-comment">// [rsp+38h] [rbp+18h]</span><br><br>  <span class="hljs-keyword">if</span> ( word_num &lt;= <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( word_num &lt; <span class="hljs-number">-1</span> )<br>    &#123;<br>      v20 = -word_num;<br>      v10 = <span class="hljs-number">52</span> / -word_num + <span class="hljs-number">6</span>;<br>      delta1 = <span class="hljs-number">0x3E9779B9</span> * v10;<br>      v19 = *block;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        v8 = (delta1 &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">for</span> ( i = v20 - <span class="hljs-number">1</span>; i; --i )<br>        &#123;<br>          v16 = block[i - <span class="hljs-number">1</span>];<br>          v6 = &amp;block[i];<br>          *v6 -= (((<span class="hljs-number">4</span> * v19) ^ (v16 &gt;&gt; <span class="hljs-number">5</span>)) + ((v19 &gt;&gt; <span class="hljs-number">3</span>) ^ (<span class="hljs-number">16</span> * v16))) ^ ((v19 ^ delta1)<br>                                                                         + (v16 ^ *(<span class="hljs-number">4LL</span> * (v8 ^ i &amp; <span class="hljs-number">3</span>) + key)));<br>          v19 = *v6;<br>        &#125;<br>        v17 = block[v20 - <span class="hljs-number">1</span>];<br>        *block -= (((<span class="hljs-number">4</span> * v19) ^ (v17 &gt;&gt; <span class="hljs-number">5</span>)) + ((v19 &gt;&gt; <span class="hljs-number">3</span>) ^ (<span class="hljs-number">16</span> * v17))) ^ ((v19 ^ delta1) + (v17 ^ *(<span class="hljs-number">4LL</span> * v8 + key)));<br>        v19 = *block;<br>        delta1 -= <span class="hljs-number">0x3E9779B9</span>;<br>        result = --v10 != <span class="hljs-number">0</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v10 );<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    round = <span class="hljs-number">52</span> / word_num + <span class="hljs-number">6</span>;<br>    delta = <span class="hljs-number">0</span>;<br>    last_one = block[word_num - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>      delta += <span class="hljs-number">0x3E9779B9</span>;<br>      v7 = (delta &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>      <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; word_num - <span class="hljs-number">1</span> &gt; j; ++j )<br>      &#123;<br>        p2 = block[j + <span class="hljs-number">1</span>];<br>        p1 = &amp;block[j];<br>        *p1 += (((<span class="hljs-number">4</span> * p2) ^ (last_one &gt;&gt; <span class="hljs-number">5</span>)) + ((p2 &gt;&gt; <span class="hljs-number">3</span>) ^ (<span class="hljs-number">16</span> * last_one))) ^ ((p2 ^ delta)<br>                                                                               + (last_one ^ *(<span class="hljs-number">4LL</span> * (v7 ^ j &amp; <span class="hljs-number">3</span>) + key)));<br>        last_one = *p1;<br>      &#125;<br>      last_one1 = &amp;block[word_num - <span class="hljs-number">1</span>];<br>      *last_one1 += (((<span class="hljs-number">4</span> * *block) ^ (last_one &gt;&gt; <span class="hljs-number">5</span>)) + ((*block &gt;&gt; <span class="hljs-number">3</span>) ^ (<span class="hljs-number">16</span> * last_one))) ^ ((*block ^ delta)<br>                                                                                            + (last_one ^ *(<span class="hljs-number">4LL</span> * (v7 ^ j &amp; <span class="hljs-number">3</span>) + key)));<br>      last_one = *last_one1;<br>      result = --round != <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ( round );<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">//数据格式转换函数</span><br><span class="hljs-function">_WORD *__fastcall <span class="hljs-title">make_blocks</span><span class="hljs-params">(__int64 mem, <span class="hljs-type">unsigned</span> __int64 num_word, <span class="hljs-type">size_t</span> *block_num)</span></span><br><span class="hljs-function"></span>&#123;<br>  _WORD *block; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 i; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br><br>  *block_num = <span class="hljs-number">4</span> * num_word; <br>  block = <span class="hljs-built_in">malloc</span>(*block_num);<br>  <span class="hljs-keyword">if</span> ( !block )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0LL</span>; i &lt; num_word; ++i )<br>  &#123;<br>    block[<span class="hljs-number">2</span> * i] = *(<span class="hljs-number">4</span> * i + mem);<br>    <span class="hljs-built_in">LOBYTE</span>(block[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>]) = <span class="hljs-built_in">BYTE2</span>(*(<span class="hljs-number">4</span> * i + mem));<br>    <span class="hljs-built_in">HIBYTE</span>(block[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>]) = <span class="hljs-built_in">HIBYTE</span>(*(<span class="hljs-number">4</span> * i + mem));<br>  &#125;<br>  <span class="hljs-keyword">return</span> block;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>所以要解出flag，就需要逆向这个xxtea加密。把这个任务交给AI，可以得到解密脚本：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-comment">// 加密数据（make_blocks的输出）</span><br><span class="hljs-type">uint8_t</span> encrypted_data[<span class="hljs-number">40</span>] = &#123;<br>    <span class="hljs-number">0x35</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0xFF</span>,<br>    <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xAE</span>,<br>    <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xD9</span>,<br>    <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x63</span><br>&#125;;<br><br><span class="hljs-comment">// 密钥</span><br><span class="hljs-type">char</span> key[<span class="hljs-number">17</span>] = <span class="hljs-string">&quot;2048master2048ma&quot;</span>;<br><br><span class="hljs-comment">// 逆make_blocks：将_WORD数组转换回DWORD数组</span><br><span class="hljs-type">uint32_t</span>* <span class="hljs-title function_">unmake_blocks</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span>* blocks, <span class="hljs-type">size_t</span> block_bytes, <span class="hljs-type">size_t</span>* num_dwords)</span> &#123;<br>    *num_dwords = block_bytes / <span class="hljs-number">4</span>;<br>    <span class="hljs-type">uint32_t</span>* dwords = (<span class="hljs-type">uint32_t</span>*)<span class="hljs-built_in">malloc</span>(*num_dwords * <span class="hljs-number">4</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; *num_dwords; i++) &#123;<br>        <span class="hljs-comment">// 将两个WORD合并为一个DWORD</span><br>        <span class="hljs-type">uint16_t</span> low_word = *(<span class="hljs-type">uint16_t</span>*)&amp;blocks[<span class="hljs-number">4</span> * i];<br>        <span class="hljs-type">uint16_t</span> high_word = *(<span class="hljs-type">uint16_t</span>*)&amp;blocks[<span class="hljs-number">4</span> * i + <span class="hljs-number">2</span>];<br>        dwords[i] = (high_word &lt;&lt; <span class="hljs-number">16</span>) | low_word;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dwords;<br>&#125;<br><br><span class="hljs-comment">// 逆modifiedXXTea解密</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt_tea</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* data, <span class="hljs-type">int</span> num_dwords, <span class="hljs-type">uint32_t</span>* tea_key)</span> &#123;<br>    <span class="hljs-keyword">if</span> (num_dwords &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> rounds = <span class="hljs-number">52</span> / num_dwords + <span class="hljs-number">6</span>;<br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x3E9779B9</span> * rounds; <span class="hljs-comment">// 1050114489</span><br><br>    <span class="hljs-type">uint32_t</span> sum = delta;<br>    <span class="hljs-type">uint32_t</span> y = data[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rounds; i++) &#123;<br>        <span class="hljs-type">uint32_t</span> e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = num_dwords - <span class="hljs-number">1</span>; j &gt; <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-type">uint32_t</span> z = data[j - <span class="hljs-number">1</span>];<br>            data[j] -= (((z &gt;&gt; <span class="hljs-number">5</span>) ^ (y &lt;&lt; <span class="hljs-number">2</span>)) + ((y &gt;&gt; <span class="hljs-number">3</span>) ^ (z &lt;&lt; <span class="hljs-number">4</span>))) ^ ((sum ^ y) + (tea_key[(j ^ e) &amp; <span class="hljs-number">3</span>] ^ z));<br>            y = data[j];<br>        &#125;<br><br>        <span class="hljs-type">uint32_t</span> z = data[num_dwords - <span class="hljs-number">1</span>];<br>        data[<span class="hljs-number">0</span>] -= (((z &gt;&gt; <span class="hljs-number">5</span>) ^ (y &lt;&lt; <span class="hljs-number">2</span>)) + ((y &gt;&gt; <span class="hljs-number">3</span>) ^ (z &lt;&lt; <span class="hljs-number">4</span>))) ^ ((sum ^ y) + (tea_key[e] ^ z));<br>        y = data[<span class="hljs-number">0</span>];<br><br>        sum -= <span class="hljs-number">0x3E9779B9</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 从DWORD数组提取字符串</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">extract_string</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* dwords, <span class="hljs-type">size_t</span> num_dwords, <span class="hljs-type">size_t</span> original_len)</span> &#123;<br>    <span class="hljs-type">char</span>* str =(<span class="hljs-type">char</span>*) <span class="hljs-built_in">malloc</span>(original_len + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">memset</span>(str, <span class="hljs-number">0</span>, original_len + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; original_len; i++) &#123;<br>        <span class="hljs-type">uint32_t</span> dword = dwords[i &gt;&gt; <span class="hljs-number">2</span>];<br>        str[i] = (dword &gt;&gt; (<span class="hljs-number">8</span> * (i &amp; <span class="hljs-number">3</span>))) &amp; <span class="hljs-number">0xFF</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 步骤1: 逆make_blocks</span><br>    <span class="hljs-type">size_t</span> num_dwords;<br>    <span class="hljs-type">uint32_t</span>* tea_encrypted = unmake_blocks(encrypted_data, <span class="hljs-number">40</span>, &amp;num_dwords);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After unmake_blocks (%zu DWORDs):\n&quot;</span>, num_dwords);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; num_dwords; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%08X &quot;</span>, tea_encrypted[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n&quot;</span>);<br><br>    <span class="hljs-comment">// 步骤2: 准备TEA密钥（将字符串转换为4个32位整数）</span><br>    <span class="hljs-type">uint32_t</span> tea_key[<span class="hljs-number">4</span>];<br>    <span class="hljs-built_in">memcpy</span>(tea_key, key, <span class="hljs-number">16</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TEA Key:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%08X &quot;</span>, tea_key[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n&quot;</span>);<br><br>    <span class="hljs-comment">// 步骤3: 逆modifiedXXTea解密</span><br>    decrypt_tea(tea_encrypted, num_dwords, tea_key);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After TEA decryption:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; num_dwords; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%08X &quot;</span>, tea_encrypted[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n&quot;</span>);<br><br>    <span class="hljs-comment">// 步骤4: 提取flag字符串（原始长度37字节）</span><br>    <span class="hljs-type">char</span>* flag = extract_string(tea_encrypted, num_dwords, <span class="hljs-number">37</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Decrypted flag: %s\n&quot;</span>, flag);<br><br>    <span class="hljs-comment">// 清理</span><br>    <span class="hljs-built_in">free</span>(tea_encrypted);<br>    <span class="hljs-built_in">free</span>(flag);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>WriteUp&amp;复现</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WriteUp</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>icarus主题优化</title>
    <url>/2025/09/02/icarus%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>icarus主题复制功能重构（仿照next主题）、firebase统计阅读人数</p>
<span id="more"></span>

<h2 id="复制功能重构"><a href="#复制功能重构" class="headerlink" title="复制功能重构"></a>复制功能重构</h2><ul>
<li><p>icarus主题自带的复制功能是带文字选中的（如下图），个人感觉麻烦了点，于是考虑借鉴next的复制风格，一键复制</p>
<p><img src="/../images/image-20250902231901036.png" alt="官网指南截图"></p>
</li>
<li><p>实现：</p>
<p>hexo-theme-icarus&#x2F;source&#x2F;js&#x2F;main.js：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><code class="hljs diff">        if (clipboard) &#123;<br><span class="hljs-deletion">-           new ClipboardJS(&#x27;.highlight .copy&#x27;, &#123;</span><br><span class="hljs-deletion">-               target: function(trigger) &#123;</span><br><span class="hljs-deletion">-                   return trigger.parentNode.nextElementSibling;</span><br><span class="hljs-deletion">-               &#125;</span><br><span class="hljs-deletion">-           &#125;).on(&#x27;success&#x27;, function(e) &#123;</span><br><span class="hljs-deletion">-               e.clearSelection();</span><br><span class="hljs-deletion">-               const tmp = e.trigger.innerHTML;</span><br><span class="hljs-deletion">-               e.trigger.innerHTML = &#x27;&lt;i class=&quot;fas fa-check&quot;&gt;&lt;/i&gt;&#x27;;</span><br><span class="hljs-deletion">-               setTimeout(function() &#123;</span><br><span class="hljs-deletion">-                   e.trigger.innerHTML = tmp;</span><br><span class="hljs-deletion">-               &#125;, 2000);</span><br><span class="hljs-deletion">-           &#125;);</span><br><span class="hljs-addition">+           $(&#x27;figure.highlight&#x27;).each(function() &#123;</span><br><span class="hljs-addition">+               const target = $(this).find(&#x27;figcaption div.level-right&#x27;)[0];</span><br><span class="hljs-addition">+               if (target) &#123;</span><br><span class="hljs-addition">+                   registerCopyButton(target, this);</span><br><span class="hljs-addition">+               &#125;</span><br><span class="hljs-addition">+           &#125;);</span><br>        &#125;<br>        <br><span class="hljs-comment">----------------------------------------------------------------------------------</span><br><br>...<br><br>    $(&#x27;.article &gt; .content &gt; table&#x27;).each(function() &#123;<br>        if ($(this).width() &gt; $(this).parent().width()) &#123;<br>            $(this).wrap(&#x27;&lt;div class=&quot;table-overflow&quot;&gt;&lt;/div&gt;&#x27;);<br>        &#125;<br>    &#125;);<br><br><span class="hljs-addition">+    // 注册复制按钮功能，仿照Next主题实现</span><br><span class="hljs-addition">+    function registerCopyButton(target, element) &#123;</span><br><span class="hljs-addition">+        // 添加复制按钮</span><br><span class="hljs-addition">+        target.insertAdjacentHTML(&#x27;beforeend&#x27;, &#x27;&lt;a href=&quot;javascript:;&quot; class=&quot;copy&quot; title=&quot;Copy&quot;&gt;&lt;i class=&quot;fas fa-copy&quot;&gt;&lt;/i&gt;&lt;/a&gt;&#x27;);</span><br><span class="hljs-addition">+        const button = target.querySelector(&#x27;.copy&#x27;);</span><br><span class="hljs-addition">+        </span><br><span class="hljs-addition">+        button.addEventListener(&#x27;click&#x27;, function() &#123;</span><br><span class="hljs-addition">+            const code = element.querySelector(&#x27;.code&#x27;).innerText;</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            if (navigator.clipboard) &#123;</span><br><span class="hljs-addition">+                // 使用现代的Clipboard API</span><br><span class="hljs-addition">+                navigator.clipboard.writeText(code).then(function() &#123;</span><br><span class="hljs-addition">+                    button.querySelector(&#x27;i&#x27;).className = &#x27;fas fa-check-circle&#x27;;</span><br><span class="hljs-addition">+                &#125;, function() &#123;</span><br><span class="hljs-addition">+                    button.querySelector(&#x27;i&#x27;).className = &#x27;fas fa-times-circle&#x27;;</span><br><span class="hljs-addition">+                &#125;);</span><br><span class="hljs-addition">+            &#125; else &#123;</span><br><span class="hljs-addition">+                // 兼容性回退方案</span><br><span class="hljs-addition">+                const ta = document.createElement(&#x27;textarea&#x27;);</span><br><span class="hljs-addition">+                ta.style.top = window.scrollY + &#x27;px&#x27;;</span><br><span class="hljs-addition">+                ta.style.position = &#x27;absolute&#x27;;</span><br><span class="hljs-addition">+                ta.style.opacity = &#x27;0&#x27;;</span><br><span class="hljs-addition">+                ta.readOnly = true;</span><br><span class="hljs-addition">+                ta.value = code;</span><br><span class="hljs-addition">+                document.body.append(ta);</span><br><span class="hljs-addition">+                ta.select();</span><br><span class="hljs-addition">+                ta.setSelectionRange(0, code.length);</span><br><span class="hljs-addition">+                ta.readOnly = false;</span><br><span class="hljs-addition">+                const result = document.execCommand(&#x27;copy&#x27;);</span><br><span class="hljs-addition">+                button.querySelector(&#x27;i&#x27;).className = result ? &#x27;fas fa-check-circle&#x27; : &#x27;fas fa-times-circle&#x27;;</span><br><span class="hljs-addition">+                ta.blur();</span><br><span class="hljs-addition">+                button.blur();</span><br><span class="hljs-addition">+                document.body.removeChild(ta);</span><br><span class="hljs-addition">+            &#125;</span><br><span class="hljs-addition">+        &#125;);</span><br><span class="hljs-addition">+        </span><br><span class="hljs-addition">+        // 鼠标离开300ms后恢复复制图标</span><br><span class="hljs-addition">+        element.addEventListener(&#x27;mouseleave&#x27;, function() &#123;</span><br><span class="hljs-addition">+            setTimeout(function() &#123;</span><br><span class="hljs-addition">+                const icon = button.querySelector(&#x27;i&#x27;);</span><br><span class="hljs-addition">+                if (icon) &#123;</span><br><span class="hljs-addition">+                    icon.className = &#x27;fas fa-copy&#x27;;</span><br><span class="hljs-addition">+                &#125;</span><br><span class="hljs-addition">+            &#125;, 300);</span><br><span class="hljs-addition">+        &#125;);</span><br><span class="hljs-addition">+    &#125;</span><br><br>    function adjustNavbar() &#123;<br>        const navbarWidth = $(&#x27;.navbar-main .navbar-start&#x27;).outerWidth() + $(&#x27;.navbar-main .navbar-end&#x27;).outerWidth();<br>        if ($(document).outerWidth() &lt; navbarWidth) &#123;<br>            $(&#x27;.navbar-main .navbar-menu&#x27;).addClass(&#x27;justify-content-start&#x27;);<br>        &#125; else &#123;<br>            $(&#x27;.navbar-main .navbar-menu&#x27;).removeClass(&#x27;justify-content-start&#x27;);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>hexo-theme-icarus&#x2F;layout&#x2F;common&#x2F;scripts.jsx</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><code class="hljs diff">           return &lt;Fragment&gt;<br>            &lt;script src=&#123;cdn(&#x27;jquery&#x27;, &#x27;3.3.1&#x27;, &#x27;dist/jquery.min.js&#x27;)&#125;&gt;&lt;/script&gt;<br>            &lt;script src=&#123;cdn(&#x27;moment&#x27;, &#x27;2.22.2&#x27;, &#x27;min/moment-with-locales.min.js&#x27;)&#125;&gt;&lt;/script&gt;<br>            &lt;script dangerouslySetInnerHTML=&#123;&#123; __html: `moment.locale(&quot;$&#123;language&#125;&quot;);` &#125;&#125;&gt;&lt;/script&gt;<br>            &lt;script dangerouslySetInnerHTML=&#123;&#123; __html: embeddedConfig &#125;&#125;&gt;&lt;/script&gt;<br>            &lt;script data-pjax src=&#123;url_for(&#x27;/js/column.js&#x27;)&#125;&gt;&lt;/script&gt;<br>            &lt;Plugins site=&#123;site&#125; config=&#123;config&#125; page=&#123;page&#125; helper=&#123;helper&#125; head=&#123;false&#125; /&gt;<br><span class="hljs-deletion">-           &#123;clipboard &amp;&amp; &lt;script src=&#123;cdn(&#x27;clipboard&#x27;, &#x27;2.0.4&#x27;, &#x27;dist/clipboard.min.js&#x27;)&#125; defer&gt;&lt;/script&gt;&#125;</span><br>            &lt;script data-pjax src=&#123;url_for(&#x27;/js/main.js&#x27;)&#125; defer&gt;&lt;/script&gt;<br>        &lt;/Fragment&gt;;<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="使用firebase统计阅读人数"><a href="#使用firebase统计阅读人数" class="headerlink" title="使用firebase统计阅读人数"></a>使用firebase统计阅读人数</h2><h3 id="config文件添加配置"><a href="#config文件添加配置" class="headerlink" title="config文件添加配置"></a>config文件添加配置</h3><p>_config.icarus.yml</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+# Firebase Firestore 阅读人数统计</span><br><span class="hljs-addition">+services:</span><br><span class="hljs-addition">+    firebase:</span><br><span class="hljs-addition">+        enable: true</span><br><span class="hljs-addition">+        collection: articles # Firestore数据库中的集合名称</span><br><span class="hljs-addition">+        apiKey:  # 你的Firebase API Key</span><br><span class="hljs-addition">+        projectId:  # 你的Firebase项目ID</span><br></code></pre></td></tr></table></figure>

<h3 id="文章head增加人数统计"><a href="#文章head增加人数统计" class="headerlink" title="文章head增加人数统计"></a>文章head增加人数统计</h3><p>hexo-theme-icarus&#x2F;layout&#x2F;common&#x2F;articles.jsx</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><code class="hljs diff">                            &#123;/* Visitor counter */&#125;                            <br>                            &#123;!index &amp;&amp; plugins &amp;&amp; plugins.busuanzi <span class="hljs-comment">=== true ? &lt;span class=&quot;level-item&quot; id=&quot;busuanzi_container_page_pv&quot; dangerouslySetInnerHTML=&#123;&#123;</span><br>                                __html: _p(&#x27;plugin.visit_count&#x27;, &#x27;&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;0&lt;/span&gt;&#x27;)<br>                            &#125;&#125;&gt;&lt;/span&gt; : null&#125;<br><span class="hljs-addition">+                           &#123;/* Firebase Visitor counter */&#125;</span><br><span class="hljs-addition">+                           &#123;config.services &amp;&amp; config.services.firebase &amp;&amp; config.services.firebase.enable ? &lt;span class=&quot;level-item&quot;&gt;</span><br><span class="hljs-addition">+                               &lt;i class=&quot;far fa-eye mr-1&quot;&gt;&lt;/i&gt;</span><br><span class="hljs-addition">+                               &lt;span class=&quot;firestore-visitors-count&quot;&gt;0&lt;/span&gt;</span><br><span class="hljs-addition">+                           &lt;/span&gt; : null&#125;</span><br></code></pre></td></tr></table></figure>

<h3 id="基于firebase的统计功能实现"><a href="#基于firebase的统计功能实现" class="headerlink" title="基于firebase的统计功能实现"></a>基于firebase的统计功能实现</h3><p>source&#x2F;js&#x2F;firebase_counter.js（新建）</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+/* global IcarusThemeSettings, firebase */</span><br><span class="hljs-addition">+</span><br><span class="hljs-addition">+// Firebase Counter - 阅读量统计功能</span><br><span class="hljs-addition">+</span><br><span class="hljs-addition">+if (IcarusThemeSettings &amp;&amp; IcarusThemeSettings.services &amp;&amp; IcarusThemeSettings.services.firebase &amp;&amp; IcarusThemeSettings.services.firebase.enable) &#123;</span><br><span class="hljs-addition">+    </span><br><span class="hljs-addition">+    // 初始化Firebase</span><br><span class="hljs-addition">+    try &#123;</span><br><span class="hljs-addition">+        // 确保firebase对象存在</span><br><span class="hljs-addition">+        if (typeof firebase === &#x27;undefined&#x27;) &#123;</span><br><span class="hljs-addition">+            console.error(&#x27;Firebase library not loaded&#x27;);</span><br><span class="hljs-addition">+            // 如果Firebase库未加载，隐藏计数器元素</span><br><span class="hljs-addition">+            document.querySelectorAll(&#x27;.firestore-visitors-count&#x27;).forEach(el =&gt; &#123;</span><br><span class="hljs-addition">+                el.style.display = &#x27;none&#x27;;</span><br><span class="hljs-addition">+            &#125;);</span><br><span class="hljs-addition">+        &#125; else &#123;</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            firebase.initializeApp(&#123;</span><br><span class="hljs-addition">+                apiKey: IcarusThemeSettings.services.firebase.apiKey,</span><br><span class="hljs-addition">+                projectId: IcarusThemeSettings.services.firebase.projectId</span><br><span class="hljs-addition">+            &#125;);</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            // 开发环境检测</span><br><span class="hljs-addition">+            const isLocalhost = [&#x27;localhost&#x27;, &#x27;127.0.0.1&#x27;].includes(window.location.hostname);</span><br><span class="hljs-addition">+            const isDevelopment = isLocalhost || window.location.hostname.includes(&#x27;192.168.&#x27;);</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            // 移除所有调试日志输出</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            // 获取数据库引用</span><br><span class="hljs-addition">+            const db = firebase.firestore();</span><br><span class="hljs-addition">+            const articlesCollection = IcarusThemeSettings.services.firebase.collection || &#x27;articles&#x27;;</span><br><span class="hljs-addition">+            const articles = db.collection(articlesCollection);</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            // 获取阅读次数函数</span><br><span class="hljs-addition">+            const getCount = (doc, increaseCount) =&gt; &#123;</span><br><span class="hljs-addition">+                // 获取文档数据</span><br><span class="hljs-addition">+                return doc.get().then(d =&gt; &#123;</span><br><span class="hljs-addition">+                    // 初始化计数</span><br><span class="hljs-addition">+                    let count = d.exists ? d.data().count : 0;</span><br><span class="hljs-addition">+                    </span><br><span class="hljs-addition">+                    // 如果需要增加计数（只在文章页面且未在同一会话访问过）</span><br><span class="hljs-addition">+                    if (increaseCount) &#123;</span><br><span class="hljs-addition">+                        // 增加计数</span><br><span class="hljs-addition">+                        count++;</span><br><span class="hljs-addition">+                        return doc.set(&#123; count &#125;).then(() =&gt; &#123;</span><br><span class="hljs-addition">+                            if (isDevelopment) console.log(&#x27;计数已更新:&#x27;, count);</span><br><span class="hljs-addition">+                            return count;</span><br><span class="hljs-addition">+                        &#125;).catch(error =&gt; &#123;</span><br><span class="hljs-addition">+                            console.error(&#x27;Error updating count:&#x27;, error);</span><br><span class="hljs-addition">+                            return count; // 返回增加前的计数</span><br><span class="hljs-addition">+                        &#125;);</span><br><span class="hljs-addition">+                    &#125;</span><br><span class="hljs-addition">+                    </span><br><span class="hljs-addition">+                    return count;</span><br><span class="hljs-addition">+                &#125;).catch(error =&gt; &#123;</span><br><span class="hljs-addition">+                    console.error(&#x27;Error getting count:&#x27;, error);</span><br><span class="hljs-addition">+                    // 出错时返回默认值0</span><br><span class="hljs-addition">+                    return 0;</span><br><span class="hljs-addition">+                &#125;);</span><br><span class="hljs-addition">+            &#125;;</span><br><span class="hljs-addition">+</span><br><span class="hljs-addition">+            // 处理阅读计数的函数</span><br><span class="hljs-addition">+            const handleViewCount = () =&gt; &#123;</span><br><span class="hljs-addition">+                // 获取当前URL路径</span><br><span class="hljs-addition">+                const currentPath = window.location.pathname;</span><br><span class="hljs-addition">+                </span><br><span class="hljs-addition">+                // 增强首页识别：使用多个可能的选择器</span><br><span class="hljs-addition">+                const isIndexPage = document.querySelector(&#x27;.article-list&#x27;) !== null ||</span><br><span class="hljs-addition">+                                   document.querySelector(&#x27;.article-card-list&#x27;) !== null ||</span><br><span class="hljs-addition">+                                   document.querySelectorAll(&#x27;.article-card&#x27;).length &gt; 0 || // 降低阈值以适应首页</span><br><span class="hljs-addition">+                                   (currentPath === &#x27;/&#x27; &amp;&amp; document.querySelector(&#x27;article.article&#x27;) !== null); // 特殊处理：根路径+article.article元素</span><br><span class="hljs-addition">+                </span><br><span class="hljs-addition">+                // 增强文章页面识别：使用更精确的选择器组合</span><br><span class="hljs-addition">+                // 重要：首页优先判断，且文章页判断要排除首页的情况，并增加特定的文章页特征</span><br><span class="hljs-addition">+                const isArticlePage = !isIndexPage &amp;&amp; (</span><br><span class="hljs-addition">+                    // 传统文章页选择器</span><br><span class="hljs-addition">+                    (document.querySelector(&#x27;.article-container&#x27;) !== null &amp;&amp; document.querySelector(&#x27;.article-content&#x27;) !== null) ||</span><br><span class="hljs-addition">+                    (document.querySelector(&#x27;article.post&#x27;) !== null &amp;&amp; document.querySelector(&#x27;.article-content&#x27;) !== null) ||</span><br><span class="hljs-addition">+                    document.querySelector(&#x27;[id=&quot;post-content&quot;]&#x27;) !== null ||</span><br><span class="hljs-addition">+                    // 针对hexo s环境的增强选择器，但需要确保不是首页</span><br><span class="hljs-addition">+                    (document.querySelector(&#x27;article.article&#x27;) !== null &amp;&amp; </span><br><span class="hljs-addition">+                     document.querySelector(&#x27;article.card-content.article&#x27;) !== null &amp;&amp;</span><br><span class="hljs-addition">+                     document.querySelectorAll(&#x27;.article-card&#x27;).length === 0 &amp;&amp;</span><br><span class="hljs-addition">+                     currentPath !== &#x27;/&#x27;)</span><br><span class="hljs-addition">+                );</span><br><span class="hljs-addition">+                                    </span><br><span class="hljs-addition">+                // 页面类型信息 - 仅在开发环境显示</span><br><span class="hljs-addition">+                if (isDevelopment) &#123;</span><br><span class="hljs-addition">+                    console.log(`[Firebase] 当前页面类型: $&#123;isArticlePage ? &#x27;文章页&#x27; : isIndexPage ? &#x27;首页&#x27; : &#x27;其他页面&#x27;&#125;`);</span><br><span class="hljs-addition">+                &#125;</span><br><span class="hljs-addition">+</span><br><span class="hljs-addition">+                if (isArticlePage) &#123;</span><br><span class="hljs-addition">+                    // 文章页面处理</span><br><span class="hljs-addition">+                    const titleElement = document.querySelector(&#x27;.title.is-3, .title.is-4-mobile&#x27;);</span><br><span class="hljs-addition">+                    const countElement = document.querySelector(&#x27;.firestore-visitors-count&#x27;);</span><br><span class="hljs-addition">+                    </span><br><span class="hljs-addition">+                    if (titleElement &amp;&amp; countElement) &#123;</span><br><span class="hljs-addition">+                        const title = titleElement.textContent.trim();</span><br><span class="hljs-addition">+                        const doc = articles.doc(title);</span><br><span class="hljs-addition">+                        </span><br><span class="hljs-addition">+                        // 确定是否增加计数：不在本地开发环境且同一会话未访问过</span><br><span class="hljs-addition">+                        let increaseCount = !isDevelopment;</span><br><span class="hljs-addition">+                        </span><br><span class="hljs-addition">+                        if (sessionStorage.getItem(title)) &#123;</span><br><span class="hljs-addition">+                            increaseCount = false;</span><br><span class="hljs-addition">+                        &#125; else &#123;</span><br><span class="hljs-addition">+                            // 标记为在当前会话中已访问</span><br><span class="hljs-addition">+                            sessionStorage.setItem(title, true);</span><br><span class="hljs-addition">+                        &#125;</span><br><span class="hljs-addition">+                        </span><br><span class="hljs-addition">+                        getCount(doc, increaseCount).then(count =&gt; &#123;</span><br><span class="hljs-addition">+                            countElement.innerText = count;</span><br><span class="hljs-addition">+                        &#125;).catch(e =&gt; &#123;</span><br><span class="hljs-addition">+                            // 移除错误日志</span><br><span class="hljs-addition">+                        &#125;);</span><br><span class="hljs-addition">+                    &#125; else &#123;</span><br><span class="hljs-addition">+                        // 静默处理：未找到文章标题或计数元素</span><br><span class="hljs-addition">+                    &#125;</span><br><span class="hljs-addition">+                &#125; else if (isIndexPage) &#123;</span><br><span class="hljs-addition">+                    // 首页文章列表处理</span><br><span class="hljs-addition">+                    // 修改选择器以匹配实际HTML结构</span><br><span class="hljs-addition">+                    // 首页文章结构: .card &gt; .card-content.article &gt; .title.is-3.is-size-4-mobile</span><br><span class="hljs-addition">+                    const titleElements = document.querySelectorAll(</span><br><span class="hljs-addition">+                        &#x27;.card .article .title.is-3, .card .article .title.is-4-mobile, &#x27; +</span><br><span class="hljs-addition">+                        &#x27;.card article .title.is-3, .card article .title.is-4-mobile, &#x27; +</span><br><span class="hljs-addition">+                        &#x27;.card .article p.title, .card article p.title&#x27;</span><br><span class="hljs-addition">+                    );</span><br><span class="hljs-addition">+                    const countElements = document.querySelectorAll(&#x27;.card .article .firestore-visitors-count, .card article .firestore-visitors-count&#x27;);</span><br><span class="hljs-addition">+                </span><br><span class="hljs-addition">+                // 移除首页元素检测日志</span><br><span class="hljs-addition">+                </span><br><span class="hljs-addition">+                if (titleElements.length &gt; 0 &amp;&amp; countElements.length &gt; 0) &#123;</span><br><span class="hljs-addition">+                    const promises = [...titleElements].map(element =&gt; &#123;</span><br><span class="hljs-addition">+                            const title = element.textContent.trim();</span><br><span class="hljs-addition">+                            const doc = articles.doc(title);</span><br><span class="hljs-addition">+                            // 首页只获取计数，不增加计数</span><br><span class="hljs-addition">+                            return getCount(doc, false).then(count =&gt; &#123;</span><br><span class="hljs-addition">+                                return count;</span><br><span class="hljs-addition">+                            &#125;);</span><br><span class="hljs-addition">+                        &#125;);</span><br><span class="hljs-addition">+                    </span><br><span class="hljs-addition">+                    Promise.all(promises).then(counts =&gt; &#123;</span><br><span class="hljs-addition">+                            counts.forEach((val, idx) =&gt; &#123;</span><br><span class="hljs-addition">+                                if (countElements[idx]) &#123;</span><br><span class="hljs-addition">+                                    countElements[idx].innerText = val;</span><br><span class="hljs-addition">+                                &#125;</span><br><span class="hljs-addition">+                            &#125;);</span><br><span class="hljs-addition">+                        &#125;).catch(e =&gt; &#123;</span><br><span class="hljs-addition">+                            // 错误处理：尝试显示一些默认值或替代文本</span><br><span class="hljs-addition">+                            countElements.forEach(el =&gt; &#123;</span><br><span class="hljs-addition">+                                if (el.innerText === &#x27;0&#x27;) &#123;</span><br><span class="hljs-addition">+                                    el.innerText = &#x27;加载中...&#x27;;</span><br><span class="hljs-addition">+                                &#125;</span><br><span class="hljs-addition">+                            &#125;);</span><br><span class="hljs-addition">+                        &#125;);</span><br><span class="hljs-addition">+                &#125; else &#123;</span><br><span class="hljs-addition">+                    // 尝试使用更通用的选择器</span><br><span class="hljs-addition">+                    const fallbackTitleElements = document.querySelectorAll(&#x27;.article-card a[href^=&quot;/&quot;]&#x27;);</span><br><span class="hljs-addition">+                    const fallbackCountElements = document.querySelectorAll(&#x27;.article-card .firestore-visitors-count&#x27;);</span><br><span class="hljs-addition">+                    </span><br><span class="hljs-addition">+                    if (fallbackTitleElements.length &gt; 0 &amp;&amp; fallbackCountElements.length &gt; 0) &#123;</span><br><span class="hljs-addition">+                        // 这里可以添加备选逻辑</span><br><span class="hljs-addition">+                    &#125;</span><br><span class="hljs-addition">+                &#125;</span><br><span class="hljs-addition">+                &#125; else &#123;</span><br><span class="hljs-addition">+                    // 静默处理：当前页面既不是文章页也不是首页</span><br><span class="hljs-addition">+                &#125;</span><br><span class="hljs-addition">+            &#125;;</span><br><span class="hljs-addition">++</span><br><span class="hljs-addition">+            // 监听传统页面加载完成事件</span><br><span class="hljs-addition">+            document.addEventListener(&#x27;DOMContentLoaded&#x27;, () =&gt; &#123;</span><br><span class="hljs-addition">+                handleViewCount();</span><br><span class="hljs-addition">+            &#125;);</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            // 监听PJAX页面加载完成事件（适配Icarus主题的PJAX机制）</span><br><span class="hljs-addition">+            document.addEventListener(&#x27;page:loaded&#x27;, () =&gt; &#123;</span><br><span class="hljs-addition">+                handleViewCount();</span><br><span class="hljs-addition">+            &#125;);</span><br><span class="hljs-addition">+        &#125;</span><br><span class="hljs-addition">+    &#125; catch (error) &#123;</span><br><span class="hljs-addition">+        // 移除初始化失败日志</span><br><span class="hljs-addition">+        // 如果初始化失败，尝试隐藏计数器元素以避免显示为0</span><br><span class="hljs-addition">+        document.querySelectorAll(&#x27;.firestore-visitors-count&#x27;).forEach(el =&gt; &#123;</span><br><span class="hljs-addition">+            el.style.display = &#x27;none&#x27;;</span><br><span class="hljs-addition">+        &#125;);</span><br><span class="hljs-addition">+    &#125;</span><br><span class="hljs-addition">+&#125;</span><br></code></pre></td></tr></table></figure>

<h3 id="其他一些优化"><a href="#其他一些优化" class="headerlink" title="其他一些优化"></a>其他一些优化</h3><p>hexo-theme-icarus&#x2F;layout&#x2F;common&#x2F;scripts.jsx</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><code class="hljs diff">const &#123; Component, Fragment &#125; = require(&#x27;inferno&#x27;);<br>const &#123; toMomentLocale &#125; = require(&#x27;hexo/dist/plugins/helper/date&#x27;);<br>const Plugins = require(&#x27;./plugins&#x27;);<br><br>module.exports = class extends Component &#123;<br>    render() &#123;<br>        const &#123; site, config, helper, page &#125; = this.props;<br>        const &#123; url_for, cdn &#125; = helper;<br>        const &#123; article &#125; = config;<br>        const language = toMomentLocale(page.lang || page.language || config.language || &#x27;en&#x27;);<br><br>        let fold = &#x27;unfolded&#x27;;<br>        let clipboard = true;<br>        if (article &amp;&amp; article.highlight) &#123;<br>            if (typeof article.highlight.clipboard !== &#x27;undefined&#x27;) &#123;<br>                clipboard = !!article.highlight.clipboard;<br>            &#125;<br>            if (typeof article.highlight.fold <span class="hljs-comment">=== &#x27;string&#x27;) &#123;</span><br>                fold = article.highlight.fold;<br>            &#125;<br>        &#125;<br><br>        const embeddedConfig = `var IcarusThemeSettings = &#123;<br>            article: &#123;<br>                highlight: &#123;<br>                    clipboard: $&#123;clipboard&#125;,<br>                    fold: &#x27;$&#123;fold&#125;&#x27;<br>                &#125;<br><span class="hljs-addition">+           &#125;,</span><br><span class="hljs-addition">+           services: &#123;</span><br><span class="hljs-addition">+               firebase: $&#123;config.services &amp;&amp; config.services.firebase ? JSON.stringify(config.services.firebase) : &#x27;false&#x27;&#125;</span><br>            &#125;<br>        &#125;;`;<br><br>        return &lt;Fragment&gt;<br>            &lt;script src=&#123;cdn(&#x27;jquery&#x27;, &#x27;3.3.1&#x27;, &#x27;dist/jquery.min.js&#x27;)&#125;&gt;&lt;/script&gt;<br>            &lt;script src=&#123;cdn(&#x27;moment&#x27;, &#x27;2.22.2&#x27;, &#x27;min/moment-with-locales.min.js&#x27;)&#125;&gt;&lt;/script&gt;<br>            &lt;script dangerouslySetInnerHTML=&#123;&#123; __html: `moment.locale(&quot;$&#123;language&#125;&quot;);` &#125;&#125;&gt;&lt;/script&gt;<br>            &lt;script dangerouslySetInnerHTML=&#123;&#123; __html: embeddedConfig &#125;&#125;&gt;&lt;/script&gt;<br><span class="hljs-addition">+           &#123;/* Firebase Firestore */&#125;</span><br><span class="hljs-addition">+           &#123;config.services &amp;&amp; config.services.firebase &amp;&amp; config.services.firebase.enable ? (</span><br><span class="hljs-addition">+               &lt;Fragment&gt;</span><br><span class="hljs-addition">+                   &lt;script src=&quot;https://www.gstatic.com/firebasejs/9.6.11/firebase-app-compat.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-addition">+                   &lt;script src=&quot;https://www.gstatic.com/firebasejs/9.6.11/firebase-firestore-compat.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-addition">+               &lt;/Fragment&gt;</span><br><span class="hljs-addition">+           ) : null&#125;</span><br>            &lt;script data-pjax src=&#123;url_for(&#x27;/js/column.js&#x27;)&#125;&gt;&lt;/script&gt;<br>            &lt;Plugins site=&#123;site&#125; config=&#123;config&#125; page=&#123;page&#125; helper=&#123;helper&#125; head=&#123;false&#125; /&gt;<br>            &lt;script data-pjax src=&#123;url_for(&#x27;/js/main.js&#x27;)&#125; defer&gt;&lt;/script&gt;<br><span class="hljs-addition">+           &#123;/* Firebase counter script */&#125;</span><br><span class="hljs-addition">+           &#123;config.services &amp;&amp; config.services.firebase &amp;&amp; config.services.firebase.enable ? (</span><br><span class="hljs-addition">+               &lt;script data-pjax src=&#123;url_for(&#x27;/js/firebase_counter.js&#x27;)&#125; defer&gt;&lt;/script&gt;</span><br><span class="hljs-addition">+           ) : null&#125;</span><br>        &lt;/Fragment&gt;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>week27-week30</title>
    <url>/2025/09/08/week27-week30/</url>
    <content><![CDATA[<p>2025年9月篇</p>
<span id="more"></span>

<h2 id="week27-2025-9-1-2025-9-7"><a href="#week27-2025-9-1-2025-9-7" class="headerlink" title="week27 (2025.9.1-2025.9.7)"></a>week27 (2025.9.1-2025.9.7)</h2><ul>
<li>接下来打算把周记分成四周一篇了，每周照样更新，但是四周一篇文章</li>
<li>这周（其实是上周，这段是补的）把博客主题给换了。原先想着先配置完，到时候直接把文章移到新的博客文件里，但是进度太慢了。这周直接给原博客换皮😋还更了一篇博客,真好😋(虽然还是AI出力)</li>
<li>moe week4上新题了,但是week3甚至week2还有没写完的题</li>
<li>安卓这块的笔记还没更,开学了找找时间补上</li>
</ul>
<h2 id="week28-2025-9-8-2025-9-14"><a href="#week28-2025-9-8-2025-9-14" class="headerlink" title="week28 (2025.9.8-2025.9.14)"></a>week28 (2025.9.8-2025.9.14)</h2><ul>
<li>好的手忙脚乱的开学第一周，目前学习计划有待更新。</li>
<li>这周和X2c的新师傅们组队参加了湾区杯，独立解出了一道题，还是太菜了。考察方向还挺全面，pc端、安卓甚至微信小程序都有。</li>
</ul>
<h2 id="week29-2025-9-15-2025-9-21"><a href="#week29-2025-9-15-2025-9-21" class="headerlink" title="week29 (2025.9.15-2025.9.21)"></a>week29 (2025.9.15-2025.9.21)</h2><ul>
<li>这周有个长城杯（还有个铁人三项长城杯，这俩好像不是一个），只分web、AI安全、数据安全三个方向，没做出来，爆0了</li>
<li>开学了学习状态又开始不稳定了，老是偷懒不找时间学😖这学期好几门数学相关课，要燃尽了</li>
<li>给博客新开了数据结构分类，能不能更下去看造化了(</li>
</ul>
<h2 id="week30-2025-9-22-2025-9-28"><a href="#week30-2025-9-22-2025-9-28" class="headerlink" title="week30 (2025.9.22-2025.9.28)"></a>week30 (2025.9.22-2025.9.28)</h2><ul>
<li>这周又是没有新知识的一周</li>
<li>周六又干掉一道moectf的题，只剩最后一道week2的upx_revenge了，实在没招了😖</li>
<li>感觉还是没找到学业和比赛的平衡点，这样下去恐怕一学期学的都没有一个暑假多😖不得不吐槽为什么乱七八糟的课这么多啊😖</li>
</ul>
]]></content>
      <categories>
        <category>周记</category>
      </categories>
      <tags>
        <tag>周记</tag>
      </tags>
  </entry>
  <entry>
    <title>Re:从0到1的脚本之路</title>
    <url>/2025/06/02/Re-%E4%BB%8E0%E5%88%B01%E7%9A%84%E8%84%9A%E6%9C%AC%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p>python脚本做题记录</p>
<span id="more"></span>

<h2 id="SWPUCTF-2021-新生赛-fakebase"><a href="#SWPUCTF-2021-新生赛-fakebase" class="headerlink" title="[SWPUCTF 2021 新生赛]fakebase"></a>[SWPUCTF 2021 新生赛]fakebase</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#给的代码如下：</span><br>flag = <span class="hljs-string">&#x27;xxxxxxxxxxxxxxxxxxx&#x27;</span><br><br>s_box = <span class="hljs-string">&#x27;qwertyuiopasdfghjkzxcvb123456#$&#x27;</span><br>tmp = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag:<br>    tmp += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(i)))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)<br>b1 = <span class="hljs-built_in">int</span>(tmp,<span class="hljs-number">2</span>)<br>s = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> b1//<span class="hljs-number">31</span> != <span class="hljs-number">0</span>:<br>    s += s_box[b1%<span class="hljs-number">31</span>]<br>    b1 = b1//<span class="hljs-number">31</span><br><br><span class="hljs-built_in">print</span>(s)<br><br><span class="hljs-comment"># s = u#k4ggia61egegzjuqz12jhfspfkay</span><br></code></pre></td></tr></table></figure>

<ul>
<li><p>代码中，把flag逐字符转化为二进制，截掉前缀，填充为8位，再拼接这些二进制数得到tmp</p>
</li>
<li><p>然后把tmp转化为十进制b1，不断除31，同时用余数做S_box索引，把索引值拼接得到S</p>
</li>
<li><p>所以，解密思路是，首先，还原b1：</p>
<ul>
<li>b1利用后得到一系列索引值，所以由索引值反推b1</li>
<li>逆序s对照s_box得出索引（为了从最后一个余数开始还原b1）并组成一个列表。因为循环终止条件是b1&#x2F;&#x2F;31&#x3D;&#x3D;0，所以最后一次除只利用了商等于0，而余数未知，于是从0-30假设被弃掉的余数，枚举各种可能。</li>
</ul>
</li>
<li><p>而如何判断哪种可能是我们需要的呢？就需要还原出flag并判断。把还原出来的b1转二进制，去掉前缀，填充到8的倍数方便截取二进制数，然后8个8个还原出字符，最后判断是不是flag就行了。</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">buf=<span class="hljs-string">&quot;u#k4ggia61egegzjuqz12jhfspfkay&quot;</span><br>s_box = <span class="hljs-string">&#x27;qwertyuiopasdfghjkzxcvb123456#$&#x27;</span><br><br>index_list=[]<br><span class="hljs-comment">#求索引值列表</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> buf[::-<span class="hljs-number">1</span>]:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s_box)):<br>        <span class="hljs-keyword">if</span> i == s_box[j]:<br>           index_list.append(j)<br><span class="hljs-comment">#print(index_list)</span><br><br><span class="hljs-comment">#枚举达到终止条件时的余数</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>):<br>    <span class="hljs-comment">#开始还原b1</span><br>    b1=i<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(buf)):<br>        b1=b1*<span class="hljs-number">31</span>+index_list[j]<span class="hljs-comment">#不断加余数，乘31</span><br>    tmp=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(b1)[<span class="hljs-number">2</span>:])<span class="hljs-comment">#加密流程是把tmp从2进制转10进制，这里就反着来，把b1从10进制转2进制，截去前缀</span><br>    tmp=tmp.zfill((<span class="hljs-built_in">len</span>(tmp)//<span class="hljs-number">8</span>+<span class="hljs-number">1</span>)*<span class="hljs-number">8</span>)<span class="hljs-comment">#加密时字符转成8位2进制数，反着来就是把8位2进制数转为字符，所以先把tmp 8位对齐方便后续截取</span><br>    flag=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(tmp),<span class="hljs-number">8</span>):<br>        flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(tmp[i:i+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;NSSCTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br>        <br><span class="hljs-comment">#flag = &quot;NSSCTF&#123;WHAt_BASe31&#125;&quot;</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="SWPUCTF-2021-新生赛-非常简单的逻辑题"><a href="#SWPUCTF-2021-新生赛-非常简单的逻辑题" class="headerlink" title="[SWPUCTF 2021 新生赛]非常简单的逻辑题"></a>[SWPUCTF 2021 新生赛]非常简单的逻辑题</h2><ul>
<li><p>题目给的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">&#x27;xxxxxxxxxxxxxxxxxxxxx&#x27;</span><br>s = <span class="hljs-string">&#x27;wesyvbniazxchjko1973652048@$+-&amp;*&lt;&gt;&#x27;</span><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    s1 = <span class="hljs-built_in">ord</span>(flag[i])//<span class="hljs-number">17</span><br>    s2 = <span class="hljs-built_in">ord</span>(flag[i])%<span class="hljs-number">17</span><br>    result += s[(s1+i)%<span class="hljs-number">34</span>]+s[-(s2+i+<span class="hljs-number">1</span>)%<span class="hljs-number">34</span>]<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># result = &#x27;v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i&#x27;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>加密思路是：逐字符取flag，通过&#x2F;&#x2F;和%操作得到两个值s1和s2，把这两个值处理后，作为索引在s中索引出字符，拼接得到result</p>
</li>
<li><p>逆着来应该是把result错位分开，分成和s1有关的与和s2有关的，然后求出索引值，逆两个取余过程得到s1和s2，再把s1和s2运算得到flag字符</p>
</li>
<li><p>很显然，这个过程十分复杂，因为涉及取模的还原</p>
</li>
<li><p>所以考虑顺着加密的思路走，从常见的字符十进制值枚举，遇到加密后结果和result一样的就拿来拼接flag</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;wesyvbniazxchjko1973652048@$+-&amp;*&lt;&gt;&#x27;</span><br>result = <span class="hljs-string">&#x27;v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i&#x27;</span><br>tmp=<span class="hljs-string">&#x27;&#x27;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment">#提取出result里和s1、s2相关的字符</span><br>s1_list=[]<br>s2_list=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(result),<span class="hljs-number">2</span>):<br>    s1_list.append(result[i])<br>    s2_list.append(result[i+<span class="hljs-number">1</span>])<br><span class="hljs-comment">#开始爆破</span><br><span class="hljs-comment">#先求出加密过程两个索引值</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s1_list)):<br>    index1=s.index(s1_list[i])<br>    index2=s.index(s2_list[i])<br>    <span class="hljs-comment">#以索引值为判断条件，在常见字符的范围内重现加密过程，加密结果和索引值一致即为flag的字符</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>,<span class="hljs-number">126</span>):<br>        s1=j//<span class="hljs-number">17</span><br>        s2=j%<span class="hljs-number">17</span><br>        <span class="hljs-keyword">if</span> (s1 + i) % <span class="hljs-number">34</span>==index1 <span class="hljs-keyword">and</span> -(s2 + i + <span class="hljs-number">1</span>) % <span class="hljs-number">34</span>==index2:<br>            flag+=<span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#flag = &quot;NSSCTF&#123;Fake_RERE_QAQ&#125;&quot;&quot;</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="SWPUCTF-2021-新生赛-re2"><a href="#SWPUCTF-2021-新生赛-re2" class="headerlink" title="[SWPUCTF 2021 新生赛]re2"></a>[SWPUCTF 2021 新生赛]re2</h2><ul>
<li><p>IDA打开，代码如下：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-13%20214924.png" alt="RE2"></p>
</li>
<li><p>简单的字符处理，先判断字符是否在范围内，然后采用不同处理方式</p>
</li>
<li><p>直接正向利用代码，省点脑子。</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">alpha=<span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&#123;&#125;-_&#x27;</span><br>dic=&#123;&#125;<br><span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;ylqq]aycqyp&#123;&#x27;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> alpha:<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ord</span>(i)&lt;=<span class="hljs-number">96</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">ord</span>(i)&gt;<span class="hljs-number">98</span>) <span class="hljs-keyword">and</span> (<span class="hljs-built_in">ord</span>(i)&lt;=<span class="hljs-number">64</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">ord</span>(i)&gt;<span class="hljs-number">66</span>):<br>        dic[<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">2</span>)]=i<br>    <span class="hljs-keyword">else</span>:<br>        dic[<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i)+<span class="hljs-number">24</span>)]=i<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>    flag+=dic[i]<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#flag = &#x27;NSSCTF&#123;nss_caesar&#125;&#x27;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>直接得出来的结果是{nss_c{es{r}，显然不对，猜测对应关系不唯一。打印出alpha经过处理后的结果，发现’{‘和’a’都对应’y’，所以把显然不对劲的两个’ { ‘改成’ a ‘</p>
</li>
</ul>
<h2 id="WUSTCTF-2020-level1"><a href="#WUSTCTF-2020-level1" class="headerlink" title="[WUSTCTF 2020]level1"></a>[WUSTCTF 2020]level1</h2><ul>
<li><p>附件给了ELF文件和一个txt，反汇编代码如下：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-14%20214810.png" alt="LEVEL1"></p>
</li>
<li><p>逻辑就是从flag文件里读数据，然后存到ptr里。后面是简单的可逆处理，但是要注意ptr是从下标1开始用的。给的txt应该就是处理后的结果，把它转成一个列表，第一位随便填一个数。然后逆。</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">output=[<span class="hljs-number">0</span>, <span class="hljs-number">198</span>, <span class="hljs-number">232</span>, <span class="hljs-number">816</span>, <span class="hljs-number">200</span>, <span class="hljs-number">1536</span>, <span class="hljs-number">300</span>, <span class="hljs-number">6144</span>, <span class="hljs-number">984</span>, <span class="hljs-number">51200</span>, <span class="hljs-number">570</span>, <span class="hljs-number">92160</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">565248</span>, <span class="hljs-number">756</span>, <span class="hljs-number">1474560</span>, <span class="hljs-number">800</span>, <span class="hljs-number">6291456</span>, <span class="hljs-number">1782</span>, <span class="hljs-number">65536000</span>]<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(output)):<br>    <span class="hljs-keyword">if</span> (i&amp;<span class="hljs-number">1</span>)!=<span class="hljs-number">0</span>:<br>        flag+=<span class="hljs-built_in">chr</span>(output[i]&gt;&gt;i)<br>    <span class="hljs-keyword">else</span>:<br>        flag+=<span class="hljs-built_in">chr</span>(output[i]//i)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#flag = &#x27;NSSCTF&#123;d9-dE6-20c&#125;&#x27;（改了前缀）</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="SWPUCTF-2021-新生赛-简简单单的解密"><a href="#SWPUCTF-2021-新生赛-简简单单的解密" class="headerlink" title="[SWPUCTF 2021 新生赛]简简单单的解密"></a>[SWPUCTF 2021 新生赛]简简单单的解密</h2><ul>
<li><p>给的python代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64,urllib.parse<br>key = <span class="hljs-string">&quot;HereIsFlagggg&quot;</span><br>flag = <span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxx&quot;</span><br><br>s_box = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>j = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    j = (j + s_box[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>    s_box[i], s_box[j] = s_box[j], s_box[i]<br>res = []<br>i = j = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> flag:<br>    i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>    j = (j + s_box[i]) % <span class="hljs-number">256</span><br>    s_box[i], s_box[j] = s_box[j], s_box[i]<br>    t = (s_box[i] + s_box[j]) % <span class="hljs-number">256</span><br>    k = s_box[t]<br>    res.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s) ^ k))<br>cipher = <span class="hljs-string">&quot;&quot;</span>.join(res)<br>crypt = (<span class="hljs-built_in">str</span>(base64.b64encode(cipher.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)), <span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>enc = <span class="hljs-built_in">str</span>(base64.b64decode(crypt),<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>enc = urllib.parse.quote(enc)<br><span class="hljs-built_in">print</span>(enc)<br><span class="hljs-comment"># enc = %C2%A6n%C2%87Y%1Ag%3F%C2%A01.%C2%9C%C3%B7%C3%8A%02%C3%80%C2%92W%C3%8C%C3%BA</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>采用的加密算法是标准RC4，加密两遍恢复明文。最后面的调用base的两行经过调试发现相互抵消，所以整个逻辑就是先RC4加密，然后用urllib.parse.quote()方法编码，编码部分用原库自带的urllib.parse.unquote()就行了</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>enc = <span class="hljs-string">&#x27;%C2%A6n%C2%87Y%1Ag%3F%C2%A01.%C2%9C%C3%B7%C3%8A%02%C3%80%C2%92W%C3%8C%C3%BA&#x27;</span><br>buf=urllib.parse.unquote(enc)<br>result=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> buf:<br>    result.append(i)<br><br>key = <span class="hljs-string">&quot;HereIsFlagggg&quot;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">RC4</span>(<span class="hljs-params">flag</span>):<br>    s_box = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s_box[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>        s_box[i], s_box[j] = s_box[j], s_box[i]<br>    res = []<br>    i = j = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> flag:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + s_box[i]) % <span class="hljs-number">256</span><br>        s_box[i], s_box[j] = s_box[j], s_box[i]<br>        t = (s_box[i] + s_box[j]) % <span class="hljs-number">256</span><br>        k = s_box[t]<br>        res.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s) ^ k))<br>    cipher = <span class="hljs-string">&quot;&quot;</span>.join(res)<br>    <span class="hljs-keyword">return</span> cipher<br><br>flag+=RC4(result)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># flag = &#x27;NSSCTF&#123;REAL_EZ_RC4&#125;&#x27;</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="LitCTF-2023-ez-XOR"><a href="#LitCTF-2023-ez-XOR" class="headerlink" title="[LitCTF 2023]ez_XOR"></a>[LitCTF 2023]ez_XOR</h2><ul>
<li><p>IDA打开，如图</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20215658.png" alt="ez_XOR"></p>
</li>
<li><p>用XOR函数对输入做处理后，与str比较。打开XOR：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20215712.png" alt="function_xor"></p>
</li>
<li><p>功能就是遍历字符，异或处理，再异或一遍就可以了</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;E`&#125;J]OrQF[V8zV:hzpV&#125;fVF[t&#x27;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i])^<span class="hljs-number">9</span>)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># flag = &#x27;NSSCTF&#123;XOR_1s_3asy_to_OR&#125;&#x27;(前缀做了改动)</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="HUBUCTF-2022-新生赛-simple-RE"><a href="#HUBUCTF-2022-新生赛-simple-RE" class="headerlink" title="[HUBUCTF 2022 新生赛]simple_RE"></a>[HUBUCTF 2022 新生赛]simple_RE</h2><ul>
<li><p>IDA打开，如图</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20223128.png" alt="simpleRE"></p>
</li>
<li><p>加密函数看起来逻辑很复杂，但是点开名字很奇怪的数组，发现一个编码表，可以推测是base64编码。</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20223308.png" alt="加密函数"></p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20223321.png" alt="编码表"></p>
</li>
<li><p>回过头看给的用来比较的字符串，基本可以确定是base64换表编码</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20223431.png" alt="预设字符串"></p>
</li>
<li><p>找到了一个可以自定义编码表的python库cusbase64，可以用config指定编码表，这样就容易多了</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cusbase64<br>table=<span class="hljs-string">&#x27;qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD&#x27;</span><br>enc=<span class="hljs-string">&#x27;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM/8==&#x27;</span><br>b=cusbase64.CusBase64()<br>b.config(table)<br>b.decode(enc)<br><span class="hljs-comment">#flag = &#x27;NSSCTF&#123;a8d4347722800e72e34e1aba3fe914ae&#125;&#x27;</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="NSSCTF-2022-Spring-Recruit-easy-C"><a href="#NSSCTF-2022-Spring-Recruit-easy-C" class="headerlink" title="[NSSCTF 2022 Spring Recruit]easy C"></a>[NSSCTF 2022 Spring Recruit]easy C</h2><ul>
<li><p>题目给的是c源文件，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><br><span class="hljs-built_in">int</span> main()&#123;<br>    char a[]=<span class="hljs-string">&quot;wwwwwww&quot;</span>;<br>    char b[]=<span class="hljs-string">&quot;d`vxbQd&quot;</span>;<br><br>    //<span class="hljs-keyword">try</span> to find out the flag<br>    printf(<span class="hljs-string">&quot;please input flag:&quot;</span>);<br>    scanf(<span class="hljs-string">&quot; %s&quot;</span>,&amp;a);<br><br>    <span class="hljs-keyword">if</span>(strlen(a)!=<span class="hljs-number">7</span>)&#123;<br>        printf(<span class="hljs-string">&quot;NoNoNo\n&quot;</span>);<br>        system(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)&#123;<br>        a[i]++;<br>        a[i]=a[i]^<span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!strcmp(a,b))&#123;<br>        printf(<span class="hljs-string">&quot;good!\n&quot;</span>);<br>        system(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    printf(<span class="hljs-string">&quot;NoNoNo\n&quot;</span>);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    //flag 记得包上 NSSCTF&#123;&#125; 再提交!!!<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>分析逻辑，把输入的flag按字符先递增，再和2异或，得到的新数组应该和b一样。逆着来就是先异或再递减。</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;d`vxbQd&#x27;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>    flag+=<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(i)^<span class="hljs-number">2</span>)-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#flag = &#x27;NSSCTF&#123;easy_Re&#125;&#x27;</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="NSSCTF-2022-Spring-Recruit-easy-Python"><a href="#NSSCTF-2022-Spring-Recruit-easy-Python" class="headerlink" title="[NSSCTF 2022 Spring Recruit]easy Python"></a>[NSSCTF 2022 Spring Recruit]easy Python</h2><ul>
<li><p>题目给的py源码，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">string,string2</span>):<br>    tmp_str = <span class="hljs-built_in">str</span>()<br>    ret = <span class="hljs-built_in">str</span>()<br>    bit_string_str = string.encode()<br>    remain = <span class="hljs-built_in">len</span>( string ) % <span class="hljs-number">3</span><br>    remain_str = <span class="hljs-built_in">str</span>()<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> bit_string_str:<br>        b_char = (<span class="hljs-built_in">bin</span>(char)[<span class="hljs-number">2</span>:])<br>        b_char = <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">8</span>-<span class="hljs-built_in">len</span>(b_char)) + b_char<br>        tmp_str += b_char<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tmp_str)//<span class="hljs-number">6</span>):<br>        temp_nub = <span class="hljs-built_in">int</span>(tmp_str[i*<span class="hljs-number">6</span>:<span class="hljs-number">6</span>*(i+<span class="hljs-number">1</span>)],<span class="hljs-number">2</span>)<br>        ret += string2[temp_nub]<br>    <span class="hljs-keyword">if</span> remain==<span class="hljs-number">2</span>:<br>        remain_str = tmp_str[-<span class="hljs-number">4</span>:] + <span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">2</span><br>        temp_nub = <span class="hljs-built_in">int</span>(remain_str,<span class="hljs-number">2</span>)<br>        ret += string2[temp_nub] + <span class="hljs-string">&quot;=&quot;</span><br>    <span class="hljs-keyword">elif</span> remain==<span class="hljs-number">1</span>:<br>        remain_str = tmp_str[-<span class="hljs-number">2</span>:] + <span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">4</span><br>        temp_nub = <span class="hljs-built_in">int</span>(remain_str,<span class="hljs-number">2</span>)<br>        ret += string2[temp_nub] + <span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> ret.replace(<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br><br>res = encode(<span class="hljs-built_in">input</span>(),string.ascii_uppercase+string.ascii_lowercase+string.digits+<span class="hljs-string">&#x27;+/&#x27;</span>)<br><br><span class="hljs-keyword">if</span> res == <span class="hljs-string">&quot;TlNTQ1RGe2Jhc2U2NCEhfQ&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;good!&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;bad!&quot;</span>)<br></code></pre></td></tr></table></figure>
</li>
<li><p>细细一看，encode()里面有加“&#x3D;”的操作，并且使用的string2是字母大小写+数字+’+&#x2F;‘，推测是base64，但是注意到encode()返回的时候把“&#x3D;”替换成了“”，也就是删除了“&#x3D;&#x3D;”，所以要把后面用于比较的也就是加密后的字符串加上“&#x3D;”</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pybase64<br><span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;TlNTQ1RGe2Jhc2U2NCEhfQ==&#x27;</span><br>flag=pybase64.b64decode(<span class="hljs-built_in">str</span>)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#flag = &#x27;NSSCTF&#123;base64!!&#125;&#x27;</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="SWPUCTF-2021-新生赛-fakerandom"><a href="#SWPUCTF-2021-新生赛-fakerandom" class="headerlink" title="[SWPUCTF 2021 新生赛]fakerandom"></a>[SWPUCTF 2021 新生赛]fakerandom</h2><ul>
<li><p>依旧是Py源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>flag = <span class="hljs-string">&#x27;xxxxxxxxxxxxxxxxxxxx&#x27;</span><br>random.seed(<span class="hljs-number">1</span>)<br>l = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    l.append(random.getrandbits(<span class="hljs-number">8</span>))<br>result=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(l)):<br>    random.seed(l[i])<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        result.append(<span class="hljs-built_in">ord</span>(flag[i*<span class="hljs-number">5</span>+n])^random.getrandbits(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># result = [201, 8, 198, 68, 131, 152, 186, 136, 13, 130, 190, 112, 251, 93, 212, 1, 31, 214, 116, 244]</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>逻辑就是，用生成的伪随机数来异或flag的特定位。异或可逆，已知种子，伪随机数可以确定。所以只需要在源码的基础上稍作改动，把result和flag的位置调换一下就可以了</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>result = [<span class="hljs-number">201</span>, <span class="hljs-number">8</span>, <span class="hljs-number">198</span>, <span class="hljs-number">68</span>, <span class="hljs-number">131</span>, <span class="hljs-number">152</span>, <span class="hljs-number">186</span>, <span class="hljs-number">136</span>, <span class="hljs-number">13</span>, <span class="hljs-number">130</span>, <span class="hljs-number">190</span>, <span class="hljs-number">112</span>, <span class="hljs-number">251</span>, <span class="hljs-number">93</span>, <span class="hljs-number">212</span>, <span class="hljs-number">1</span>, <span class="hljs-number">31</span>, <span class="hljs-number">214</span>, <span class="hljs-number">116</span>, <span class="hljs-number">244</span>]<br>random.seed(<span class="hljs-number">1</span>)<br>l = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    l.append(random.getrandbits(<span class="hljs-number">8</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(l)):<br>    random.seed(l[i])<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        flag+=<span class="hljs-built_in">chr</span>(result[i*<span class="hljs-number">5</span>+n]^random.getrandbits(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#flag = &#x27;NSSCTF&#123;FakeE_random&#125;&#x27;</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="HNCTF-2022-Week1-X0r"><a href="#HNCTF-2022-Week1-X0r" class="headerlink" title="[HNCTF 2022 Week1]X0r"></a>[HNCTF 2022 Week1]X0r</h2><ul>
<li><p>IDA打开，main函数如下：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-22%20214614.png" alt="main函数"></p>
<p>可以看出，逻辑就是对输入的字符串按字符异或处理，最后与给定的arr比较</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">arr=[<span class="hljs-number">0x000003FE</span>, <span class="hljs-number">0x000003EB</span>, <span class="hljs-number">0x000003EB</span>, <span class="hljs-number">0x000003FB</span>, <span class="hljs-number">0x000003E4</span>, <span class="hljs-number">0x000003F6</span>, <span class="hljs-number">0x000003D3</span>, <span class="hljs-number">0x000003D0</span>, <span class="hljs-number">0x00000388</span>, <span class="hljs-number">0x000003CA</span>, <span class="hljs-number">0x000003EF</span>, <span class="hljs-number">0x00000389</span>, <span class="hljs-number">0x000003CB</span>, <span class="hljs-number">0x000003EF</span>, <span class="hljs-number">0x000003CB</span>, <span class="hljs-number">0x00000388</span>, <span class="hljs-number">0x000003EF</span>, <span class="hljs-number">0x000003D5</span>, <span class="hljs-number">0x000003D9</span>, <span class="hljs-number">0x000003CB</span>, <span class="hljs-number">0x000003D1</span>, <span class="hljs-number">0x000003CD</span>]<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(arr)):<br>    flag+=<span class="hljs-built_in">chr</span>((arr[i]-<span class="hljs-number">900</span>)^<span class="hljs-number">0x34</span>)<br><span class="hljs-built_in">print</span>(flag)<br>flag = <span class="hljs-string">&#x27;NSSCTF&#123;x0r_1s_s0_easy&#125;&#x27;</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="HGAME-2023-week1-easyenc"><a href="#HGAME-2023-week1-easyenc" class="headerlink" title="[HGAME 2023 week1]easyenc"></a>[HGAME 2023 week1]easyenc</h2><ul>
<li><p>IDA打开，main函数如图</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-25%20214452.png" alt="main函数"></p>
</li>
<li><p>可以看到逻辑就是先遍历出输入字符串的长度（ * ( ( _BYTE *) v9 + v4 )这样的格式可以看成：v9[v4]，算是一种经验吧）然后循环对输入的字符串按字符进行运算，最后与给定的数据比较。</p>
</li>
<li><p>难点在于，给的是10个元素的数组，而输入的字符串却要求是41个字符。看来V7的格式不是很对，要把这么多位的数据进行划分才行。v7是DWORD类型，而参与运算的v9用的是BYTE类型，1DWORD&#x3D;4BYTE，要把v7的数分成4部分，这里的数据不好提取，可以直接丢给AI。当然手动复制也可以。</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">buf=[<span class="hljs-number">0x9FDFF04</span>,<span class="hljs-number">0xB0F301</span>,<span class="hljs-number">0xADF00500</span>,<span class="hljs-number">0x5170607</span>,<span class="hljs-number">0x17FD17EB</span>,<span class="hljs-number">0x1EE01EA</span>,<span class="hljs-number">0xFA05B1EA</span>,<span class="hljs-number">0xAC170108</span>,<span class="hljs-number">0xFDEA01EC</span>,<span class="hljs-number">0x60705F0</span>]<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br>buf1 = []<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> buf:<br>    bytes_data = num.to_bytes(<span class="hljs-number">4</span>, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>)<br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> bytes_data:<br>        buf1.append(<span class="hljs-built_in">hex</span>(byte))<br><span class="hljs-comment">#print(buf1)</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> buf1:<br>    tmp=((<span class="hljs-built_in">int</span>(num,<span class="hljs-number">16</span>)+<span class="hljs-number">86</span>)^<span class="hljs-number">0x32</span>)&amp;<span class="hljs-number">0xff</span><br>    flag+=<span class="hljs-built_in">chr</span>(tmp)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#flag = &#x27;NSSCTF&#123;4ddit1on_is_a_rever5ible_0peration&#125;&#x27;（修改了前缀）</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>当然得多学一点，所以手搓v7，找DS问一下怎么处理数据，得到如上的方法。</p>
<ul>
<li><p>用to_bytes把v7的数转成字节形式，byteorder指定了小端序，然后hex转换成十六进制数存入新列表。至于为什么要转成十六进制数，和下面的代码有关。</p>
</li>
<li><p>然后用新列表的元素进行逆运算。因为直接使用这些元素会被判成字符，所以前面先转成十六进制数，再用int转成十进制数，这样就可以正常运算了</p>
</li>
<li><p>最后还要&amp;0xff，因为逆出来的数据有点超出ascii码范围了</p>
</li>
<li><p>还有就是，这样得出来的flag其实缺了一个“ } ”。回头看反编译的代码，那个未命名的用来输入v9的实际上不是纯粹的scanf那样的函数。里面有个FILE指针，推测是读文件的函数。所以读取的内容结尾按道理会有’\0’。但是，加上了’\0’算出来的flag也没有’ } ‘。所以，凭常识加上’ } ‘。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Reverse学习笔记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>week31-week34</title>
    <url>/2025/10/05/week31-week34/</url>
    <content><![CDATA[<p>2025年10月篇</p>
<span id="more"></span>

<h2 id="week31-2025-9-29-2025-10-5"><a href="#week31-2025-9-29-2025-10-5" class="headerlink" title="week31 (2025.9.29-2025.10.5)"></a>week31 (2025.9.29-2025.10.5)</h2><ul>
<li>这周碰上国庆假期，趁着假期狠狠研究moectf的upx_revenge。花了两天时间琢磨出了.rsrc段应该有问题（之前不知道哪里找的工具给修复到程序能运行但是闪退了，后面拿正常加壳程序对比一下不同的地方在.rsrc段），然后把.rsrc段的ResourceDirectoryTable给修复的差不多了，剩一个Data一直对不上。没招了去找出题人交流，结果发现是upx特征段的问题🫠一个月了终于解出这道题了😭太好了，终于是ak过的人了😭</li>
<li>0xGame2025也是开打了，靠新生赛攒经验这一块(</li>
<li>想着接下来朝逆向开发这一块学学，发现这一类笔记应该归为开发而不是逆向🤔所以又开了一个新分类。</li>
<li>哈基米的，老是感觉自己懂得太少了，但是又不知道从哪里开始学这些知识😭</li>
</ul>
<h2 id="week32-2025-10-6-2025-10-12"><a href="#week32-2025-10-6-2025-10-12" class="headerlink" title="week32 (2025.10.6-2025.10.12)"></a>week32 (2025.10.6-2025.10.12)</h2><ul>
<li>这周好像没什么可以写的🫥一半放假一半上课的，有点割裂感</li>
<li>0xGameweek1和Moectf的WriteUP也是放上了。这周主要在做0xGame还有?CTF的题，周末有个羊城杯可以打，但是国庆玩过头了没报上名🫥还有个领航杯来着，这个截止的更早，9.29截止的，没注意看时间也错过了🫠</li>
<li>好想莫名其妙的哈几下气🫥</li>
</ul>
<h2 id="week33-2025-10-13-2025-10-19"><a href="#week33-2025-10-13-2025-10-19" class="headerlink" title="week33 (2025.10.13-2025.10.19)"></a>week33 (2025.10.13-2025.10.19)</h2><ul>
<li>这周还是主要做0xGame和?CTF的题。目前两个比赛week1week2的题目是都做出来了，但是借用了不属于自己的力量(</li>
<li>加密算法逆向和脚本这块还是得练啊🫠</li>
<li>周末打了强网杯，拼尽全力无法战胜，只做出了一道Re简单题，脚本还是AI梭的🫠</li>
</ul>
<h2 id="week34-2025-10-20-2025-10-26"><a href="#week34-2025-10-20-2025-10-26" class="headerlink" title="week34 (2025.10.20-2025.10.26)"></a>week34 (2025.10.20-2025.10.26)</h2><ul>
<li>这周掉状态了。0xGameweek3上难度了，差点没做完（Calamaity_Fortne因为数据提取错误没及时解出来😭），week4更是有点魔鬼（题目都好抽象</li>
<li>?CTFweek3开始没打了，人有点乱了，WP没有及时写积了好多（0xGameweek3和?CTFweek1、2），加上赛题难度开始上来了，所以实在忙不过来，更别说还有学业（怎么平衡啊😭</li>
<li>😭😭🫠🫠🫥🫥</li>
</ul>
]]></content>
      <categories>
        <category>周记</category>
      </categories>
      <tags>
        <tag>周记</tag>
      </tags>
  </entry>
  <entry>
    <title>湾区杯初赛WriteUp&amp;复现</title>
    <url>/2025/10/03/%E6%B9%BE%E5%8C%BA%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp&amp;%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>和X2c的nixware、Ky4niT3师傅参加了线上初赛，但是寄了。第一次组队参赛，还是太菜了。Re方向解了一道，然后和师傅们拼凑出了一道。基本就是签到题靠AI，难题没思路，见识还是太少了</p>
<span id="more"></span>

<h2 id="WriteUp"><a href="#WriteUp" class="headerlink" title="WriteUp"></a>WriteUp</h2><h3 id="hardtest"><a href="#hardtest" class="headerlink" title="hardtest"></a>hardtest</h3><ul>
<li><p>附件程序用IDA打开，shift+F12在字符串表通过关键字“flag:”可以找到main函数位置</p>
<p><img src="/../images/image-20251003142543591.png" alt="字符串表"></p>
</li>
<li><p>以下是优化后的main函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seed; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> __int64 scale1; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">void</span> *temp1; <span class="hljs-comment">// rsp</span><br>  <span class="hljs-type">unsigned</span> __int64 scale2; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">void</span> *temp2; <span class="hljs-comment">// rsp</span><br>  <span class="hljs-type">char</span> temp; <span class="hljs-comment">// al</span><br>  _QWORD buf[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+8h] [rbp-F0h] BYREF</span><br>  __int64 i_2; <span class="hljs-comment">// [rsp+18h] [rbp-E0h]</span><br>  __int64 v12; <span class="hljs-comment">// [rsp+20h] [rbp-D8h]</span><br>  <span class="hljs-type">char</span> input; <span class="hljs-comment">// [rsp+29h] [rbp-CFh] BYREF</span><br>  <span class="hljs-type">char</span> judge; <span class="hljs-comment">// [rsp+2Ah] [rbp-CEh]</span><br>  <span class="hljs-type">char</span> randNum; <span class="hljs-comment">// [rsp+2Bh] [rbp-CDh]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+2Ch] [rbp-CCh]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+30h] [rbp-C8h]</span><br>  <span class="hljs-type">int</span> length; <span class="hljs-comment">// [rsp+34h] [rbp-C4h]</span><br>  __int64 v19; <span class="hljs-comment">// [rsp+38h] [rbp-C0h]</span><br>  __int64 Buf; <span class="hljs-comment">// [rsp+40h] [rbp-B8h]</span><br>  __int64 v21; <span class="hljs-comment">// [rsp+48h] [rbp-B0h]</span><br>  _QWORD *Enc; <span class="hljs-comment">// [rsp+50h] [rbp-A8h]</span><br>  <span class="hljs-type">char</span> flag[<span class="hljs-number">104</span>]; <span class="hljs-comment">// [rsp+58h] [rbp-A0h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v24; <span class="hljs-comment">// [rsp+C0h] [rbp-38h]</span><br><br>  v24 = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  <span class="hljs-built_in">setbuf</span>(stdin, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">setbuf</span>(stdout, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">setbuf</span>(stderr, <span class="hljs-number">0LL</span>);<br>  seed = <span class="hljs-built_in">time</span>(<span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">srand</span>(seed);<br>  randNum = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">255</span> + <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input your number(1-255): &quot;</span>);<br>  <span class="hljs-keyword">if</span> ( __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input) == <span class="hljs-number">1</span> &amp;&amp; randNum == input )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-built_in">getchar</span>() != <span class="hljs-number">10</span> )<br>      ;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flag: &quot;</span>);<br>    <span class="hljs-built_in">fgets</span>(flag, <span class="hljs-number">100</span>, stdin);                    <span class="hljs-comment">// 获取flag输入</span><br>    flag[<span class="hljs-built_in">strcspn</span>(flag, <span class="hljs-string">&quot;\n&quot;</span>)] = <span class="hljs-number">0</span>;<br>    length = <span class="hljs-built_in">strlen</span>(flag);<br>    v19 = length - <span class="hljs-number">1LL</span>;<br>    i_2 = length;<br>    v12 = <span class="hljs-number">0LL</span>;<br>    buf[<span class="hljs-number">0</span>] = length;<br>    buf[<span class="hljs-number">1</span>] = <span class="hljs-number">0LL</span>;<br>    scale1 = <span class="hljs-number">16</span> * ((length + <span class="hljs-number">15LL</span>) / <span class="hljs-number">0x10uLL</span>);  <span class="hljs-comment">// 在动态分配栈上的内存</span><br>    <span class="hljs-keyword">while</span> ( buf != (buf - (scale1 &amp; <span class="hljs-number">0xFFFFFFFFFFFFF000LL</span>)) )<br>      ;<br>    temp1 = <span class="hljs-built_in">alloca</span>(scale1 &amp; <span class="hljs-number">0xFFF</span>);<br>    <span class="hljs-keyword">if</span> ( (scale1 &amp; <span class="hljs-number">0xFFF</span>) != <span class="hljs-number">0</span> )<br>      *(&amp;buf[<span class="hljs-number">-1</span>] + (scale1 &amp; <span class="hljs-number">0xFFF</span>)) = *(&amp;buf[<span class="hljs-number">-1</span>] + (scale1 &amp; <span class="hljs-number">0xFFF</span>));<br>    Buf = buf;                                  <span class="hljs-comment">// Buf指向分配的内存</span><br>    <span class="hljs-built_in">encrypt1</span>(flag, buf);                        <span class="hljs-comment">// 对flag进行加密，加密结果实际上由Buf记录，buf是一个通用的缓存空间</span><br>    v21 = length - <span class="hljs-number">1LL</span>;<br>    scale2 = <span class="hljs-number">16</span> * ((length + <span class="hljs-number">15LL</span>) / <span class="hljs-number">0x10uLL</span>);  <span class="hljs-comment">// 再次动态分配栈上的内存</span><br>    <span class="hljs-keyword">while</span> ( buf != (buf - (scale2 &amp; <span class="hljs-number">0xFFFFFFFFFFFFF000LL</span>)) )<br>      ;<br>    temp2 = <span class="hljs-built_in">alloca</span>(scale2 &amp; <span class="hljs-number">0xFFF</span>);<br>    <span class="hljs-keyword">if</span> ( (scale2 &amp; <span class="hljs-number">0xFFF</span>) != <span class="hljs-number">0</span> )<br>      *(&amp;buf[<span class="hljs-number">-1</span>] + (scale2 &amp; <span class="hljs-number">0xFFF</span>)) = *(&amp;buf[<span class="hljs-number">-1</span>] + (scale2 &amp; <span class="hljs-number">0xFFF</span>));<br>    Enc = buf;                                  <span class="hljs-comment">// Enc指向分配的内存</span><br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; length; ++i )<br>    &#123;<br>      temp = <span class="hljs-built_in">encrypt2</span>(*(Buf + i));              <span class="hljs-comment">// 对上一轮加密的结果再进行一次加密，加密结果由Enc记录</span><br>      *(Enc + i) = temp;<br>    &#125;<br>    judge = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; length; ++j )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( *(Enc + j) != byte_2120[j] )         <span class="hljs-comment">// 判断加密结果是否正确</span><br>      &#123;<br>        judge = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( judge )<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;right&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function">__int64 __fastcall <span class="hljs-title">encrypt1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *flag, __int64 buf)</span></span><br><span class="hljs-function"></span>&#123;<br>  __int64 count; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+14h] [rbp-1Ch]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> length; <span class="hljs-comment">// [rsp+18h] [rbp-18h]</span><br><br>  length = <span class="hljs-built_in">strlen</span>(flag);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )<br>  &#123;<br>    count = i;<br>    <span class="hljs-keyword">if</span> ( i &gt;= length )<br>      <span class="hljs-keyword">break</span>;<br>    *(i + buf) = <span class="hljs-built_in">rol</span>(flag[i], (i % <span class="hljs-number">7</span>) + <span class="hljs-number">1</span>);     <span class="hljs-comment">// return (flag[i] &lt;&lt; ((i%7)+1)) | (flag[i] &gt;&gt; (8 - ((i%7)+1)))</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function">__int64 __fastcall <span class="hljs-title">encrypt2</span><span class="hljs-params">(<span class="hljs-type">char</span> Buf_i)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">unsigned</span> __int8 v1; <span class="hljs-comment">// al</span><br>  <span class="hljs-type">unsigned</span> __int8 v3; <span class="hljs-comment">// [rsp+15h] [rbp-3h]</span><br><br>  v1 = <span class="hljs-built_in">rol</span>(Buf_i ^ <span class="hljs-number">0x5Au</span>, <span class="hljs-number">3</span>);                   <span class="hljs-comment">// return (a1^0x5Au &lt;&lt; 3) | (a1^0x5Au &gt;&gt; (8 - 3));</span><br>  v3 = <span class="hljs-built_in">sub_1313</span>((<span class="hljs-number">16</span> * ((<span class="hljs-number">3</span> * (v1 &gt;&gt; <span class="hljs-number">4</span>)) &amp; <span class="hljs-number">0xF</span>)) | (<span class="hljs-number">5</span> * (v1 &amp; <span class="hljs-number">0xF</span>)) &amp; <span class="hljs-number">0xFu</span>);<span class="hljs-comment">// AI说是模幂运算函数，计算a1^(255) mod 257</span><br>  <span class="hljs-keyword">return</span> byte_2020[<span class="hljs-built_in">ror</span>(v3, <span class="hljs-number">2</span>)];                 <span class="hljs-comment">// return (v3 &gt;&gt; 2) | (v3 &lt;&lt; (8 - 2));此处建立了映射关系</span><br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>笔者加解密这一块太菜了，没有数学头脑，只能依靠AI解密了（因为涉及数论，笔者还没学过）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rol</span>(<span class="hljs-params">b, n</span>):<br>    n %= <span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> ((b &lt;&lt; n) | (b &gt;&gt; (<span class="hljs-number">8</span> - n))) &amp; <span class="hljs-number">0xFF</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ror</span>(<span class="hljs-params">b, n</span>):<br>    n %= <span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> ((b &gt;&gt; n) | (b &lt;&lt; (<span class="hljs-number">8</span> - n))) &amp; <span class="hljs-number">0xFF</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mod_inv</span>(<span class="hljs-params">a, mod=<span class="hljs-number">257</span></span>):<br>    <span class="hljs-comment"># 计算a在模257下的逆元，使用费马小定理</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(a, <span class="hljs-number">255</span>, mod)<br><br>byte_2020 = [<br>    <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>,<br>    <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>,<br>    <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br>    <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>,<br>    <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>,<br>    <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>,<br>    <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>,<br>    <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>,<br>    <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br>    <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>,<br>    <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>,<br>    <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>,<br>    <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>,<br>    <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>,<br>    <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>,<br>    <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span><br>]<br><br><span class="hljs-comment"># 构建反向映射</span><br>rev_2020 = &#123;&#125;<br><span class="hljs-keyword">for</span> idx, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(byte_2020):<br>    rev_2020[val] = idx<br><br>enc_data = [<br>    <span class="hljs-number">0x97</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xDA</span>,<br>    <span class="hljs-number">0x43</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x71</span>,<br>    <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x1A</span><br>]<br><br><span class="hljs-comment"># 逆向encrypt2</span><br>enc1_out = []<br><span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(enc_data):<br>    idx = rev_2020[c]  <span class="hljs-comment"># 得到索引（即v3循环右移2位后的值）</span><br>    v3 = rol(idx, <span class="hljs-number">2</span>)   <span class="hljs-comment"># 循环左移2位得到v3（原循环右移2位的逆）</span><br>    <span class="hljs-comment"># 如果v3为0？但原代码中a1不为0才计算，这里假设v3不为0</span><br>    <span class="hljs-keyword">if</span> v3 == <span class="hljs-number">0</span>:<br>        x = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        x = mod_inv(v3, <span class="hljs-number">257</span>)<br>    A = (x &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xF</span><br>    B = x &amp; <span class="hljs-number">0xF</span><br>    high = (<span class="hljs-number">11</span> * A) &amp; <span class="hljs-number">0xF</span><br>    low = (<span class="hljs-number">13</span> * B) &amp; <span class="hljs-number">0xF</span><br>    v1 = (high &lt;&lt; <span class="hljs-number">4</span>) | low<br>    tmp = ror(v1, <span class="hljs-number">3</span>)  <span class="hljs-comment"># 循环右移3位（原循环左移3位的逆）</span><br>    enc1_out.append(tmp ^ <span class="hljs-number">0x5A</span>)<br><br><span class="hljs-comment"># 逆向encrypt1</span><br>flag = []<br><span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(enc1_out):<br>    n = (i % <span class="hljs-number">7</span>) + <span class="hljs-number">1</span><br>    flag_char = ror(c, n)  <span class="hljs-comment"># 循环右移n位（原循环左移n位的逆）</span><br>    flag.append(flag_char)<br><br><span class="hljs-comment"># 转换为字符串</span><br>flag_str = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(b) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> flag)<br><span class="hljs-built_in">print</span>(flag_str)<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="minigame"><a href="#minigame" class="headerlink" title="minigame"></a>minigame</h3><ul>
<li><p>微信小程序逆向，第一次遇到这个类型的题</p>
</li>
<li><p>用<a href="https://github.com/biggerstar/wedecode">wedecode</a>解包附件，输出结果在wedecode-main&#x2F;OUTPUT&#x2F;default里</p>
<p><img src="/../images/image-20251003175458209.png" alt="解包结果"></p>
<p>没有这方面的经验，让AI分析项目，发现utils&#x2F;validator.wasm里有检验逻辑。wasm是一种二进制文件，可以转成wat阅读（类似汇编）。使用在线工具<a href="https://webassembly.github.io/wabt/demo/wasm2wat/">wasm2wat demo</a>把wasm转成wat:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs wat">(module<br>  (type $t0 (func (param i32) (result i32)))<br>  (type $t1 (func))<br>  (func $c (export &quot;c&quot;) (type $t0) (param $p0 i32) (result i32)<br>    (local $l1 i32) (local $l2 i32) (local $l3 i32) (local $l4 i32)<br>    (if $I6<br>      (i32.ne<br>        (block $B0 (result i32)<br>          (block $B1<br>            (block $B2<br>              (br_if $B2<br>                (i32.eqz<br>                  (i32.and<br>                    (local.tee $l3<br>                      (local.get $p0))<br>                    (i32.const 3))))<br>              (drop<br>                (br_if $B0<br>                  (i32.const 0)<br>                  (i32.eqz<br>                    (i32.load8_u<br>                      (local.get $p0)))))<br>              (loop $L3<br>                (br_if $B2<br>                  (i32.eqz<br>                    (i32.and<br>                      (local.tee $p0<br>                        (i32.add<br>                          (local.get $p0)<br>                          (i32.const 1)))<br>                      (i32.const 3))))<br>                (br_if $L3<br>                  (i32.load8_u<br>                    (local.get $p0))))<br>              (br $B1))<br>            (loop $L4<br>              (local.set $p0<br>                (i32.add<br>                  (local.tee $l1<br>                    (local.get $p0))<br>                  (i32.const 4)))<br>              (br_if $L4<br>                (i32.eq<br>                  (i32.and<br>                    (i32.or<br>                      (i32.sub<br>                        (i32.const 16843008)<br>                        (local.tee $l4<br>                          (i32.load<br>                            (local.get $l1))))<br>                      (local.get $l4))<br>                    (i32.const -2139062144))<br>                  (i32.const -2139062144))))<br>            (loop $L5<br>              (local.set $l1<br>                (i32.add<br>                  (local.tee $p0<br>                    (local.get $l1))<br>                  (i32.const 1)))<br>              (br_if $L5<br>                (i32.load8_u<br>                  (local.get $p0)))))<br>          (i32.sub<br>            (local.get $p0)<br>            (local.get $l3)))<br>        (i32.const 38))<br>      (then<br>        (return<br>          (i32.const 0))))<br>    (loop $L7<br>      (block $B8<br>        (local.set $l1<br>          (i32.eq<br>            (local.tee $p0<br>              (i32.xor<br>                (i32.load8_u offset=1024<br>                  (local.get $l2))<br>                (i32.load8_s<br>                  (i32.add<br>                    (local.get $l2)<br>                    (local.get $l3)))))<br>            (i32.const 153)))<br>        (br_if $B8<br>          (i32.ne<br>            (local.get $p0)<br>            (i32.const 153)))<br>        (br_if $L7<br>          (i32.ne<br>            (local.tee $l2<br>              (i32.add<br>                (local.get $l2)<br>                (i32.const 1)))<br>            (i32.const 38)))))<br>    (local.get $l1))<br>  (func $b (export &quot;b&quot;) (type $t1))<br>  (memory $a (export &quot;a&quot;) 258 258)<br>  (data $d0 (i32.const 1024) &quot;\ff\f5\f8\fe\e2\ff\f8\fc\a9\fb\ab\ae\fa\ad\ac\a8\fa\ae\ab\a1\a1\af\ae\f8\ac\af\ae\fc\a1\fa\a8\fb\fb\ad\fc\ac\aa\e4&quot;))<br><br></code></pre></td></tr></table></figure>
</li>
<li><p>由AI分析知，逻辑主要是把输入的内容与密文异或，异或的结果要等于153。等价于将输入的内容和153异或要等于密文。解密就是拿153异或密文。exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">enc = [<br>    <span class="hljs-number">0xff</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0xfb</span>,<br>    <span class="hljs-number">0xab</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0xa8</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0xa1</span>,<br>    <span class="hljs-number">0xa1</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0xfa</span>,<br>    <span class="hljs-number">0xa8</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0xe4</span><br>]<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(data ^ <span class="hljs-number">153</span>) <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> enc])<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="strangapp"><a href="#strangapp" class="headerlink" title="strangapp"></a>strangapp</h3><ul>
<li>待更新…</li>
</ul>
]]></content>
      <categories>
        <category>WriteUp&amp;复现</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WriteUp</tag>
        <tag>Reverse</tag>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>周记</title>
    <url>/2025/06/02/%E5%91%A8%E8%AE%B0/</url>
    <content><![CDATA[<p>简单记录每周收获</p>
<span id="more"></span>

<h2 id="week1-2025-3-4-2025-3-9"><a href="#week1-2025-3-4-2025-3-9" class="headerlink" title="week1 (2025.3.4-2025.3.9)"></a>week1 (2025.3.4-2025.3.9)</h2><ul>
<li>看到群友讲到周报，灵光一闪觉得可以写写周记来记录自己的学习，也当作一种督促</li>
<li>这周主要学习李承远老师的《逆向工程核心原理》（去年12月图书馆借的，这周才正式开始看😓）</li>
<li>主要学习了动态调试的基础技能。有：<ol>
<li>调试器的基础操作，查找目标代码的方法（干找，字符串检索，下断点，API检索及下断点）</li>
<li>打补丁patch修改输出的字符串（直接修改或者导向修改的NULL填充区域）并导出新的可执行文件</li>
<li>字节序、寄存器基础</li>
<li>栈、栈帧</li>
<li>函数调用约定（cdecl（调用者处理栈）、stdcall（被调用者处理栈）、fastcall（同stdcall，但是结合了栈和寄存器））</li>
</ol>
</li>
</ul>
<h2 id="week2-2025-3-10-2025-3-16"><a href="#week2-2025-3-10-2025-3-16" class="headerlink" title="week2 (2025.3.10-2025.3.16)"></a>week2 (2025.3.10-2025.3.16)</h2><ul>
<li>这周主要学习了PE文件结构的内容，同步更新了学习笔记 ，主要是PE文件的基本组成介绍，理论知识</li>
<li>周末本想接着下一章的学习，但是摆大烂了，甚至PE笔记还没写完</li>
<li>下周末就是NCTF了，一点准备没有，要炸掉了</li>
</ul>
<h2 id="week3-2025-3-17-2025-3-23"><a href="#week3-2025-3-17-2025-3-23" class="headerlink" title="week3 (2025.3.17-2025.3.23)"></a>week3 (2025.3.17-2025.3.23)</h2><ul>
<li>这周过得又忙又不知道在忙什么，PE文件结构最后的EAT部分没看懂，(T_T)，笔记还没补完</li>
<li>NCTF爆零了，编码能力是硬伤，知识更是伤上加伤 (T_T)</li>
<li>好了，真是糟糕的一周</li>
</ul>
<h2 id="week4-2025-3-24-2025-3-30"><a href="#week4-2025-3-24-2025-3-30" class="headerlink" title="week4 (2025.3.24-2025.3.30)"></a>week4 (2025.3.24-2025.3.30)</h2><ul>
<li>offline一周</li>
</ul>
<h2 id="week5-2025-3-31-2025-4-6"><a href="#week5-2025-3-31-2025-4-6" class="headerlink" title="week5 (2025.3.31-2025.4.6)"></a>week5 (2025.3.31-2025.4.6)</h2><ul>
<li>想了想，发现自己一直存在一个错误，就是为了笔记而做笔记，纯粹的是记录；但是好像以总结或者说复述的方式来做笔记才比较有用</li>
<li>这周碰上清明了，有个三天假。虽然但是，依旧是没怎么学新东西</li>
<li>但是至少是做了点什么。周日把PE文件格式收尾了（还是有点难度的，因为回头看了前面做的笔记，发现对IAT和EAT的认识有点不对劲，重新梳理了一遍，删删改改）。学聪明了，这次是看完书完整地把例子先走了一遍再做的笔记</li>
<li>这周在咸鱼2元淘到了一包课，后面发现里面有一套课体系挺完整的，也是有课跟了</li>
<li>还有就是尝试了自己写python解密脚本，发现没体系学过一遍真不能硬上</li>
</ul>
<h2 id="week6-2025-4-7-2025-4-13"><a href="#week6-2025-4-7-2025-4-13" class="headerlink" title="week6 (2025.4.7-2025.4.13)"></a>week6 (2025.4.7-2025.4.13)</h2><ul>
<li>这周找了个短一些的python视频，跟着过了一遍，然后试着做题写脚本，您猜怎么着，还是不太会🤡</li>
<li>解密实在是太吃操作了，细细一想，好像解密这玩意更吃数学，一个取模逆向DS直接上公式，我还在循环爆破被除数🤡</li>
<li>不得不拿出四字真言：菜就多练。所以，这周就试着刷题来了</li>
<li>节奏还是慢了点，唉</li>
</ul>
<h2 id="week7-2025-4-14-2025-4-20"><a href="#week7-2025-4-14-2025-4-20" class="headerlink" title="week7 (2025.4.14-2025.4.20)"></a>week7 (2025.4.14-2025.4.20)</h2><ul>
<li>emmm怎么说，这周前面几天倒是抽时间刷题了，但是一到周末，明显感到懒了</li>
<li>周三花了一个下午搞明白重定位表，笔记写了，但是切入点好像不是很对。这次的笔记，因为参考了DS给的辅助讲解，所以跟前面的有点不一样。感觉用形象的例子来类比以及从设计者角度描述细节，更有利于后期复习再理解</li>
<li>还是感觉效率上不来🤔，我在想要不然先跟课走，不懂的地方再看书，会不会学的清楚一点，省的老啃一处</li>
<li>本来打算周末来个脱壳练习的，鸽了（；´д｀）ゞ</li>
</ul>
<h2 id="week8-2025-4-21-2025-4-27"><a href="#week8-2025-4-21-2025-4-27" class="headerlink" title="week8 (2025.4.21-2025.4.27)"></a>week8 (2025.4.21-2025.4.27)</h2><ul>
<li>这几天图床崩了，图片上传不了，之前的图在博客里也有点显示不出来，找了好久没找到问题在哪里，只能传到本地和其他文件一起打包传github了</li>
<li>五一调休使我本就短暂的周末更加短暂（虽然目前为止周末还没有被我真正利用过），这周拿得出手的就只是一道题目</li>
<li>em…实际上这周花了不少时间搞脱壳练习的环境。买的课里头老师说用vs2008练习，但是该死的虚拟机没联网得自己安装netframework，这就花了不少时间，以及灵机一动把环境搭在win11上了，这又花了一点时间。还有一点时间尝试用自己写的程序加壳脱壳，但是没折腾成功。</li>
<li>还有，我有点怀疑这个老师的成分了，一口一个抛砖引玉，一口一个自己看（我要是自己会学还看课干什么）🫠。但是找不到比他的课更完整的win逆向资源了😔</li>
</ul>
<h2 id="week9-2025-4-28-2025-5-4"><a href="#week9-2025-4-28-2025-5-4" class="headerlink" title="week9 (2025.4.28-2025.5.4)"></a>week9 (2025.4.28-2025.5.4)</h2><ul>
<li>这周碰上了实验周和五一假期，看似空闲时间很多，但实际上并非如此<del>（借口</del></li>
<li>CS啊，三天速通数学实验，还要写老厚一本的实验报告，甚至报告还包括两篇论文，离谱了🫠</li>
<li>好的，看来这周依旧是没什么学习收获的一周。<del>除了单开了一个IDApro的学习笔记（四处碰壁只能学学工具的使用了）</del></li>
</ul>
<h2 id="week10-2025-5-5-2025-5-11"><a href="#week10-2025-5-5-2025-5-11" class="headerlink" title="week10 (2025.5.5-2025.5.11)"></a>week10 (2025.5.5-2025.5.11)</h2><ul>
<li>这周折腾电装实习和数学实验，还要复习大物和高数，忙死了，唉</li>
</ul>
<h2 id="week11-2025-5-12-2025-5-18"><a href="#week11-2025-5-12-2025-5-18" class="headerlink" title="week11 (2025.5.12-2025.5.18)"></a>week11 (2025.5.12-2025.5.18)</h2><ul>
<li>诶，浅摆一周</li>
</ul>
<h2 id="week12-2025-5-19-2025-5-25"><a href="#week12-2025-5-19-2025-5-25" class="headerlink" title="week12 (2025.5.19-2025.5.25)"></a>week12 (2025.5.19-2025.5.25)</h2><ul>
<li>快期末月了啊，哎呀，一学期又要过去了</li>
<li>开始有点考试前的紧张感了，这周主要拿来搞学业了，大物、高数、电工模电还有六级多手抓🙃</li>
<li>诶，但是优化了一下博客的界面，折腾了快有三天时间。主要就是给主页改成了分类卡片，下一级才是文章，这样子结构更清晰一点。还有一些小地方的美化，以及阅读次数统计的问题（从leancloud国内版到不蒜子到leancloud国际版又回到leancloud国内版…哇，看来我和DS老师的协调能力还不是很好，毕竟光这一项就要了差不多1天时间🙃头都大了）</li>
<li>本来打算周末把没跟上的课业补上，但是优化博客就占了周六一个上午，周六一个下午搞那个C++慕课（不当人啊，题目让直接复制的输出实现代码和输出要求一模两样），但是我还有高数大物特别是模电和六级以及还有个电装实习报告和物理实验报告，压力都给到周日，可想而知</li>
<li>还有一件事，这周逮空看了看hello算法（就是这个：<a href="https://www.hello-algo.com/chapter_hello_algo/">https://www.hello-algo.com/chapter_hello_algo/</a> ，上学期囤下来的资源）最近刚好买的课里头讲C和C++的时候提到了数据结构，但是实在找不到时间看视频，就只能看看书了。哇，U1S1是真优质资料啊。回头看看再加一个数据结构与算法的分类，反正下学期好像也要学了</li>
<li>其实还有点事情，写这个博客的初心其实不是什么记录收获，而是因为我没有找到可以学习效仿的对象，看大佬的博客都是更新知识，很少有人提到为什么会想到去学这些知识，就是，没人会告诉你下一步该干什么，知识那么多却又找不到学习的方向，就是这种感觉。所以想记录记录自己的学习经历，方便梳理学习路线，也希望多少可以给将来像我一样迷茫的人一些指引。</li>
<li>其实开始学习的时候，我会时不时去看看同级的大佬的博客，看到他们更新的都是我没有听说过的知识，看着他们变得越来越专业越来越厉害，长久下来心里很不是滋味。高中时候那种无力感就又出现了。后来我就隐约觉得不对劲，这不就把大学又过成高中了吗？“比较的终点是自卑，专注的终点是自由”，想想当初想学信安不就是因为喜欢吗（虽然那时候确实不知道具体得学什么），为什么要和别人比呢？高中的时候我总是刻意不融入比较的氛围，而现在没有了那样厚重的学习环境，我却不自觉开始比较起来了，唉😔所以这些天其实一直在调整自己的心态，好在现在我感觉慢慢地不再频繁站在外界去审视自己了，开始觉得每天能看见阳光、能够在晚自习上下课的路上边听歌边走路、<del>能够实现引体向上拉0个到拉6个（尽管是在有弹力带辅助的情况下、</del>能够在社团的宣讲活动上承担一部分发言的责任……这些都让我的生活变得越来越美好。这可能就是知足常乐的感觉吧，反正活得更开心了，也更有行动的能量了，也挺好</li>
<li>今天的字数有点超标了哈哈😄但是不管了</li>
<li>接下来一个月多不知道会不会还有机会更新点知识笔记，但是希望暑假可以好好学学吧<del>（求求我自己了</del></li>
<li>既然提到了学习路线，要不然这里梳理一段吧，其实有些东西没记上来。刚开始是从《逆向工程核心原理》开始学的，但是学了快一个月感觉效率也不行啊，后面开始找课，找到了一个全路线的课（目录里是包含了渗透测试和逆向免杀的）但是感觉逆向那部分老师有点混啊，上课就展示笔记 ，说话也含含糊糊的，还时不时来句主要是抛砖引玉，就感觉这样下来也学得迷迷糊糊的，所以又去找新的课。现在是找到了另外两套，一套是windows内核安全，一套是红队免杀（两套课同一家机构的，<del>jayx</del>），这个体系感觉也很清晰，老师讲课（至少看了几节课下来）倒也清楚，实践为主。所以现在确定下来是跟着最新的两套学。后面可能会考虑改改之前记的笔记。</li>
<li>啊对了，还得狡辩一下。我发现week2开始就不是记录收获了，像是报备干了什么😄其实也没什么写的，因为还在摸索。</li>
</ul>
<h2 id="week13-2025-5-26-2025-6-1"><a href="#week13-2025-5-26-2025-6-1" class="headerlink" title="week13 (2025.5.26-2025.6.1)"></a>week13 (2025.5.26-2025.6.1)</h2><ul>
<li>这周本来是试着把博客部署到vercel上方便国内访问的（DeepSeek说可以的），但是没折腾明白，所以本来没打算写什么的。结果，周日晚上11点多打开博客文件夹，发现有点不对劲，一访问，博客崩了😅</li>
<li>千错万错就不该错在什么都不懂还跟着DeepSeek走，哇，真的，难以描述这种感觉，光这篇周记就有77天了啊，😅</li>
<li>这段话其实是6.2写的，周日晚上修博客修到1点，尝试修复但是行不通😅</li>
<li>哇，这个人工智能，它教我用rm rf，虽然不是windows的指令，但是它能在教程里用上这样的指令，哇，真的，真是这个👍。我真的，哇，要无语死了</li>
<li>6.2就折腾一天的博客，把原来的博客废掉了，重构了一个。哇，一搜教程，和当初刚开始搞博客时看到的完全不一样了，下下来的NexT还是新版的，配置变了不是一点，哇😅</li>
<li>吃一堑长一智了，以后找教程不先搜别人写的直接问AI我就是这个👍</li>
</ul>
<h2 id="week14-2025-6-2-2025-6-8"><a href="#week14-2025-6-2-2025-6-8" class="headerlink" title="week14 (2025.6.2-2025.6.8)"></a>week14 (2025.6.2-2025.6.8)</h2><ul>
<li>OK，这周主要任务就是重新搭了一个博客。博客建了半年了，都忘了怎么建起来的了，重搭去找教程，搜出来的结果和印象里半年前的还不一样，迭代速率真快啊</li>
<li>好在旧的博客没有全毁，在残存的next文件里找到了一些还能抄的配置</li>
<li>才半年NexT都更新到8.23了，评论系统和访客系统变了不少，老配置用不上只能换新的配置了</li>
<li>完了都没什么可以写的了</li>
<li>预计接下来几周就不会有什么内容了，马上就是期末周了。唉，大大小小的作业报告考试又来了🫠</li>
</ul>
<h2 id="week15-16-17-2025-6-9-2025-6-29"><a href="#week15-16-17-2025-6-9-2025-6-29" class="headerlink" title="week15,16,17 (2025.6.9-2025.6.29)"></a>week15,16,17 (2025.6.9-2025.6.29)</h2><ul>
<li>期末月断更</li>
</ul>
<h2 id="week18-2025-6-30-2025-7-6"><a href="#week18-2025-6-30-2025-7-6" class="headerlink" title="week18 (2025.6.30-2025.7.6)"></a>week18 (2025.6.30-2025.7.6)</h2><ul>
<li>OK，也是考完试了。回家两天也是闲里偷忙地看了一点课</li>
<li>接下来看看能不能持续更个几十天，我已经“计划”好了一些要更的内容了，能不能更成就看我自己了（</li>
</ul>
<h2 id="week19-2025-7-7-2025-7-13"><a href="#week19-2025-7-7-2025-7-13" class="headerlink" title="week19 (2025.7.7-2025.7.13)"></a>week19 (2025.7.7-2025.7.13)</h2><ul>
<li>这周开始学习基础一点的知识，主要是汇编。下周应该是程序逆向基础的东西了。</li>
<li>笔记有点乱。这周主要围绕汇编，学习了不同架构不同模式下的汇编的基础知识，包括最基本的寄存器、汇编指令、函数的汇编形式、栈帧、不同架构模式的汇编差异等。整体而言其实不是很繁杂的东西，内容也不多，所以说其实这周还是处于想起来该学了的时候才学的状态。看了看其他的囤起来的资料，有一说一，开学后还真不一定可以有连续的时间学，这样子没有先起个体系感觉还是很难真正学懂。</li>
</ul>
<h2 id="week20-2025-7-14-2025-7-20"><a href="#week20-2025-7-14-2025-7-20" class="headerlink" title="week20 (2025.7.14-2025.7.20)"></a>week20 (2025.7.14-2025.7.20)</h2><ul>
<li>一言难尽属于是，总而言之这周没怎么集中精力去给第一部分的汇编学习收尾</li>
<li>还有结构体、类什么的还没有尝试，为了降低难度没有引入C++复杂的语法，但是总感觉哪里有点不对劲</li>
<li>这样下去不是很ok啊(ˉ▽ˉ；)…</li>
</ul>
<h2 id="week21-2025-7-21-2025-7-27"><a href="#week21-2025-7-21-2025-7-27" class="headerlink" title="week21 (2025.7.21-2025.7.27)"></a>week21 (2025.7.21-2025.7.27)</h2><ul>
<li>摆烂一周🤪🤪</li>
<li>其实这一周我没写周记，甚至把它隐藏了。week22学了几天良心过不去又恢复文章了(～￣▽￣)～</li>
</ul>
<h2 id="week22-2025-7-28-2025-8-3"><a href="#week22-2025-7-28-2025-8-3" class="headerlink" title="week22 (2025.7.28-2025.8.3)"></a>week22 (2025.7.28-2025.8.3)</h2><ul>
<li>这周收获颇丰啊，脱壳这一块卡了半年多了应该有，也是终于走到逆向真正有魅力的地方了，脱壳、花指令、反调试都学上了，虽然偏理论，但是至少有点见识了</li>
<li>美中不足的是，代码编译着编译着突然冒出了一个调用约定冲突（x86环境）🫠花指令之前都没发现这个问题，真是奇了怪了🫠重装一遍VS甚至还是有这个问题</li>
<li>这周找校队师傅沟通了一下，好像参加考核得跟着新一轮招新时间线来，不然要有拿得出手的实力才可以打破人家的招新计划🫠🫠</li>
</ul>
<h2 id="week23-2025-8-4-2025-8-10"><a href="#week23-2025-8-4-2025-8-10" class="headerlink" title="week23 (2025.8.4-2025.8.10)"></a>week23 (2025.8.4-2025.8.10)</h2><ul>
<li>上周末开始想着给博客换个主题（这个主题感觉被我搞得有点老了），一如既往的遭罪啊🫠这周本来想找机会把要换的主题准备好，但是，一折腾就是半天🫠</li>
<li>x2c开始招新了，唉，还没准备好🫠</li>
<li>本来这周到OLLVM了，但是尝试后发现自己写的程序OLLVM没有效果，不知道是逻辑太简单还是IDA太强大了还是什么，另外解法还有牵扯到angr的，索性深的就往后延延了，先把知识面拓开，安卓还没看呢，py还有其它语言的逆向也没怎么接触过呢🫠</li>
<li>怎么感觉状态起起落落的😅</li>
</ul>
<h2 id="week24-2025-8-11-2025-8-17"><a href="#week24-2025-8-11-2025-8-17" class="headerlink" title="week24 (2025.8.11-2025.8.17)"></a>week24 (2025.8.11-2025.8.17)</h2><ul>
<li>这周开始赶进度，学了点安卓逆向基础，然后投了简历。也算是见识到了招新考核了。感谢师傅手下留情，也是终于被收留了🫡。</li>
<li>然后就是打moe，感觉比0xGame还上了点难度，第一周就有upx的题了，还有C++的。顺道打了LILCTF，做出了一题😋但是其他题没思路了（加上准备科目一🫠，就没往下做，后面再学学再复现😋</li>
<li>考虑到Win逆向还没更完，所以安卓这部分就没有写笔记了，回头再熟悉熟悉再补</li>
</ul>
<h2 id="week25-2025-8-18-2025-8-24"><a href="#week25-2025-8-18-2025-8-24" class="headerlink" title="week25 (2025.8.18-2025.8.24)"></a>week25 (2025.8.18-2025.8.24)</h2><ul>
<li>moe上强度了，但是第二周的题还没写完</li>
<li>这周摆烂了</li>
</ul>
<h3 id="week26-2025-8-25-2025-8-31"><a href="#week26-2025-8-25-2025-8-31" class="headerlink" title="week26 (2025.8.25-2025.8.31)"></a>week26 (2025.8.25-2025.8.31)</h3><ul>
<li>这周主要还是研究moe的题，没有学什么新知识。</li>
</ul>
]]></content>
      <categories>
        <category>周记</category>
      </categories>
      <tags>
        <tag>周记</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次blog优化</title>
    <url>/2025/06/02/%E8%AE%B0%E4%B8%80%E6%AC%A1blog%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>Hexo+NexT博客的小优化 (注：此篇记录的是笔者原来崩溃的博客的优化，是旧版NexT优化)</p>
<span id="more"></span>

<ul>
<li>这几天突然产生一个想法：博客主页改成分类的样式会不会更好看一点，主页是主题集合，每个主题里面才是相关的文章</li>
<li>心动不如行动，直接开干！</li>
</ul>
<h2 id="首页分类卡片实现"><a href="#首页分类卡片实现" class="headerlink" title="首页分类卡片实现"></a>首页分类卡片实现</h2><ul>
<li><p>这部分其实花了不少时间，因为没有具体学过Hexo+NexT的结构，好在有Deepseek老师的帮助</p>
</li>
<li><p>修改的部分主要在themes&#x2F;next&#x2F;layout&#x2F;index.swig，下面直接贴代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;_layout.swig&#x27; %&#125;<br>&#123;% import &#x27;_macro/sidebar.swig&#x27; as sidebar_template with context %&#125;<br><br>&#123;% block title %&#125;&#123;&#123; title &#125;&#125;&#123;%- if theme.index_with_subtitle and subtitle %&#125; - &#123;&#123; subtitle &#125;&#125;&#123;%- endif %&#125;&#123;% endblock %&#125;<br><br>&#123;% block class %&#125;index categories-page&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br><br>&#123;# 这部分是实现category卡片，最后面还有没category的文章的处理，因为我严格了每篇文章有category，就没管画面如何了 #&#125;<br>&#123;% if site.categories.length &gt; 0 %&#125;<br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category-cards-container&quot;</span>&gt;</span><br>    &#123;% for cat in site.categories.toArray() %&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category-card&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category-header&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category-name&quot;</span>&gt;</span>&#123;&#123; cat.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-count&quot;</span>&gt;</span>&#123;&#123; cat.posts.length &#125;&#125;篇文章<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>        &#123;# 这一部分实现卡片显示包含的文章的标题，数量可以改下面的limit()的数字 #&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;recent-posts-list&quot;</span>&gt;</span><br>          &#123;% for post in cat.posts.sort(&#x27;date&#x27;, -1).limit(3).toArray() %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;recent-post-item&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-title&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;&#123;&#123; post.title &#125;&#125;&quot;</span>&gt;</span><br>                &#123;&#123; post.title | truncate(18) &#125;&#125;<br>              <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-date&quot;</span>&gt;</span><br>    			&#123;% if post.updated %&#125; <br>    				&#123;&#123; post.updated.format(&#x27;MM/DD&#x27;) &#125;&#125;<br>    			&#123;% else %&#125;<br>    				&#123;&#123; post.date.format(&#x27;MM/DD&#x27;) &#125;&#125;<br>    			&#123;% endif %&#125;<br>    		<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          &#123;% endfor %&#125;<br>            <br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;more-posts-wrapper&quot;</span>&gt;</span><br>    		<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;/categories/&#x27; + cat.name + &#x27;/&#x27;) &#125;&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;more-posts-button&quot;</span>&gt;</span><br>      			更多文章 →<br>    		<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    &#123;% endfor %&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% else %&#125;<br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;no-categories-notice&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>暂无分类数据，请为文章添加分类<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>&#123;% endif %&#125;<br><br>&#123;% endblock %&#125;<br><br>&#123;% block sidebar %&#125;<br>  &#123;&#123; sidebar_template.render(false) &#125;&#125;<br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>还有source&#x2F;_data&#x2F;styles.styl</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">/* 分类卡片样式 - 安全追加 */</span><br><span class="hljs-selector-class">.category-cards-container</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span> auto;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1200px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;<br><br>  <span class="hljs-selector-class">.category-card</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.85</span>); <span class="hljs-comment">/* 半透明白色，与你的opacity 0.85协调 */</span><br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">15px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>);<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.3s</span> ease;<br>    <span class="hljs-attribute">backdrop-filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">2px</span>); <span class="hljs-comment">/* 毛玻璃效果增强背景融合 */</span><br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.3</span>); <span class="hljs-comment">/* 柔和边框 */</span><br>    <br>    <span class="hljs-selector-pseudo">&amp;:hover</span> &#123;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">5px</span>);<br>      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">25px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.15</span>);<br>    &#125;<br><br>    <span class="hljs-selector-class">.category-name</span> &#123;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#2c3e50</span>;<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4em</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.post-count</span> &#123;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#7f8c8d</span>;<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9em</span>;<br>      <span class="hljs-attribute">display</span>: block;<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 这部分是我自己用的背景图的设置 */</span><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(/images/background.jpg);<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-attachment</span>: fixed;<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.85</span>;<br>&#125;<br><span class="hljs-comment">/* ======================== */</span><br><span class="hljs-comment">/* 分类卡片内的文章列表样式 */</span><br><span class="hljs-comment">/* ======================== */</span><br><br><span class="hljs-selector-class">.category-card</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative; <span class="hljs-comment">/* 为毛玻璃效果提供定位上下文 */</span><br>  <br>  <span class="hljs-selector-class">.category-header</span> &#123;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.08</span>);<br>  &#125;<br><br>  <span class="hljs-selector-class">.recent-posts-list</span> &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br>    <br>    <span class="hljs-selector-class">.recent-post-item</span> &#123;<br>      <span class="hljs-attribute">display</span>: flex;<br>      <span class="hljs-attribute">justify-content</span>: space-between;<br>      <span class="hljs-attribute">align-items</span>: center;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.2s</span> ease;<br><br>      <br>      <span class="hljs-selector-pseudo">&amp;:hover</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">3px</span>);<br>      &#125;<br><br>      <span class="hljs-selector-class">.post-title</span> &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#34495e</span>;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.95em</span>;<br>        <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;<br>        <span class="hljs-attribute">white-space</span>: nowrap;<br>        <span class="hljs-attribute">overflow</span>: hidden;<br>        <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>        <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10px</span>;<br>        <br>        <span class="hljs-selector-pseudo">&amp;:hover</span> &#123;<br>          <span class="hljs-attribute">color</span>: <span class="hljs-number">#3498db</span>;<br>          <span class="hljs-attribute">text-decoration</span>: underline;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-selector-class">.post-date</span> &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#95a5a6</span>;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.8em</span>;<br>        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Arial&#x27;</span>, sans-serif;<br>        <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">0</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  * &#123;<br>    <span class="hljs-attribute">border-bottom</span>: none <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">box-shadow</span>: none <span class="hljs-meta">!important</span>;<br>  &#125;<br>  <br>  <span class="hljs-selector-class">.category-header</span>, <br>  <span class="hljs-selector-class">.recent-post-item</span>, <br>  <span class="hljs-selector-class">.recent-posts-list</span> &#123;<br>    <span class="hljs-attribute">border</span>: none <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">border-bottom</span>: none <span class="hljs-meta">!important</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 更多文章按钮样式 */</span><br><span class="hljs-selector-class">.more-posts-wrapper</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: left;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">10px</span>;<br>  <br>  <span class="hljs-selector-class">.more-posts-button</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">72</span>, <span class="hljs-number">168</span>, <span class="hljs-number">241</span>);<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9em</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">6px</span> <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.3s</span> ease;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">52</span>, <span class="hljs-number">152</span>, <span class="hljs-number">219</span>, <span class="hljs-number">0.1</span>);<br>    <br>    <span class="hljs-selector-pseudo">&amp;:hover</span> &#123;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">52</span>, <span class="hljs-number">152</span>, <span class="hljs-number">219</span>, <span class="hljs-number">0.2</span>);<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">3px</span>);<br>    &#125;<br>    <br>    <br>    <br>    <span class="hljs-selector-pseudo">&amp;:hover</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>      <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">8px</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/* 响应式调整 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">767px</span>) &#123;<br>  <span class="hljs-selector-class">.category-card</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">18px</span>;<br>    <br>    <span class="hljs-selector-class">.recent-post-item</span> &#123;<br>      <span class="hljs-attribute">flex-direction</span>: column;<br>      <span class="hljs-attribute">align-items</span>: flex-start;<br>      <br>      <span class="hljs-selector-class">.post-date</span> &#123;<br>        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">3px</span>;<br>        <span class="hljs-attribute">align-self</span>: flex-end;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-24%20223804.png" alt="分类卡片效果"></p>
</li>
</ul>
<h2 id="点击更多文章后的文章列表实现"><a href="#点击更多文章后的文章列表实现" class="headerlink" title="点击更多文章后的文章列表实现"></a>点击更多文章后的文章列表实现</h2><ul>
<li><p>这部分主要基于原来的Index.swig，因为我觉得原来的风格就挺简洁好看的</p>
</li>
<li><p>找到themes&#x2F;next&#x2F;layout&#x2F;category.swig，改成：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;_layout.swig&#x27; %&#125;<br>&#123;% import &#x27;_macro/sidebar.swig&#x27; as sidebar_template with context %&#125;<br><br>&#123;% block title %&#125;<br>  &#123;&#123; page.category &#125;&#125; | &#123;&#123; __(&#x27;title.category&#x27;) &#125;&#125; | &#123;&#123; config.title &#125;&#125;<br>  &#123;%- if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123; config.subtitle &#125;&#125;&#123;%- endif %&#125;<br>&#123;% endblock %&#125;<br><br>&#123;% block class %&#125;category posts-expand&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category-title&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center; margin: 30px 0;&quot;</span>&gt;</span>//这里把分类名称置中了<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; page.category &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  &#123;%- for post in page.posts.toArray() %&#125;<br>    &#123;&#123; partial(&#x27;_macro/post.swig&#x27;, &#123;post: post, is_index: true&#125;) &#125;&#125;<br>  &#123;%- endfor %&#125;<br><br>  &#123;% include &#x27;_partials/pagination.swig&#x27; %&#125;<br>&#123;% endblock %&#125;<br><br>&#123;% block sidebar %&#125;<br>  &#123;&#123; sidebar_template.render(false) &#125;&#125;<br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-25%20000412-1749026329569-14.png" alt="文章列表效果"></p>
</li>
</ul>
<h2 id="删除文章侧边栏目录难看的下划线"><a href="#删除文章侧边栏目录难看的下划线" class="headerlink" title="删除文章侧边栏目录难看的下划线"></a>删除文章侧边栏目录难看的下划线</h2><ul>
<li><p>在themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;head.swig<strong>最后加上</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 强制移除目录下划线 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-comment">/* 覆盖所有可能的目录容器 */</span></span><br><span class="language-css">  <span class="hljs-selector-attr">[class*=<span class="hljs-string">&quot;toc&quot;</span>]</span> <span class="hljs-selector-class">.nav-item</span> <span class="hljs-selector-tag">a</span>,</span><br><span class="language-css">  <span class="hljs-selector-attr">[class*=<span class="hljs-string">&quot;TOC&quot;</span>]</span> <span class="hljs-selector-class">.nav-item</span> <span class="hljs-selector-tag">a</span>,</span><br><span class="language-css">  <span class="hljs-selector-class">.active</span> &gt; <span class="hljs-selector-tag">a</span>,</span><br><span class="language-css">  <span class="hljs-selector-class">.active-current</span> &gt; <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border-bottom</span>: none <span class="hljs-meta">!important</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-decoration</span>: none <span class="hljs-meta">!important</span>;</span><br><span class="language-css">    <span class="hljs-attribute">box-shadow</span>: none <span class="hljs-meta">!important</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-comment">/* 覆盖伪元素下划线 */</span></span><br><span class="language-css">  <span class="hljs-selector-attr">[class*=<span class="hljs-string">&quot;toc&quot;</span>]</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">::after</span>,</span><br><span class="language-css">  <span class="hljs-selector-attr">[class*=<span class="hljs-string">&quot;TOC&quot;</span>]</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: none <span class="hljs-meta">!important</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-24%20225421.png" alt="消除下划线"></p>
</li>
</ul>
<h2 id="删除文末标签文字前的“-”"><a href="#删除文末标签文字前的“-”" class="headerlink" title="删除文末标签文字前的“#”"></a>删除文末标签文字前的“#”</h2><ul>
<li><p>先说文件：themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.swig</p>
</li>
<li><p>这个问题，网上找到的解决方法都是删掉11行的“#”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">//这是原来的代码，可以ctrl+F搜post-footer<br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-footer&quot;</span>&gt;</span><br>    &#123;%- if post.tags and post.tags.length %&#125;<br>      &#123;%- if theme.tag_icon %&#125;<br>        &#123;%- set tag_indicate = &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-tag&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>&#x27; %&#125;<br>      &#123;% else %&#125;<br>        &#123;%- set tag_indicate = &#x27;#&#x27; %&#125;<br>      &#123;%- endif %&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-tags&quot;</span>&gt;</span><br>        &#123;%- for tag in post.tags.toArray() %&#125;<br>          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;tag&quot;</span>&gt;</span>#<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-tag&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        &#123;%- endfor %&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>但是删除后发现“#”还在。把代码给DS看了下，发现第7行把tag_indicate设成了“#”，删掉这个就可以了</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-24%20235657-1749026142443-7.png" alt="删除“#”"></p>
</li>
</ul>
<h2 id="测试时阅读文章不计数"><a href="#测试时阅读文章不计数" class="headerlink" title="测试时阅读文章不计数"></a>测试时阅读文章不计数</h2><ul>
<li><p>2025.6.2 注：在NexT8后的版本，valine不被支持了</p>
</li>
<li><p>博客搭起来后一直有个问题，就是自己看自己的博客文章会被计数，最开始是用ublock屏蔽统计网站来实现，但是这两天测试了一下发现这个方法用手机访问也不会计数，这不就意味着统计功能瘫痪了吗😮</p>
</li>
<li><p>所以开始和DS老师探讨新方法。DS老师这人不咋行，好方案藏着掖着，拷问了半天才有了下面的简洁的方法：</p>
<ul>
<li><p>themes&#x2F;next&#x2F;layout&#x2F;_third-party&#x2F;comments&#x2F;valine.swig中，在new Valine({ })的括号里，把visitor设置成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">visitor    : (window.location.hostname === &#x27;localhost&#x27; || window.location.hostname === &#x27;127.0.0.1&#x27;) ? false : &#123;&#123; theme.valine.visitor &#125;&#125;,<br></code></pre></td></tr></table></figure>
</li>
<li><p>这样子，在hexo s下访问localhost查看文章不会被计数。DS说这是把hexo s和hexo d两个环境隔离了，所以说如果hexo s下出现文章阅读数为零的情况算正常（我就是这样）</p>
</li>
<li><p>当然了，如果要看阅读数，就要访问hexo d部署后的网站了，记得不要点进文章去看，不然还是会被计数</p>
</li>
<li><p>麻烦是麻烦了点，但功能至少是实现了</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次blog重建</title>
    <url>/2025/06/05/%E8%AE%B0%E4%B8%80%E6%AC%A1blog%E9%87%8D%E5%BB%BA/</url>
    <content><![CDATA[<p>部署Vercel失误后的blog重建（基于hexo+NexT8.23.0，采用utterances评论系统和firestore数据记录）</p>
<span id="more"></span>

<ul>
<li>OK，这是笔者在依赖AI盲目把博客部署到Vercel上导致博客崩溃后的博客重建记录</li>
<li>记录的原因首先是更新“记一次blog优化”的内容，还有新版本NexT的一些个人配置（新版本NexT的教程好像不多，评论系统和访客计数系统要自己琢磨好一会儿）</li>
</ul>
<h2 id="首页分类卡片实现"><a href="#首页分类卡片实现" class="headerlink" title="首页分类卡片实现"></a>首页分类卡片实现</h2><ul>
<li><p>因为是对“记一次blog优化”的更新，所以这部分直接贴代码了（注：区别更多是在文件名从swig变成了njk）</p>
<p>themes&#x2F;next&#x2F;layout&#x2F;index.njk：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;_layout.njk&#x27; %&#125;<br>&#123;% import &#x27;_macro/sidebar.njk&#x27; as sidebar_template with context %&#125;<br><br>&#123;% block title %&#125;&#123;&#123; title &#125;&#125;&#123;%- if theme.index_with_subtitle and subtitle %&#125; - &#123;&#123; subtitle &#125;&#125;&#123;%- endif %&#125;&#123;% endblock %&#125;<br><br>&#123;% block class %&#125;index categories-page&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br><br>&#123;# 这部分是实现category卡片，最后面还有没category的文章的处理，因为我严格了每篇文章有category，就没管画面如何了 #&#125;<br>&#123;% if site.categories.length &gt; 0 %&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category-cards-container&quot;</span>&gt;</span><br>    &#123;% for cat in site.categories.toArray() %&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category-card&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category-header&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category-name&quot;</span>&gt;</span>&#123;&#123; cat.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-count&quot;</span>&gt;</span>&#123;&#123; cat.posts.length &#125;&#125;篇文章<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;# 这一部分实现卡片显示包含的文章的标题，数量可以改下面的limit()的数字 #&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;recent-posts-list&quot;</span>&gt;</span><br>      &#123;% for post in cat.posts.sort(&#x27;date&#x27;, -1).limit(3).toArray() %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;recent-post-item&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-title&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;&#123;&#123; post.title &#125;&#125;&quot;</span>&gt;</span><br>            &#123;&#123; post.title | truncate(18) &#125;&#125;<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-date&quot;</span>&gt;</span><br>			&#123;% if post.updated %&#125; <br>				&#123;&#123; post.updated.format(&#x27;MM/DD&#x27;) &#125;&#125;<br>			&#123;% else %&#125;<br>				&#123;&#123; post.date.format(&#x27;MM/DD&#x27;) &#125;&#125;<br>			&#123;% endif %&#125;<br>		<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      &#123;% endfor %&#125;<br><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;more-posts-wrapper&quot;</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;/categories/&#x27; + cat.name + &#x27;/&#x27;) &#125;&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;more-posts-button&quot;</span>&gt;</span><br>		更多文章 →<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% else %&#125;<br><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;no-categories-notice&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>暂无分类数据，请为文章添加分类<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>  &#123;% endif %&#125;<br><br>&#123;% endblock %&#125;<br><br>&#123;% block sidebar %&#125;<br>  &#123;&#123; sidebar_template.render(false) &#125;&#125;<br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>source&#x2F;_data&#x2F;styles.styl：</p>
<p>得先在next&#x2F;config.yml里打开这个文件的支持（可能是新特性吧，笔者记得之前没改过config设置就有这个文件了，但是现在得打开支持并手动创建_data文件夹和styles.styl等文件），在custom_file_path里删除style的注释</p>
<p><img src="/../images/image-20250605144828365.png" alt="打开文件支持"></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">/* 分类卡片样式 - 安全追加 */</span><br><span class="hljs-selector-class">.category-cards-container</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span> auto;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1200px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;<br><br>  <span class="hljs-selector-class">.category-card</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.85</span>); <span class="hljs-comment">/* 半透明白色，与你的opacity 0.85协调 */</span><br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">15px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>);<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.3s</span> ease;<br>    <span class="hljs-attribute">backdrop-filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">2px</span>); <span class="hljs-comment">/* 毛玻璃效果增强背景融合 */</span><br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.3</span>); <span class="hljs-comment">/* 柔和边框 */</span><br>    <br>    <span class="hljs-selector-pseudo">&amp;:hover</span> &#123;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">5px</span>);<br>      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">25px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.15</span>);<br>    &#125;<br><br>    <span class="hljs-selector-class">.category-name</span> &#123;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#2c3e50</span>;<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4em</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.post-count</span> &#123;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#7f8c8d</span>;<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9em</span>;<br>      <span class="hljs-attribute">display</span>: block;<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 这部分是我自己用的背景图的设置 */</span><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(/images/background.jpg);<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-attachment</span>: fixed;<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.85</span>;<br>&#125;<br><span class="hljs-comment">/* ======================== */</span><br><span class="hljs-comment">/* 分类卡片内的文章列表样式 */</span><br><span class="hljs-comment">/* ======================== */</span><br><br><span class="hljs-selector-class">.category-card</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative; <span class="hljs-comment">/* 为毛玻璃效果提供定位上下文 */</span><br>  <br>  <span class="hljs-selector-class">.category-header</span> &#123;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.08</span>);<br>  &#125;<br><br>  <span class="hljs-selector-class">.recent-posts-list</span> &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br>    <br>    <span class="hljs-selector-class">.recent-post-item</span> &#123;<br>      <span class="hljs-attribute">display</span>: flex;<br>      <span class="hljs-attribute">justify-content</span>: space-between;<br>      <span class="hljs-attribute">align-items</span>: center;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.2s</span> ease;<br><br>      <br>      <span class="hljs-selector-pseudo">&amp;:hover</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">3px</span>);<br>      &#125;<br><br>      <span class="hljs-selector-class">.post-title</span> &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#34495e</span>;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.95em</span>;<br>        <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;<br>        <span class="hljs-attribute">white-space</span>: nowrap;<br>        <span class="hljs-attribute">overflow</span>: hidden;<br>        <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>        <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10px</span>;<br>        <br>        <span class="hljs-selector-pseudo">&amp;:hover</span> &#123;<br>          <span class="hljs-attribute">color</span>: <span class="hljs-number">#3498db</span>;<br>          <span class="hljs-attribute">text-decoration</span>: underline;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-selector-class">.post-date</span> &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#95a5a6</span>;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.8em</span>;<br>        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Arial&#x27;</span>, sans-serif;<br>        <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">0</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  * &#123;<br>    <span class="hljs-attribute">border-bottom</span>: none <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">box-shadow</span>: none <span class="hljs-meta">!important</span>;<br>  &#125;<br>  <br>  <span class="hljs-selector-class">.category-header</span>, <br>  <span class="hljs-selector-class">.recent-post-item</span>, <br>  <span class="hljs-selector-class">.recent-posts-list</span> &#123;<br>    <span class="hljs-attribute">border</span>: none <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">border-bottom</span>: none <span class="hljs-meta">!important</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 更多文章按钮样式 */</span><br><span class="hljs-selector-class">.more-posts-wrapper</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: left;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">10px</span>;<br>  <br>  <span class="hljs-selector-class">.more-posts-button</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">72</span>, <span class="hljs-number">168</span>, <span class="hljs-number">241</span>);<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9em</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">6px</span> <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.3s</span> ease;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">52</span>, <span class="hljs-number">152</span>, <span class="hljs-number">219</span>, <span class="hljs-number">0.1</span>);<br>    <br>    <span class="hljs-selector-pseudo">&amp;:hover</span> &#123;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">52</span>, <span class="hljs-number">152</span>, <span class="hljs-number">219</span>, <span class="hljs-number">0.2</span>);<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">3px</span>);<br>    &#125;<br>    <br>    <br>    <br>    <span class="hljs-selector-pseudo">&amp;:hover</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>      <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">8px</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/* 响应式调整 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">767px</span>) &#123;<br>  <span class="hljs-selector-class">.category-card</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">18px</span>;<br>    <br>    <span class="hljs-selector-class">.recent-post-item</span> &#123;<br>      <span class="hljs-attribute">flex-direction</span>: column;<br>      <span class="hljs-attribute">align-items</span>: flex-start;<br>      <br>      <span class="hljs-selector-class">.post-date</span> &#123;<br>        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">3px</span>;<br>        <span class="hljs-attribute">align-self</span>: flex-end;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>.posts-<span class="hljs-attribute">container</span>&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span> auto;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1200px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>效果请见“记一次blog优化”</p>
</li>
</ul>
<h2 id="点击更多文章后的文章列表实现"><a href="#点击更多文章后的文章列表实现" class="headerlink" title="点击更多文章后的文章列表实现"></a>点击更多文章后的文章列表实现</h2><ul>
<li><p>仍然是基于原来的Index.njk</p>
</li>
<li><p>themes&#x2F;next&#x2F;layout&#x2F;category.njk：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;_layout.njk&#x27; %&#125;<br>&#123;% import &#x27;_macro/sidebar.njk&#x27; as sidebar_template with context %&#125;<br><br>&#123;% block title %&#125; <br>&#123;&#123; page.category &#125;&#125; | &#123;&#123; __(&#x27;title.category&#x27;) &#125;&#125; | &#123;&#123; config.title &#125;&#125;<br>&#123;% if theme.index_with_subtitle and subtitle %&#125; - &#123;&#123; subtitle &#125;&#125;&#123;% endif %&#125;<br>&#123;% endblock %&#125;<br><br>&#123;% block class %&#125;index posts-expand&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;category-title&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center; margin: 30px 0;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; page.category &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>&#123;# 新增包裹容器并添加间距 class PS:这一部分是个人感觉列表太贴近侧边栏了，所以和首页分类卡片的位置设置保持一致了#&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;posts-container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-right: 30px ;&quot;</span>&gt;</span><br><br>  &#123;%- for post in page.posts.toArray() %&#125;<br>    &#123;&#123; partial(&#x27;_macro/post.njk&#x27;, &#123;post: post, is_index: true&#125;) &#125;&#125;<br>  &#123;%- endfor %&#125;<br><br>  &#123;%- include &#x27;_partials/pagination.njk&#x27; -%&#125;<br>  <br>&#123;% endblock %&#125;<br><br>&#123;% block sidebar %&#125;<br>  &#123;&#123; sidebar_template.render(false) &#125;&#125;<br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>效果仍见上一篇博客</p>
</li>
</ul>
<h2 id="删除侧边栏目录下划线与文末标签的“-”"><a href="#删除侧边栏目录下划线与文末标签的“-”" class="headerlink" title="删除侧边栏目录下划线与文末标签的“#”"></a>删除侧边栏目录下划线与文末标签的“#”</h2><ul>
<li>这两个部分没有变动，除了文件名的后缀改变了，其余都一样。详见上一篇博客。</li>
</ul>
<h2 id="utterances评论系统"><a href="#utterances评论系统" class="headerlink" title="utterances评论系统"></a>utterances评论系统</h2><ul>
<li><p>新版本NexT已经不支持valine了，给的选项只有：</p>
<p><img src="/../images/image-20250605150357372.png" alt="评论系统选项"></p>
</li>
<li><p>所以笔者选了utterances。这个系统好像和github有点关系</p>
</li>
<li><p>在next&#x2F;config.yml的comments里把active改成utterances</p>
<p><img src="/../images/image-20250605150655597.png" alt="选择utterances"></p>
</li>
<li><p>然后需要给github仓库安装utterances，访问<a href="https://github.com/apps/utterances">https://github.com/apps/utterances</a> ，然后点击Install</p>
<p><img src="/../images/image-20250605185949763.png" alt="install utterances"></p>
</li>
<li><p>在跳转的页面勾选only select repositories，然后选择博客仓库</p>
<p><img src="/../images/image-20250605190153428.png" alt="select repositories"></p>
</li>
<li><p>点击install就可以了</p>
</li>
<li><p>要注意的是，hexo s下是调试不了这个功能的（虽然不知道我为什么要在hexo s下调试这个功能），会报错，但是部署后是可以正常工作的</p>
</li>
</ul>
<h2 id="firestore统计访问人数"><a href="#firestore统计访问人数" class="headerlink" title="firestore统计访问人数"></a>firestore统计访问人数</h2><ul>
<li><p>NexT8.23.0不支持Valine了，得重新选择数据统计系统。firestore是google的产品，因此需要科学上网。</p>
</li>
<li><p>参考大佬博客：<a href="https://weirenxue.github.io/2021/06/11/hexo_next_firestore_visitors/">https://weirenxue.github.io/2021/06/11/hexo_next_firestore_visitors/</a>  步骤很简洁完整了，但是个人实现的时候会有一些问题，接下来详细介绍相关步骤</p>
</li>
<li><p>首先，在next&#x2F;config.yml里启用firestore：</p>
<p><img src="/../images/image-20250605192012733.png" alt="启用firestore"></p>
</li>
<li><p>有两个空需要填写，apikey和projectId。不急，需要先有firestore的项目。接下来访问firebase：<a href="https://console.firebase.google.com/">https://console.firebase.google.com/</a>  （科学上网）</p>
</li>
<li><p>登录后点击“创建项目”</p>
<p><img src="/../images/image-20250605192451907.png" alt="创建项目"></p>
</li>
<li><p>接下来按照引导走下去，开发者计划、AI辅助、google analytics根据个人需求选择，点击继续并稍等片刻就创建成功了。</p>
<p><img src="/../images/image-20250605192821032.png" alt="创建成功"></p>
</li>
<li><p>点击新项目，在左上角“项目概述”里点“项目设置”</p>
<p><img src="/../images/image-20250605193218565.png" alt="项目设置"></p>
<p>这时候可以看见项目ID等信息了，但是api还没有显示</p>
<p><img src="/../images/image-20250605193311734.png" alt="项目设置信息"></p>
</li>
<li><p>接下来在左侧边栏“构建”里找到“Authentication”，点击“开始”（哇，这个界面设置我还以为google不让手动设置只能用AI了，瞎按了半天才知道点”开始”）</p>
<p><img src="/../images/image-20250605193844508.png" alt="Authentication"></p>
</li>
<li><p>接下来选择登陆方式登录即可。我选择谷歌，点击右上角启用，项目公开名称默认即可，项目支持邮箱选择个人谷歌邮箱</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-05%20194506.png" alt="登录"></p>
</li>
<li><p>回到项目设置页面，可以看到api已经出现了</p>
<p><img src="/../images/image-20250605210227422.png" alt="api出现"></p>
</li>
<li><p>接下来就可以把next&#x2F;config.yml里的projectId和apiKey填上了</p>
</li>
<li><p>然后打开左侧边栏“构建”里的“Firestore Database”，点击“创建数据库”</p>
<p><img src="/../images/image-20250605210959567.png" alt="创建数据库"></p>
</li>
<li><p>接下来的页面，设置位置（数据库ID似乎不能改动），然后下一步</p>
<p><img src="/../images/image-20250605211218445.png" alt="设置位置"></p>
</li>
<li><p>接下来选择测试模式，等待预配Cloud Firestore</p>
<p><img src="/../images/image-20250605211444337.png" alt="选择测试模式"></p>
</li>
<li><p>加载成功后长这样</p>
<p><img src="/../images/image-20250605211643158.png" alt="database创建成功后"></p>
</li>
<li><p>接下来重新部署博客后就可以测试计数机制是否正常了。但是笔者在这一步折腾了很久，因为调试的时候发现：</p>
<p>1.数据库的信息在第一次启用计数机制后会自动生成，但是对这些信息进行改动后计数机制就失效了  </p>
<p>2.即使在莫名其妙的情况下（可能是关闭firestore配置后再次开启的情况）重新初始化了数据库，计数1次之后再怎么访问（如刷新、关闭页面重新打开）也不会记录第2次  </p>
</li>
<li><p>还有一些调试过程发现的问题，但是调试过程太乱了不好描述，所以下面直接指出问题并给出解决方案</p>
</li>
<li><p>首先，firestore的计数机制有点特别，它使用了localStorage来判断是否访问过文章，如果访问过文章，将不会出现第二次计数的情况（永远不会，除非重置localStorage）。这也解释了为什么改动数据信息后计数机制会失效：因为没有第二次计数，所以数据库信息不会再更新。因此需要对计数机制进行一些优化，优化方案来自DeepSeek，需要改动的配置为next&#x2F;source&#x2F;js&#x2F;third-party&#x2F;statistics&#x2F;firestore.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* global CONFIG, firebase */</span><br><br>firebase.<span class="hljs-title function_">initializeApp</span>(&#123;<br>  apiKey   : <span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">firestore</span>.<span class="hljs-property">apiKey</span>,<br>  <span class="hljs-attr">projectId</span>: <span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">firestore</span>.<span class="hljs-property">projectId</span><br>&#125;);<br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCount</span> = (<span class="hljs-params">doc, increaseCount</span>) =&gt; &#123;<br>    <span class="hljs-comment">// IncreaseCount will be false when not in article page</span><br>    <span class="hljs-keyword">return</span> doc.<span class="hljs-title function_">get</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">d</span> =&gt;</span> &#123;<br>      <span class="hljs-comment">// Has no data, initialize count</span><br>      <span class="hljs-keyword">let</span> count = d.<span class="hljs-property">exists</span> ? d.<span class="hljs-title function_">data</span>().<span class="hljs-property">count</span> : <span class="hljs-number">0</span>;<br>      <span class="hljs-comment">// If first view this article</span><br>      <span class="hljs-keyword">if</span> (increaseCount) &#123;<br>        <span class="hljs-comment">// Increase count</span><br>        count++;<br>        doc.<span class="hljs-title function_">set</span>(&#123;<br>          count<br>        &#125;);<br>      &#125;<br>      <span class="hljs-keyword">return</span> count;<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> db = firebase.<span class="hljs-title function_">firestore</span>();<br>  <span class="hljs-keyword">const</span> articles = db.<span class="hljs-title function_">collection</span>(<span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">firestore</span>.<span class="hljs-property">collection</span>);<br><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;page:loaded&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">page</span>.<span class="hljs-property">isPost</span>) &#123;<br>      <span class="hljs-comment">// Fix issue #118</span><br>      <span class="hljs-comment">// https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent</span><br>      <span class="hljs-keyword">const</span> title = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.post-title&#x27;</span>).<span class="hljs-property">textContent</span>.<span class="hljs-title function_">trim</span>();<br>      <span class="hljs-keyword">const</span> doc = articles.<span class="hljs-title function_">doc</span>(title);<br>      <span class="hljs-keyword">let</span> increaseCount = <span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">hostname</span> === location.<span class="hljs-property">hostname</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(title)) &#123;<br>        increaseCount = <span class="hljs-literal">false</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Mark as visited in current session</span><br>        <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(title, <span class="hljs-literal">true</span>);<br>      &#125;<br>      <span class="hljs-title function_">getCount</span>(doc, increaseCount).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.firestore-visitors-count&#x27;</span>).<span class="hljs-property">innerText</span> = count;<br>      &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error updating count:&#x27;</span>, e));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">page</span>.<span class="hljs-property">isHome</span>) &#123;<br>      <span class="hljs-keyword">const</span> promises = [...<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.post-title&#x27;</span>)].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> title = element.<span class="hljs-property">textContent</span>.<span class="hljs-title function_">trim</span>();<br>        <span class="hljs-keyword">const</span> doc = articles.<span class="hljs-title function_">doc</span>(title);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">getCount</span>(doc);<br>      &#125;);<br>      <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(promises).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">counts</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> metas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.firestore-visitors-count&#x27;</span>);<br>        counts.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">val, idx</span>) =&gt;</span> &#123;<br>          metas[idx].<span class="hljs-property">innerText</span> = val;<br>        &#125;);<br>      &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error fetching counts:&#x27;</span>, e));<br>    &#125;<br>  &#125;);<br>&#125;)();<br></code></pre></td></tr></table></figure>

<p>简单解释一下优化的主要思路：使用sessionStorage替换localStorage，计数机制变为会话级，即每次打开文章都会计数，而刷新不会计数</p>
</li>
<li><p>那么接下来就要设置一下数据库的规则了。大佬的安全规则好像有一些漏洞，下面是DeepSeek生成的安全规则：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">rules_version = <span class="hljs-string">&#x27;2&#x27;</span>;<br>service cloud.<span class="hljs-property">firestore</span> &#123;<br>  match /databases/&#123;database&#125;/documents &#123;<br>    <span class="hljs-comment">// 针对文章集合的规则</span><br>    match /articles/&#123;articleId&#125; &#123;<br>      <span class="hljs-comment">// 允许所有人读取</span><br>      allow <span class="hljs-attr">read</span>: <span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>;<br>      <br>      <span class="hljs-comment">// 创建新文档时的规则</span><br>      allow <span class="hljs-attr">create</span>: <span class="hljs-keyword">if</span> request.<span class="hljs-property">resource</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">keys</span>().<span class="hljs-title function_">hasOnly</span>([<span class="hljs-string">&quot;count&quot;</span>]) <br>                   &amp;&amp; request.<span class="hljs-property">resource</span>.<span class="hljs-property">data</span>.<span class="hljs-property">count</span> == <span class="hljs-number">1</span>;<br>      <br>      <span class="hljs-comment">// 更新文档时的规则（确保count只能+1）</span><br>      allow <span class="hljs-attr">update</span>: <span class="hljs-keyword">if</span> request.<span class="hljs-property">resource</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">keys</span>().<span class="hljs-title function_">hasOnly</span>([<span class="hljs-string">&quot;count&quot;</span>])<br>                   &amp;&amp; request.<span class="hljs-property">resource</span>.<span class="hljs-property">data</span>.<span class="hljs-property">count</span> == resource.<span class="hljs-property">data</span>.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 禁止其他所有操作</span><br>    match /&#123;<span class="hljs-variable language_">document</span>=**&#125; &#123;<br>      allow read, <span class="hljs-attr">write</span>: <span class="hljs-keyword">if</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>打开“Firestore Database”的“规则”，把规则粘贴进去，点击发布即可</p>
<p><img src="/../images/image-20250605214840666.png" alt="设置规则"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>杂记</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Day1:x86汇编框架、数据类型、基本运算、位运算</title>
    <url>/2025/07/05/Day1-x86%E6%B1%87%E7%BC%96%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>vs2022汇编环境、x86汇编框架、数据类型、基本运算、位运算</p>
<span id="more"></span>

<h2 id="在vs2022中编写汇编代码"><a href="#在vs2022中编写汇编代码" class="headerlink" title="在vs2022中编写汇编代码"></a>在vs2022中编写汇编代码</h2><ul>
<li><p>新建一个空项目</p>
</li>
<li><p>在工具栏的“工具”选项中选择“获取工具和功能”，在“使用C++的桌面开发”中勾选“Windows 10 SDK”以及“MSVC v142 -VS 2015 C++生成工具”，然后安装这些新勾选的选项，更新VS2022</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-05%20233157.png" alt="勾选选项"></p>
</li>
<li><p>右键新建的空项目，选择最下方的“属性”，在弹出来的页面中选择“常规”，然后将平台版本改成windows10，可能需要改也可能不需要</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-05%20233305.png" alt="属性页"></p>
</li>
<li><p>右键新建的空项目，选择“生成依赖性”，然后是“生成自定义”，在界面中选择masm</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-05%20233422.png" alt="生成自定义"></p>
</li>
<li><p>然后就可以新建一个.asm源文件了。新建完成后，右键源文件选择“属性”，然后在“常规”里检查项类型是否为“Microsoft Macro Assembler”</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-05%20233723.png" alt="常规"></p>
</li>
<li><p>以上是针对报错进行的尝试修正总结，可能有多余或者不足之处</p>
</li>
</ul>
<h2 id="x86汇编框架-MASM"><a href="#x86汇编框架-MASM" class="headerlink" title="x86汇编框架(MASM)"></a>x86汇编框架(MASM)</h2><ul>
<li><p>xxxxxxxxxx2 1int num[2][2] &#x3D; { {1,2},{3,4} };2printf(“%d,%d,%d,%d”, num[0][0], num[0][1], num[1][0], num[1][1]);c</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;预处理</span></span><br><span class="line"><span class="meta">.586</span></span><br><span class="line"><span class="meta">.model</span> flat,stdcall</span><br><span class="line"></span><br><span class="line"><span class="comment">;包含的链接库</span></span><br><span class="line">includelib ucrt<span class="number">.</span>lib</span><br><span class="line">includelib legacy_stdio_definitions<span class="number">.</span>lib</span><br><span class="line">includelib kernel32<span class="number">.</span>lib</span><br><span class="line">includelib user32<span class="number">.</span>lib</span><br><span class="line"></span><br><span class="line"><span class="comment">;外部函数声明</span></span><br><span class="line"><span class="meta">extern</span> printf:proc</span><br><span class="line"></span><br><span class="line"><span class="comment">;数据段</span></span><br><span class="line"><span class="meta">.data</span></span><br><span class="line">szHello <span class="built_in">db</span> <span class="string">&#x27;HelloWorld!&#x27;</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;代码段</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line"><span class="comment">;函数声明</span></span><br><span class="line">main proc</span><br><span class="line">	<span class="keyword">lea</span> <span class="built_in">eax</span>,szHello</span><br><span class="line">	<span class="keyword">push</span> <span class="built_in">eax</span></span><br><span class="line">	<span class="keyword">call</span> printf</span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">4</span></span><br><span class="line">main endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<ul>
<li><p>重点如下：</p>
</li>
<li><p>链接库声明</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">includelib NameOfLib<span class="number">.</span>lib</span><br></pre></td></tr></table></figure>
</li>
<li><p>不同的段</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">.NameOfSection</span></span><br><span class="line"><span class="comment">;段所包含的数据</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数格式</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">functionName proc 参数名<span class="number">1</span>:参数类型，参数名<span class="number">2</span>:参数类型...</span><br><span class="line">	<span class="comment">;汇编代码</span></span><br><span class="line">functionName endp</span><br></pre></td></tr></table></figure>
</li>
<li><p>在一个asm文件末尾，需要</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">end			<span class="comment">;用于无入口点，即非可执行文件，不需要主函数时</span></span><br><span class="line">end main	<span class="comment">;用于可执行文件，必须指定入口点(如main函数)时</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table>
<thead>
<tr>
<th align="center">类型名称</th>
<th align="center">简写</th>
<th align="center">对应类型</th>
<th align="center">占用字节数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BYTE</td>
<td align="center">db</td>
<td align="center">char</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">WORD</td>
<td align="center">dw</td>
<td align="center">short</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">DWORD</td>
<td align="center">dd</td>
<td align="center">int</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">QWORD</td>
<td align="center">dq</td>
<td align="center">long long</td>
<td align="center">8</td>
</tr>
</tbody></table>
<h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><ul>
<li><p>数据传送指令</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> dest,src		<span class="comment">;dest=src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;eax=1示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>地址传送指令</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lea</span> dest,[addr]		<span class="comment">;dest=addr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;eax=77E75F38示例</span></span><br><span class="line"><span class="keyword">lea</span> <span class="built_in">eax</span>,77E75F38</span><br></pre></td></tr></table></figure>
</li>
<li><p>加法</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add</span> dest,src	<span class="comment">;dest=dest+src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;1+1=2示例，最后eax里为2</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">add</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自增</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inc</span> dest		<span class="comment">;dest=dest+1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;eax++示例</span></span><br><span class="line"><span class="keyword">inc</span> <span class="built_in">eax</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>减法</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sub</span> dest,src	<span class="comment">;dest=dest-src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;6-2=4示例，最后eax里为4</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">6</span></span><br><span class="line"><span class="keyword">sub</span> <span class="built_in">eax</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自减</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dec</span> dest		<span class="comment">;dest=dest-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;eax--示例</span></span><br><span class="line"><span class="keyword">dec</span> <span class="built_in">eax</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>乘法</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;分为mul(无符号)和imul(有符号)</span></span><br><span class="line"><span class="comment">;乘法结果存放在edx和eax中(edx:eax)，低位eax，高位edx。未指定时，eax默认作为一个因数</span></span><br><span class="line"><span class="keyword">mul</span> src				<span class="comment">;edx:eax=eax*src</span></span><br><span class="line"><span class="keyword">imul</span> src			<span class="comment">;edx:eax=eax*src</span></span><br><span class="line"><span class="keyword">imul</span> dest,src		<span class="comment">;dest=dest*src</span></span><br><span class="line"><span class="keyword">imul</span> dest,src,imm	<span class="comment">;dest=src*imm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;4*2=8示例，eax*ebx</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">mul</span> <span class="built_in">ebx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>除法</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;分为div(无符号)和idiv(有符号)</span></span><br><span class="line"><span class="comment">;被除数放在edx:eax中，除数任意，商存放在eax中，余数存放在edx中</span></span><br><span class="line"><span class="keyword">div</span> src			<span class="comment">;edx:eax%src=eax...edx</span></span><br><span class="line"><span class="keyword">idiv</span> src		<span class="comment">;edx:eax%src=eax...edx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;101%2...1示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">101</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">edx</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">div</span> <span class="built_in">ebx</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><ul>
<li><p>与</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> dest,src		<span class="comment">;dest=dest &amp; src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;1&amp;2=0示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">and</span> <span class="built_in">eax</span>,<span class="built_in">ebx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>或</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> dest,src			<span class="comment">;dest=dest | src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;1|2=3示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">or</span> <span class="built_in">eax</span>,<span class="built_in">ebx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>取反</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">not</span> dest			<span class="comment">;dest=~dest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;not 00000001=11111110示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">not</span> <span class="built_in">eax</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>异或</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">xor</span> dest,src		<span class="comment">;dest=dest^src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;1^2=3示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">xor</span> <span class="built_in">eax</span>,<span class="built_in">ebx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>左移，右移</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;左移</span></span><br><span class="line"><span class="keyword">shl</span> dest,count		<span class="comment">;dest=dest&lt;&lt;count</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;1&lt;&lt;3=8示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">shl</span> <span class="built_in">eax</span>,<span class="built_in">cl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;右移</span></span><br><span class="line"><span class="keyword">shr</span> dest,count		<span class="comment">;dest=dest&gt;&gt;count</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;8&gt;&gt;3=1示例</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">8</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">shr</span> <span class="built_in">eax</span>,<span class="built_in">cl</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day11:花指令</title>
    <url>/2025/07/31/Day11-%E8%8A%B1%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>花指令</p>
<span id="more"></span>

<h2 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2><ul>
<li><p>又叫垃圾指令，不影响程序原始逻辑，但会干扰IDA反编译或者反汇编。</p>
</li>
<li><p>原理：</p>
<p>因为反编译器多是静态分析的，不会通过执行来分析逻辑，只会根据反汇编出来的指令分析，因此有空可乘：例如可以通过内联汇编不完整指令但是跳过不完整指令来模糊指令边界、内联汇编永跳永不跳分支来误导运行逻辑分析、内联汇编无意义指令误导主要逻辑</p>
</li>
<li><p>显著特征是出现红色行，而应对方法是选中花指令所在的区域改为“nop”（空指令）</p>
</li>
</ul>
<h3 id="恒跳型"><a href="#恒跳型" class="headerlink" title="恒跳型"></a>恒跳型</h3><ul>
<li><p>实测IDA9.0.241217不会报红，也就是混淆失效，所以就看看源码吧</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	_asm&#123;</span><br><span class="line">		xor eax, eax;</span><br><span class="line">		jz s;</span><br><span class="line">		add esp, <span class="number">0x11</span>;</span><br><span class="line">	s:</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="call-ret相消型"><a href="#call-ret相消型" class="headerlink" title="call-ret相消型"></a>call-ret相消型</h3><ul>
<li><p>来看效果</p>
<p><img src="/../images/image-20250731203000820.png" alt="报红"></p>
</li>
<li><p>可以看到，在函数中间出现了sp-analysis failed，而上面一条就是retn，明显不对。</p>
<p>往前看，rep stosd初始化后，call了$+5，即当前位置+5&#x3D;0046308C，也就是下一条的add</p>
<p>然后给esp的值+7（call的时候push eip即push 0046308c了）</p>
<p>此时esp存放值为0046308c+7&#x3D;00463093，所以retn时会pop 00463093，程序跳到00463093</p>
<p>往下看，00463093正是没识别出来的三个数的最后一个，下面还有一个offset没有指令。</p>
<p>第三个数68h和offset结合刚好是push offset，对应上了下面的call（函数传参）</p>
</li>
<li><p>选中没识别的三个数，按“U”（undefine)，可以看到三个数分开了</p>
<p><img src="/../images/image-20250731203817109.png" alt="按U"></p>
</li>
<li><p>选中db 68h和dd offset aHello，按C转化为汇编指令，可以看到push offset恢复了</p>
<p><img src="/../images/image-20250731204815374.png" alt="恢复push"></p>
</li>
<li><p>选中call $+5到db 34h，右键选择”Fill with NOPs“（实测db 34h会nop不干净，要选中到db 34h下一行）</p>
<p><img src="/../images/image-20250731204858702.png" alt="NOP"></p>
</li>
<li><p>可以看到函数变成这样，这是因为插入了retn导致函数范围分析错误，需要纠正</p>
<p><img src="/../images/image-20250731205500606.png" alt="NOP完"></p>
</li>
<li><p>点击函数名，然后右键edit fuction，把end address改成末尾那个真正的retn的地址就OK了</p>
<p><img src="/../images/image-20250731205807130.png" alt="纠正函数范围"></p>
</li>
</ul>
<h3 id="jz-操作数不全型"><a href="#jz-操作数不全型" class="headerlink" title="jz-操作数不全型"></a>jz-操作数不全型</h3><ul>
<li><p>这种情况下会出现和上一种一样的指令识别错误的问题，且看图：</p>
<p><img src="/../images/image-20250801002342967.png" alt="图"></p>
</li>
<li><p>这是按照MSVS C++初始化规则跳转后，在本来main函数的地方的截图。但是跳转过程中会发现，跳转到main函数的代码是jmp loc_xxxxxx而不是jmp sub_xxxxxx。但是目前还不影响，先分析报错的地方。</p>
</li>
<li><p>可以看到 xor ebp,[eax+50h] 处报红了，并且下面是一段没分析出来的数和字符串”pause”，下面进行分析</p>
</li>
<li><p>首先，rep stosd初始化后，进行了一个恒跳，跳转的地方是0046308E，在 xor ebp,[eax+50h] 这条指令里，所以这里红了</p>
</li>
<li><p>把 xor ebp,[eax+50h] 这条指令undefine一下</p>
<p><img src="/../images/image-20250801002409823.png" alt="undefine一下"></p>
</li>
<li><p>根据逻辑，程序是肯定会跳到0046308E的，所以前面的代码冗余，直接nop掉。选中 xor eax,eax 到0046308E（根据上一种类型的经验，要多覆盖一位才能刚好nop掉目标代码）</p>
<p><img src="/../images/image-20250801002510740.png" alt="NOP"></p>
</li>
<li><p>nop完成后（如果有db 90h就按”C“转成code）就会发现下面没分析的数立刻分析出指令了</p>
<p><img src="/../images/image-20250801002536258.png" alt="去混淆成功"></p>
</li>
<li><p>但是还没完，此时按F5是无法反编译的，因为报错的地方是loc_xxxxxx范围里的，不是一个函数，也就是前面说的jmp loc_xxxxxx而不是jmp sub_xxxxxx的问题了。这里可以看出，IDA这类混淆会导致IDA把函数识别成一个引用而不是函数。</p>
</li>
<li><p>到最开始push ebp开辟栈帧的引用loc_463070处，把它undefine一下，再按“P”重新分析一下，就可以得到main函数了</p>
<p><img src="/../images/image-20250801002703125.png" alt="修复的main函数"></p>
</li>
<li><p>这类有一个特征就是jz loc_xxxxxx+1，据此可以快速找到加了混淆的地方</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>上述三种（实际上有混淆效果的只有两种）是比较基础的花指令。识别花指令的要点主要是看红色错误，也可以结合一些特征来识别。解决方法就是nop掉混淆代码。</li>
<li>在实际设计题目时，笔者意外发现了一些更强力的混淆，单单是在上述三种类型的基础上加一点其他指令，就会导致一个函数完全无法被识别（被放在rdata段而不是text段的那种），但是程序还能正常执行，而报错的地方在无法识别的函数的上级函数里（跳转到这个函数的那个函数），可能要结合AI才能实现快捷的分析。因此，花指令还是一个具有挑战性的混淆方式（当然也可能是笔者太菜了没石粒）</li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day10:壳与脱壳（二）</title>
    <url>/2025/07/30/Day10-%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>二次断点法、一次断点法、特征查找法（均基于Xdbg）、Dll手动脱壳</p>
<span id="more"></span>

<h2 id="寻找OEP的方法（二）"><a href="#寻找OEP的方法（二）" class="headerlink" title="寻找OEP的方法（二）"></a>寻找OEP的方法（二）</h2><h3 id="二次断点法"><a href="#二次断点法" class="headerlink" title="二次断点法"></a>二次断点法</h3><ul>
<li><p>又叫内存镜像法，原理是壳程序解析时会从.rsrc段获取资源，解析后回到代码段，因此可以通过现在.rsrc段设置内存读取断点，然后在代码段(.text&#x2F;.code)设置内存写入断点来监控壳程序执行。</p>
</li>
<li><p>通常这个方法是基于OllyDbg的，但是从原理出发Xdbg也不是不能用。除了有一步是在OllyDbg中设置忽略所有异常，Xdbg好像没有这个设置选项，但是经过实测是可以用这个方法在Xdbg脱upx壳的。</p>
</li>
<li><p>Upx脱壳示例：</p>
<ul>
<li><p>Xdbg载入程序，先在“断点”模块把预设的断点删除，避免程序在非关注的异常处（断点处）停下</p>
<p><img src="/../images/image-20250730155018782.png" alt="移除断点"></p>
</li>
<li><p>然后到“内存映射”模块找到程序的.rsrc（注意所属方为用户），下一次性内存读取断点</p>
<p><img src="/../images/image-20250730155602928.png" alt="下内存读取断点"></p>
</li>
<li><p>shift+F9运行，然后在上方的upx0处下一次性内存写入断点</p>
<p><img src="/../images/image-20250730155656485.png" alt="下内存写入断点"></p>
</li>
<li><p>shift+F9运行，回到“CPU”模块，会发现下方不远处就有一个大跳（隔得有点远截不到eip和大跳的同框图），在大跳前下断点，F9运行到断点处，然后步进就可以到达OEP了</p>
</li>
</ul>
</li>
<li><p>但是有一点奇怪的地方：结合upx的解析原理，upx好像是从upx1段加载数据解析到upx0段的（AI说的，不确定对不对），所以按道理，在upx1处下内存读取断点不是也有类似的监控效果吗？但是实测这样子会跑飞🤔有过一个想法就是，因为在upx1段下了读取断点，壳程序解析前中断了，然后又在upx0段下写入断点，然后按道理应该停在解析然后写入这一步，就是解析了还没写入，或者说刚刚写入一次，那这样也不至于直接调试终止吧🤔</p>
</li>
</ul>
<h3 id="一次断点法（二次断点法plus"><a href="#一次断点法（二次断点法plus" class="headerlink" title="一次断点法（二次断点法plus)"></a>一次断点法（二次断点法plus)</h3><ul>
<li><p>这个方法是基于二次断点法和upx实测出来的，因为根据壳程序解析的原理，最终都会发生向内存写入解析完的数据的操作，所以直接在写入的地方下内存写入断点，这样调试器中断的地方就离OEP不远了（接近壳程序解析的尾声，但还是远到截不到eip和大跳的同框图）</p>
</li>
<li><p>示例</p>
<ul>
<li><p>首先，同样要先去掉预设断点</p>
<p><img src="/../images/image-20250730163429021.png" alt="去掉预设断点"></p>
</li>
<li><p>然后在“内存映射”模块给upx0下一次性内存写入断点&#x2F;给upx1下一次性内存读取断点</p>
<p><img src="/../images/image-20250730164034182.png" alt="下内存写入断点"></p>
</li>
<li><p>shift+F9运行，中断的地方就差不多是壳程序解析写入&#x2F;开始解析的地方了，在下方大跳前F2断点+F9运行一步到位，然后就可以跳转到OEP了</p>
</li>
</ul>
</li>
</ul>
<h3 id="特征查找法"><a href="#特征查找法" class="headerlink" title="特征查找法"></a>特征查找法</h3><ul>
<li><p>借助特征指令popad，在程序区域搜索指令，然后下断点运行至此，再接着运行到OEP处</p>
</li>
<li><p>示例：</p>
<ul>
<li><p>F9运行到程序区域，此时断在pushad</p>
<p><img src="/../images/image-20250730165414432.png" alt="F9运行"></p>
</li>
<li><p>右键在当前区域搜索命令popad</p>
<p><img src="/../images/image-20250730165457171.png" alt="搜索"></p>
</li>
<li><p>双击搜索结果跳转，下方不远处就是到OEP的大跳了。直接在jmp前一条指令下断点，F9到此，然后步进</p>
<p><img src="/../images/image-20250730165636809.png" alt="搜索结果"></p>
</li>
</ul>
</li>
</ul>
<h2 id="Dll手动脱壳"><a href="#Dll手动脱壳" class="headerlink" title="Dll手动脱壳"></a>Dll手动脱壳</h2><ul>
<li><p>若出现Dll程序加壳的情况，可以先把Dll程序转化成exe程序，然后使用和exe手动脱壳一样的步骤即可</p>
</li>
<li><p>示例：</p>
<ul>
<li><p>用DIE打开Dll程序，可以看到显示加了upx壳</p>
<p><img src="/../images/image-20250730224157270.png" alt="DIE查看"></p>
</li>
<li><p>点击“区块”下方的“&gt;”，打开文件结构界面</p>
<p><img src="/../images/image-20250730224231764.png" alt="文件结构页面"></p>
</li>
<li><p>取消勾选右上角”只读“，然后点击IMAGE_FILE_HEADER，取消勾选”标志“中的”Dll“（图中未取消）</p>
<p><img src="/../images/image-20250730224435928.png" alt="取消勾选Dll"></p>
<p>此时可以发现，Characteristics的值变了</p>
</li>
<li><p>然后把dll后缀改成exe就可以按照exe手动脱壳的步骤进行脱壳了</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day12:反调试</title>
    <url>/2025/08/02/Day12-%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>反调试基本原理、WINAPI检测、数据检测、进程检测</p>
<span id="more"></span>

<h2 id="反调试基本原理"><a href="#反调试基本原理" class="headerlink" title="反调试基本原理"></a>反调试基本原理</h2><ul>
<li>反调试技术通常借助操作系统相关的内容来实现，常见办法有调用WindowsAPI获得相关数据、有意触发异常监测异常处理（调试器会捕获异常）、时间差检测（实际运行过程十分迅速）、硬件断点检测、进程检测等</li>
</ul>
<h2 id="WINAPI检测"><a href="#WINAPI检测" class="headerlink" title="WINAPI检测"></a>WINAPI检测</h2><ul>
<li>由于是直接使用WINAPI，所以一般在IDA或者动态调试器里会有明显的函数名字样，识别会比较容易</li>
<li>此类一般是利用函数的返回值或者函数传递回来的参数作为判断标准，应对方法主要有使用反反调试插件、修改相关值、hook等</li>
</ul>
<h3 id="IsDebuggerPresent"><a href="#IsDebuggerPresent" class="headerlink" title="IsDebuggerPresent"></a>IsDebuggerPresent</h3><ul>
<li><p>原理：</p>
<p>IsDebuggerPresent() 实际上是通过访问PEB（ProcessEnvironmentBlock，进程环境块，一个描述进程相关数据的结构体）中的BeingDebugged标志来判断是否被调试的，被调试的话，函数返回1。有关BeingDebugged的内容，见下文。</p>
</li>
<li><p>IDA和XDbg的效果图：</p>
<p><img src="/../images/image-20250802131116428.png" alt="IDA效果图"></p>
<p><img src="/../images/image-20250802131150198.png" alt="XDbg效果图"></p>
<p>可以看到明显的IsDebuggerPresent字样。</p>
</li>
<li><p>应对方法：</p>
<p>在XDbg中开启scyllahide插件或者在TEST EAX,EAX后改变一下ZF就可以了</p>
</li>
</ul>
<h3 id="CheckRemoteDebuggerPresent"><a href="#CheckRemoteDebuggerPresent" class="headerlink" title="CheckRemoteDebuggerPresent"></a>CheckRemoteDebuggerPresent</h3><ul>
<li><p>原理：</p>
<p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL WINAPI <span class="title function_">CheckRemoteDebuggerPresent</span><span class="params">(</span></span><br><span class="line"><span class="params">	In		HANDLE hProcess,<span class="comment">//参数1，一个进程句柄，传入当前进程句柄就是checklocal了</span></span></span><br><span class="line"><span class="params">	Inout	PBOOL pbDebuggerPresent<span class="comment">//参数2，一个用来传递的布尔值，用来表示是否被调试</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>这个函数实际上是借用了NtQueryInfomationProcess函数来实现调试检测的，简单讲就是通过NtQueryInformationProcess查询一个数据然后和非调试状态下这个数据预期的值进行比较，比较结果再传给自己的参数2。更详细的原理见下一个API</p>
</li>
<li><p>效果图：</p>
<p><img src="/../images/image-20250802151411075.png" alt="IDA效果图"></p>
<p><img src="/../images/image-20250802151613861.png" alt="xdbg效果"></p>
</li>
<li><p>应对方法：</p>
<p>scyllahide依旧管用，也可以在call CheckRemoteDebuggerPresent下面的cmp后改变zf来实现反反调试</p>
</li>
</ul>
<h3 id="NtQueryInformationProcess"><a href="#NtQueryInformationProcess" class="headerlink" title="NtQueryInformationProcess"></a>NtQueryInformationProcess</h3><ul>
<li><p>原理：</p>
<p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__kernel_entry NTSTATUS <span class="title function_">NtQueryInformationProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">    IN HANDLE           ProcessHandle,<span class="comment">//要查询的进程句柄</span></span></span><br><span class="line"><span class="params">    IN PROCESSINFOCLASS ProcessInformationClass,<span class="comment">//要查询的信息类型</span></span></span><br><span class="line"><span class="params">    OUT PVOID           ProcessInformation,<span class="comment">//接收查询结果的缓冲区（变量）</span></span></span><br><span class="line"><span class="params">    IN ULONG            ProcessInformationLength,<span class="comment">//缓冲区大小</span></span></span><br><span class="line"><span class="params">    OUT PULONG          ReturnLength OPTIONAL<span class="comment">//实际返回的数据大小，可选</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>通过设置第二个参数为0x7（表示查询一个叫ProcessDebugPort的变量），函数会通过第三个参数传递调试信息，被调试则传递<strong>非</strong>0</p>
<p>或者设置第二个参数为0x1E（表示查询一个叫ProcessDebugObjectHandle的变量），被调试则传递<strong>非</strong>NULL</p>
<p>或者设置第二个参数为0x1F（表示查询一个叫ProcessDebugFlags的变量），被调试则传递0</p>
<p>原型是这样，但是这个函数是Windows内部API，即系统不想用户使用这个函数（可能是出于安全考虑），所以直接调用是不行的，要动态加载。下面是DS给的实现源码参考：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义函数指针类型（必须手动声明）</span></span><br><span class="line"><span class="keyword">typedef</span> LONG NTSTATUS;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">NTSTATUS</span> <span class="params">(NTAPI* PNtQueryInformationProcess)</span><span class="params">(</span></span><br><span class="line"><span class="params">    HANDLE ProcessHandle,</span></span><br><span class="line"><span class="params">    <span class="type">int</span> ProcessInformationClass,  <span class="comment">// 直接使用 int 代替 PROCESSINFOCLASS</span></span></span><br><span class="line"><span class="params">    PVOID ProcessInformation,</span></span><br><span class="line"><span class="params">    ULONG ProcessInformationLength,</span></span><br><span class="line"><span class="params">    PULONG ReturnLength</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 2. 动态加载 ntdll.dll</span></span><br><span class="line">    HMODULE hNtdll = GetModuleHandleW(<span class="string">L&quot;ntdll.dll&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!hNtdll) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 获取 NtQueryInformationProcess 函数地址</span></span><br><span class="line">    PNtQueryInformationProcess NtQueryInformationProcess = </span><br><span class="line">        (PNtQueryInformationProcess)GetProcAddress(hNtdll, <span class="string">&quot;NtQueryInformationProcess&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!NtQueryInformationProcess) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 调用函数查询调试端口（0x7 = ProcessDebugPort）</span></span><br><span class="line">    DWORD debugPort = <span class="number">0</span>;</span><br><span class="line">    NTSTATUS status = NtQueryInformationProcess(</span><br><span class="line">        GetCurrentProcess(),</span><br><span class="line">        <span class="number">0x7</span>,  <span class="comment">// ProcessDebugPort</span></span><br><span class="line">        &amp;debugPort,</span><br><span class="line">        <span class="keyword">sizeof</span>(debugPort),</span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 严格按照你的逻辑输出</span></span><br><span class="line">    <span class="keyword">if</span> (debugPort)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;bye\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是IDA的反汇编结果</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>000000014007E130 sub_14007E130   proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: sub_14007920B↑j</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E130                                         <span class="comment">; DATA XREF: .pdata:00000001401AB818↓o</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E130</span><br><span class="line"><span class="symbol">.text:</span>000000014007E130 var_180         = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">180h</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E130 var_160         = <span class="built_in">qword</span> <span class="built_in">ptr</span> -<span class="number">160h</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E130 var_150         = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">150h</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E130 hModule         = <span class="built_in">qword</span> <span class="built_in">ptr</span> -<span class="number">148h</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E130 var_128         = <span class="built_in">qword</span> <span class="built_in">ptr</span> -<span class="number">128h</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E130 var_10C         = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">10Ch</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E130 var_EC          = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">0ECh</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E130 var_18          = <span class="built_in">qword</span> <span class="built_in">ptr</span> -<span class="number">18h</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E130</span><br><span class="line"><span class="symbol">.text:</span>000000014007E130 <span class="comment">; __unwind &#123; // j___GSHandlerCheck</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E130                 <span class="keyword">push</span>    <span class="built_in">rbp</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E132                 <span class="keyword">push</span>    <span class="built_in">rdi</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E133                 <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="number">178h</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E13A                 <span class="keyword">lea</span>     <span class="built_in">rbp</span>, [<span class="built_in">rsp</span>+<span class="number">30h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000014007E13F                 <span class="keyword">lea</span>     <span class="built_in">rdi</span>, [<span class="built_in">rsp</span>+<span class="number">180h</span>+var_150]</span><br><span class="line"><span class="symbol">.text:</span>000000014007E144                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">22h</span> <span class="comment">; &#x27;&quot;&#x27;</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E149                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E14E                 <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E150                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, <span class="built_in">cs</span>:__security_cookie</span><br><span class="line"><span class="symbol">.text:</span>000000014007E157                 <span class="keyword">xor</span>     <span class="built_in">rax</span>, <span class="built_in">rbp</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E15A                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+<span class="number">150h</span>+var_18], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E161                 <span class="keyword">lea</span>     <span class="built_in">rcx</span>, unk_1401B80A2</span><br><span class="line"><span class="symbol">.text:</span>000000014007E168                 <span class="keyword">call</span>    sub_14007A313</span><br><span class="line"><span class="symbol">.text:</span>000000014007E16D                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E16E                 <span class="keyword">lea</span>     <span class="built_in">rcx</span>, ModuleName <span class="comment">; &quot;ntdll.dll&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E175                 <span class="keyword">call</span>    <span class="built_in">cs</span>:GetModuleHandleW	<span class="comment">;此处加载ntdll库</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E17B                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+<span class="number">150h</span>+hModule], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E17F                 <span class="keyword">cmp</span>     [<span class="built_in">rbp</span>+<span class="number">150h</span>+hModule], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E184                 <span class="keyword">jnz</span>     short loc_14007E1A7</span><br><span class="line"><span class="symbol">.text:</span>000000014007E186                 <span class="keyword">lea</span>     <span class="built_in">rcx</span>, aHello     <span class="comment">; &quot;hello\n&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E18D                 <span class="keyword">call</span>    sub_14007886F</span><br><span class="line"><span class="symbol">.text:</span>000000014007E192                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E193                 <span class="keyword">lea</span>     <span class="built_in">rcx</span>, aPause     <span class="comment">; &quot;pause&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E19A                 <span class="keyword">call</span>    sub_140078810</span><br><span class="line"><span class="symbol">.text:</span>000000014007E19F                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1A0                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1A2                 <span class="keyword">jmp</span>     loc_14007E240</span><br><span class="line"><span class="symbol">.text:</span>000000014007E1A7 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1A7</span><br><span class="line"><span class="symbol">.text:</span>000000014007E1A7 loc_14007E1A7:                          <span class="comment">; CODE XREF: sub_14007E130+54↑j</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1A7                 <span class="keyword">lea</span>     <span class="built_in">rdx</span>, ProcName   <span class="comment">; &quot;NtQueryInformationProcess&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1AE                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, [<span class="built_in">rbp</span>+<span class="number">150h</span>+hModule] <span class="comment">; hModule</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1B2                 <span class="keyword">call</span>    <span class="built_in">cs</span>:GetProcAddress	<span class="comment">;此处获取NtQueryInformationProcess函数地址</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1B8                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+<span class="number">150h</span>+var_128], <span class="built_in">rax</span>	<span class="comment">;此处把函数地址传给局部变量</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1BC                 <span class="keyword">cmp</span>     [<span class="built_in">rbp</span>+<span class="number">150h</span>+var_128], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1C1                 <span class="keyword">jnz</span>     short loc_14007E1E1</span><br><span class="line"><span class="symbol">.text:</span>000000014007E1C3                 <span class="keyword">lea</span>     <span class="built_in">rcx</span>, aHello     <span class="comment">; &quot;hello\n&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1CA                 <span class="keyword">call</span>    sub_14007886F</span><br><span class="line"><span class="symbol">.text:</span>000000014007E1CF                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1D0                 <span class="keyword">lea</span>     <span class="built_in">rcx</span>, aPause     <span class="comment">; &quot;pause&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1D7                 <span class="keyword">call</span>    sub_140078810</span><br><span class="line"><span class="symbol">.text:</span>000000014007E1DC                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1DD                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1DF                 <span class="keyword">jmp</span>     short loc_14007E240</span><br><span class="line"><span class="symbol">.text:</span>000000014007E1E1 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1E1</span><br><span class="line"><span class="symbol">.text:</span>000000014007E1E1 loc_14007E1E1:                          <span class="comment">; CODE XREF: sub_14007E130+91↑j</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1E1                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+<span class="number">150h</span>+var_10C], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1E8                 <span class="keyword">call</span>    <span class="built_in">cs</span>:GetCurrentProcess	</span><br><span class="line"><span class="symbol">.text:</span>000000014007E1EE                 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">180h</span>+var_160], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1F7                 <span class="keyword">mov</span>     <span class="built_in">r9d</span>, <span class="number">4</span>	<span class="comment">;缓冲区大小</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E1FD                 <span class="keyword">lea</span>     <span class="built_in">r8</span>, [<span class="built_in">rbp</span>+<span class="number">150h</span>+var_10C]	<span class="comment">;接收结果的缓冲区</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E201                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, <span class="number">7</span>	<span class="comment">;指定查询的信息类型</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E206                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, <span class="built_in">rax</span>	<span class="comment">;查询的进程句柄</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E209                 <span class="keyword">call</span>    [<span class="built_in">rbp</span>+<span class="number">150h</span>+var_128]	<span class="comment">;调用NtQueryInformationProcess</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E20C                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+<span class="number">150h</span>+var_EC], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E20F                 <span class="keyword">cmp</span>     [<span class="built_in">rbp</span>+<span class="number">150h</span>+var_10C], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E213                 <span class="keyword">jz</span>      short loc_14007E224</span><br><span class="line"><span class="symbol">.text:</span>000000014007E215                 <span class="keyword">lea</span>     <span class="built_in">rcx</span>, aBye       <span class="comment">; &quot;bye\n&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E21C                 <span class="keyword">call</span>    sub_14007886F</span><br><span class="line"><span class="symbol">.text:</span>000000014007E221                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E222                 <span class="keyword">jmp</span>     short loc_14007E231</span><br><span class="line"><span class="symbol">.text:</span>000000014007E224 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E224</span><br><span class="line"><span class="symbol">.text:</span>000000014007E224 loc_14007E224:                          <span class="comment">; CODE XREF: sub_14007E130+E3↑j</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E224                 <span class="keyword">lea</span>     <span class="built_in">rcx</span>, aHello     <span class="comment">; &quot;hello\n&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E22B                 <span class="keyword">call</span>    sub_14007886F</span><br><span class="line"><span class="symbol">.text:</span>000000014007E230                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E231</span><br><span class="line"><span class="symbol">.text:</span>000000014007E231 loc_14007E231:                          <span class="comment">; CODE XREF: sub_14007E130+F2↑j</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E231                 <span class="keyword">lea</span>     <span class="built_in">rcx</span>, aPause     <span class="comment">; &quot;pause&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E238                 <span class="keyword">call</span>    sub_140078810</span><br><span class="line"><span class="symbol">.text:</span>000000014007E23D                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E23E                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E240</span><br><span class="line"><span class="symbol">.text:</span>000000014007E240 loc_14007E240:                          <span class="comment">; CODE XREF: sub_14007E130+72↑j</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E240                                         <span class="comment">; sub_14007E130+AF↑j</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E240                 <span class="keyword">mov</span>     <span class="built_in">rdi</span>, <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E243                 <span class="keyword">lea</span>     <span class="built_in">rcx</span>, [<span class="built_in">rbp</span>+<span class="number">150h</span>+var_180]</span><br><span class="line"><span class="symbol">.text:</span>000000014007E247                 <span class="keyword">lea</span>     <span class="built_in">rdx</span>, unk_140171FF0</span><br><span class="line"><span class="symbol">.text:</span>000000014007E24E                 <span class="keyword">call</span>    sub_140079A35</span><br><span class="line"><span class="symbol">.text:</span>000000014007E253                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, <span class="built_in">rdi</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E256                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, [<span class="built_in">rbp</span>+<span class="number">150h</span>+var_18]</span><br><span class="line"><span class="symbol">.text:</span>000000014007E25D                 <span class="keyword">xor</span>     <span class="built_in">rcx</span>, <span class="built_in">rbp</span>        <span class="comment">; StackCookie</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E260                 <span class="keyword">call</span>    j___security_check_cookie</span><br><span class="line"><span class="symbol">.text:</span>000000014007E265                 <span class="keyword">lea</span>     <span class="built_in">rsp</span>, [<span class="built_in">rbp</span>+<span class="number">148h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000014007E26C                 <span class="keyword">pop</span>     <span class="built_in">rdi</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E26D                 <span class="keyword">pop</span>     <span class="built_in">rbp</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E26E                 <span class="keyword">retn</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E26E <span class="comment">; &#125; // starts at 14007E130</span></span><br><span class="line"><span class="symbol">.text:</span>000000014007E26E sub_14007E130   endp</span><br><span class="line"><span class="symbol">.text:</span>000000014007E26E</span><br></pre></td></tr></table></figure>

<p>特征应该是 call    cs:GetModuleHandleW、call    cs:GetProcAddress、 call    cs:GetCurrentProcess</p>
</li>
<li><p>应对方法：</p>
<p>scyllahide也是支持反NtQueryInformationProcess反调试的，手动绕过一般是更改缓冲区的值与标准值的比较结果，当然在DS给的源码中因为加入了一下错误处理（如ntdll载入失败就跳过反调试），可以通过人为改动错误判断的结果来实现直接跳过反调试</p>
</li>
</ul>
<h3 id="GetLastError"><a href="#GetLastError" class="headerlink" title="GetLastError"></a>GetLastError</h3><ul>
<li><p>这个函数用于获取最近一次异常的返回值。使用的方法一般是故意构造异常，如果处于被调试状态，调试器会捕获异常导致返回的错误码和预期的不符。</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/image-20250802173635007.png" alt="IDA"></p>
<p><img src="/../images/image-20250802173655097.png" alt="XDbg"></p>
</li>
<li><p>应对方法：</p>
<p>可以看到，GetLastError之后，会把返回值和预设的值进行比较，所以修改cmp后的zf就可以了。由于GetLastError的自由度比较高（触发异常的方法多样），所以scyllahide应该是不支持的（笔者没有认出什么相关的设置）</p>
</li>
</ul>
<h2 id="数据检测"><a href="#数据检测" class="headerlink" title="数据检测"></a>数据检测</h2><h3 id="BeingDebugged"><a href="#BeingDebugged" class="headerlink" title="BeingDebugged"></a>BeingDebugged</h3><ul>
<li><p>BeingDebugged是PEB的成员变量之一，用于描述进程是否处于被调试状态，为1时表示处于被调试状态。</p>
<p>PEB结构体具体如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span> &#123;</span></span><br><span class="line">  BYTE                          Reserved1[<span class="number">2</span>];</span><br><span class="line">  BYTE                          BeingDebugged;<span class="comment">//偏移为2</span></span><br><span class="line">  BYTE                          Reserved2[<span class="number">1</span>];</span><br><span class="line">  PVOID                         Reserved3[<span class="number">2</span>];</span><br><span class="line">  PPEB_LDR_DATA                 Ldr;</span><br><span class="line">  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;</span><br><span class="line">  PVOID                         Reserved4[<span class="number">3</span>];</span><br><span class="line">  PVOID                         AtlThunkSListPtr;</span><br><span class="line">  PVOID                         Reserved5;</span><br><span class="line">  ULONG                         Reserved6;</span><br><span class="line">  PVOID                         Reserved7;</span><br><span class="line">  ULONG                         Reserved8;</span><br><span class="line">  ULONG                         AtlThunkSListPtr32;</span><br><span class="line">  PVOID                         Reserved9[<span class="number">45</span>];</span><br><span class="line">  BYTE                          Reserved10[<span class="number">96</span>];</span><br><span class="line">  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;</span><br><span class="line">  BYTE                          Reserved11[<span class="number">128</span>];</span><br><span class="line">  PVOID                         Reserved12[<span class="number">1</span>];</span><br><span class="line">  ULONG                         SessionId;</span><br><span class="line">&#125; PEB, *PPEB;</span><br></pre></td></tr></table></figure>
</li>
<li><p>反调试手段通常是访问进程的该参数（如WINAPI的IsDebuggerPresent()）来判断是否处于被调试状态。32位下，PEB用FS:[0x30]表示；64位下，PEB用FS:[0x60]表示。加上偏移2就是对BeingDebugged的访问了（这就是这种方法的特征了）</p>
</li>
<li><p>效果图：</p>
<p><img src="/../images/image-20250802180316105.png" alt="IDA"></p>
<p><img src="/../images/image-20250802180438104.png" alt="XDbg"></p>
</li>
<li><p>应对方法：</p>
<p>scyllahide可绕过，手动绕过只需要在访问指令下方的cmp后修改ZF即可</p>
</li>
</ul>
<h3 id="NTGlobalFlag"><a href="#NTGlobalFlag" class="headerlink" title="NTGlobalFlag"></a>NTGlobalFlag</h3><ul>
<li><p>NTGlobalFlag也是PEB结构体的成员，但是是非公开的（因此上文的PEB结构体定义中看不到）。32位下，它位于PEB偏移0x68处，64位下，它位于PEB偏移0xBC处（特征）。它本是描述进程堆管理的，但是由于调试器中的进程创建堆的方式和正常情况有所不同，被调试时该值会被设为0x70（又一个特征），因此也被用来判断是否被调试</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/image-20250802181920666.png" alt="IDA"></p>
<p><img src="/../images/image-20250802181950005.png" alt="XDbg"></p>
</li>
<li><p>应对方法：</p>
<p>syllahide可以绕过，也可以在下面的比较逻辑（因为是内联汇编，所以比较逻辑的实现会有不同）后修改ZF绕过</p>
</li>
</ul>
<h2 id="进程检测"><a href="#进程检测" class="headerlink" title="进程检测"></a>进程检测</h2><h3 id="FindWindow"><a href="#FindWindow" class="headerlink" title="FindWindow"></a>FindWindow</h3><ul>
<li><p>实际上是窗口检测，这个函数获取的是进程窗口的类名或者标签，通过与预期的名字进行比较来判断是否处于被调试状态。由于使用的是系统函数，所以实际上也属于WINAPI检测，但是不重要。特征和WINAPI检测一样，会有明显的标记</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/image-20250802184919847.png" alt="IDA"></p>
<p><img src="/../images/image-20250802185121993.png" alt="XDbg"></p>
</li>
<li><p>本例的程序创建了一个判断函数，在主函数中是将返回值test后来判断是否被调试的，所以只需要修改主函数中的test eax,eax后的ZF就可以实现绕过了。scyllahide应该是不支持的</p>
</li>
</ul>
<h3 id="父进程检测"><a href="#父进程检测" class="headerlink" title="父进程检测"></a>父进程检测</h3><ul>
<li><p>原理是正常程序父进程为explorer.exe而调试器可能是本身，通过比较获得的父进程名和预设的父进程名判断是否处于被调试状态。一般会通过遍历进程或者通过NtQueryInfomationProcess查询来实现。特征是出现大量和进程相关的api，如遍历进程时会调用CreateToolhelp32Snapshot、th32ParentProcessID、Process32Next等，NtQueryInfomationProcess查询会出现QueryFullProcessImageNameA或者其他相关函数与调试器名称字符串同时出现的情况</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/image-20250802200208452.png" alt="IDA显式体现"></p>
<p><img src="/../images/image-20250802200407372.png" alt="XDbg跳转表中体现"></p>
<p><img src="/../images/image-20250802201532370.png" alt="IDA"></p>
<p><img src="/../images/image-20250802201557678.png" alt="XDbg"></p>
</li>
<li><p>实测scyllahide绕过不了第一种方法但可以绕过第二种方法。手动绕过也可以，主要基于后续对进程名的判断，修改判断结果即可绕过</p>
</li>
</ul>
<h3 id="特征码检测"><a href="#特征码检测" class="headerlink" title="特征码检测"></a>特征码检测</h3><ul>
<li><p>有的调试器在内存中会有特征码，通过遍历进程和搜索特征码可以判断是否被调试。这种情况会比较复杂，难点应该在识别上。一方面可以通过分析是否出现特征码（可能会是很明显的一连串数字初始化），另一方面遍历进程会出现父进程检测中提及的api，但是这些一般不会出现在主函数中，需要跟进函数查看。</p>
<p>特征码示例：</p>
<p><img src="/../images/image-20250802211300649.png" alt="IDA"></p>
<p><img src="/../images/image-20250802211316100.png" alt="XDbg"></p>
</li>
<li><p>scyllahide一般绕过不了，可以在主函数涉及判断结果的逻辑中进行改动绕过。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day4:Linux汇编框架、操作系统与汇编器、主函数跳转流程</title>
    <url>/2025/07/11/Day4-Linux%E6%B1%87%E7%BC%96%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>Linux汇编框架、操作系统与汇编器、主函数跳转流程</p>
<span id="more"></span>

<h2 id="Linux-NASM-汇编框架"><a href="#Linux-NASM-汇编框架" class="headerlink" title="Linux(NASM)汇编框架"></a>Linux(NASM)汇编框架</h2><ul>
<li><p>Linux和Windows的不同主要有：</p>
<ul>
<li><p>系统调用方式不同：</p>
<ul>
<li><p>Windows提供API，可以直接利用系统函数</p>
</li>
<li><p>Linux需要用系统调用号触发系统调用。系统调用号存入特定寄存器后使用触发指令，触发系统调用</p>
<p>触发指令：</p>
<p>​	32位(x86)：int 0x80</p>
<p>​	64位(x64)：syscall</p>
<p>参数传递：</p>
<p>​	32位：eax（系统调用号），ebx、ecx、edx、esi、edi、ebp（参数）。</p>
<p>​	64位：rax（系统调用号），rdi、rsi、rdx、r10、r8、r9（参数）。</p>
<p>32位下exit示例：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span>		<span class="comment">;32位下，exit的系统调用号为1</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">0x80</span>		<span class="comment">;系统调用号存入寄存器后，触发系统调用</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>可执行文件格式不同：</p>
<ul>
<li>Windows使用PE文件格式</li>
<li>Linux使用ELF文件格式</li>
</ul>
</li>
<li><p>其他细节：</p>
<ul>
<li>Linux在段名前必须添加section，只有.text段没有.code段（实际上由汇编器决定，详见下一部分）</li>
<li>Linux使用0xA作为字符串结束符</li>
</ul>
</li>
</ul>
</li>
<li><p>32位汇编框架</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">section</span> .data</span><br><span class="line">	msg <span class="built_in">db</span> <span class="string">&quot;HelloWorld&quot;</span>,<span class="number">0xA</span></span><br><span class="line">	len <span class="built_in">equ</span> $ - msg				<span class="comment">;用变量len记录msg的长度（$表示当前变量的地址，减去msg的地址就是msg的长度）</span></span><br><span class="line">	</span><br><span class="line"><span class="meta">section</span> .text</span><br><span class="line">	<span class="meta">global</span> _start</span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">4</span>					<span class="comment">;eax存放系统调用号4：sys_write</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">1</span>					<span class="comment">;参数1：文件描述符，1表示标准输出stdout</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ecx</span>,msg					<span class="comment">;参数2：要打印的数据地址</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">edx</span>,len					<span class="comment">;参数3：打印的字节数</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">0x80</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">1</span>					<span class="comment">;eax存放系统调用号1：sys_exit</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ebx</span>,<span class="number">0</span>					<span class="comment">;参数1：退出状态码（0表示成功）</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">0x80</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>64位汇编框架</p>
</li>
</ul>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">section</span> .data</span><br><span class="line">	msg <span class="built_in">db</span> <span class="string">&quot;HelloWorld&quot;</span>,<span class="number">0xA</span></span><br><span class="line">	len <span class="built_in">equ</span> $ - msg				</span><br><span class="line">	</span><br><span class="line"><span class="meta">section</span> .text</span><br><span class="line">	<span class="meta">global</span> _start</span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rax</span>,<span class="number">1</span>					<span class="comment">;rax存放系统调用号1：sys_write</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rdi</span>,<span class="number">1</span>					<span class="comment">;参数1：文件描述符，1表示标准输出stdout</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rsi</span>,msg					<span class="comment">;参数2：要打印的数据地址</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rdx</span>,len					<span class="comment">;参数3：打印的字节数</span></span><br><span class="line">	<span class="keyword">syscall</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rax</span>,<span class="number">60</span>					<span class="comment">;rax存放系统调用号60：sys_exit</span></span><br><span class="line">	<span class="keyword">xor</span> <span class="built_in">rdi</span>,<span class="built_in">rdi</span>					<span class="comment">;参数1：退出状态码（0表示成功）</span></span><br><span class="line">	<span class="keyword">syscall</span></span><br></pre></td></tr></table></figure>

<h2 id="操作系统与汇编器"><a href="#操作系统与汇编器" class="headerlink" title="操作系统与汇编器"></a>操作系统与汇编器</h2><ul>
<li>Windows：主要有MASM和NASM两种汇编器<ul>
<li>MASM（Microsoft Macro Assembler），主要集成在visual studio中<ul>
<li>段名前不要求加section，可以直接用 <strong>.段名</strong> 声明</li>
<li>指令存放在.code段</li>
<li>.code段，函数以 <strong>func_name proc</strong> 开始，以 <strong>func_name endp</strong> 结束</li>
<li>使用Intel风格，即 <strong>指令   目标操作数，源操作数</strong></li>
</ul>
</li>
<li>NASM（Netwide Assembler），跨平台汇编器，支持Windows、Linux、macOS<ul>
<li>段名前要求加section，用 <strong>sectino .段名</strong> 声明</li>
<li>指令存放在.text段</li>
<li>.text段，函数用 <strong>global func_name</strong> 声明后再定义 </li>
<li>使用Intel风格</li>
</ul>
</li>
</ul>
</li>
<li>Linux：主要有NASM和GAS两种汇编器<ul>
<li>NASM同上 </li>
<li>GAS（GNU Assembler），Linux默认汇编器<ul>
<li>段名前要求加.section，用 <strong>.section .段名</strong> 声明</li>
<li>指令存放在.text段</li>
<li>.text段，函数用 <strong>.global func_name</strong> 声明后再定义</li>
<li>使用AT&amp;T风格，即 <strong>指令   源操作数，目标操作数</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="主函数跳转流程"><a href="#主函数跳转流程" class="headerlink" title="主函数跳转流程"></a>主函数跳转流程</h2><ul>
<li><p>环境：vs2022，Debug  x86&#x2F;x64，Release x86&#x2F;x64</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;x86 debug 跳转特征</span></span><br><span class="line"><span class="comment">;step1</span></span><br><span class="line"><span class="keyword">jmp</span>			<span class="comment">;直接jmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step2</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;第一个call</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step3</span></span><br><span class="line"><span class="keyword">call</span></span><br><span class="line"><span class="keyword">call</span> &lt;--	<span class="comment">;连续两个call，进第二个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step4</span></span><br><span class="line"><span class="number">2</span>*<span class="keyword">jz</span>--&gt;<span class="keyword">call</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;两个jz指向的同一个call且此call后紧跟mov和call</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step5</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">push</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">push</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">push</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;连续push3个参数入栈后的call</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step6</span></span><br><span class="line"><span class="keyword">jmp</span></span><br></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;x86 Release 跳转特征</span></span><br><span class="line"><span class="comment">;step1</span></span><br><span class="line"><span class="keyword">call</span></span><br><span class="line"><span class="keyword">jmp</span>			<span class="comment">;call后的jmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step2</span></span><br><span class="line"><span class="keyword">push</span></span><br><span class="line"><span class="keyword">push</span></span><br><span class="line"><span class="keyword">push</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;连续push3个参数入栈后的call</span></span><br></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;x64 Debug 跳转特征 </span></span><br><span class="line"><span class="comment">;step1</span></span><br><span class="line"><span class="keyword">jmp</span>			<span class="comment">;直接jmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step2</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;第一个call</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step3</span></span><br><span class="line"><span class="keyword">call</span></span><br><span class="line"><span class="keyword">call</span> &lt;--	<span class="comment">;连续两个call进第二个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step4</span></span><br><span class="line"><span class="number">2</span>*<span class="keyword">jz</span>--&gt;<span class="keyword">call</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;两个jz指向的同一个call且此call后紧跟mov和call</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step5</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;连续5个mov后的call（传参）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step6</span></span><br><span class="line"><span class="keyword">jmp</span>			<span class="comment">;直接jmp</span></span><br></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;x64 Release 跳转特征 </span></span><br><span class="line"><span class="comment">;step1</span></span><br><span class="line"><span class="keyword">call</span></span><br><span class="line"><span class="keyword">jmp</span>			<span class="comment">;call后的jmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;step2</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">call</span></span><br><span class="line"><span class="keyword">mov</span></span><br><span class="line"><span class="keyword">call</span>		<span class="comment">;三个mov后的call（传参）且此call后紧跟mov和call</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day3:函数与栈帧、数组与串指令、宏与结构体、x64汇编框架、内联汇编与混合编程</title>
    <url>/2025/07/08/Day3-%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A0%86%E6%A0%88/</url>
    <content><![CDATA[<p>函数与栈帧、数组与串指令、宏与结构体、x64汇编框架、内联汇编与混合编程</p>
<span id="more"></span>

<h2 id="函数与栈帧"><a href="#函数与栈帧" class="headerlink" title="函数与栈帧"></a>函数与栈帧</h2><ul>
<li><p>“栈“是内存中的一部分，可以理解为连续的一块内存，它为程序运行提供了一个暂时的存放数据的地方，地址、数据等可以通过push指令从寄存器中被复制到栈中，进而寄存器可以进行其他操作，等到这些数据再次被需要时再从栈中被pop出来。栈遵循先进后出的规则，先push的在高地址，后push的在低地址</p>
</li>
<li><p>在程序运行时，每个函数都会拥有独立的栈帧，即独立的栈上的一部分空间。有两个寄存器，esp，ebp（x86即32位环境下）负责维护函数的栈空间。ebp存放的是函数栈空间的栈基址，esp存放的是函数栈空间的栈顶。可以理解为ebp是指向函数栈空间最高位的一个指针（因为栈空间从高地址开始分配，因此指向的是最高位，但是是栈空间的起始地址），而esp是指向函数栈空间最低位的一个指针（指向的是最低位，但是会随着后续栈空间的扩充而变化）。</p>
</li>
<li><p>CALL指令：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;call一个函数的时候，会发生以下内容</span></span><br><span class="line"><span class="keyword">push</span> 返回地址（<span class="keyword">call</span>所在指令的下一条）</span><br><span class="line"><span class="keyword">jmp</span> 目标函数地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>RET指令：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;函数结束时，RET指令会发生以下内容</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">eip</span> <span class="comment">;从栈上弹出返回地址到eip（保存下一步指令地址的寄存器）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>栈帧：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;跳转到每一个函数，会发生以下内容以开辟栈帧</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ebp</span>			<span class="comment">;把上一个函数的ebp值放到栈上</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span>			<span class="comment">;把esp值给ebp，开辟新函数的栈帧</span></span><br><span class="line"><span class="comment">;函数执行完毕后，会发生以下内容清理栈帧</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">esp</span>,<span class="built_in">ebp</span>			<span class="comment">;把ebp值给esp，清理函数栈帧</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ebp</span>				<span class="comment">;恢复ebp原来的值，即上一个函数的ebp</span></span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="数组与串指令"><a href="#数组与串指令" class="headerlink" title="数组与串指令"></a>数组与串指令</h2><ul>
<li><p>声明数组：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">.data</span>			<span class="comment">;在数据段声明</span></span><br><span class="line"> szHello <span class="built_in">db</span> <span class="string">&#x27;HelloWorld&#x27;</span>,<span class="number">0</span>			<span class="comment">;声明一个字符串</span></span><br><span class="line"> nNumber <span class="built_in">dd</span> <span class="number">20</span> dup(<span class="number">0</span>)				<span class="comment">;声明一个DWORD数组，20位，使用dup()初始化数组内容为0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用数组基址的几种方式：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lea</span> <span class="built_in">eax</span>,szHello</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,offset Nnumber</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问数组成员：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;[数组起始地址+索引寄存器*比例因子+偏移量]（索引寄存器用来存放索引值，比例因子对应类型的字节大小，偏移量可用于结构体数组等场景）</span></span><br><span class="line"><span class="comment">;如：</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span>,offset Array	<span class="comment">;把数组基址给ebx</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">esi</span>,<span class="number">0</span>				<span class="comment">;esi用来当索引寄存器</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="number">10</span>				<span class="comment">;ecx用来放索引上限（ecx常用作计数器）</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_start:</span>				<span class="comment">;创建一个循环</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">eax</span>,[<span class="built_in">ebx</span>+<span class="built_in">esi</span>*<span class="number">4</span>]	<span class="comment">;取出数组内容放到eax中</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">esi</span>,<span class="number">1</span>			<span class="comment">;索引递增</span></span><br><span class="line">	<span class="keyword">cmp</span> <span class="built_in">esi</span>,<span class="built_in">ecx</span>			<span class="comment">;与索引上限比较，判断是否遍历完数组</span></span><br><span class="line">	<span class="keyword">jl</span> loop_start		<span class="comment">;还没遍历完数组就循环操作，jump到loop_start再走一遍</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>串指令：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;stos系列:stosb,stosw,stosd,stosq（分别对应byte,word,dword,qword,功能是把al/ax/eax/rax中的内容存到edi/rdi）</span></span><br><span class="line"><span class="comment">;lods系列:lodsb,lodsw,lodsd,lodsq（同样分别对应四个类型，功能是把esi/rsi的内容加载到al/ax/eax/rax中）</span></span><br><span class="line"><span class="comment">;movs系列:movsb,movsw,movsd,movsq（同样分别对应四个类型，功能是把esi的内容复制到edi中）</span></span><br><span class="line"><span class="comment">;cmps系列:cmpsb,cmpsw,cmpsd,cmpsq（同样分别对应四个类型，功能是比较esi和edi的内容并设置标志位）</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="宏与结构体"><a href="#宏与结构体" class="headerlink" title="宏与结构体"></a>宏与结构体</h2><ul>
<li><p>宏：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;无参宏使用关键字EQU，如</span></span><br><span class="line">PI <span class="built_in">EQU</span> <span class="number">3</span>		<span class="comment">;定义PI=3</span></span><br><span class="line"><span class="comment">;含参宏使用关键字MACRO，用endm结尾，如</span></span><br><span class="line">Myadd MACRO Number</span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">eax</span>,Number</span><br><span class="line">endm			<span class="comment">;定义Myadd函数实现eax加上参数</span></span><br><span class="line"><span class="comment">;含参宏的调用：</span></span><br><span class="line">Myadd&lt;参数&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结构体：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;使用关键字struct和ends，如</span></span><br><span class="line">Point struct</span><br><span class="line">	x <span class="built_in">word</span> ?</span><br><span class="line">	y <span class="built_in">word</span> ?</span><br><span class="line">Point ends</span><br><span class="line"></span><br><span class="line"><span class="comment">;实例化结构体</span></span><br><span class="line">MyPoint Point&lt;?&gt;	<span class="comment">;实例化出MyPoint</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;访问结构体成员</span></span><br><span class="line"><span class="keyword">mov</span> MyPoint<span class="number">.</span>x,<span class="number">123</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="x64汇编框架-MASM"><a href="#x64汇编框架-MASM" class="headerlink" title="x64汇编框架(MASM)"></a>x64汇编框架(MASM)</h2><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;x64环境下的代码，传参的时候先使用寄存器(Windows:rcx,rdx,r8,r9  Linux:rdi,rsi,rdx,rcx,r8,r9)再使用栈</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line"><span class="comment">;Add函数声明</span></span><br><span class="line"><span class="keyword">Add</span> proc</span><br><span class="line">	<span class="keyword">push</span> <span class="built_in">rbp</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rbp</span>,<span class="built_in">rsp</span></span><br><span class="line">	<span class="keyword">lea</span> <span class="built_in">rax</span>,[<span class="built_in">rdi</span> + <span class="built_in">rsi</span>]		<span class="comment">;从寄存器中取参数</span></span><br><span class="line">	<span class="keyword">pop</span> <span class="built_in">rbp</span></span><br><span class="line">	<span class="keyword">ret</span></span><br><span class="line"><span class="keyword">Add</span> endp</span><br><span class="line"></span><br><span class="line">main proc			</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rdi</span>,<span class="number">2</span>		<span class="comment">;把参数传入寄存器中</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">rsi</span>,<span class="number">3</span></span><br><span class="line">	<span class="keyword">call</span> <span class="keyword">Add</span></span><br><span class="line">	<span class="keyword">ret</span></span><br><span class="line">main endp</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">;x86环境下的代码，传参使用栈</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line"><span class="comment">;Add函数声明</span></span><br><span class="line"><span class="keyword">Add</span> proc</span><br><span class="line">	<span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">eax</span>,[<span class="built_in">esp</span>+<span class="number">8</span>]			<span class="comment">;从栈上取参数</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">eax</span>,[<span class="built_in">esp</span>+<span class="number">12</span>]</span><br><span class="line">	<span class="keyword">pop</span> <span class="built_in">ebp</span></span><br><span class="line">	<span class="keyword">ret</span></span><br><span class="line"><span class="keyword">Add</span> endp</span><br><span class="line"></span><br><span class="line">main proc</span><br><span class="line">	<span class="keyword">push</span> <span class="number">3</span>			<span class="comment">;把参数压入栈中</span></span><br><span class="line">	<span class="keyword">push</span> <span class="number">2</span></span><br><span class="line">	<span class="keyword">call</span> <span class="keyword">Add</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">8</span></span><br><span class="line">main endp</span><br></pre></td></tr></table></figure>

<h2 id="内联汇编与混合编程"><a href="#内联汇编与混合编程" class="headerlink" title="内联汇编与混合编程"></a>内联汇编与混合编程</h2><ul>
<li><p>x86下，在Microsoft Visual C++ (MSVC)程序中使用汇编，可以通过_asm{}直接写在C++代码中:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _asm&#123;</span><br><span class="line">        <span class="keyword">xor</span> eax,eax</span><br><span class="line">        mov eax,<span class="number">1</span></span><br><span class="line">        add eax,<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>x64下，在Microsoft Visual C++ (MSVC)程序中使用汇编，需要独立的asm文件，通过extern声明使用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Add</span><span class="params">(<span class="type">long</span> <span class="type">long</span> number1,<span class="type">long</span> <span class="type">long</span> number2)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="built_in">Add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    std::cout&lt;&lt;res&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//asm文件</span></span><br><span class="line">.code</span><br><span class="line">Add proc</span><br><span class="line">    push rbp</span><br><span class="line">    mov rbp,rsp</span><br><span class="line">    <span class="keyword">xor</span> rax,rax</span><br><span class="line">    add rax,rcx</span><br><span class="line">    add rax,rdx</span><br><span class="line">    pop rbp</span><br><span class="line">    ret</span><br><span class="line">Add endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day2:寻址方式、标志寄存器、JCC指令</title>
    <url>/2025/07/07/Day2-%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>寻址方式、标志寄存器、JCC指令</p>
<span id="more"></span>

<h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><table>
<thead>
<tr>
<th align="center">寻址方式</th>
<th align="center">示例</th>
<th align="center">典型用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center">立即数寻址</td>
<td align="center">mov eax,42</td>
<td align="center">加载常数</td>
</tr>
<tr>
<td align="center">寄存器寻址</td>
<td align="center">add eax,ebx</td>
<td align="center">寄存器运算</td>
</tr>
<tr>
<td align="center">直接寻址</td>
<td align="center">mov eax,[0x8040000]</td>
<td align="center">访问全局变量</td>
</tr>
<tr>
<td align="center">寄存器间接寻址</td>
<td align="center">mov eax,[esi]</td>
<td align="center">指针解引用</td>
</tr>
<tr>
<td align="center">基址寻址</td>
<td align="center">mov [ebp-4],ecx</td>
<td align="center">栈帧局部变量</td>
</tr>
<tr>
<td align="center">变址寻址</td>
<td align="center">mov eax,[esi*4]</td>
<td align="center">数组遍历</td>
</tr>
<tr>
<td align="center">基址变址寻址</td>
<td align="center">mov eax,[ebx+esi*2+8]</td>
<td align="center">结构体，多维数组</td>
</tr>
<tr>
<td align="center">相对寻址</td>
<td align="center">jmp label</td>
<td align="center">跳转，函数调用</td>
</tr>
</tbody></table>
<h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><table>
<thead>
<tr>
<th align="center">标志位</th>
<th align="center">名称</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CF</td>
<td align="center">Carry Flag 进位标志位</td>
<td align="center">最高位发生进位&#x2F;借位时置1</td>
</tr>
<tr>
<td align="center">PF</td>
<td align="center">Parity Flag 奇偶标志位</td>
<td align="center">1的个数为偶数时置1</td>
</tr>
<tr>
<td align="center">AF</td>
<td align="center">Auxiliary Carry Flag 辅助进位标志位</td>
<td align="center">bit3和bit4之间发生进位&#x2F;借位时置1</td>
</tr>
<tr>
<td align="center">ZF</td>
<td align="center">Zoro Flag 零标志位</td>
<td align="center">为0时置1</td>
</tr>
<tr>
<td align="center">SF</td>
<td align="center">Sign Flag 符号标志位</td>
<td align="center">最高位为1(负数)时置1</td>
</tr>
<tr>
<td align="center">OF</td>
<td align="center">Overflow Flag 溢出标志位</td>
<td align="center">有符号数溢出时置1</td>
</tr>
<tr>
<td align="center">DF</td>
<td align="center">Direction Flag 方向标志位</td>
<td align="center">为1时从高位到低位处理字符串，std打开，cld关闭</td>
</tr>
<tr>
<td align="center">IF</td>
<td align="center">Interrupt Flag 中断标志位</td>
<td align="center">为1时可以响应中断请求，sti打开，cli关闭</td>
</tr>
<tr>
<td align="center">TF</td>
<td align="center">Trap Flag 陷阱标志位</td>
<td align="center">为1时会触发异常，被调试器捕获，用于单步调试</td>
</tr>
</tbody></table>
<h2 id="JCC指令"><a href="#JCC指令" class="headerlink" title="JCC指令"></a>JCC指令</h2><ul>
<li><p>TEST指令：TEST op1,op2</p>
<p>将两个操作数进行&amp;操作（op1 &amp; op2）并更新标志位：</p>
<p>CF&#x3D;0，OF&#x3D;0</p>
<p>&amp;结果为0：ZF&#x3D;1</p>
<p>结果最高位为1：SF&#x3D;1</p>
</li>
<li><p>CMP指令：CMP op1,op2</p>
<p>进行减法操作（op1 - op2）并更新标志位：</p>
<p>若op1 &lt; op2（发生借位），CF&#x3D;1</p>
<p>若发生有符号溢出，OF&#x3D;1</p>
<p>op1 &#x3D;&#x3D; op2（结果为0），ZF&#x3D;1</p>
<p>op1 &lt; op2（结果为负数），SF&#x3D;1</p>
</li>
<li><p>JCC指令：JCC Label</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">条件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">JMP</td>
<td align="center">无条件</td>
<td align="center">无条件跳转</td>
</tr>
<tr>
<td align="center">JE &#x2F; JZ</td>
<td align="center">ZF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>Z</strong>F</td>
</tr>
<tr>
<td align="center">JNE &#x2F; JNZ</td>
<td align="center">ZF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>Z</strong>F</td>
</tr>
<tr>
<td align="center">JS</td>
<td align="center">SF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>S</strong>F</td>
</tr>
<tr>
<td align="center">JNS</td>
<td align="center">SF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>S</strong>F</td>
</tr>
<tr>
<td align="center">JP &#x2F; JPE</td>
<td align="center">PF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>P</strong>F &#x2F; <strong>J</strong>ump if <strong>P</strong>arity <strong>E</strong>ven</td>
</tr>
<tr>
<td align="center">JNP &#x2F; JPO</td>
<td align="center">PF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>P</strong>F &#x2F; <strong>J</strong>ump if <strong>P</strong>arity <strong>O</strong>dd</td>
</tr>
<tr>
<td align="center">JO</td>
<td align="center">OF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>O</strong>F</td>
</tr>
<tr>
<td align="center">JNO</td>
<td align="center">OF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>O</strong>F</td>
</tr>
<tr>
<td align="center">JB &#x2F; JNAE &#x2F; JC</td>
<td align="center">CF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>B</strong>elow &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>A</strong>bove or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>C</strong>F</td>
</tr>
<tr>
<td align="center">JNB &#x2F; JAE &#x2F; JNC</td>
<td align="center">CF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>N</strong>ot <strong>B</strong>elow &#x2F; <strong>J</strong>ump if <strong>A</strong>bove or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>C</strong>F</td>
</tr>
<tr>
<td align="center">JBE &#x2F; JNA</td>
<td align="center">CF&#x3D;1 或 ZF&#x3D;1</td>
<td align="center"><strong>J</strong>ump if <strong>B</strong>elow or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>A</strong>bove</td>
</tr>
<tr>
<td align="center">JA &#x2F; JNBE</td>
<td align="center">CF&#x3D;0 且 ZF&#x3D;0</td>
<td align="center"><strong>J</strong>ump if <strong>A</strong>bove &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>B</strong>elow or <strong>E</strong>qual</td>
</tr>
<tr>
<td align="center">JL &#x2F; JNGE</td>
<td align="center">SF ≠ OF</td>
<td align="center"><strong>J</strong>ump if <strong>L</strong>ess &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>G</strong>reater or <strong>E</strong>qual</td>
</tr>
<tr>
<td align="center">JGE &#x2F; JNL</td>
<td align="center">SF &#x3D; OF</td>
<td align="center"><strong>J</strong>ump if <strong>G</strong>reater or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>L</strong>ess</td>
</tr>
<tr>
<td align="center">JLE &#x2F; JNG</td>
<td align="center">ZF&#x3D;1 或 SF ≠ OF</td>
<td align="center"><strong>J</strong>ump if <strong>L</strong>ess or <strong>E</strong>qual &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>G</strong>reater</td>
</tr>
<tr>
<td align="center">JG &#x2F; JNLE</td>
<td align="center">ZF&#x3D;0 且 SF &#x3D; OF</td>
<td align="center"><strong>J</strong>ump if <strong>G</strong>reater &#x2F; <strong>J</strong>ump if <strong>N</strong>ot <strong>L</strong>ess or <strong>E</strong>qual</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day5:函数调用约定</title>
    <url>/2025/07/12/Day5-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/</url>
    <content><![CDATA[<p>函数调用约定</p>
<span id="more"></span>

<h2 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h2><ul>
<li><p>主要有三种：cdecl、stdcall、fastcall。以求和函数为例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求和</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> res=sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>cdecl：完全栈传参，参数从右往左入栈，由调用者清理参数占用的栈空间</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; int __cdecl main()</span></span><br><span class="line">_main           proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: j__main↑j</span></span><br><span class="line">  </span><br><span class="line">var_C           = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">0Ch</span></span><br><span class="line">res             = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">8</span></span><br><span class="line">  </span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitStart_2:</span></span><br><span class="line">                <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+var_C]</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">3</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line">                <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitEnd_2:</span>                   <span class="comment">; JMC_flag</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset _6005466B_entry@cpp</span><br><span class="line">                <span class="keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="number">4</span> <span class="comment">; __CheckForDebuggerJustMyCode(x)</span></span><br><span class="line">                <span class="keyword">nop</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">3</span>               <span class="comment">; 参数c入栈</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">2</span>               <span class="comment">; 参数b入栈</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">1</span>               <span class="comment">; 参数a入栈</span></span><br><span class="line">                <span class="keyword">call</span>    j_?sum@@YAHHHH@Z <span class="comment">; sum(int,int,int)</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0Ch</span>			<span class="comment">;这里调用者进行了清理参数占用的栈空间的操作(3个参数×4字节)，被调用者不负责</span></span><br><span class="line">                <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+res], <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+res]</span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">push</span>    offset _Format  <span class="comment">; &quot;%d\n&quot;</span></span><br><span class="line">                <span class="keyword">call</span>    j__printf</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line">                <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line">                <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">call</span>    j___RTC_CheckEsp</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">retn</span></span><br><span class="line">_main           endp</span><br><span class="line"></span><br><span class="line"><span class="comment">; int __cdecl sum(int a, int b, int c)</span></span><br><span class="line">?sum@@YAHHHH@Z  proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: sum(int,int,int)↑j</span></span><br><span class="line">  </span><br><span class="line">a               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">8</span></span><br><span class="line">b               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">0Ch</span></span><br><span class="line">c               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">10h</span></span><br><span class="line">  </span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span>		<span class="comment">;sum函数自身的栈空间</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitStart:</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">xor</span>     <span class="built_in">ecx</span>, <span class="built_in">ecx</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line">                <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitEnd:</span>                     <span class="comment">; JMC_flag</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset _6005466B_entry@cpp</span><br><span class="line">                <span class="keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="number">4</span> <span class="comment">; __CheckForDebuggerJustMyCode(x)</span></span><br><span class="line">                <span class="keyword">nop</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+a]</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+b]</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+c]</span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span>		<span class="comment">;清理自身栈空间</span></span><br><span class="line">                <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">call</span>    j___RTC_CheckEsp</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">retn</span></span><br><span class="line">?sum@@YAHHHH@Z  endp</span><br></pre></td></tr></table></figure>
</li>
<li><p>stdcall：完全栈传参，参数从右往左入栈，由被调用者清理参数占用的栈空间</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; int __cdecl main()</span></span><br><span class="line">_main           proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: j__main↑j</span></span><br><span class="line">  </span><br><span class="line">var_C           = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">0Ch</span></span><br><span class="line">res             = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">8</span></span><br><span class="line">  </span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitStart_2:</span></span><br><span class="line">                <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+var_C]</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">3</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line">                <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitEnd_2:</span>                   <span class="comment">; JMC_flag</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset _6005466B_entry@cpp</span><br><span class="line">                <span class="keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="number">4</span> <span class="comment">; __CheckForDebuggerJustMyCode(x)</span></span><br><span class="line">                <span class="keyword">nop</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">3</span>               <span class="comment">; 参数c入栈</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">2</span>               <span class="comment">; 参数b入栈</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">1</span>               <span class="comment">; 参数a入栈</span></span><br><span class="line">                <span class="keyword">call</span>    j_?sum@@YGHHHH@Z <span class="comment">; sum(int,int,int)</span></span><br><span class="line">                <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+res], <span class="built_in">eax</span>		<span class="comment">;这里直接到把返回值给res了，调用者不负责清理参数占用的栈空间</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+res]</span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">push</span>    offset _Format  <span class="comment">; &quot;%d\n&quot;</span></span><br><span class="line">                <span class="keyword">call</span>    j__printf</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line">                <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line">                <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">call</span>    j___RTC_CheckEsp</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">retn</span></span><br><span class="line">_main           endp</span><br><span class="line">  </span><br><span class="line"><span class="comment">; int __stdcall sum(int a, int b, int c)</span></span><br><span class="line">?sum@@YGHHHH@Z  proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: sum(int,int,int)↑j</span></span><br><span class="line">  </span><br><span class="line">a               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">8</span></span><br><span class="line">b               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">0Ch</span></span><br><span class="line">c               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">10h</span></span><br><span class="line">  </span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span>		<span class="comment">;sum的栈空间</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitStart:</span></span><br><span class="line">              	 <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">xor</span>     <span class="built_in">ecx</span>, <span class="built_in">ecx</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line">                <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitEnd:</span>                     <span class="comment">; JMC_flag</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset _6005466B_entry@cpp</span><br><span class="line">                <span class="keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="number">4</span> <span class="comment">; __CheckForDebuggerJustMyCode(x)</span></span><br><span class="line">                <span class="keyword">nop</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+a]</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+b]</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+c]</span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span>		<span class="comment">;清理自身栈空间</span></span><br><span class="line">                <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">call</span>    j___RTC_CheckEsp</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">retn</span>    <span class="number">0Ch</span>			<span class="comment">;被调用者通过返回指令给esp增加0Ch，清理参数占用的栈空间</span></span><br><span class="line">?sum@@YGHHHH@Z  endp</span><br></pre></td></tr></table></figure>
</li>
<li><p>fastcall：寄存器+栈传参，优先使用寄存器，剩余参数从右往左入栈，由被调用者清理参数占用的栈空间</p>
<p>寄存器传参优先级：</p>
<p>x86：ecx  edx  栈</p>
<p>x64：rcx  rdx  r8  r9  栈</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; int __cdecl main()</span></span><br><span class="line">_main           proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: j__main↑j</span></span><br><span class="line">  </span><br><span class="line">var_C           = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">0Ch</span></span><br><span class="line">res             = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">8</span></span><br><span class="line">  </span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitStart_2:</span></span><br><span class="line">                <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+var_C]</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">3</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line">                <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitEnd_2:</span>                   <span class="comment">; JMC_flag</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset _6005466B_entry@cpp</span><br><span class="line">                <span class="keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="number">4</span> <span class="comment">; __CheckForDebuggerJustMyCode(x)</span></span><br><span class="line">                <span class="keyword">nop</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="number">3</span>               <span class="comment">; 参数c入栈</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">edx</span>, <span class="number">2</span>          <span class="comment">; 参数b存入寄存器</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">1</span>          <span class="comment">; 参数a存入寄存器</span></span><br><span class="line">                <span class="keyword">call</span>    j_?sum@@YIHHHH@Z <span class="comment">; sum(int,int,int)</span></span><br><span class="line">                <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+res], <span class="built_in">eax</span>		<span class="comment">;这里也是没有调用者对参数占用的栈空间的清理</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+res]</span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">push</span>    offset _Format  <span class="comment">; &quot;%d\n&quot;</span></span><br><span class="line">                <span class="keyword">call</span>    j__printf</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line">                <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line">                <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">call</span>    j___RTC_CheckEsp</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">retn</span></span><br><span class="line">_main           endp</span><br><span class="line"></span><br><span class="line"><span class="comment">; int __fastcall sum(int a, int b, int c)</span></span><br><span class="line">?sum@@YIHHHH@Z  proc <span class="built_in">near</span>               <span class="comment">; CODE XREF: sum(int,int,int)↑j</span></span><br><span class="line">  </span><br><span class="line">var_18          = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">18h</span></span><br><span class="line">b               = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">14h</span></span><br><span class="line">a               = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">8</span></span><br><span class="line">c               = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">8</span></span><br><span class="line">  </span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0D8h</span>		<span class="comment">;sum开辟栈空间</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">push</span>    <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitStart:</span></span><br><span class="line">                <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+var_18]</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">6</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line">                <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">  </span></span><br><span class="line"><span class="symbol">__$EncStackInitEnd:</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ecx</span></span><br><span class="line">                <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+b], <span class="built_in">edx</span></span><br><span class="line">                <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+a], <span class="built_in">ecx</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset _6005466B_entry@cpp <span class="comment">; JMC_flag</span></span><br><span class="line">                <span class="keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="number">4</span> <span class="comment">; __CheckForDebuggerJustMyCode(x)</span></span><br><span class="line">                <span class="keyword">nop</span></span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+a]</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+b]</span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+c]</span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line">                <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0D8h</span>		<span class="comment">;sum清理栈空间</span></span><br><span class="line">                <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">                <span class="keyword">call</span>    j___RTC_CheckEsp</span><br><span class="line">                <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line">                <span class="keyword">retn</span>    <span class="number">4</span>				<span class="comment">;由于只有一个参数被push到栈上，所以被调用者返回4，清理参数占用的栈空间</span></span><br><span class="line">?sum@@YIHHHH@Z  endp</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day8:thiscall、类</title>
    <url>/2025/07/21/Day8-%E7%B1%BB/</url>
    <content><![CDATA[<p>thiscall、类</p>
<span id="more"></span>

<h2 id="调用约定：thiscall"><a href="#调用约定：thiscall" class="headerlink" title="调用约定：thiscall"></a>调用约定：thiscall</h2><ul>
<li>对于C++this指针的特性，有一种专门的调用约定叫thiscall，主要用于类出现的场景</li>
<li>无论x86&#x2F;x64，this指针均由ecx&#x2F;rcx扮演，指向对象的内存地址</li>
<li>thiscall由被调用者清理参数占用的栈空间</li>
</ul>
<h2 id="类（一）"><a href="#类（一）" class="headerlink" title="类（一）"></a>类（一）</h2><ul>
<li><p>简单的构造析构分析</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;main函数</span></span><br><span class="line"><span class="symbol">.text:</span>004641E0 var_EC          = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">0ECh</span></span><br><span class="line"><span class="symbol">.text:</span>004641E0 var_30          = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">30h</span></span><br><span class="line"><span class="symbol">.text:</span>004641E0 var_20          = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">20h</span></span><br><span class="line"><span class="symbol">.text:</span>004641E0 var_4           = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span>004641E0</span><br><span class="line"><span class="symbol">.text:</span>004641E0                 <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>004641E1                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span>004641E3                 <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0F0h</span></span><br><span class="line"><span class="symbol">.text:</span>004641E9                 <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>004641EA                 <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>004641EB                 <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>004641EC                 <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+var_30]</span><br><span class="line"><span class="symbol">.text:</span>004641EF                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">0Ch</span></span><br><span class="line"><span class="symbol">.text:</span>004641F4                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line"><span class="symbol">.text:</span>004641F9                 <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">.text:</span>004641FB                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, ___security_cookie</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464200</span>                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464202</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_4], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464205</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset unk_54D014</span><br><span class="line"><span class="symbol">.text:</span>0046420A                 <span class="keyword">call</span>    sub_45FF30</span><br><span class="line"><span class="symbol">.text:</span>0046420F                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464210</span>                 <span class="keyword">push</span>    offset aXiaoming <span class="comment">; 参数&quot;xiaoming&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464215</span>                 <span class="keyword">push</span>    <span class="number">1</span>               <span class="comment">; 另一个参数</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464217</span>                 <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_20] <span class="comment">; [ebp+var_20]是一个对象，this指针指向该对象</span></span><br><span class="line"><span class="symbol">.text:</span>0046421A                 <span class="keyword">call</span>    sub_46062E      <span class="comment">; 构造函数</span></span><br><span class="line"><span class="symbol">.text:</span>0046421F                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464220</span>                 <span class="keyword">push</span>    offset aPause   <span class="comment">; &quot;pause&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464225</span>                 <span class="keyword">call</span>    sub_45F98B      <span class="comment">; system</span></span><br><span class="line"><span class="symbol">.text:</span>0046422A                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046422D</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_EC], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464237</span>                 <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_20] <span class="comment">; this指针</span></span><br><span class="line"><span class="symbol">.text:</span>0046423A                 <span class="keyword">call</span>    sub_45D38E      <span class="comment">; 析构函数</span></span><br><span class="line"><span class="symbol">.text:</span>0046423F                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_EC]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464245</span>                 <span class="keyword">push</span>    <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464246</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464248</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464249</span>                 <span class="keyword">lea</span>     <span class="built_in">edx</span>, dword_464274</span><br><span class="line"><span class="symbol">.text:</span>0046424F                 <span class="keyword">call</span>    sub_45EC4D</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464254</span>                 <span class="keyword">pop</span>     <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464255</span>                 <span class="keyword">pop</span>     <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464256</span>                 <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464257</span>                 <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464258</span>                 <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464259</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_4]</span><br><span class="line"><span class="symbol">.text:</span>0046425C                 <span class="keyword">xor</span>     <span class="built_in">ecx</span>, <span class="built_in">ebp</span>        <span class="comment">; StackCookie</span></span><br><span class="line"><span class="symbol">.text:</span>0046425E                 <span class="keyword">call</span>    j_@__security_check_cookie@<span class="number">4</span> <span class="comment">; __security_check_cookie(x)</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464263</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0F0h</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464269</span>                 <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span>0046426B                 <span class="keyword">call</span>    sub_45F175</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464270</span>                 <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464272</span>                 <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464273</span>                 <span class="keyword">retn</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;构造函数</span></span><br><span class="line"><span class="symbol">.text:</span>00463FC0 var_C           = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">0Ch</span></span><br><span class="line"><span class="symbol">.text:</span>00463FC0 var_8           = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>00463FC0 arg_0           = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>00463FC0 arg_4           = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">0Ch</span></span><br><span class="line"><span class="symbol">.text:</span>00463FC0</span><br><span class="line"><span class="symbol">.text:</span>00463FC0                 <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>00463FC1                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span>00463FC3                 <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line"><span class="symbol">.text:</span>00463FC9                 <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>00463FCA                 <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>00463FCB                 <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>00463FCC                 <span class="keyword">push</span>    <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>00463FCD                 <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+var_C]</span><br><span class="line"><span class="symbol">.text:</span>00463FD0                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol">.text:</span>00463FD5                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line"><span class="symbol">.text:</span>00463FDA                 <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">.text:</span>00463FDC                 <span class="keyword">pop</span>     <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>00463FDD                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="built_in">ecx</span> <span class="comment">; 当前对象地址保存到[ebp+var_8]</span></span><br><span class="line"><span class="symbol">.text:</span>00463FE0                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset unk_54D014</span><br><span class="line"><span class="symbol">.text:</span>00463FE5                 <span class="keyword">call</span>    sub_45FF30</span><br><span class="line"><span class="symbol">.text:</span>00463FEA                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>00463FEB                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8] <span class="comment">; 第一个对象成员</span></span><br><span class="line"><span class="symbol">.text:</span>00463FEE                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+arg_0] <span class="comment">; 第一个参数1</span></span><br><span class="line"><span class="symbol">.text:</span>00463FF1                 <span class="keyword">mov</span>     [<span class="built_in">eax</span>], <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>00463FF3                 <span class="keyword">push</span>    <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span>00463FF5                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_4] <span class="comment">; 第二个参数&quot;xiaoming&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>00463FF8                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>00463FF9                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span>00463FFC                 <span class="keyword">add</span>     <span class="built_in">ecx</span>, <span class="number">4</span>          <span class="comment">; 第二个对象成员</span></span><br><span class="line"><span class="symbol">.text:</span>00463FFF                 <span class="keyword">push</span>    <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464000</span>                 <span class="keyword">call</span>    sub_45FCF1      <span class="comment">; memcpy()</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464005</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0Ch</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464008</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8] <span class="comment">; 返回的是对象地址</span></span><br><span class="line"><span class="symbol">.text:</span>0046400B                 <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>0046400C                 <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046400D</span>                 <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>0046400E                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464014</span>                 <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464016</span>                 <span class="keyword">call</span>    sub_45F175</span><br><span class="line"><span class="symbol">.text:</span>0046401B                 <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046401D</span>                 <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>0046401E                 <span class="keyword">retn</span>    <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;析构函数</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464040</span> var_C           = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">0Ch</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464040</span> var_8           = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464040</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464040</span>                 <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464041</span>                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464043</span>                 <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464049</span>                 <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>0046404A                 <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>0046404B                 <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>0046404C                 <span class="keyword">push</span>    <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046404D</span>                 <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+var_C]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464050</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464055</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line"><span class="symbol">.text:</span>0046405A                 <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">.text:</span>0046405C                 <span class="keyword">pop</span>     <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046405D</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="built_in">ecx</span> <span class="comment">; 把对象地址存到[ebp+var_8]</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464060</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset unk_54D014</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464065</span>                 <span class="keyword">call</span>    sub_45FF30</span><br><span class="line"><span class="symbol">.text:</span>0046406A                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>0046406B                 <span class="keyword">push</span>    offset aDestructing <span class="comment">; &quot;destructing......&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464070</span>                 <span class="keyword">call</span>    sub_45DB59      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464075</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464078</span>                 <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464079</span>                 <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>0046407A                 <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>0046407B                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0CCh</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464081</span>                 <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464083</span>                 <span class="keyword">call</span>    sub_45F175</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464088</span>                 <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>0046408A                 <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>0046408B                 <span class="keyword">retn</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> ID;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Student</span>(<span class="type">int</span> n = <span class="number">0</span>, <span class="type">const</span> <span class="type">char</span>* na = <span class="string">&quot;NONE&quot;</span>) :<span class="built_in">ID</span>(n) &#123;</span><br><span class="line">		<span class="built_in">memcpy</span>(name, na, <span class="built_in">sizeof</span>(na));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">	~<span class="built_in">Student</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %s\n&quot;</span>, ID, name);</span><br><span class="line">&#125;</span><br><span class="line">Student::~<span class="built_in">Student</span>() &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;destructing......&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">Student <span class="title">stu</span><span class="params">(<span class="number">001</span>, <span class="string">&quot;xiaoming&quot;</span>)</span></span>;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day7:数组与指针识别</title>
    <url>/2025/07/17/Day7-%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p>数组与指针识别</p>
<span id="more"></span>

<h2 id="数组与指针识别"><a href="#数组与指针识别" class="headerlink" title="数组与指针识别"></a>数组与指针识别</h2><ul>
<li><p>整型一维数组</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00464260</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_14], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464267</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_10], <span class="number">2</span></span><br><span class="line"><span class="symbol">.text:</span>0046426E                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_C], <span class="number">3</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464275</span>                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_14] <span class="comment">; 数组首地址</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464278</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span>             <span class="comment">; 传参</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464279</span>                 <span class="keyword">call</span>    sub_45D447</span><br><span class="line"><span class="symbol">.text:</span>0046427E                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;sub_45D447</span></span><br><span class="line"><span class="symbol">.text:</span>004640D0 arg_0           = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>004640D0</span><br><span class="line"><span class="symbol">.text:</span>004640D0                 <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>004640D1                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span>004640D3                 <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span></span><br><span class="line"><span class="symbol">.text:</span>004640D9                 <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>004640DA                 <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>004640<span class="built_in">DB</span>                 <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>004640DC                 <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>004640DE                 <span class="keyword">xor</span>     <span class="built_in">ecx</span>, <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>004640E0                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line"><span class="symbol">.text:</span>004640E5                 <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">.text:</span>004640E7                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset unk_54D014</span><br><span class="line"><span class="symbol">.text:</span>004640EC                 <span class="keyword">call</span>    sub_45FF35</span><br><span class="line"><span class="symbol">.text:</span>004640F1                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>004640F2                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span>004640F7                 <span class="keyword">shl</span>     <span class="built_in">eax</span>, <span class="number">1</span>          <span class="comment">; eax=4*2^1=8</span></span><br><span class="line"><span class="symbol">.text:</span>004640F9                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+arg_0] <span class="comment">; [ebp+arg_0]是传入的参数，即数组首地址</span></span><br><span class="line"><span class="symbol">.text:</span>004640FC                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, [<span class="built_in">ecx</span>+<span class="built_in">eax</span>]  <span class="comment">; [ecx+eax]即[ebp+arg_0+eax]，即[ebp+10h]</span></span><br><span class="line"><span class="symbol">.text:</span>004640FF                 <span class="keyword">push</span>    <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464100</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464105</span>                 <span class="keyword">shl</span>     <span class="built_in">eax</span>, <span class="number">0</span>          <span class="comment">; eax=4*2^0=4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464108</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+arg_0]</span><br><span class="line"><span class="symbol">.text:</span>0046410B                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, [<span class="built_in">ecx</span>+<span class="built_in">eax</span>]  <span class="comment">; 即[ebp+0Ch]</span></span><br><span class="line"><span class="symbol">.text:</span>0046410E                 <span class="keyword">push</span>    <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span>0046410F                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464114</span>                 <span class="keyword">imul</span>    <span class="built_in">ecx</span>, <span class="built_in">eax</span>, <span class="number">0</span>     <span class="comment">; ecx=4*0=0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464117</span>                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, [<span class="built_in">ebp</span>+arg_0]</span><br><span class="line"><span class="symbol">.text:</span>0046411A                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">edx</span>+<span class="built_in">ecx</span>]  <span class="comment">; 即[ebp+8]，即[ebp+arg_0]，数组首位</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046411D</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0046411E                 <span class="keyword">push</span>    offset aDDD     <span class="comment">; &quot;%d %d %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464123</span>                 <span class="keyword">call</span>    sub_45DB5E      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464128</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">10h</span></span><br><span class="line"><span class="symbol">.text:</span>0046412B                 <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>0046412C                 <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046412D</span>                 <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>0046412E                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464134</span>                 <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464136</span>                 <span class="keyword">call</span>    sub_45F17F</span><br><span class="line"><span class="symbol">.text:</span>0046413B                 <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046413D</span>                 <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>0046413E                 <span class="keyword">retn</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">IntShow</span><span class="params">(<span class="type">int</span>* n)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>, n[<span class="number">0</span>], n[<span class="number">1</span>], n[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;</span><br><span class="line">	IntShow(arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符型一维数组</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00464281</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">ds</span>:dword_520E60 <span class="comment">; &#x27;lleh&#x27;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464286</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_24], <span class="built_in">eax</span> <span class="comment">; 用eax过渡，传给局部变量</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464289</span>                 <span class="keyword">mov</span>     <span class="built_in">cx</span>, <span class="built_in">ds</span>:word_520E64 <span class="comment">; &#x27;o&#x27;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464290</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_20], <span class="built_in">cx</span> <span class="comment">; 用cx过渡，传给局部变量</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464294</span>                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464297</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span>             <span class="comment">; 前半段的地址入栈</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464298</span>                 <span class="keyword">call</span>    sub_45E3AB</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046429D</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;sub_45E3AB</span></span><br><span class="line"><span class="symbol">.text:</span>00463FC0 arg_0           = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>00463FC0</span><br><span class="line"><span class="symbol">.text:</span>00463FC0                 <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>00463FC1                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span>00463FC3                 <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span></span><br><span class="line"><span class="symbol">.text:</span>00463FC9                 <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>00463FCA                 <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>00463FCB                 <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>00463FCC                 <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>00463FCE                 <span class="keyword">xor</span>     <span class="built_in">ecx</span>, <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>00463FD0                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line"><span class="symbol">.text:</span>00463FD5                 <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">.text:</span>00463FD7                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset unk_54D014</span><br><span class="line"><span class="symbol">.text:</span>00463FDC                 <span class="keyword">call</span>    sub_45FF35</span><br><span class="line"><span class="symbol">.text:</span>00463FE1                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>00463FE2                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_0] <span class="comment">; 参数传给eax</span></span><br><span class="line"><span class="symbol">.text:</span>00463FE5                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>00463FE6                 <span class="keyword">push</span>    offset aS       <span class="comment">; &quot;%s&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>00463FEB                 <span class="keyword">call</span>    sub_45DB5E      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>00463FF0                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>00463FF3                 <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>00463FF4                 <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>00463FF5                 <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>00463FF6                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span></span><br><span class="line"><span class="symbol">.text:</span>00463FFC                 <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span>00463FFE                 <span class="keyword">call</span>    sub_45F17F</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464003</span>                 <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464005</span>                 <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464006</span>                 <span class="keyword">retn</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CharShow</span><span class="params">(<span class="type">char</span>* n)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[] = &#123; <span class="string">&quot;hello&quot;</span> &#125;;</span><br><span class="line">	CharShow(buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组作为返回值</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>004642C3                 <span class="keyword">call</span>    sub_45FC79</span><br><span class="line"><span class="symbol">.text:</span>004642C8                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_40], <span class="built_in">eax</span> <span class="comment">; 从返回值中取出传到局部变量</span></span><br><span class="line"><span class="symbol">.text:</span>004642CB                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_40] <span class="comment">; 放入寄存器中push作为参数</span></span><br><span class="line"><span class="symbol">.text:</span>004642CE                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004642CF                 <span class="keyword">push</span>    offset aS       <span class="comment">; &quot;%s&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>004642D4                 <span class="keyword">call</span>    sub_45DB59      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>004642D9                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;sub_45FC79</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464020</span> var_14          = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">14h</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464020</span> var_10          = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">10h</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464020</span> var_C           = <span class="built_in">word</span> <span class="built_in">ptr</span> -<span class="number">0Ch</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464020</span> var_A           = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">0Ah</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464020</span> var_4           = <span class="built_in">dword</span> <span class="built_in">ptr</span> -<span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464020</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464020</span>                 <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464021</span>                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464023</span>                 <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0D4h</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464029</span>                 <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>0046402A                 <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>0046402B                 <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>0046402C                 <span class="keyword">lea</span>     <span class="built_in">edi</span>, [<span class="built_in">ebp</span>+var_14]</span><br><span class="line"><span class="symbol">.text:</span>0046402F                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">5</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464034</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464039</span>                 <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">.text:</span>0046403B                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, ___security_cookie</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464040</span>                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464042</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_4], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464045</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset unk_54E014</span><br><span class="line"><span class="symbol">.text:</span>0046404A                 <span class="keyword">call</span>    sub_45FF35</span><br><span class="line"><span class="symbol">.text:</span>0046404F                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464050</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">ds</span>:dword_521E60 <span class="comment">; &#x27;oviv&#x27;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464055</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_10], <span class="built_in">eax</span> <span class="comment">; eax过渡，传给局部变量</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464058</span>                 <span class="keyword">mov</span>     <span class="built_in">cx</span>, <span class="built_in">ds</span>:word_521E64 <span class="comment">; &#x27;05&#x27;</span></span><br><span class="line"><span class="symbol">.text:</span>0046405F                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_C], <span class="built_in">cx</span> <span class="comment">; cx过渡，传给局部变量</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464063</span>                 <span class="keyword">mov</span>     <span class="built_in">dl</span>, <span class="built_in">ds</span>:byte_521E66</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464069</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_A], <span class="built_in">dl</span></span><br><span class="line"><span class="symbol">.text:</span>0046406C                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_10] <span class="comment">; 前半段给eax，作为返回值传递</span></span><br><span class="line"><span class="symbol">.text:</span>0046406F                 <span class="keyword">push</span>    <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464070</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464072</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464073</span>                 <span class="keyword">lea</span>     <span class="built_in">edx</span>, dword_4640A0</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464079</span>                 <span class="keyword">call</span>    sub_45EC52</span><br><span class="line"><span class="symbol">.text:</span>0046407E                 <span class="keyword">pop</span>     <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0046407F                 <span class="keyword">pop</span>     <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464080</span>                 <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464081</span>                 <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464082</span>                 <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464083</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_4]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464086</span>                 <span class="keyword">xor</span>     <span class="built_in">ecx</span>, <span class="built_in">ebp</span>        <span class="comment">; StackCookie</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464088</span>                 <span class="keyword">call</span>    j_@__security_check_cookie@<span class="number">4</span> <span class="comment">; __security_check_cookie(x)</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046408D</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0D4h</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464093</span>                 <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464095</span>                 <span class="keyword">call</span>    sub_45F17A</span><br><span class="line"><span class="symbol">.text:</span>0046409A                 <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>0046409C                 <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046409D</span>                 <span class="keyword">retn</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">CrZT</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> temp[<span class="number">7</span>] = <span class="string">&quot;vivo50&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* p = CrZT();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>整形二维数组（和一维数组没有本质上的区别，都是占用一段连续的内存空间）</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>004642DC                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_58], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>004642E3                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_54], <span class="number">2</span></span><br><span class="line"><span class="symbol">.text:</span>004642EA                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_50], <span class="number">3</span></span><br><span class="line"><span class="symbol">.text:</span>004642F1                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_4C], <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span>004642F8                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>004642FD                 <span class="keyword">shl</span>     <span class="built_in">eax</span>, <span class="number">0</span>          <span class="comment">; eax=8*2^0=8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464300</span>                 <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+<span class="built_in">eax</span>+var_58] <span class="comment">; 即[ebp+var_58+8]，即[ebp+var_50]</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464304</span>                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464309</span>                 <span class="keyword">shl</span>     <span class="built_in">edx</span>, <span class="number">0</span>          <span class="comment">; edx=4*2^0=4</span></span><br><span class="line"><span class="symbol">.text:</span>0046430C                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ecx</span>+<span class="built_in">edx</span>]  <span class="comment">; 即[ebp+var_58+0Ch]，即[ebp+var_4C]</span></span><br><span class="line"><span class="symbol">.text:</span>0046430F                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464310</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464315</span>                 <span class="keyword">shl</span>     <span class="built_in">ecx</span>, <span class="number">0</span>          <span class="comment">; ecx=8*2^0=8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464318</span>                 <span class="keyword">lea</span>     <span class="built_in">edx</span>, [<span class="built_in">ebp</span>+<span class="built_in">ecx</span>+var_58] <span class="comment">; 即[ebp+var_58+8]，即[ebp+var_50]</span></span><br><span class="line"><span class="symbol">.text:</span>0046431C                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464321</span>                 <span class="keyword">imul</span>    <span class="built_in">ecx</span>, <span class="built_in">eax</span>, <span class="number">0</span>     <span class="comment">; ecx=0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464324</span>                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, [<span class="built_in">edx</span>+<span class="built_in">ecx</span>]  <span class="comment">; 即[ebp+var_50]</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464327</span>                 <span class="keyword">push</span>    <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464328</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046432D</span>                 <span class="keyword">imul</span>    <span class="built_in">ecx</span>, <span class="built_in">eax</span>, <span class="number">0</span>     <span class="comment">; ecx=8*0=0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464330</span>                 <span class="keyword">lea</span>     <span class="built_in">edx</span>, [<span class="built_in">ebp</span>+<span class="built_in">ecx</span>+var_58] <span class="comment">; 即[ebp+var_58]</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464334</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464339</span>                 <span class="keyword">shl</span>     <span class="built_in">eax</span>, <span class="number">0</span>          <span class="comment">; eax=4*2^0=4</span></span><br><span class="line"><span class="symbol">.text:</span>0046433C                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">edx</span>+<span class="built_in">eax</span>]  <span class="comment">; 即[ebp+var_54]</span></span><br><span class="line"><span class="symbol">.text:</span>0046433F                 <span class="keyword">push</span>    <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464340</span>                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464345</span>                 <span class="keyword">imul</span>    <span class="built_in">eax</span>, <span class="built_in">edx</span>, <span class="number">0</span>     <span class="comment">; eax=8*0=0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464348</span>                 <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+<span class="built_in">eax</span>+var_58] <span class="comment">; 即[ebp+var_58]</span></span><br><span class="line"><span class="symbol">.text:</span>0046434C                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464351</span>                 <span class="keyword">imul</span>    <span class="built_in">eax</span>, <span class="built_in">edx</span>, <span class="number">0</span>     <span class="comment">; ecx=4*0=0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464354</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ecx</span>+<span class="built_in">eax</span>]  <span class="comment">; 即[ebp+var_58]</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464357</span>                 <span class="keyword">push</span>    <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464358</span>                 <span class="keyword">push</span>    offset aDDDD    <span class="comment">; &quot;%d,%d,%d,%d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046435D</span>                 <span class="keyword">call</span>    sub_45DB59      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464362</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">14h</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num[<span class="number">2</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125; &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d,%d&quot;</span>, num[<span class="number">0</span>][<span class="number">0</span>], num[<span class="number">0</span>][<span class="number">1</span>], num[<span class="number">1</span>][<span class="number">0</span>], num[<span class="number">1</span>][<span class="number">1</span>]);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day9:壳与脱壳（一）</title>
    <url>/2025/07/29/Day9-%E5%A3%B3/</url>
    <content><![CDATA[<p>壳、壳的加载过程、工具脱壳、手动脱壳流程、esp定律（基于Xdbg）</p>
<span id="more"></span>

<h2 id="壳"><a href="#壳" class="headerlink" title="壳"></a>壳</h2><ul>
<li><p>先看ctf-wiki对壳的介绍：</p>
<p><strong>壳</strong> 是在一些计算机软件里一段专门负责保护软件不被非法修改或反编译的程序。</p>
<p>它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。</p>
</li>
<li><p>因此，加壳程序包含壳程序和原程序两个部分，且原程序在壳程序运行后才恢复到独立可执行的状态。因此，可以借助动态调试器在壳程序运行完后进行dump，从而获得独立可执行的原程序</p>
</li>
<li><p>常见的壳有压缩壳和加密壳两种：</p>
<p>压缩壳：upx、ASpack、PECompat等</p>
<p>加密壳：VMProtect、Themida、ASProtector等</p>
</li>
</ul>
<h2 id="壳的加载过程"><a href="#壳的加载过程" class="headerlink" title="壳的加载过程"></a>壳的加载过程</h2><ul>
<li>壳和原程序在逻辑上基本没有关联，因此，壳程序在解析加壳后的二进制文件前，会先保存各寄存器的值，通常用pushad&#x2F;puahfd实现</li>
<li>解析完成后，是原程序的逻辑部分，此时，壳程序给出控制权，寄存器恢复到解析前的状态，通常用popad&#x2F;popfd实现</li>
<li>最后，程序跳到原程序入口点开始执行</li>
</ul>
<h2 id="工具脱壳"><a href="#工具脱壳" class="headerlink" title="工具脱壳"></a>工具脱壳</h2><ul>
<li><p>直接使用工具脱壳的情况主要有两种：一种是无修改的、只使用加壳程序加壳；另一种是使用加壳程序加壳后修改了区块名的。前者可以直接使用加壳程序脱壳（如果具备脱壳功能的话），后者先修改区块名再使用加壳程序脱壳。</p>
</li>
<li><p>upx无修改加壳示例：</p>
<p>拿到可执行文件，先到DIE查看，发现有壳。对壳的信息描述没有出现“modified”字眼，因此判断是无修改加壳，直接使用工具脱壳</p>
<p><img src="/../images/image-20250729103439484.png" alt="查看壳信息"></p>
<p>直接使用upx -d脱壳</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-29%20103724.png" alt="upx-d脱壳"></p>
<p>再次用DIE打开，发现没有识别出壳了</p>
<p><img src="/../images/image-20250729104311684.png" alt="脱壳后查看壳信息"></p>
</li>
<li><p>upx修改区块名加壳示例：</p>
<p>先到DIE查看壳信息，发现是upx modified</p>
<p><img src="/../images/image-20250729110711262.png" alt="查看壳信息"></p>
<p>点击“区块“下方的”&gt;“查看区块信息，发现区块名有改动</p>
<p><img src="/../images/image-20250729110752177.png" alt="区块名改动"></p>
<p>010editor修改区块名</p>
<p><img src="/../images/image-20250729111002665.png" alt="修改区块名"></p>
<p>再次查看壳信息，变成无修改加壳了，直接工具脱壳</p>
<p><img src="/../images/image-20250729111128932.png" alt="再次查看壳信息"></p>
</li>
</ul>
<h2 id="手动脱壳流程"><a href="#手动脱壳流程" class="headerlink" title="手动脱壳流程"></a>手动脱壳流程</h2><ul>
<li><p>步骤：</p>
<ul>
<li>查壳：使用DIE、ExeinfoPE、PEiD等工具查壳</li>
<li>寻找程序原入口点(OEP)：通过各种方法找到壳代码结束、程序真正开始的地方</li>
<li>dump内存：借助插件从OEP开始dump出原程序</li>
<li>输入表(IAT)重建：借助插件重建输入表</li>
<li>关闭程序重定位：使用DIE等工具关闭程序重定位</li>
</ul>
</li>
<li><p>寻找OEP的方法有很多，而dump和IAT重建以及关闭重定位的方法基本固定。先用一个例子展示整体流程，再详细展开寻找OEP的方法。upx手动脱壳示例：</p>
<ul>
<li><p>查壳：显示是upx</p>
<p><img src="/../images/image-20250729133015652.png" alt="查壳"></p>
</li>
<li><p>寻找OEP：</p>
<p>采用esp定律法（详见下文）找到push ebp开头的一段代码</p>
<p><img src="/../images/image-20250729134006853.png" alt="寻找OEP"></p>
</li>
<li><p>dump内存：</p>
<p>打开插件scylla，点击“转储”栏中的“转储”，会获得一个_dump后缀的exe文件</p>
<p><img src="/../images/image-20250729134119537.png" alt="dump"></p>
</li>
<li><p>IAT重建：</p>
<p>点击“IAT自动搜索”，会有弹窗问是否使用高级搜索结果，点“是”。这时候，VA和“大小”两个框会被填充。</p>
<p><img src="/../images/image-20250729134901607.png" alt="IAT自动搜索"></p>
<p>接下来点“获取导入”，上方的大框中会出现dll结尾的东西，需要把带红色X的取消勾选</p>
<p><img src="/../images/image-20250729134937163.png" alt="获取导入"></p>
<p>然后点击修复转储，选择刚刚dump出来的文件，会得到一个再加上_SCY的exe文件。</p>
<p>此时程序大概率运行不了，会闪退。但是对于静态分析来说，到这一步已经足够了。</p>
</li>
<li><p>关闭重定位：把得到的_dump_SCY.exe文件拖到DIE，点击“区块”栏的“&gt;”，会弹出文件结构界面</p>
<p><img src="/../images/image-20250729135914719.png" alt="文件结构界面"></p>
<p>先取消勾选右上角的“只读”</p>
<p><img src="/../images/image-20250729140239276.png" alt="取消只读"></p>
<p>点击IMAGE_NT_HEADERS下的IMAGE_FILE_HEADER，在“标志”选项中勾选“RELOCS_STRIPPED”（图中未勾选）</p>
<p><img src="/../images/image-20250729140145721.png" alt="勾选RELOCS_STRIPPED"></p>
<p>再点击IMAGE_OPTIONAL_HEADERS，找到另一个标志(DllCharacteristics)，取消勾选“DYNAMIC_BASE”（图中未取消）</p>
<p><img src="/../images/image-20250729140545940.png" alt="取消勾选DYNAMIC_BASE"></p>
<p>这样子，我们的程序就脱完壳并且可以正常运行了</p>
</li>
<li><p>PS：关于IAT重建这一步骤，为什么不能IAT自动搜索再转储一步到位？</p>
<p>结合AI的解释，个人见解是IAT自动搜索的过程可能会运行程序，导致地址刷新，OEP失效，dump出来的程序不完整或者不对。因此，dump和IAT重建实际上是两个步骤，不过被集成到了一个界面。其实还有手动重建IAT的方法，这种情况下就确确实实需要先dump再导入重建的IAT了，因为在调试器中找到OEP后还要继续找IAT</p>
</li>
</ul>
</li>
</ul>
<h2 id="寻找OEP的方法（一）"><a href="#寻找OEP的方法（一）" class="headerlink" title="寻找OEP的方法（一）"></a>寻找OEP的方法（一）</h2><h3 id="ESP定律"><a href="#ESP定律" class="headerlink" title="ESP定律"></a>ESP定律</h3><ul>
<li><p>前文，我们知道了壳程序解析时会有pushad\popad或者pushfd\popfd的操作。pushad时，随着通用寄存器值的入栈，esp的值会发生变化，又因为栈平衡的特性，最终esp的值会回到pushad后的这个值。因此，可以借助这一点，给pushad后的esp值下硬件访问断点，popad后就会触发断点，中断调试，进而实现跳过整个壳解析过程。当然，中断处还不是OEP，一般在中断处后会有一个跨度明显的jmp，甚至jmp后还有一个跳转表jmp才会到达真正的OEP</p>
</li>
<li><p>具体操作如下：</p>
<ul>
<li><p>xdbg打开，F9到程序所在内存区域</p>
<p><img src="/../images/image-20250729172225632.png" alt="xdbg打开"></p>
</li>
<li><p>可以看到EIP所在就是pushad</p>
<p><img src="/../images/image-20250729172310628.png" alt="pushad"></p>
</li>
<li><p>F8步过，esp更新</p>
<p><img src="/../images/image-20250729172402698.png" alt="esp更新"></p>
</li>
<li><p>在右下角栈窗口设上硬件访问断点</p>
<p><img src="/../images/image-20250729172449826.png" alt="设置硬件访问断点"></p>
</li>
<li><p>点击工具栏“视图”下方的“-&gt;”，程序会执行过popad。可以看到下方不远处有个大跳</p>
<p><img src="/../images/image-20250729172606653.png" alt="popad"></p>
</li>
<li><p>F8到大跳处F7步入，有跳转表继续F7步入，可以看到开辟栈帧操作，这里就是OEP了，在此处直接使用scylla dump出程序</p>
<p><img src="/../images/image-20250729172759829.png" alt="OEP"></p>
</li>
</ul>
</li>
</ul>
<h3 id="单步跟踪法"><a href="#单步跟踪法" class="headerlink" title="单步跟踪法"></a>单步跟踪法</h3><ul>
<li>如名，就是一直按F8，让程序尽量向下走，遇到循环就跳过，遇到近call就步入，重点关注大跳</li>
<li>参考ctf-wiki <a href="https://ctf-wiki.org/reverse/platform/windows/unpack/trace/">https://ctf-wiki.org/reverse/platform/windows/unpack/trace/</a></li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>Day6:if-else语句识别、switch语句识别、循环语句识别</title>
    <url>/2025/07/15/Day6-switch%E8%AF%AD%E5%8F%A5%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p>if-else语句识别、switch语句识别、循环语句识别</p>
<span id="more"></span>

<h2 id="if-else语句识别"><a href="#if-else语句识别" class="headerlink" title="if-else语句识别"></a>if-else语句识别</h2><ul>
<li><p>第一种，数值比较作为条件（x86debug为例，其余类似，仅是比较方法（如使用sub而不是cmp）和模式特征上的差异）</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>004702D0                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C]</span><br><span class="line"><span class="symbol">.text:</span>004702D3                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004702D4                 <span class="keyword">push</span>    offset unk_545E50 <span class="comment">; %d</span></span><br><span class="line"><span class="symbol">.text:</span>004702D9                 <span class="keyword">call</span>    sub_4681E0      <span class="comment">; scanf</span></span><br><span class="line"><span class="symbol">.text:</span>004702DE                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>004702E1                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_C], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>004702E5                 <span class="keyword">jnz</span>     short loc_4702F6 <span class="comment">; if [ebp+var_C]!=1, jump to loc_4702f6</span></span><br><span class="line"><span class="symbol">.text:</span>004702E7                 <span class="keyword">push</span>    offset aNEquales1 <span class="comment">; &quot;n equales 1&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>004702EC                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>004702F1                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span>004702F4                 <span class="keyword">jmp</span>     short loc_470303</span><br><span class="line"><span class="symbol">.text:</span>004702F6 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>004702F6</span><br><span class="line"><span class="symbol">.text:</span>004702F6 loc_4702F6:                             <span class="comment">; CODE XREF: main+45↑j</span></span><br><span class="line"><span class="symbol">.text:</span>004702F6                 <span class="keyword">push</span>    offset aNDoesNotEqual1 <span class="comment">; &quot;n does not equal 1&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>004702FB                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470300</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equales 1&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n does not equal 1&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种，变量直接作为条件</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00470303</span>                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_18]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470306</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470307</span>                 <span class="keyword">push</span>    offset unk_545E50 <span class="comment">; %d</span></span><br><span class="line"><span class="symbol">.text:</span>0047030C                 <span class="keyword">call</span>    sub_4681E0      <span class="comment">; scanf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470311</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470314</span>                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_18], <span class="number">0</span> <span class="comment">; 和&#x27;0&#x27;比较</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470318</span>                 <span class="keyword">jz</span>      short loc_470327 <span class="comment">; if [ebp+var_18]==0, jump to loc_470327, 跳过printf</span></span><br><span class="line"><span class="symbol">.text:</span>0047031A                 <span class="keyword">push</span>    offset aJudgeIsNotZero <span class="comment">; &quot;judge is not zero&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>0047031F                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470324</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> judge;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;judge);</span><br><span class="line"><span class="keyword">if</span> (judge)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;judge is not zero&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三种，返回值（函数式）作为条件</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00470387</span>                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span>0047038A                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0047038B                 <span class="keyword">push</span>    offset unk_545E50 <span class="comment">; %d</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470390</span>                 <span class="keyword">call</span>    sub_4681E0      <span class="comment">; scanf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470395</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470398</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span>0047039B                 <span class="keyword">push</span>    <span class="built_in">eax</span>             <span class="comment">; 输入的值入栈，即函数传参</span></span><br><span class="line"><span class="symbol">.text:</span>0047039C                 <span class="keyword">call</span>    sub_46B214      <span class="comment">; 自定义函数</span></span><br><span class="line"><span class="symbol">.text:</span>004703A1                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">.text:</span>004703A4                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span>        <span class="comment">; 1 &amp; 1 = 0； 0 &amp; 0 = 1</span></span><br><span class="line"><span class="symbol">.text:</span>004703A6                 <span class="keyword">jz</span>      short loc_4703B5</span><br><span class="line"><span class="symbol">.text:</span>004703A8                 <span class="keyword">push</span>    offset aItS0    <span class="comment">; &quot;it&#x27;s 0\n&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>004703AD                 <span class="keyword">call</span>    sub_468D1B</span><br><span class="line"><span class="symbol">.text:</span>004703B2                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;sub_46b214</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470110</span> arg_0           = <span class="built_in">dword</span> <span class="built_in">ptr</span>  <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470110</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470110</span>                 <span class="keyword">push</span>    <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470111</span>                 <span class="keyword">mov</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470113</span>                 <span class="keyword">sub</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470119</span>                 <span class="keyword">push</span>    <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span>0047011A                 <span class="keyword">push</span>    <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>0047011B                 <span class="keyword">push</span>    <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>0047011C                 <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span>0047011E                 <span class="keyword">xor</span>     <span class="built_in">ecx</span>, <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470120</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0CCCCCCCCh</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470125</span>                 <span class="keyword">rep</span> <span class="keyword">stosd</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470127</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, offset unk_57500E</span><br><span class="line"><span class="symbol">.text:</span>0047012C                 <span class="keyword">call</span>    sub_46B660</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470131</span>                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470132</span>                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+arg_0], <span class="number">0</span>  <span class="comment">; [ebp+8], eax在栈上的位置</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470136</span>                 <span class="keyword">jnz</span>     short loc_470141 <span class="comment">; eax=0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470138</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">1</span>          <span class="comment">; if [ebp+arg_0]==0, eax=1, return 1(eax)</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047013D</span>                 <span class="keyword">jmp</span>     short loc_470143</span><br><span class="line"><span class="symbol">.text:</span>0047013F <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>0047013F                 <span class="keyword">jmp</span>     short loc_470143</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470141</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470141</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470141</span> loc_470141:                             <span class="comment">; CODE XREF: sub_470110+26↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470141</span>                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span>        <span class="comment">; eax=0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470143</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470143</span> loc_470143:                             <span class="comment">; CODE XREF: sub_470110+2D↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470143</span>                                         <span class="comment">; sub_470110+2F↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470143</span>                 <span class="keyword">pop</span>     <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470144</span>                 <span class="keyword">pop</span>     <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470145</span>                 <span class="keyword">pop</span>     <span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470146</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">0C0h</span></span><br><span class="line"><span class="symbol">.text:</span>0047014C                 <span class="keyword">cmp</span>     <span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line"><span class="symbol">.text:</span>0047014E                 <span class="keyword">call</span>    sub_46A62A</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470153</span>                 <span class="keyword">mov</span>     <span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470155</span>                 <span class="keyword">pop</span>     <span class="built_in">ebp</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470156</span>                 <span class="keyword">retn</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">IfZero</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (a == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">	<span class="keyword">if</span>(IfZero(a))</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;it&#x27;s 0\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="switch语句识别"><a href="#switch语句识别" class="headerlink" title="switch语句识别"></a>switch语句识别</h2><ul>
<li><p>比较简单的情况下：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00470327</span>                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span>0047032A                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0047032B                 <span class="keyword">push</span>    offset unk_545E50 <span class="comment">; %d</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470330</span>                 <span class="keyword">call</span>    sub_4681E0      <span class="comment">; scanf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470335</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470338</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span>0047033B                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_EC], <span class="built_in">eax</span> <span class="comment">; [ebp+var_EC]==[ebp+var_24], 用临时变量[ebp+var_EC]来检验case</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470341</span>                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_EC], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470348</span>                 <span class="keyword">jz</span>      short loc_47035E <span class="comment">; case1输出</span></span><br><span class="line"><span class="symbol">.text:</span>0047034A                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_EC], <span class="number">5</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470351</span>                 <span class="keyword">jz</span>      short loc_470371 <span class="comment">; case5输出</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470353</span>                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_EC], <span class="number">0Ah</span></span><br><span class="line"><span class="symbol">.text:</span>0047035A                 <span class="keyword">jz</span>      short loc_470384 <span class="comment">; case10输出</span></span><br><span class="line"><span class="symbol">.text:</span>0047035C                 <span class="keyword">jmp</span>     short loc_470395 <span class="comment">; break然后system(&quot;pause&quot;)</span></span><br><span class="line"><span class="symbol">.text:</span>0047035E <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>0047035E</span><br><span class="line"><span class="symbol">.text:</span>0047035E loc_47035E:                             <span class="comment">; CODE XREF: main+A8↑j</span></span><br><span class="line"><span class="symbol">.text:</span>0047035E                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470361</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470362</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470367</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>0047036C                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>0047036F                 <span class="keyword">jmp</span>     short loc_470395</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470371</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470371</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470371</span> loc_470371:                             <span class="comment">; CODE XREF: main+B1↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470371</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470374</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470375</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>0047037A                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>0047037F                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470382</span>                 <span class="keyword">jmp</span>     short loc_470395</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470384</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470384</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470384</span> loc_470384:                             <span class="comment">; CODE XREF: main+BA↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470384</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_24]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470387</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470388</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047038D</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470392</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470395</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470395</span> loc_470395:                             <span class="comment">; CODE XREF: main+BC↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470395</span>                                         <span class="comment">; main+CF↑j ...</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470395</span>                 <span class="keyword">push</span>    offset aPause   <span class="comment">; &quot;pause&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>0047039A                 <span class="keyword">call</span>    sub_46AFAD      <span class="comment">; system(&quot;pause&quot;)</span></span><br><span class="line"><span class="symbol">.text:</span>0047039F                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line"><span class="keyword">switch</span> (number) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>再复杂点，会优化出跳转表，即每个case跳转的地址会被集合成一个数组，像表一样</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>004702D3                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004702D4                 <span class="keyword">push</span>    offset unk_545E50 <span class="comment">; %d</span></span><br><span class="line"><span class="symbol">.text:</span>004702D9                 <span class="keyword">call</span>    sub_4681E0      <span class="comment">; scanf</span></span><br><span class="line"><span class="symbol">.text:</span>004702DE                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>004702E1                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C]</span><br><span class="line"><span class="symbol">.text:</span>004702E4                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_D4], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004702EA                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_D4] <span class="comment">; 把输入值传到ecx，下一步减去1，减1的原因见后面的解释</span></span><br><span class="line"><span class="symbol">.text:</span>004702F0                 <span class="keyword">sub</span>     <span class="built_in">ecx</span>, <span class="number">1</span>          <span class="comment">; switch 67 cases</span></span><br><span class="line"><span class="symbol">.text:</span>004702F3                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_D4], <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>004702F9                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_D4], <span class="number">42h</span> <span class="comment">; 把输入值和42h(66)比较，下一步是大于66就跳出case的判断</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470300</span>                 <span class="keyword">ja</span>      def_470313      <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470306</span>                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, [<span class="built_in">ebp</span>+var_D4]</span><br><span class="line"><span class="symbol">.text:</span>0047030C                 <span class="keyword">movzx</span>   <span class="built_in">eax</span>, <span class="built_in">ds</span>:byte_470418[<span class="built_in">edx</span>] <span class="comment">; 跳转表索引值表，即预判了输入值的范围并且为每个可能的值建立了索引值表（比如说现在确定了范围是0-66，就枚举了0-66这些数值对应的索引，然后再根据索引找到应改跳转的地址</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470313</span>                 <span class="keyword">jmp</span>     <span class="built_in">ds</span>:jpt_470313[<span class="built_in">eax</span>*<span class="number">4</span>] <span class="comment">; switch jump</span></span><br><span class="line"><span class="symbol">.text:</span>0047031A <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>0047031A</span><br><span class="line"><span class="symbol">.text:</span>0047031A loc_47031A:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span>0047031A                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span>0047031A                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047031D</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0047031E                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470323</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470328</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>0047032B                 <span class="keyword">jmp</span>     short def_470313 <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047032D</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047032D</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047032D</span> loc_47032D:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047032D</span>                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047032D</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 5</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470330</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470331</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470336</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>0047033B                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>0047033E                 <span class="keyword">jmp</span>     short def_470313 <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470340</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470340</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470340</span> loc_470340:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470340</span>                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470340</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 10</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470343</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470344</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470349</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>0047034E                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470351</span>                 <span class="keyword">jmp</span>     short def_470313 <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470353</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470353</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470353</span> loc_470353:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470353</span>                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470353</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 17</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470356</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470357</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>0047035C                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470361</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470364</span>                 <span class="keyword">jmp</span>     short def_470313 <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470366</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470366</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470366</span> loc_470366:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470366</span>                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470366</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 11</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470369</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0047036A                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span>0047036F                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470374</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470377</span>                 <span class="keyword">jmp</span>     short def_470313 <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470379</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470379</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470379</span> loc_470379:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470379</span>                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470379</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 67</span></span><br><span class="line"><span class="symbol">.text:</span>0047037C                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047037D</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470382</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470387</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>0047038A                 <span class="keyword">jmp</span>     short def_470313 <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span>0047038C <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>0047038C</span><br><span class="line"><span class="symbol">.text:</span>0047038C loc_47038C:                             <span class="comment">; CODE XREF: sub_4702A0+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span>0047038C                                         <span class="comment">; DATA XREF: .text:jpt_470313↓o</span></span><br><span class="line"><span class="symbol">.text:</span>0047038C                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_C] <span class="comment">; jumptable 00470313 case 3</span></span><br><span class="line"><span class="symbol">.text:</span>0047038F                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470390</span>                 <span class="keyword">push</span>    offset aNEqualsD <span class="comment">; &quot;n equals %d&quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00470395</span>                 <span class="keyword">call</span>    sub_468D1B      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>0047039A                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047039D</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047039D</span> def_470313:                             <span class="comment">; CODE XREF: sub_4702A0+60↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047039D</span>                                         <span class="comment">; sub_4702A0+73↑j ...</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0047039D</span>                 <span class="keyword">push</span>    offset aPause   <span class="comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span></span><br><span class="line"><span class="symbol">.text:</span>004703A2                 <span class="keyword">call</span>    sub_46AFAD      <span class="comment">; system</span></span><br><span class="line"><span class="symbol">.text:</span>004703A7                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line"><span class="keyword">switch</span> (number) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">67</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n equals %d&quot;</span>, number);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>对跳转表和索引值表进行进一步解释：</p>
<p>先看跳转表：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-16%20000211.png" alt="跳转表"></p>
<p>可以看到跳转表只有简单的8种情况。但是编译器（反编译器？）只能根据case的最大值用笨方法枚举可能的值，这时候，就可以给这些枚举的值分成两种：一种是case里有的，一种是case里没有的。看跳转表的最后一个，叫def而不是loc，这个就是给case里没有的枚举值准备的。因为分为case里有的和没有的，因此，case里有的，会给出具体的索引值；case里没有的，统一导向跳转表的最后一个。再看索引值表：</p>
<p><img src="/../images/image-20250716001640839.png" alt="索引值表"></p>
<p>可以看到，里面枚举了0到66对应的索引值。看汇编代码，是将输入的值作为索引值表的索引来用的，索引出来的值再作为跳转表的索引。注意看，索引值表的最小值为0，因此，跳转表和数组一样从0开始索引，而0-7对应跳转表的八种情况。通过进一步挖掘信息，还可以知道跳转表是把case按照从小到大的顺序排列的。因此，最开始会对输入值有一个减的操作。至于为什么减1，我们就可以推测最小的case是1了，因为索引从0开始，而最小的case在索引0处。</p>
</li>
<li><p>这样解释下来可能还有点绕，所以我们按照机器的动作走一遍：</p>
<p>首先，把case按顺序排出跳转表。</p>
<p>然后，假设我们拿到输入的值。作为机器，我们知道case有：1，3，5，10，17，11，67，所以先给输入的值减1，以便这个值是1的时候我们可以索引到跳转表下标0处。同时，如果这个值大于66，我们还可以直接跳过case检查，直接导出去（刚好和在case最大最小值范围内但不是case的值一样对待）</p>
<p>再然后，我们枚举0-66的值，并且把这些值和case里有的值一一比较，分出两种值：一种在case里，一种不再case里。</p>
<p>ok，然后我们建立索引值表，给在case里的枚举值对应的跳转表索引值，比如说枚举值2（输入值是3），刚好case里有3，按顺序排第二，我们就给索引值1（从0开始索引）。回头看截出来的索引值表，在下标2的地方刚好是1（枚举值索引出跳转表索引）；给不在case里的值索引到7，对应跳转表最后一位（为没在case里的值专门准备的那一位）。</p>
<p>最后，我们就准备好我们的解决方案了，对于任意输入的值我们就都有对策了。</p>
</li>
<li><p>请务必真正理解上述内容，因为在逆向工程中，这么绕的操作很常见。在PE文件结构部分，我们或许还有机会再接触到这么绕的操作。（其实只需要写出程序拿到ida里点开跳转表和索引值表（如果有的话）看几眼就明白了，亲身实践总比阅读文字来的有效，因为文字还取决于书写者的表达水平(●’◡’●)）</p>
</li>
</ul>
<h2 id="循环语句识别"><a href="#循环语句识别" class="headerlink" title="循环语句识别"></a>循环语句识别</h2><ul>
<li><p>第一种，for循环</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00464096</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="number">0</span>  <span class="comment">; 一个变量初始化为0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0046409D</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_14], <span class="number">1</span> <span class="comment">; 另一个变量初始化为1</span></span><br><span class="line"><span class="symbol">.text:</span>004640A4                 <span class="keyword">jmp</span>     short loc_4640AF</span><br><span class="line"><span class="symbol">.text:</span>004640A6 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>004640A6</span><br><span class="line"><span class="symbol">.text:</span>004640A6 loc_4640A6:                             <span class="comment">; CODE XREF: sub_464070+4E↓j</span></span><br><span class="line"><span class="symbol">.text:</span>004640A6                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_14]</span><br><span class="line"><span class="symbol">.text:</span>004640A9                 <span class="keyword">add</span>     <span class="built_in">eax</span>, <span class="number">1</span>          <span class="comment">; 用eax过渡，给[ebp+var_14]加1</span></span><br><span class="line"><span class="symbol">.text:</span>004640AC                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_14], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004640AF</span><br><span class="line"><span class="symbol">.text:</span>004640AF loc_4640AF:                             <span class="comment">; CODE XREF: sub_464070+34↑j</span></span><br><span class="line"><span class="symbol">.text:</span>004640AF                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_14], <span class="number">0Ah</span></span><br><span class="line"><span class="symbol">.text:</span>004640B3                 <span class="keyword">jg</span>      short loc_4640C0 <span class="comment">; [ebp+var_14]大于0Ah时跳转（出循环）</span></span><br><span class="line"><span class="symbol">.text:</span>004640B5                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span>004640B8                 <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_14] <span class="comment">; 用eax过渡，把[ebp+var_14]的值加到[ebp+var_8]上</span></span><br><span class="line"><span class="symbol">.text:</span>004640BB                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004640BE                 <span class="keyword">jmp</span>     short loc_4640A6 <span class="comment">; 跳回去，形成循环</span></span><br><span class="line"><span class="symbol">.text:</span>004640C0 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>004640C0</span><br><span class="line"><span class="symbol">.text:</span>004640C0 loc_4640C0:                             <span class="comment">; CODE XREF: sub_464070+43↑j</span></span><br><span class="line"><span class="symbol">.text:</span>004640C0                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span>004640C3                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004640C4                 <span class="keyword">push</span>    offset aCountD  <span class="comment">; &quot;count : %d &quot;</span></span><br><span class="line"><span class="symbol">.text:</span>004640C9                 <span class="keyword">call</span>    sub_45DB54      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>004640CE                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">	count += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;count : %d &quot;</span>, count);</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种，while循环</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>004640D1                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="number">0</span>  <span class="comment">; 一个变量初始化为0</span></span><br><span class="line"><span class="symbol">.text:</span>004640D8                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_20], <span class="number">0Ah</span> <span class="comment">; 另一个变量初始化为10</span></span><br><span class="line"><span class="symbol">.text:</span>004640DF</span><br><span class="line"><span class="symbol">.text:</span>004640DF loc_4640DF:                             <span class="comment">; CODE XREF: sub_464070+87↓j</span></span><br><span class="line"><span class="symbol">.text:</span>004640DF                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_20], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>004640E3                 <span class="keyword">jle</span>     short loc_4640F9 <span class="comment">; [ebp+var_20]小于等于0时跳转（出循环）</span></span><br><span class="line"><span class="symbol">.text:</span>004640E5                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span>004640E8                 <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_20] <span class="comment">; eax过渡，把[ebp+var_20]值加到[ebp+var_8]上</span></span><br><span class="line"><span class="symbol">.text:</span>004640EB                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004640EE                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_20]</span><br><span class="line"><span class="symbol">.text:</span>004640F1                 <span class="keyword">sub</span>     <span class="built_in">eax</span>, <span class="number">1</span>          <span class="comment">; eax过渡，给[ebp+var_20]减1</span></span><br><span class="line"><span class="symbol">.text:</span>004640F4                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_20], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004640F7                 <span class="keyword">jmp</span>     short loc_4640DF <span class="comment">; 回跳，形成循环</span></span><br><span class="line"><span class="symbol">.text:</span>004640F9 <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>004640F9</span><br><span class="line"><span class="symbol">.text:</span>004640F9 loc_4640F9:                             <span class="comment">; CODE XREF: sub_464070+73↑j</span></span><br><span class="line"><span class="symbol">.text:</span>004640F9                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span>004640FC                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>004640FD                 <span class="keyword">push</span>    offset aCountD  <span class="comment">; &quot;count : %d &quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464102</span>                 <span class="keyword">call</span>    sub_45DB54      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464107</span>                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">	count += n;</span><br><span class="line">	n--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;count : %d &quot;</span>, count);</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三种，do-while循环</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>0046410A                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="number">0</span>  <span class="comment">; 一个变量初始化为0</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464111</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_2C], <span class="number">0Ah</span> <span class="comment">; 另一个变量初始化为10</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464118</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464118</span> loc_464118:                             <span class="comment">; CODE XREF: sub_464070+BE↓j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464118</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span>0046411B                 <span class="keyword">add</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_2C] <span class="comment">; eax过渡，把[ebp+var_2C]值加到[ebp+var_8]上</span></span><br><span class="line"><span class="symbol">.text:</span>0046411E                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_8], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464121</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_2C]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464124</span>                 <span class="keyword">sub</span>     <span class="built_in">eax</span>, <span class="number">1</span>          <span class="comment">; eax过渡，给[ebp+var_2C]减1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464127</span>                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_2C], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>0046412A                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+var_2C], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>0046412E                 <span class="keyword">jg</span>      short loc_464118 <span class="comment">; [ebp+var_2C]大于0时回跳</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464130</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_8]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464133</span>                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464134</span>                 <span class="keyword">push</span>    offset aCountD  <span class="comment">; &quot;count : %d &quot;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00464139</span>                 <span class="keyword">call</span>    sub_45DB54      <span class="comment">; printf</span></span><br><span class="line"><span class="symbol">.text:</span>0046413E                 <span class="keyword">add</span>     <span class="built_in">esp</span>, <span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">	count += i;</span><br><span class="line">	i--;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &gt; <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;count : %d &quot;</span>, count);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
  </entry>
  <entry>
    <title>记一次blog优化</title>
    <url>/2025/06/02/%E8%AE%B0%E4%B8%80%E6%AC%A1blog%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>Hexo+NexT博客的小优化 (注：此篇记录的是笔者原来崩溃的博客的优化，是旧版NexT优化)</p>
<span id="more"></span>

<ul>
<li>这几天突然产生一个想法：博客主页改成分类的样式会不会更好看一点，主页是主题集合，每个主题里面才是相关的文章</li>
<li>心动不如行动，直接开干！</li>
</ul>
<h2 id="首页分类卡片实现"><a href="#首页分类卡片实现" class="headerlink" title="首页分类卡片实现"></a>首页分类卡片实现</h2><ul>
<li><p>这部分其实花了不少时间，因为没有具体学过Hexo+NexT的结构，好在有Deepseek老师的帮助</p>
</li>
<li><p>修改的部分主要在themes&#x2F;next&#x2F;layout&#x2F;index.swig，下面直接贴代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;_layout.swig&#x27; %&#125;</span><br><span class="line">&#123;% import &#x27;_macro/sidebar.swig&#x27; as sidebar_template with context %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;&#123; title &#125;&#125;&#123;%- if theme.index_with_subtitle and subtitle %&#125; - &#123;&#123; subtitle &#125;&#125;&#123;%- endif %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block class %&#125;index categories-page&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 这部分是实现category卡片，最后面还有没category的文章的处理，因为我严格了每篇文章有category，就没管画面如何了 #&#125;</span><br><span class="line">&#123;% if site.categories.length &gt; 0 %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-cards-container&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for cat in site.categories.toArray() %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-card&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;category-name&quot;</span>&gt;</span>&#123;&#123; cat.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-count&quot;</span>&gt;</span>&#123;&#123; cat.posts.length &#125;&#125;篇文章<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#123;# 这一部分实现卡片显示包含的文章的标题，数量可以改下面的limit()的数字 #&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-posts-list&quot;</span>&gt;</span></span><br><span class="line">          &#123;% for post in cat.posts.sort(&#x27;date&#x27;, -1).limit(3).toArray() %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-post-item&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;post-title&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; post.title &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123; post.title | truncate(18) &#125;&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-date&quot;</span>&gt;</span></span><br><span class="line">    			&#123;% if post.updated %&#125; </span><br><span class="line">    				&#123;&#123; post.updated.format(&#x27;MM/DD&#x27;) &#125;&#125;</span><br><span class="line">    			&#123;% else %&#125;</span><br><span class="line">    				&#123;&#123; post.date.format(&#x27;MM/DD&#x27;) &#125;&#125;</span><br><span class="line">    			&#123;% endif %&#125;</span><br><span class="line">    		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">            </span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;more-posts-wrapper&quot;</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;/categories/&#x27; + cat.name + &#x27;/&#x27;) &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;more-posts-button&quot;</span>&gt;</span></span><br><span class="line">      			更多文章 →</span><br><span class="line">    		<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no-categories-notice&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>暂无分类数据，请为文章添加分类<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>还有source&#x2F;_data&#x2F;styles.styl</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 分类卡片样式 - 安全追加 */</span></span><br><span class="line"><span class="selector-class">.category-cards-container</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.category-card</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.85</span>); <span class="comment">/* 半透明白色，与你的opacity 0.85协调 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">    <span class="attribute">backdrop-filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>); <span class="comment">/* 毛玻璃效果增强背景融合 */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>); <span class="comment">/* 柔和边框 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">5px</span>);</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.15</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.category-name</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post-count</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#7f8c8d</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">0.9em</span>;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这部分是我自己用的背景图的设置 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(/images/background.jpg);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ======================== */</span></span><br><span class="line"><span class="comment">/* 分类卡片内的文章列表样式 */</span></span><br><span class="line"><span class="comment">/* ======================== */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category-card</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative; <span class="comment">/* 为毛玻璃效果提供定位上下文 */</span></span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.category-header</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.08</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.recent-posts-list</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">3px</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.post-title</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#34495e</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0.95em</span>;</span><br><span class="line">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#3498db</span>;</span><br><span class="line">          <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.post-date</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#95a5a6</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span><br><span class="line">        <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  * &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.category-header</span>, </span><br><span class="line">  <span class="selector-class">.recent-post-item</span>, </span><br><span class="line">  <span class="selector-class">.recent-posts-list</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 更多文章按钮样式 */</span></span><br><span class="line"><span class="selector-class">.more-posts-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.more-posts-button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">72</span>, <span class="number">168</span>, <span class="number">241</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.9em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">52</span>, <span class="number">152</span>, <span class="number">219</span>, <span class="number">0.1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">52</span>, <span class="number">152</span>, <span class="number">219</span>, <span class="number">0.2</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">3px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">margin-left</span>: <span class="number">8px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 响应式调整 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.category-card</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">18px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">      <span class="attribute">flex-direction</span>: column;</span><br><span class="line">      <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">      </span><br><span class="line">      <span class="selector-class">.post-date</span> &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">        <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-24%20223804.png" alt="分类卡片效果"></p>
</li>
</ul>
<h2 id="点击更多文章后的文章列表实现"><a href="#点击更多文章后的文章列表实现" class="headerlink" title="点击更多文章后的文章列表实现"></a>点击更多文章后的文章列表实现</h2><ul>
<li><p>这部分主要基于原来的Index.swig，因为我觉得原来的风格就挺简洁好看的</p>
</li>
<li><p>找到themes&#x2F;next&#x2F;layout&#x2F;category.swig，改成：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;_layout.swig&#x27; %&#125;</span><br><span class="line">&#123;% import &#x27;_macro/sidebar.swig&#x27; as sidebar_template with context %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">  &#123;&#123; page.category &#125;&#125; | &#123;&#123; __(&#x27;title.category&#x27;) &#125;&#125; | &#123;&#123; config.title &#125;&#125;</span><br><span class="line">  &#123;%- if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123; config.subtitle &#125;&#125;&#123;%- endif %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block class %&#125;category posts-expand&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-title&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center; margin: 30px 0;&quot;</span>&gt;</span>//这里把分类名称置中了</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; page.category &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;%- for post in page.posts.toArray() %&#125;</span><br><span class="line">    &#123;&#123; partial(&#x27;_macro/post.swig&#x27;, &#123;post: post, is_index: true&#125;) &#125;&#125;</span><br><span class="line">  &#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;% include &#x27;_partials/pagination.swig&#x27; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-25%20000412-1749026329569-14.png" alt="文章列表效果"></p>
</li>
</ul>
<h2 id="删除文章侧边栏目录难看的下划线"><a href="#删除文章侧边栏目录难看的下划线" class="headerlink" title="删除文章侧边栏目录难看的下划线"></a>删除文章侧边栏目录难看的下划线</h2><ul>
<li><p>在themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;head.swig<strong>最后加上</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 强制移除目录下划线 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 覆盖所有可能的目录容器 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[class*=<span class="string">&quot;toc&quot;</span>]</span> <span class="selector-class">.nav-item</span> <span class="selector-tag">a</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[class*=<span class="string">&quot;TOC&quot;</span>]</span> <span class="selector-class">.nav-item</span> <span class="selector-tag">a</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.active</span> &gt; <span class="selector-tag">a</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.active-current</span> &gt; <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-bottom</span>: none <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-shadow</span>: none <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 覆盖伪元素下划线 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[class*=<span class="string">&quot;toc&quot;</span>]</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[class*=<span class="string">&quot;TOC&quot;</span>]</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-24%20225421.png" alt="消除下划线"></p>
</li>
</ul>
<h2 id="删除文末标签文字前的“-”"><a href="#删除文末标签文字前的“-”" class="headerlink" title="删除文末标签文字前的“#”"></a>删除文末标签文字前的“#”</h2><ul>
<li><p>先说文件：themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.swig</p>
</li>
<li><p>这个问题，网上找到的解决方法都是删掉11行的“#”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//这是原来的代码，可以ctrl+F搜post-footer</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;post-footer&quot;</span>&gt;</span></span><br><span class="line">    &#123;%- if post.tags and post.tags.length %&#125;</span><br><span class="line">      &#123;%- if theme.tag_icon %&#125;</span><br><span class="line">        &#123;%- set tag_indicate = &#x27;<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#x27; %&#125;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;%- set tag_indicate = &#x27;#&#x27; %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-tags&quot;</span>&gt;</span></span><br><span class="line">        &#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>#<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;%- endfor %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>但是删除后发现“#”还在。把代码给DS看了下，发现第7行把tag_indicate设成了“#”，删掉这个就可以了</p>
</li>
<li><p>效果：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-05-24%20235657-1749026142443-7.png" alt="删除“#”"></p>
</li>
</ul>
<h2 id="测试时阅读文章不计数"><a href="#测试时阅读文章不计数" class="headerlink" title="测试时阅读文章不计数"></a>测试时阅读文章不计数</h2><ul>
<li><p>2025.6.2 注：在NexT8后的版本，valine不被支持了</p>
</li>
<li><p>博客搭起来后一直有个问题，就是自己看自己的博客文章会被计数，最开始是用ublock屏蔽统计网站来实现，但是这两天测试了一下发现这个方法用手机访问也不会计数，这不就意味着统计功能瘫痪了吗😮</p>
</li>
<li><p>所以开始和DS老师探讨新方法。DS老师这人不咋行，好方案藏着掖着，拷问了半天才有了下面的简洁的方法：</p>
<ul>
<li><p>themes&#x2F;next&#x2F;layout&#x2F;_third-party&#x2F;comments&#x2F;valine.swig中，在new Valine({ })的括号里，把visitor设置成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">visitor    : (window.location.hostname === &#x27;localhost&#x27; || window.location.hostname === &#x27;127.0.0.1&#x27;) ? false : &#123;&#123; theme.valine.visitor &#125;&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>这样子，在hexo s下访问localhost查看文章不会被计数。DS说这是把hexo s和hexo d两个环境隔离了，所以说如果hexo s下出现文章阅读数为零的情况算正常（我就是这样）</p>
</li>
<li><p>当然了，如果要看阅读数，就要访问hexo d部署后的网站了，记得不要点进文章去看，不然还是会被计数</p>
</li>
<li><p>麻烦是麻烦了点，但功能至少是实现了</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>Re:从0到1的脚本之路</title>
    <url>/2025/06/02/Re-%E4%BB%8E0%E5%88%B01%E7%9A%84%E8%84%9A%E6%9C%AC%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p>python脚本做题记录</p>
<span id="more"></span>

<h2 id="SWPUCTF-2021-新生赛-fakebase"><a href="#SWPUCTF-2021-新生赛-fakebase" class="headerlink" title="[SWPUCTF 2021 新生赛]fakebase"></a>[SWPUCTF 2021 新生赛]fakebase</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#给的代码如下：</span></span><br><span class="line">flag = <span class="string">&#x27;xxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line"></span><br><span class="line">s_box = <span class="string">&#x27;qwertyuiopasdfghjkzxcvb123456#$&#x27;</span></span><br><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    tmp += <span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">ord</span>(i)))[<span class="number">2</span>:].zfill(<span class="number">8</span>)</span><br><span class="line">b1 = <span class="built_in">int</span>(tmp,<span class="number">2</span>)</span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> b1//<span class="number">31</span> != <span class="number">0</span>:</span><br><span class="line">    s += s_box[b1%<span class="number">31</span>]</span><br><span class="line">    b1 = b1//<span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s = u#k4ggia61egegzjuqz12jhfspfkay</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>代码中，把flag逐字符转化为二进制，截掉前缀，填充为8位，再拼接这些二进制数得到tmp</p>
</li>
<li><p>然后把tmp转化为十进制b1，不断除31，同时用余数做S_box索引，把索引值拼接得到S</p>
</li>
<li><p>所以，解密思路是，首先，还原b1：</p>
<ul>
<li>b1利用后得到一系列索引值，所以由索引值反推b1</li>
<li>逆序s对照s_box得出索引（为了从最后一个余数开始还原b1）并组成一个列表。因为循环终止条件是b1&#x2F;&#x2F;31&#x3D;&#x3D;0，所以最后一次除只利用了商等于0，而余数未知，于是从0-30假设被弃掉的余数，枚举各种可能。</li>
</ul>
</li>
<li><p>而如何判断哪种可能是我们需要的呢？就需要还原出flag并判断。把还原出来的b1转二进制，去掉前缀，填充到8的倍数方便截取二进制数，然后8个8个还原出字符，最后判断是不是flag就行了。</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">buf=<span class="string">&quot;u#k4ggia61egegzjuqz12jhfspfkay&quot;</span></span><br><span class="line">s_box = <span class="string">&#x27;qwertyuiopasdfghjkzxcvb123456#$&#x27;</span></span><br><span class="line"></span><br><span class="line">index_list=[]</span><br><span class="line"><span class="comment">#求索引值列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> buf[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s_box)):</span><br><span class="line">        <span class="keyword">if</span> i == s_box[j]:</span><br><span class="line">           index_list.append(j)</span><br><span class="line"><span class="comment">#print(index_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#枚举达到终止条件时的余数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>):</span><br><span class="line">    <span class="comment">#开始还原b1</span></span><br><span class="line">    b1=i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buf)):</span><br><span class="line">        b1=b1*<span class="number">31</span>+index_list[j]<span class="comment">#不断加余数，乘31</span></span><br><span class="line">    tmp=<span class="built_in">str</span>(<span class="built_in">bin</span>(b1)[<span class="number">2</span>:])<span class="comment">#加密流程是把tmp从2进制转10进制，这里就反着来，把b1从10进制转2进制，截去前缀</span></span><br><span class="line">    tmp=tmp.zfill((<span class="built_in">len</span>(tmp)//<span class="number">8</span>+<span class="number">1</span>)*<span class="number">8</span>)<span class="comment">#加密时字符转成8位2进制数，反着来就是把8位2进制数转为字符，所以先把tmp 8位对齐方便后续截取</span></span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(tmp),<span class="number">8</span>):</span><br><span class="line">        flag+=<span class="built_in">chr</span>(<span class="built_in">int</span>(tmp[i:i+<span class="number">8</span>],<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;NSSCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#flag = &quot;NSSCTF&#123;WHAt_BASe31&#125;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="SWPUCTF-2021-新生赛-非常简单的逻辑题"><a href="#SWPUCTF-2021-新生赛-非常简单的逻辑题" class="headerlink" title="[SWPUCTF 2021 新生赛]非常简单的逻辑题"></a>[SWPUCTF 2021 新生赛]非常简单的逻辑题</h2><ul>
<li><p>题目给的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&#x27;xxxxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;wesyvbniazxchjko1973652048@$+-&amp;*&lt;&gt;&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    s1 = <span class="built_in">ord</span>(flag[i])//<span class="number">17</span></span><br><span class="line">    s2 = <span class="built_in">ord</span>(flag[i])%<span class="number">17</span></span><br><span class="line">    result += s[(s1+i)%<span class="number">34</span>]+s[-(s2+i+<span class="number">1</span>)%<span class="number">34</span>]</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># result = &#x27;v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>加密思路是：逐字符取flag，通过&#x2F;&#x2F;和%操作得到两个值s1和s2，把这两个值处理后，作为索引在s中索引出字符，拼接得到result</p>
</li>
<li><p>逆着来应该是把result错位分开，分成和s1有关的与和s2有关的，然后求出索引值，逆两个取余过程得到s1和s2，再把s1和s2运算得到flag字符</p>
</li>
<li><p>很显然，这个过程十分复杂，因为涉及取模的还原</p>
</li>
<li><p>所以考虑顺着加密的思路走，从常见的字符十进制值枚举，遇到加密后结果和result一样的就拿来拼接flag</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;wesyvbniazxchjko1973652048@$+-&amp;*&lt;&gt;&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i&#x27;</span></span><br><span class="line">tmp=<span class="string">&#x27;&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#提取出result里和s1、s2相关的字符</span></span><br><span class="line">s1_list=[]</span><br><span class="line">s2_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(result),<span class="number">2</span>):</span><br><span class="line">    s1_list.append(result[i])</span><br><span class="line">    s2_list.append(result[i+<span class="number">1</span>])</span><br><span class="line"><span class="comment">#开始爆破</span></span><br><span class="line"><span class="comment">#先求出加密过程两个索引值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s1_list)):</span><br><span class="line">    index1=s.index(s1_list[i])</span><br><span class="line">    index2=s.index(s2_list[i])</span><br><span class="line">    <span class="comment">#以索引值为判断条件，在常见字符的范围内重现加密过程，加密结果和索引值一致即为flag的字符</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">126</span>):</span><br><span class="line">        s1=j//<span class="number">17</span></span><br><span class="line">        s2=j%<span class="number">17</span></span><br><span class="line">        <span class="keyword">if</span> (s1 + i) % <span class="number">34</span>==index1 <span class="keyword">and</span> -(s2 + i + <span class="number">1</span>) % <span class="number">34</span>==index2:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &quot;NSSCTF&#123;Fake_RERE_QAQ&#125;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="SWPUCTF-2021-新生赛-re2"><a href="#SWPUCTF-2021-新生赛-re2" class="headerlink" title="[SWPUCTF 2021 新生赛]re2"></a>[SWPUCTF 2021 新生赛]re2</h2><ul>
<li><p>IDA打开，代码如下：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-13%20214924.png" alt="RE2"></p>
</li>
<li><p>简单的字符处理，先判断字符是否在范围内，然后采用不同处理方式</p>
</li>
<li><p>直接正向利用代码，省点脑子。</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alpha=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&#123;&#125;-_&#x27;</span></span><br><span class="line">dic=&#123;&#125;</span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;ylqq]aycqyp&#123;&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ord</span>(i)&lt;=<span class="number">96</span> <span class="keyword">or</span> <span class="built_in">ord</span>(i)&gt;<span class="number">98</span>) <span class="keyword">and</span> (<span class="built_in">ord</span>(i)&lt;=<span class="number">64</span> <span class="keyword">or</span> <span class="built_in">ord</span>(i)&gt;<span class="number">66</span>):</span><br><span class="line">        dic[<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)-<span class="number">2</span>)]=i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dic[<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)+<span class="number">24</span>)]=i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    flag+=dic[i]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;nss_caesar&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>直接得出来的结果是{nss_c{es{r}，显然不对，猜测对应关系不唯一。打印出alpha经过处理后的结果，发现’{‘和’a’都对应’y’，所以把显然不对劲的两个’ { ‘改成’ a ‘</p>
</li>
</ul>
<h2 id="WUSTCTF-2020-level1"><a href="#WUSTCTF-2020-level1" class="headerlink" title="[WUSTCTF 2020]level1"></a>[WUSTCTF 2020]level1</h2><ul>
<li><p>附件给了ELF文件和一个txt，反汇编代码如下：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-14%20214810.png" alt="LEVEL1"></p>
</li>
<li><p>逻辑就是从flag文件里读数据，然后存到ptr里。后面是简单的可逆处理，但是要注意ptr是从下标1开始用的。给的txt应该就是处理后的结果，把它转成一个列表，第一位随便填一个数。然后逆。</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output=[<span class="number">0</span>, <span class="number">198</span>, <span class="number">232</span>, <span class="number">816</span>, <span class="number">200</span>, <span class="number">1536</span>, <span class="number">300</span>, <span class="number">6144</span>, <span class="number">984</span>, <span class="number">51200</span>, <span class="number">570</span>, <span class="number">92160</span>, <span class="number">1200</span>, <span class="number">565248</span>, <span class="number">756</span>, <span class="number">1474560</span>, <span class="number">800</span>, <span class="number">6291456</span>, <span class="number">1782</span>, <span class="number">65536000</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">if</span> (i&amp;<span class="number">1</span>)!=<span class="number">0</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(output[i]&gt;&gt;i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(output[i]//i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;d9-dE6-20c&#125;&#x27;（改了前缀）</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="SWPUCTF-2021-新生赛-简简单单的解密"><a href="#SWPUCTF-2021-新生赛-简简单单的解密" class="headerlink" title="[SWPUCTF 2021 新生赛]简简单单的解密"></a>[SWPUCTF 2021 新生赛]简简单单的解密</h2><ul>
<li><p>给的python代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64,urllib.parse</span><br><span class="line">key = <span class="string">&quot;HereIsFlagggg&quot;</span></span><br><span class="line">flag = <span class="string">&quot;xxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line">s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">    s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">res = []</span><br><span class="line">i = j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> flag:</span><br><span class="line">    i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">    j = (j + s_box[i]) % <span class="number">256</span></span><br><span class="line">    s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    t = (s_box[i] + s_box[j]) % <span class="number">256</span></span><br><span class="line">    k = s_box[t]</span><br><span class="line">    res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">crypt = (<span class="built_in">str</span>(base64.b64encode(cipher.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">enc = <span class="built_in">str</span>(base64.b64decode(crypt),<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">enc = urllib.parse.quote(enc)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment"># enc = %C2%A6n%C2%87Y%1Ag%3F%C2%A01.%C2%9C%C3%B7%C3%8A%02%C3%80%C2%92W%C3%8C%C3%BA</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>采用的加密算法是标准RC4，加密两遍恢复明文。最后面的调用base的两行经过调试发现相互抵消，所以整个逻辑就是先RC4加密，然后用urllib.parse.quote()方法编码，编码部分用原库自带的urllib.parse.unquote()就行了</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">enc = <span class="string">&#x27;%C2%A6n%C2%87Y%1Ag%3F%C2%A01.%C2%9C%C3%B7%C3%8A%02%C3%80%C2%92W%C3%8C%C3%BA&#x27;</span></span><br><span class="line">buf=urllib.parse.unquote(enc)</span><br><span class="line">result=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> buf:</span><br><span class="line">    result.append(i)</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;HereIsFlagggg&quot;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RC4</span>(<span class="params">flag</span>):</span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> flag:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s_box[i]) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">        t = (s_box[i] + s_box[j]) % <span class="number">256</span></span><br><span class="line">        k = s_box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line">flag+=RC4(result)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag = &#x27;NSSCTF&#123;REAL_EZ_RC4&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="LitCTF-2023-ez-XOR"><a href="#LitCTF-2023-ez-XOR" class="headerlink" title="[LitCTF 2023]ez_XOR"></a>[LitCTF 2023]ez_XOR</h2><ul>
<li><p>IDA打开，如图</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20215658.png" alt="ez_XOR"></p>
</li>
<li><p>用XOR函数对输入做处理后，与str比较。打开XOR：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20215712.png" alt="function_xor"></p>
</li>
<li><p>功能就是遍历字符，异或处理，再异或一遍就可以了</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;E`&#125;J]OrQF[V8zV:hzpV&#125;fVF[t&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="built_in">str</span>[i])^<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag = &#x27;NSSCTF&#123;XOR_1s_3asy_to_OR&#125;&#x27;(前缀做了改动)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="HUBUCTF-2022-新生赛-simple-RE"><a href="#HUBUCTF-2022-新生赛-simple-RE" class="headerlink" title="[HUBUCTF 2022 新生赛]simple_RE"></a>[HUBUCTF 2022 新生赛]simple_RE</h2><ul>
<li><p>IDA打开，如图</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20223128.png" alt="simpleRE"></p>
</li>
<li><p>加密函数看起来逻辑很复杂，但是点开名字很奇怪的数组，发现一个编码表，可以推测是base64编码。</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20223308.png" alt="加密函数"></p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20223321.png" alt="编码表"></p>
</li>
<li><p>回过头看给的用来比较的字符串，基本可以确定是base64换表编码</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-15%20223431.png" alt="预设字符串"></p>
</li>
<li><p>找到了一个可以自定义编码表的python库cusbase64，可以用config指定编码表，这样就容易多了</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cusbase64</span><br><span class="line">table=<span class="string">&#x27;qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD&#x27;</span></span><br><span class="line">enc=<span class="string">&#x27;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM/8==&#x27;</span></span><br><span class="line">b=cusbase64.CusBase64()</span><br><span class="line">b.config(table)</span><br><span class="line">b.decode(enc)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;a8d4347722800e72e34e1aba3fe914ae&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="NSSCTF-2022-Spring-Recruit-easy-C"><a href="#NSSCTF-2022-Spring-Recruit-easy-C" class="headerlink" title="[NSSCTF 2022 Spring Recruit]easy C"></a>[NSSCTF 2022 Spring Recruit]easy C</h2><ul>
<li><p>题目给的是c源文件，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main()&#123;</span><br><span class="line">    char a[]=<span class="string">&quot;wwwwwww&quot;</span>;</span><br><span class="line">    char b[]=<span class="string">&quot;d`vxbQd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    //<span class="keyword">try</span> to find out the flag</span><br><span class="line">    printf(<span class="string">&quot;please input flag:&quot;</span>);</span><br><span class="line">    scanf(<span class="string">&quot; %s&quot;</span>,&amp;a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen(a)!=<span class="number">7</span>)&#123;</span><br><span class="line">        printf(<span class="string">&quot;NoNoNo\n&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">        a[i]++;</span><br><span class="line">        a[i]=a[i]^<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!strcmp(a,b))&#123;</span><br><span class="line">        printf(<span class="string">&quot;good!\n&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(<span class="string">&quot;NoNoNo\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    //flag 记得包上 NSSCTF&#123;&#125; 再提交!!!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分析逻辑，把输入的flag按字符先递增，再和2异或，得到的新数组应该和b一样。逆着来就是先异或再递减。</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;d`vxbQd&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    flag+=<span class="built_in">chr</span>((<span class="built_in">ord</span>(i)^<span class="number">2</span>)-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;easy_Re&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="NSSCTF-2022-Spring-Recruit-easy-Python"><a href="#NSSCTF-2022-Spring-Recruit-easy-Python" class="headerlink" title="[NSSCTF 2022 Spring Recruit]easy Python"></a>[NSSCTF 2022 Spring Recruit]easy Python</h2><ul>
<li><p>题目给的py源码，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">string,string2</span>):</span><br><span class="line">    tmp_str = <span class="built_in">str</span>()</span><br><span class="line">    ret = <span class="built_in">str</span>()</span><br><span class="line">    bit_string_str = string.encode()</span><br><span class="line">    remain = <span class="built_in">len</span>( string ) % <span class="number">3</span></span><br><span class="line">    remain_str = <span class="built_in">str</span>()</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> bit_string_str:</span><br><span class="line">        b_char = (<span class="built_in">bin</span>(char)[<span class="number">2</span>:])</span><br><span class="line">        b_char = <span class="string">&#x27;0&#x27;</span>*(<span class="number">8</span>-<span class="built_in">len</span>(b_char)) + b_char</span><br><span class="line">        tmp_str += b_char</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp_str)//<span class="number">6</span>):</span><br><span class="line">        temp_nub = <span class="built_in">int</span>(tmp_str[i*<span class="number">6</span>:<span class="number">6</span>*(i+<span class="number">1</span>)],<span class="number">2</span>)</span><br><span class="line">        ret += string2[temp_nub]</span><br><span class="line">    <span class="keyword">if</span> remain==<span class="number">2</span>:</span><br><span class="line">        remain_str = tmp_str[-<span class="number">4</span>:] + <span class="string">&#x27;0&#x27;</span>*<span class="number">2</span></span><br><span class="line">        temp_nub = <span class="built_in">int</span>(remain_str,<span class="number">2</span>)</span><br><span class="line">        ret += string2[temp_nub] + <span class="string">&quot;=&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> remain==<span class="number">1</span>:</span><br><span class="line">        remain_str = tmp_str[-<span class="number">2</span>:] + <span class="string">&#x27;0&#x27;</span>*<span class="number">4</span></span><br><span class="line">        temp_nub = <span class="built_in">int</span>(remain_str,<span class="number">2</span>)</span><br><span class="line">        ret += string2[temp_nub] + <span class="string">&quot;=&quot;</span>*<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> ret.replace(<span class="string">&quot;=&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">res = encode(<span class="built_in">input</span>(),string.ascii_uppercase+string.ascii_lowercase+string.digits+<span class="string">&#x27;+/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> res == <span class="string">&quot;TlNTQ1RGe2Jhc2U2NCEhfQ&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;good!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bad!&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>细细一看，encode()里面有加“&#x3D;”的操作，并且使用的string2是字母大小写+数字+’+&#x2F;‘，推测是base64，但是注意到encode()返回的时候把“&#x3D;”替换成了“”，也就是删除了“&#x3D;&#x3D;”，所以要把后面用于比较的也就是加密后的字符串加上“&#x3D;”</p>
</li>
<li><p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pybase64</span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;TlNTQ1RGe2Jhc2U2NCEhfQ==&#x27;</span></span><br><span class="line">flag=pybase64.b64decode(<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;base64!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="SWPUCTF-2021-新生赛-fakerandom"><a href="#SWPUCTF-2021-新生赛-fakerandom" class="headerlink" title="[SWPUCTF 2021 新生赛]fakerandom"></a>[SWPUCTF 2021 新生赛]fakerandom</h2><ul>
<li><p>依旧是Py源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">flag = <span class="string">&#x27;xxxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    l.append(random.getrandbits(<span class="number">8</span>))</span><br><span class="line">result=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l)):</span><br><span class="line">    random.seed(l[i])</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        result.append(<span class="built_in">ord</span>(flag[i*<span class="number">5</span>+n])^random.getrandbits(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># result = [201, 8, 198, 68, 131, 152, 186, 136, 13, 130, 190, 112, 251, 93, 212, 1, 31, 214, 116, 244]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>逻辑就是，用生成的伪随机数来异或flag的特定位。异或可逆，已知种子，伪随机数可以确定。所以只需要在源码的基础上稍作改动，把result和flag的位置调换一下就可以了</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">result = [<span class="number">201</span>, <span class="number">8</span>, <span class="number">198</span>, <span class="number">68</span>, <span class="number">131</span>, <span class="number">152</span>, <span class="number">186</span>, <span class="number">136</span>, <span class="number">13</span>, <span class="number">130</span>, <span class="number">190</span>, <span class="number">112</span>, <span class="number">251</span>, <span class="number">93</span>, <span class="number">212</span>, <span class="number">1</span>, <span class="number">31</span>, <span class="number">214</span>, <span class="number">116</span>, <span class="number">244</span>]</span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    l.append(random.getrandbits(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l)):</span><br><span class="line">    random.seed(l[i])</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        flag+=<span class="built_in">chr</span>(result[i*<span class="number">5</span>+n]^random.getrandbits(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;FakeE_random&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="HNCTF-2022-Week1-X0r"><a href="#HNCTF-2022-Week1-X0r" class="headerlink" title="[HNCTF 2022 Week1]X0r"></a>[HNCTF 2022 Week1]X0r</h2><ul>
<li><p>IDA打开，main函数如下：</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-22%20214614.png" alt="main函数"></p>
<p>可以看出，逻辑就是对输入的字符串按字符异或处理，最后与给定的arr比较</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">0x000003FE</span>, <span class="number">0x000003EB</span>, <span class="number">0x000003EB</span>, <span class="number">0x000003FB</span>, <span class="number">0x000003E4</span>, <span class="number">0x000003F6</span>, <span class="number">0x000003D3</span>, <span class="number">0x000003D0</span>, <span class="number">0x00000388</span>, <span class="number">0x000003CA</span>, <span class="number">0x000003EF</span>, <span class="number">0x00000389</span>, <span class="number">0x000003CB</span>, <span class="number">0x000003EF</span>, <span class="number">0x000003CB</span>, <span class="number">0x00000388</span>, <span class="number">0x000003EF</span>, <span class="number">0x000003D5</span>, <span class="number">0x000003D9</span>, <span class="number">0x000003CB</span>, <span class="number">0x000003D1</span>, <span class="number">0x000003CD</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(arr)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>((arr[i]-<span class="number">900</span>)^<span class="number">0x34</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">flag = <span class="string">&#x27;NSSCTF&#123;x0r_1s_s0_easy&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="HGAME-2023-week1-easyenc"><a href="#HGAME-2023-week1-easyenc" class="headerlink" title="[HGAME 2023 week1]easyenc"></a>[HGAME 2023 week1]easyenc</h2><ul>
<li><p>IDA打开，main函数如图</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-25%20214452.png" alt="main函数"></p>
</li>
<li><p>可以看到逻辑就是先遍历出输入字符串的长度（ * ( ( _BYTE *) v9 + v4 )这样的格式可以看成：v9[v4]，算是一种经验吧）然后循环对输入的字符串按字符进行运算，最后与给定的数据比较。</p>
</li>
<li><p>难点在于，给的是10个元素的数组，而输入的字符串却要求是41个字符。看来V7的格式不是很对，要把这么多位的数据进行划分才行。v7是DWORD类型，而参与运算的v9用的是BYTE类型，1DWORD&#x3D;4BYTE，要把v7的数分成4部分，这里的数据不好提取，可以直接丢给AI。当然手动复制也可以。</p>
</li>
<li><p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">buf=[<span class="number">0x9FDFF04</span>,<span class="number">0xB0F301</span>,<span class="number">0xADF00500</span>,<span class="number">0x5170607</span>,<span class="number">0x17FD17EB</span>,<span class="number">0x1EE01EA</span>,<span class="number">0xFA05B1EA</span>,<span class="number">0xAC170108</span>,<span class="number">0xFDEA01EC</span>,<span class="number">0x60705F0</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">buf1 = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> buf:</span><br><span class="line">    bytes_data = num.to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> bytes_data:</span><br><span class="line">        buf1.append(<span class="built_in">hex</span>(byte))</span><br><span class="line"><span class="comment">#print(buf1)</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> buf1:</span><br><span class="line">    tmp=((<span class="built_in">int</span>(num,<span class="number">16</span>)+<span class="number">86</span>)^<span class="number">0x32</span>)&amp;<span class="number">0xff</span></span><br><span class="line">    flag+=<span class="built_in">chr</span>(tmp)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag = &#x27;NSSCTF&#123;4ddit1on_is_a_rever5ible_0peration&#125;&#x27;（修改了前缀）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当然得多学一点，所以手搓v7，找DS问一下怎么处理数据，得到如上的方法。</p>
<ul>
<li><p>用to_bytes把v7的数转成字节形式，byteorder指定了小端序，然后hex转换成十六进制数存入新列表。至于为什么要转成十六进制数，和下面的代码有关。</p>
</li>
<li><p>然后用新列表的元素进行逆运算。因为直接使用这些元素会被判成字符，所以前面先转成十六进制数，再用int转成十进制数，这样就可以正常运算了</p>
</li>
<li><p>最后还要&amp;0xff，因为逆出来的数据有点超出ascii码范围了</p>
</li>
<li><p>还有就是，这样得出来的flag其实缺了一个“ } ”。回头看反编译的代码，那个未命名的用来输入v9的实际上不是纯粹的scanf那样的函数。里面有个FILE指针，推测是读文件的函数。所以读取的内容结尾按道理会有’\0’。但是，加上了’\0’算出来的flag也没有’ } ‘。所以，凭常识加上’ } ‘。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>RELearning</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次blog重建</title>
    <url>/2025/06/05/%E8%AE%B0%E4%B8%80%E6%AC%A1blog%E9%87%8D%E5%BB%BA/</url>
    <content><![CDATA[<p>部署Vercel失误后的blog重建（基于hexo+NexT8.23.0，采用utterances评论系统和firestore数据记录）</p>
<span id="more"></span>

<ul>
<li>OK，这是笔者在依赖AI盲目把博客部署到Vercel上导致博客崩溃后的博客重建记录</li>
<li>记录的原因首先是更新“记一次blog优化”的内容，还有新版本NexT的一些个人配置（新版本NexT的教程好像不多，评论系统和访客计数系统要自己琢磨好一会儿）</li>
</ul>
<h2 id="首页分类卡片实现"><a href="#首页分类卡片实现" class="headerlink" title="首页分类卡片实现"></a>首页分类卡片实现</h2><ul>
<li><p>因为是对“记一次blog优化”的更新，所以这部分直接贴代码了（注：区别更多是在文件名从swig变成了njk）</p>
<p>themes&#x2F;next&#x2F;layout&#x2F;index.njk：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;_layout.njk&#x27; %&#125;</span><br><span class="line">&#123;% import &#x27;_macro/sidebar.njk&#x27; as sidebar_template with context %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;&#123; title &#125;&#125;&#123;%- if theme.index_with_subtitle and subtitle %&#125; - &#123;&#123; subtitle &#125;&#125;&#123;%- endif %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block class %&#125;index categories-page&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 这部分是实现category卡片，最后面还有没category的文章的处理，因为我严格了每篇文章有category，就没管画面如何了 #&#125;</span><br><span class="line">&#123;% if site.categories.length &gt; 0 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-cards-container&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for cat in site.categories.toArray() %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-card&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;category-name&quot;</span>&gt;</span>&#123;&#123; cat.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-count&quot;</span>&gt;</span>&#123;&#123; cat.posts.length &#125;&#125;篇文章<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;# 这一部分实现卡片显示包含的文章的标题，数量可以改下面的limit()的数字 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-posts-list&quot;</span>&gt;</span></span><br><span class="line">      &#123;% for post in cat.posts.sort(&#x27;date&#x27;, -1).limit(3).toArray() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-post-item&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;post-title&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; post.title &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; post.title | truncate(18) &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-date&quot;</span>&gt;</span></span><br><span class="line">			&#123;% if post.updated %&#125; </span><br><span class="line">				&#123;&#123; post.updated.format(&#x27;MM/DD&#x27;) &#125;&#125;</span><br><span class="line">			&#123;% else %&#125;</span><br><span class="line">				&#123;&#123; post.date.format(&#x27;MM/DD&#x27;) &#125;&#125;</span><br><span class="line">			&#123;% endif %&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;more-posts-wrapper&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;/categories/&#x27; + cat.name + &#x27;/&#x27;) &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;more-posts-button&quot;</span>&gt;</span></span><br><span class="line">		更多文章 →</span><br><span class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no-categories-notice&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>暂无分类数据，请为文章添加分类<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>source&#x2F;_data&#x2F;styles.styl：</p>
<p>得先在next&#x2F;config.yml里打开这个文件的支持（可能是新特性吧，笔者记得之前没改过config设置就有这个文件了，但是现在得打开支持并手动创建_data文件夹和styles.styl等文件），在custom_file_path里删除style的注释</p>
<p><img src="/../images/image-20250605144828365.png" alt="打开文件支持"></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 分类卡片样式 - 安全追加 */</span></span><br><span class="line"><span class="selector-class">.category-cards-container</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.category-card</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.85</span>); <span class="comment">/* 半透明白色，与你的opacity 0.85协调 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">    <span class="attribute">backdrop-filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>); <span class="comment">/* 毛玻璃效果增强背景融合 */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>); <span class="comment">/* 柔和边框 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">5px</span>);</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.15</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.category-name</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post-count</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#7f8c8d</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">0.9em</span>;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这部分是我自己用的背景图的设置 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(/images/background.jpg);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ======================== */</span></span><br><span class="line"><span class="comment">/* 分类卡片内的文章列表样式 */</span></span><br><span class="line"><span class="comment">/* ======================== */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category-card</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative; <span class="comment">/* 为毛玻璃效果提供定位上下文 */</span></span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.category-header</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.08</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.recent-posts-list</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">3px</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.post-title</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#34495e</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0.95em</span>;</span><br><span class="line">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#3498db</span>;</span><br><span class="line">          <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.post-date</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#95a5a6</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span><br><span class="line">        <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  * &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.category-header</span>, </span><br><span class="line">  <span class="selector-class">.recent-post-item</span>, </span><br><span class="line">  <span class="selector-class">.recent-posts-list</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 更多文章按钮样式 */</span></span><br><span class="line"><span class="selector-class">.more-posts-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.more-posts-button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">72</span>, <span class="number">168</span>, <span class="number">241</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.9em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">52</span>, <span class="number">152</span>, <span class="number">219</span>, <span class="number">0.1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">52</span>, <span class="number">152</span>, <span class="number">219</span>, <span class="number">0.2</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">3px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">margin-left</span>: <span class="number">8px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 响应式调整 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.category-card</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">18px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">      <span class="attribute">flex-direction</span>: column;</span><br><span class="line">      <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">      </span><br><span class="line">      <span class="selector-class">.post-date</span> &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">        <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.posts-<span class="attribute">container</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果请见“记一次blog优化”</p>
</li>
</ul>
<h2 id="点击更多文章后的文章列表实现"><a href="#点击更多文章后的文章列表实现" class="headerlink" title="点击更多文章后的文章列表实现"></a>点击更多文章后的文章列表实现</h2><ul>
<li><p>仍然是基于原来的Index.njk</p>
</li>
<li><p>themes&#x2F;next&#x2F;layout&#x2F;category.njk：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;_layout.njk&#x27; %&#125;</span><br><span class="line">&#123;% import &#x27;_macro/sidebar.njk&#x27; as sidebar_template with context %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125; </span><br><span class="line">&#123;&#123; page.category &#125;&#125; | &#123;&#123; __(&#x27;title.category&#x27;) &#125;&#125; | &#123;&#123; config.title &#125;&#125;</span><br><span class="line">&#123;% if theme.index_with_subtitle and subtitle %&#125; - &#123;&#123; subtitle &#125;&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block class %&#125;index posts-expand&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-title&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center; margin: 30px 0;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; page.category &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;# 新增包裹容器并添加间距 class PS:这一部分是个人感觉列表太贴近侧边栏了，所以和首页分类卡片的位置设置保持一致了#&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;posts-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 30px ;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;%- for post in page.posts.toArray() %&#125;</span><br><span class="line">    &#123;&#123; partial(&#x27;_macro/post.njk&#x27;, &#123;post: post, is_index: true&#125;) &#125;&#125;</span><br><span class="line">  &#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- include &#x27;_partials/pagination.njk&#x27; -%&#125;</span><br><span class="line">  </span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果仍见上一篇博客</p>
</li>
</ul>
<h2 id="删除侧边栏目录下划线与文末标签的“-”"><a href="#删除侧边栏目录下划线与文末标签的“-”" class="headerlink" title="删除侧边栏目录下划线与文末标签的“#”"></a>删除侧边栏目录下划线与文末标签的“#”</h2><ul>
<li>这两个部分没有变动，除了文件名的后缀改变了，其余都一样。详见上一篇博客。</li>
</ul>
<h2 id="utterances评论系统"><a href="#utterances评论系统" class="headerlink" title="utterances评论系统"></a>utterances评论系统</h2><ul>
<li><p>新版本NexT已经不支持valine了，给的选项只有：</p>
<p><img src="/../images/image-20250605150357372.png" alt="评论系统选项"></p>
</li>
<li><p>所以笔者选了utterances。这个系统好像和github有点关系</p>
</li>
<li><p>在next&#x2F;config.yml的comments里把active改成utterances</p>
<p><img src="/../images/image-20250605150655597.png" alt="选择utterances"></p>
</li>
<li><p>然后需要给github仓库安装utterances，访问<a href="https://github.com/apps/utterances">https://github.com/apps/utterances</a> ，然后点击Install</p>
<p><img src="/../images/image-20250605185949763.png" alt="install utterances"></p>
</li>
<li><p>在跳转的页面勾选only select repositories，然后选择博客仓库</p>
<p><img src="/../images/image-20250605190153428.png" alt="select repositories"></p>
</li>
<li><p>点击install就可以了</p>
</li>
<li><p>要注意的是，hexo s下是调试不了这个功能的（虽然不知道我为什么要在hexo s下调试这个功能），会报错，但是部署后是可以正常工作的</p>
</li>
</ul>
<h2 id="firestore统计访问人数"><a href="#firestore统计访问人数" class="headerlink" title="firestore统计访问人数"></a>firestore统计访问人数</h2><ul>
<li><p>NexT8.23.0不支持Valine了，得重新选择数据统计系统。firestore是google的产品，因此需要科学上网。</p>
</li>
<li><p>参考大佬博客：<a href="https://weirenxue.github.io/2021/06/11/hexo_next_firestore_visitors/">https://weirenxue.github.io/2021/06/11/hexo_next_firestore_visitors/</a>  步骤很简洁完整了，但是个人实现的时候会有一些问题，接下来详细介绍相关步骤</p>
</li>
<li><p>首先，在next&#x2F;config.yml里启用firestore：</p>
<p><img src="/../images/image-20250605192012733.png" alt="启用firestore"></p>
</li>
<li><p>有两个空需要填写，apikey和projectId。不急，需要先有firestore的项目。接下来访问firebase：<a href="https://console.firebase.google.com/">https://console.firebase.google.com/</a>  （科学上网）</p>
</li>
<li><p>登录后点击“创建项目”</p>
<p><img src="/../images/image-20250605192451907.png" alt="创建项目"></p>
</li>
<li><p>接下来按照引导走下去，开发者计划、AI辅助、google analytics根据个人需求选择，点击继续并稍等片刻就创建成功了。</p>
<p><img src="/../images/image-20250605192821032.png" alt="创建成功"></p>
</li>
<li><p>点击新项目，在左上角“项目概述”里点“项目设置”</p>
<p><img src="/../images/image-20250605193218565.png" alt="项目设置"></p>
<p>这时候可以看见项目ID等信息了，但是api还没有显示</p>
<p><img src="/../images/image-20250605193311734.png" alt="项目设置信息"></p>
</li>
<li><p>接下来在左侧边栏“构建”里找到“Authentication”，点击“开始”（哇，这个界面设置我还以为google不让手动设置只能用AI了，瞎按了半天才知道点”开始”）</p>
<p><img src="/../images/image-20250605193844508.png" alt="Authentication"></p>
</li>
<li><p>接下来选择登陆方式登录即可。我选择谷歌，点击右上角启用，项目公开名称默认即可，项目支持邮箱选择个人谷歌邮箱</p>
<p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-06-05%20194506.png" alt="登录"></p>
</li>
<li><p>回到项目设置页面，可以看到api已经出现了</p>
<p><img src="/../images/image-20250605210227422.png" alt="api出现"></p>
</li>
<li><p>接下来就可以把next&#x2F;config.yml里的projectId和apiKey填上了</p>
</li>
<li><p>然后打开左侧边栏“构建”里的“Firestore Database”，点击“创建数据库”</p>
<p><img src="/../images/image-20250605210959567.png" alt="创建数据库"></p>
</li>
<li><p>接下来的页面，设置位置（数据库ID似乎不能改动），然后下一步</p>
<p><img src="/../images/image-20250605211218445.png" alt="设置位置"></p>
</li>
<li><p>接下来选择测试模式，等待预配Cloud Firestore</p>
<p><img src="/../images/image-20250605211444337.png" alt="选择测试模式"></p>
</li>
<li><p>加载成功后长这样</p>
<p><img src="/../images/image-20250605211643158.png" alt="database创建成功后"></p>
</li>
<li><p>接下来重新部署博客后就可以测试计数机制是否正常了。但是笔者在这一步折腾了很久，因为调试的时候发现：</p>
<p>1.数据库的信息在第一次启用计数机制后会自动生成，但是对这些信息进行改动后计数机制就失效了  </p>
<p>2.即使在莫名其妙的情况下（可能是关闭firestore配置后再次开启的情况）重新初始化了数据库，计数1次之后再怎么访问（如刷新、关闭页面重新打开）也不会记录第2次  </p>
</li>
<li><p>还有一些调试过程发现的问题，但是调试过程太乱了不好描述，所以下面直接指出问题并给出解决方案</p>
</li>
<li><p>首先，firestore的计数机制有点特别，它使用了localStorage来判断是否访问过文章，如果访问过文章，将不会出现第二次计数的情况（永远不会，除非重置localStorage）。这也解释了为什么改动数据信息后计数机制会失效：因为没有第二次计数，所以数据库信息不会再更新。因此需要对计数机制进行一些优化，优化方案来自DeepSeek，需要改动的配置为next&#x2F;source&#x2F;js&#x2F;third-party&#x2F;statistics&#x2F;firestore.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global CONFIG, firebase */</span></span><br><span class="line"></span><br><span class="line">firebase.<span class="title function_">initializeApp</span>(&#123;</span><br><span class="line">  apiKey   : <span class="variable constant_">CONFIG</span>.<span class="property">firestore</span>.<span class="property">apiKey</span>,</span><br><span class="line">  <span class="attr">projectId</span>: <span class="variable constant_">CONFIG</span>.<span class="property">firestore</span>.<span class="property">projectId</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getCount</span> = (<span class="params">doc, increaseCount</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// IncreaseCount will be false when not in article page</span></span><br><span class="line">    <span class="keyword">return</span> doc.<span class="title function_">get</span>().<span class="title function_">then</span>(<span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Has no data, initialize count</span></span><br><span class="line">      <span class="keyword">let</span> count = d.<span class="property">exists</span> ? d.<span class="title function_">data</span>().<span class="property">count</span> : <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// If first view this article</span></span><br><span class="line">      <span class="keyword">if</span> (increaseCount) &#123;</span><br><span class="line">        <span class="comment">// Increase count</span></span><br><span class="line">        count++;</span><br><span class="line">        doc.<span class="title function_">set</span>(&#123;</span><br><span class="line">          count</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> db = firebase.<span class="title function_">firestore</span>();</span><br><span class="line">  <span class="keyword">const</span> articles = db.<span class="title function_">collection</span>(<span class="variable constant_">CONFIG</span>.<span class="property">firestore</span>.<span class="property">collection</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;page:loaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable constant_">CONFIG</span>.<span class="property">page</span>.<span class="property">isPost</span>) &#123;</span><br><span class="line">      <span class="comment">// Fix issue #118</span></span><br><span class="line">      <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent</span></span><br><span class="line">      <span class="keyword">const</span> title = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.post-title&#x27;</span>).<span class="property">textContent</span>.<span class="title function_">trim</span>();</span><br><span class="line">      <span class="keyword">const</span> doc = articles.<span class="title function_">doc</span>(title);</span><br><span class="line">      <span class="keyword">let</span> increaseCount = <span class="variable constant_">CONFIG</span>.<span class="property">hostname</span> === location.<span class="property">hostname</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(title)) &#123;</span><br><span class="line">        increaseCount = <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Mark as visited in current session</span></span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(title, <span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">getCount</span>(doc, increaseCount).<span class="title function_">then</span>(<span class="function"><span class="params">count</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.firestore-visitors-count&#x27;</span>).<span class="property">innerText</span> = count;</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error updating count:&#x27;</span>, e));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">CONFIG</span>.<span class="property">page</span>.<span class="property">isHome</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> promises = [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.post-title&#x27;</span>)].<span class="title function_">map</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> title = element.<span class="property">textContent</span>.<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">const</span> doc = articles.<span class="title function_">doc</span>(title);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">getCount</span>(doc);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises).<span class="title function_">then</span>(<span class="function"><span class="params">counts</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> metas = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.firestore-visitors-count&#x27;</span>);</span><br><span class="line">        counts.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val, idx</span>) =&gt;</span> &#123;</span><br><span class="line">          metas[idx].<span class="property">innerText</span> = val;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching counts:&#x27;</span>, e));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>简单解释一下优化的主要思路：使用sessionStorage替换localStorage，计数机制变为会话级，即每次打开文章都会计数，而刷新不会计数</p>
</li>
<li><p>那么接下来就要设置一下数据库的规则了。大佬的安全规则好像有一些漏洞，下面是DeepSeek生成的安全规则：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rules_version = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">service cloud.<span class="property">firestore</span> &#123;</span><br><span class="line">  match /databases/&#123;database&#125;/documents &#123;</span><br><span class="line">    <span class="comment">// 针对文章集合的规则</span></span><br><span class="line">    match /articles/&#123;articleId&#125; &#123;</span><br><span class="line">      <span class="comment">// 允许所有人读取</span></span><br><span class="line">      allow <span class="attr">read</span>: <span class="keyword">if</span> <span class="literal">true</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 创建新文档时的规则</span></span><br><span class="line">      allow <span class="attr">create</span>: <span class="keyword">if</span> request.<span class="property">resource</span>.<span class="property">data</span>.<span class="title function_">keys</span>().<span class="title function_">hasOnly</span>([<span class="string">&quot;count&quot;</span>]) </span><br><span class="line">                   &amp;&amp; request.<span class="property">resource</span>.<span class="property">data</span>.<span class="property">count</span> == <span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 更新文档时的规则（确保count只能+1）</span></span><br><span class="line">      allow <span class="attr">update</span>: <span class="keyword">if</span> request.<span class="property">resource</span>.<span class="property">data</span>.<span class="title function_">keys</span>().<span class="title function_">hasOnly</span>([<span class="string">&quot;count&quot;</span>])</span><br><span class="line">                   &amp;&amp; request.<span class="property">resource</span>.<span class="property">data</span>.<span class="property">count</span> == resource.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁止其他所有操作</span></span><br><span class="line">    match /&#123;<span class="variable language_">document</span>=**&#125; &#123;</span><br><span class="line">      allow read, <span class="attr">write</span>: <span class="keyword">if</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开“Firestore Database”的“规则”，把规则粘贴进去，点击发布即可</p>
<p><img src="/../images/image-20250605214840666.png" alt="设置规则"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
</search>

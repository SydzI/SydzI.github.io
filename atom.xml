<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SydzI&#39;s Blog</title>
  
  <subtitle>路漫漫其修远兮，吾将上下而求索</subtitle>
  <link href="https://sydzi.github.io/atom.xml" rel="self"/>
  
  <link href="https://sydzi.github.io/"/>
  <updated>2025-10-10T13:44:21.549Z</updated>
  <id>https://sydzi.github.io/</id>
  
  <author>
    <name>SydzI</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>0xGame2025Week1WriteUp</title>
    <link href="https://sydzi.github.io/2025/10/10/0xGame2025Week1ReverseWriteUp/"/>
    <id>https://sydzi.github.io/2025/10/10/0xGame2025Week1ReverseWriteUp/</id>
    <published>2025-10-10T13:23:04.000Z</published>
    <updated>2025-10-10T13:44:21.549Z</updated>
    
    <content type="html"><![CDATA[<p>0xGame2025 Week1 Reverse方向详解</p><span id="more"></span><h2 id="EasyXor"><a href="#EasyXor" class="headerlink" title="EasyXor"></a>EasyXor</h2><ul><li><p>附件程序用IDA打开就是main函数的位置了，按F5反编译得到如下：</p><p><img src="/../images/image-20251003215402469-1760102969152-3.png" alt="反编译结果"></p><p>进行一些小小的变量名优化可以得到：</p><p><img src="/../images/image-20251003215440797-1760102969152-2.png" alt="小小的优化后"></p></li><li><p>可以看出，函数获取flag输入，然后对flag每一位进行异或，异或的值来自一个给定的字符串，要求异或后的值要等于str[i]-i。所以解密思路是，把异或关系中的Char和str[i]-i进行对调，即由Char^key[index%length]&#x3D;&#x3D;str[i]-i得到( str[i]-i )^key[index%length]&#x3D;&#x3D;Char。解密脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">char</span> str[] = &#123;<br>    <span class="hljs-number">0x42</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x27</span>,<br>    <span class="hljs-number">0x55</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x23</span>,<br>    <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span><br>    &#125;;<br>    <span class="hljs-type">char</span> key[] = <span class="hljs-string">&quot;raputa0xGame2025&quot;</span>;<br>    <span class="hljs-type">char</span> flag[<span class="hljs-number">45</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">43</span>; i++) &#123;<br>        flag[i] = (str[i] - i) ^ key[i % <span class="hljs-built_in">strlen</span>(key)];<br>    &#125;<br>    flag[<span class="hljs-number">44</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, flag);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="BaseUpx"><a href="#BaseUpx" class="headerlink" title="BaseUpx"></a>BaseUpx</h2><ul><li><p>题目提示有Upx壳，用DIE打开附件程序可以看出这是标准upx4.24</p><p><img src="/../images/image-20251003221920374-1760102969152-1.png" alt="DIE界面"></p></li><li><p>在Github上下载<a href="https://github.com/upx/upx/releases/tag/v4.2.4">Release UPX 4.2.4 · upx&#x2F;upx</a>，使用指令upx -d脱壳</p><p><img src="/../images/image-20251003222033233-1760102969152-7.png" alt="脱壳"></p></li><li><p>然后就可以把脱壳后的程序拿到IDA里分析，打开就是main函数了，按F5反编译：</p><p><img src="/../images/image-20251003222227627-1760102969152-5.png" alt="反编译结果"></p></li><li><p>可以看到函数对输入的enc（实际上是flag）进行了base64encode，然后和str进行比较。因此思路是拿到str，直接用<a href="https://cyberchef.org/">CyberChef</a>来进行base64解码：</p><p><img src="/../images/image-20251003222543143-1760102969152-6.png" alt="cyberchef解密"></p></li></ul><h2 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h2><ul><li><p>附件程序用IDA打开，直接就是main函数了，按F5反编译，提示flag在程序里</p><p><img src="/../images/image-20251003222821412-1760102969152-4.png" alt="main函数"></p></li><li><p>shift+F12查看字符串表，就可以找到flag了</p><p><img src="/../images/image-20251003222909434-1760102969152-8.png" alt="字符串表"></p></li></ul><h2 id="SignIn2"><a href="#SignIn2" class="headerlink" title="SignIn2"></a>SignIn2</h2><ul><li><p>运行附件程序可以看到一些提示：</p><p><img src="/../images/image-20251003223506054-1760102969152-9.png" alt="提示"></p><p>提示ROT47，应该是某种加密</p></li><li><p>附件程序用IDA打开，按F5反编译main函数：</p><p><img src="/../images/image-20251003223242376-1760102969152-10.png" alt="main函数"></p><p>可以看到程序里本来就有一个flag，程序拿到我们输入的数字后对flag进行了加密，然后检查加密后的flag开头几个字母是不是”0xGame”。既然提到了ROT47，就把flag的数据拿到<a href="https://cyberchef.org/">CyberChef</a>里看看能不能解密，刚好可以找到一个ROT 47 Brust Force（flag就直接复制程序里的就好了）：</p><p><img src="/../images/image-20251004143034177-1760102969153-11.png" alt="cyberchef"></p><p>当时解完没细看flag内容，复现这题来写博客的时候看到这个flag还有点怀疑对不对😂</p></li></ul><h2 id="ZZZ"><a href="#ZZZ" class="headerlink" title="ZZZ"></a>ZZZ</h2><ul><li><p>附件程序用IDA打开，直接就是main函数了，按F5反编译一下：</p><p><img src="/../images/image-20251004151114879-1760102969153-12.png" alt="main函数反编译结果"></p></li><li><p>可以看出程序拿到输入的flag后先检查了一下格式，然后截取除了4个部分，拿这4个部分建立了等式。结合题目ZZZ可以推测这是在考z3求解。题目为了保证唯一解还给了flag的sha256来验证</p></li><li><p>用z3复现一下等式，再加上sha256验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br>sha256=<span class="hljs-string">&#x27;4aba519d4666f5421488afaaf89efdcbe48e7a53f814ce5c1d82b46b55032651&#x27;</span><br>s=Solver()<br>x1=BitVec(<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-number">32</span>)<br>x2=BitVec(<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-number">32</span>)<br>x3=BitVec(<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-number">32</span>)<br>x4=BitVec(<span class="hljs-string">&#x27;x4&#x27;</span>,<span class="hljs-number">32</span>)<br>s.add(<span class="hljs-number">3</span> * x2 + <span class="hljs-number">5</span> * x1 + <span class="hljs-number">7</span> * x4 + <span class="hljs-number">2</span> * x3 == -<span class="hljs-number">1445932505</span>)<br>s.add(<span class="hljs-number">2</span> * (<span class="hljs-number">2</span> * (<span class="hljs-number">2</span> * x2 + x3) + x1) + x4 == -<span class="hljs-number">672666814</span>)<br>s.add(<span class="hljs-number">7</span> * x2 + <span class="hljs-number">3</span> * x1 + <span class="hljs-number">5</span> * x4 + <span class="hljs-number">4</span> * x3 == <span class="hljs-number">958464147</span>)<br>s.add(((x1 ^ x2) &lt;&lt; <span class="hljs-number">6</span>) + ((x3 &gt;&gt; <span class="hljs-number">6</span>) ^ <span class="hljs-number">0x4514</span>) == <span class="hljs-number">123074281</span>)<br><br><span class="hljs-keyword">while</span> s.check() == sat:<br>    model=s.model()<br>    x1_val=model[x1].as_long()<br>    x2_val=model[x2].as_long()<br>    x3_val=model[x3].as_long()<br>    x4_val=model[x4].as_long()<br>    flag=<span class="hljs-string">f&quot;0xGame&#123;&#123;<span class="hljs-subst">&#123;x1_val:08x&#125;</span><span class="hljs-subst">&#123;x2_val:08x&#125;</span><span class="hljs-subst">&#123;x3_val:08x&#125;</span><span class="hljs-subst">&#123;x4_val:08x&#125;</span>&#125;&#125;&quot;</span><br>    <span class="hljs-keyword">if</span> hashlib.sha256(flag.encode()).hexdigest()==sha256:<span class="hljs-comment">#验证是否为正确flag</span><br>        <span class="hljs-built_in">print</span>(flag)<br>    exception=Or(x1!=x1_val,x2!=x2_val,x3!=x3_val,x4!=x4_val)<span class="hljs-comment">#排除同一解</span><br>    s.add(exception)<br></code></pre></td></tr></table></figure></li></ul><h2 id="DyDebug"><a href="#DyDebug" class="headerlink" title="DyDebug"></a>DyDebug</h2><ul><li><p>附件程序用IDA打开，直接就是main函数了，按F5看看反编译：</p><p><img src="/../images/image-20251004131520036-1760102969153-13.png" alt="main函数反编译结果"></p></li><li><p>如注释写的，程序对我们的输入没有任何操作，而是拿了flag明文来比较，所以可以直接动态调试拿到flag明文。这里需要知道一些汇编小知识：函数的返回值存放在寄存器rax里。然后开始我们的操作：</p><p>在main函数反编译界面选中解密函数decrypt_string()所在行，右键选择jump to disasm跳到汇编界面：</p><p><img src="/../images/image-20251004134158983-1760102969153-14.png" alt="jump to disasm"></p><p>光标停在的地方附近就有一个call _Z14decrypt_stringPKcy指令，后面有注释是解密函数decrypt_string()</p><p><img src="/../images/image-20251004134355375-1760102969153-15.png" alt="光标停在这里"></p><p>其实光标停在的位置的指令就是取函数返回值的操作了。函数的返回值放在rax里，而这条指令把rax mov（移动）到了[rbp-10h+decrypted_str]，看不懂没关系，只需要知道函数返回值可以通过这里的rax看到就行了。这个返回值就是解密后得到的flag明文。在光标停在的位置按F2下断点</p><p><img src="/../images/image-20251004134943597-1760102969153-16.png" alt="F2下断点"></p><p>把界面正上方的”no debugger”改选成”local windows debugger”，按旁边绿色的三角形开始调试</p><p><img src="/../images/image-20251004135012031-1760102969153-20.png" alt="local windows debugger"></p><p>这时候会弹出命令行窗口，随便输入一点东西，按回车</p><p><img src="/../images/image-20251004135050308-1760102969153-18.png" alt="随便输点东西"></p><p>可以看到IDA里程序停在了我们刚刚下断点的地方</p><p><img src="/../images/image-20251004135229299-1760102969153-17.png" alt="停在了断点位置"></p><p>把鼠标移到rax上就可以看到flag了，双击rax到flag的位置，可以把这一串数据复制给AI提取</p><p><img src="/../images/image-20251004135253094-1760102969153-19.png" alt="flag的位置"></p></li></ul>]]></content>
    
    
    <summary type="html">0xGame2025 Week1 Reverse方向详解</summary>
    
    
    
    <category term="WriteUp&amp;复现" scheme="https://sydzi.github.io/categories/WriteUp-%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="WriteUp" scheme="https://sydzi.github.io/tags/WriteUp/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Day17:python逆向</title>
    <link href="https://sydzi.github.io/2025/10/05/Day17-python%E9%80%86%E5%90%91/"/>
    <id>https://sydzi.github.io/2025/10/05/Day17-python%E9%80%86%E5%90%91/</id>
    <published>2025-10-05T09:09:34.000Z</published>
    <updated>2025-10-05T14:21:46.376Z</updated>
    
    <content type="html"><![CDATA[<p>pyc逆向，python可执行文件逆向</p><span id="more"></span><h2 id="pyc文件"><a href="#pyc文件" class="headerlink" title="pyc文件"></a>pyc文件</h2><ul><li>pyc文件是py文件编译过程中产生的中间文件，是一种二进制文件。pyc文件可以由python虚拟机直接执行。不同版本的python编译出来的pyc文件是不同的</li></ul><h3 id="pyc文件结构"><a href="#pyc文件结构" class="headerlink" title="pyc文件结构"></a>pyc文件结构</h3><ul><li><p>一个pyc文件由以下几个部分组成：</p><p><img src="/../images/image-20251005201501358.png" alt="pyc文件格式(图片截取自CTF wiki)"></p><p>其中CodeObject是经过序列化处理的python源码的二进制码</p></li></ul><h3 id="pyc字节码"><a href="#pyc字节码" class="headerlink" title="pyc字节码"></a>pyc字节码</h3><ul><li><p>pyc文件是二进制文件，因此也可以进行反汇编。pyc文件有专门的汇编代码，就像java有smali汇编一样。</p></li><li><p>下面是一个pyc文件的反汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">原代码行号|指令的偏移|指令符号|指令参数（索引值）|参数实际值     <br>  0           0 RESUME                   0<br><br>  1           2 LOAD_CONST               0 (&lt;code object add at 0x00000186246D3770, file &quot;test.py&quot;, line 1&gt;)<br>              4 MAKE_FUNCTION            0<br>              6 STORE_NAME               0 (add)//把add函数存入函数表，给索引值0<br><br>  3           8 PUSH_NULL<br>             10 LOAD_NAME                1 (print)//加载函数表索引为1的函数print<br>             12 LOAD_CONST               1 (&#x27;hello python&#x27;)//加载常量表索引为1的&quot;hello python&quot;<br>             14 CALL                     1//call索引为1的函数print<br>             22 POP_TOP<br><br>  4          24 PUSH_NULL<br>             26 LOAD_NAME                1 (print)<br>             28 PUSH_NULL<br>             30 LOAD_NAME                0 (add)<br>             32 LOAD_CONST               2 (1)<br>             34 LOAD_CONST               3 (2)<br>             36 CALL                     2<br>             44 CALL                     1<br>             52 POP_TOP<br>             54 RETURN_CONST             4 (None)<br><br>Disassembly of &lt;code object add at 0x00000186246D3770, file &quot;test.py&quot;, line 1&gt;:<br>  1           0 RESUME                   0<br><br>  2           2 LOAD_FAST                0 (a)<br>              4 LOAD_FAST                1 (b)<br>              6 BINARY_OP                0 (+)<br>             10 RETURN_VALUE<br><br></code></pre></td></tr></table></figure><p>对上面的一些指令进行解释：</p><ul><li>LOAD_CONST用于加载常量，后面跟着的数字是常量在常量表中的索引</li><li>LOAD_NAME用于加载函数，后面跟着的数字是函数在函数表中的索引</li><li>LOAD_FAST用于加载局部变量（如函数定义时候的参数或者内部变量）</li><li>可以注意到LOAD_NAME总是先于LOAD_CONST的，即函数比参数先一步加载</li><li>python虚拟机是基于栈的，所以可以看到POP等字眼，LOAD系列操作实际上是入栈操作</li></ul></li></ul><h3 id="pyc文件逆向"><a href="#pyc文件逆向" class="headerlink" title="pyc文件逆向"></a>pyc文件逆向</h3><ul><li>未经过混淆的pyc文件，可以直接通过在线工具（如：<a href="https://www.lddgo.net/string/pyc-compile-decompile">在线Python pyc文件编译与反编译</a>）或者uncompyle6、decompyle3（均可通过pip install安装）转成python代码</li><li>pyc文件的混淆，就类似花指令，通过在汇编层面插入垃圾指令干扰静态分析。解决办法就是修改二进制文件，把垃圾指令的二进制码给删除。可以看看这篇：<a href="https://zhuanlan.zhihu.com/p/145811103"> Python代码保护 | pyc 混淆从入门到工具实现 - 知乎</a></li></ul><h2 id="python可执行文件"><a href="#python可执行文件" class="headerlink" title="python可执行文件"></a>python可执行文件</h2><ul><li><p>python文件可以被打包成可执行文件，默认图标长这样：</p><p><img src="/../images/image-20251005213749587.png" alt="图标"></p></li><li><p>对于此类问题，先使用<a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor</a>解包程序（这里拿一个不知道哪里来的pythonexe文件举例）：</p><p><img src="/../images/image-20251005214956424.png" alt="解包"></p><p>pyinstxtractor会把可执行文件解包到带后缀extracted的一个文件夹里，除此之外可以看到，程序会给出可能的入口文件，以及可执行文件的python版本，然后就可以分析这些pyc文件了</p></li><li><p>python文件被打包的时候还可以指定加密参数，解密的时候根据打包的pyinstaller版本可以分为两种，大于4.0的和小于4.0的，可以使用下面的脚本解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python">//大于<span class="hljs-number">4.0</span>版本<br><span class="hljs-keyword">import</span> tinyaes<br><span class="hljs-keyword">import</span> zlib<br><br>CRYPT_BLOCK_SIZE=<span class="hljs-number">16</span><br><br>key = butes(<span class="hljs-string">&#x27;here_be_your_key&#x27;</span>,<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>inf=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;here_be_your_file_name&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>outf=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;here_be_your_output_file&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><br>iv=inf.read(CRYPT_BLOCK_SIZE)<br><br>cipher=tinyaes.AES(key,iv)<br><br>plaintext=zlib.decompress(cipher.CTR_xcrypt_buffer(inf.read()))<br><br>outf.write(<span class="hljs-string">b&#x27;\x55\x0d\x0d\x0a\0\0\0\0\0\0\0\0\0\0\0\0&#x27;</span>)<span class="hljs-comment">#here be your magic number from pyfile in the same dir,16bytes</span><br><br>outf.write(plaintext)<br><br>inf.close()<br>outf.close()<br><br>//小于<span class="hljs-number">4.0</span>版本<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> zlib<br><br>CRYPT_BLOCK_SIZE=<span class="hljs-number">16</span><br><br>key=<span class="hljs-string">b&#x27;here_be_your_key&#x27;</span><br><br>inf=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;here_be_your_cryptedfile_name&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>outf=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;here_be_your_output_file_name&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><br>iv=inf.read(CRYPT_BLOCK_SIZE)<br><br>cipher-AES.new(key,AES.MODE_CFB,iv)<br><br>plaintext=zlib.decompress(cipher,hecrypt(inf.read()))<br> <br>outf.write(<span class="hljs-string">&#x27;here_be_your_magicnumber&#x27;</span>)<span class="hljs-comment">#8bytes</span><br><br>outf.write(plaintext)<br><br>inf.close()<br>outf.close()<br></code></pre></td></tr></table></figure><p>代码里面的key可以找可疑的pyc文件转成python代码查看，而版本可以通过查看pyimod01_archive.pyc导入的加密库来识别（上面两个版本的脚本导入的加密库分别是tinyaes和AES，是不一样的）</p></li></ul>]]></content>
    
    
    <summary type="html">pyc逆向，python可执行文件逆向</summary>
    
    
    
    <category term="Reverse学习笔记" scheme="https://sydzi.github.io/categories/Reverse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>week31-week34</title>
    <link href="https://sydzi.github.io/2025/10/05/week31-week34/"/>
    <id>https://sydzi.github.io/2025/10/05/week31-week34/</id>
    <published>2025-10-05T03:43:33.000Z</published>
    <updated>2025-10-05T04:00:11.625Z</updated>
    
    <content type="html"><![CDATA[<p>2025年10月篇</p><span id="more"></span><h2 id="week31-2025-9-29-2025-10-5"><a href="#week31-2025-9-29-2025-10-5" class="headerlink" title="week31 (2025.9.29-2025.10.5)"></a>week31 (2025.9.29-2025.10.5)</h2><ul><li>这周碰上国庆假期，趁着假期狠狠研究moectf的upx_revenge。花了两天时间琢磨出了.rsrc段应该有问题（之前不知道哪里找的工具给修复到能运行但是闪退了，后面拿正常加壳程序对比一下不同的地方在.rsrc段），然后把.rsrc段的ResourceDirectoryTable给修复的差不多了，剩一个Data一直对不上。没招了去找出题人交流，结果发现是upx特征段的问题，愣是没看出少了几个bytes，常识性错误了属于是🫠程序的bytes没有对齐，之前在尾段琢磨那么久都没有发现这个问题🫠太好了，终于是ak过的人了😭</li><li>0xGame2025也是开打了，靠新生赛攒经验这一块(</li><li>想着接下来朝逆向开发这一块学学，发现这一类笔记应该归为开发而不是逆向🤔所以又开了一个新分类。</li><li>哈基米的，老是感觉自己懂得太少了，但是又不知道从哪里开始学这些知识😭</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;2025年10月篇&lt;/p&gt;</summary>
    
    
    
    <category term="周记" scheme="https://sydzi.github.io/categories/%E5%91%A8%E8%AE%B0/"/>
    
    
    <category term="周记" scheme="https://sydzi.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Day1:进程与线程（一）</title>
    <link href="https://sydzi.github.io/2025/10/03/Day1-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>https://sydzi.github.io/2025/10/03/Day1-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</id>
    <published>2025-10-03T06:34:05.000Z</published>
    <updated>2025-10-05T14:24:12.093Z</updated>
    
    <content type="html"><![CDATA[<p>进程与线程、内核对象相关基础知识</p><span id="more"></span><h2 id="什么是进程-线程"><a href="#什么是进程-线程" class="headerlink" title="什么是进程&#x2F;线程"></a>什么是进程&#x2F;线程</h2><ul><li>进程是操作系统分配资源的单位。运行一个程序，操作系统就会给这个程序分配一个进程。</li><li>线程是执行任务的基本单位。一个进程可以有多个线程，但是至少有一个线程。比如说运行QQ，操作系统会给QQ分配一个进程，而QQ里的某些操作，比如和好友聊天，就是一个线程。</li><li>操作系统会给每个进程分配4GB虚拟内存空间。32位程序下，这4GB内存分为两部分，低2GB给用户层，高2GB给内核层。每个进程有独立的4GB<strong>虚拟内存空间</strong>。但是每个进程并不拥有独立的4GB<strong>物理内存空间</strong>，它们的内核空间是映射到同一块物理内存空间上的，而用户空间在物理内存上确实是独立的。</li><li>运行一个程序，操作系统会为它分配一个进程以及4GB的虚拟内存空间，程序涉及的exe、dll文件在需要的时候会被加载到程序的虚拟内存空间上，这些被加载的可执行文件（不仅包括exe，还包括dll）称为模块</li></ul><h2 id="内核对象"><a href="#内核对象" class="headerlink" title="内核对象"></a>内核对象</h2><ul><li><p>Windows系统是一个面向对象的操作系统，但是它是基于C语言的，C语言没有类的概念，所以Windows系统的对象本质上是结构体变量。</p></li><li><p>通常把Windows系统分为两个层级：R0和R3，R0是内核层，里面是操作系统最底层的东西，包含了操作系统的所有结构体变量，一般不会对外开放，但是会提供一些API接口给R3层来访问其中的内容；R3是用户层，作为内核和外界的过渡，封装了一些内核的操作。即，用户在需要访问内核信息的时候，首先要调用R3的API，然后R3再调用R0的API来访问内核。</p></li><li><p>Windows的对象可以分成三类：</p><ul><li>USER对象，对应操作系统的界面，相关dll是user32.dll</li><li>GDI对象，对应绘图相关的内容，相关dll是GDI32.dll</li><li>内核对象，对应文件、进程、线程等，相关dll是Kernel32.dll</li></ul></li><li><p>为了保证系统安全，Windows系统的结构体变量是不允许直接访问的，只能通过句柄和相应的API来访问。在了解句柄之前，得先了解句柄表。每个进程都有自己的句柄表（类似一维数组），用来记录内核对象的相关信息，但是操作系统不会向我们开放这些信息，只会让我们知道某个内核对象的信息块在句柄表中的索引值，而这个索引值就是句柄。</p></li><li><p>内核空间在物理上是共享的，因此内核对象是跨进程的，不同的进程可以访问相同的内核对象，只不过不同进程中同一个进程对象的句柄不同。</p></li><li><p>内核对象有一些特性，如安全描述符（用来说明内核对象接受哪些用户和组的访问和使用）、引用计数（用来记录内核对象被引用的次数，当内核对象不被任何进程引用的时候，它就会被销毁）等</p></li></ul>]]></content>
    
    
    <summary type="html">进程、线程、内核对象基础知识</summary>
    
    
    
    <category term="逆向开发" scheme="https://sydzi.github.io/categories/%E9%80%86%E5%90%91%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="逆向开发" scheme="https://sydzi.github.io/tags/%E9%80%86%E5%90%91%E5%BC%80%E5%8F%91/"/>
    
    <category term="Windows开发" scheme="https://sydzi.github.io/tags/Windows%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>湾区杯初赛WriteUp&amp;复现</title>
    <link href="https://sydzi.github.io/2025/10/03/%E6%B9%BE%E5%8C%BA%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp&amp;%E5%A4%8D%E7%8E%B0/"/>
    <id>https://sydzi.github.io/2025/10/03/%E6%B9%BE%E5%8C%BA%E6%9D%AF%E5%88%9D%E8%B5%9BWriteUp&amp;%E5%A4%8D%E7%8E%B0/</id>
    <published>2025-10-03T06:31:30.000Z</published>
    <updated>2025-10-10T13:36:49.869Z</updated>
    
    <content type="html"><![CDATA[<p>和X2c的nixware、Ky4niT3师傅参加了线上初赛，但是寄了。第一次组队参赛，还是太菜了。Re方向解了一道，然后和师傅们拼凑出了一道。基本就是签到题靠AI，难题没思路，见识还是太少了</p><span id="more"></span><h2 id="WriteUp"><a href="#WriteUp" class="headerlink" title="WriteUp"></a>WriteUp</h2><h3 id="hardtest"><a href="#hardtest" class="headerlink" title="hardtest"></a>hardtest</h3><ul><li><p>附件程序用IDA打开，shift+F12在字符串表通过关键字“flag:”可以找到main函数位置</p><p><img src="/../images/image-20251003142543591.png" alt="字符串表"></p></li><li><p>以下是优化后的main函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seed; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> __int64 scale1; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">void</span> *temp1; <span class="hljs-comment">// rsp</span><br>  <span class="hljs-type">unsigned</span> __int64 scale2; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">void</span> *temp2; <span class="hljs-comment">// rsp</span><br>  <span class="hljs-type">char</span> temp; <span class="hljs-comment">// al</span><br>  _QWORD buf[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+8h] [rbp-F0h] BYREF</span><br>  __int64 i_2; <span class="hljs-comment">// [rsp+18h] [rbp-E0h]</span><br>  __int64 v12; <span class="hljs-comment">// [rsp+20h] [rbp-D8h]</span><br>  <span class="hljs-type">char</span> input; <span class="hljs-comment">// [rsp+29h] [rbp-CFh] BYREF</span><br>  <span class="hljs-type">char</span> judge; <span class="hljs-comment">// [rsp+2Ah] [rbp-CEh]</span><br>  <span class="hljs-type">char</span> randNum; <span class="hljs-comment">// [rsp+2Bh] [rbp-CDh]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+2Ch] [rbp-CCh]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+30h] [rbp-C8h]</span><br>  <span class="hljs-type">int</span> length; <span class="hljs-comment">// [rsp+34h] [rbp-C4h]</span><br>  __int64 v19; <span class="hljs-comment">// [rsp+38h] [rbp-C0h]</span><br>  __int64 Buf; <span class="hljs-comment">// [rsp+40h] [rbp-B8h]</span><br>  __int64 v21; <span class="hljs-comment">// [rsp+48h] [rbp-B0h]</span><br>  _QWORD *Enc; <span class="hljs-comment">// [rsp+50h] [rbp-A8h]</span><br>  <span class="hljs-type">char</span> flag[<span class="hljs-number">104</span>]; <span class="hljs-comment">// [rsp+58h] [rbp-A0h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v24; <span class="hljs-comment">// [rsp+C0h] [rbp-38h]</span><br><br>  v24 = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  <span class="hljs-built_in">setbuf</span>(stdin, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">setbuf</span>(stdout, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">setbuf</span>(stderr, <span class="hljs-number">0LL</span>);<br>  seed = <span class="hljs-built_in">time</span>(<span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">srand</span>(seed);<br>  randNum = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">255</span> + <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input your number(1-255): &quot;</span>);<br>  <span class="hljs-keyword">if</span> ( __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input) == <span class="hljs-number">1</span> &amp;&amp; randNum == input )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-built_in">getchar</span>() != <span class="hljs-number">10</span> )<br>      ;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flag: &quot;</span>);<br>    <span class="hljs-built_in">fgets</span>(flag, <span class="hljs-number">100</span>, stdin);                    <span class="hljs-comment">// 获取flag输入</span><br>    flag[<span class="hljs-built_in">strcspn</span>(flag, <span class="hljs-string">&quot;\n&quot;</span>)] = <span class="hljs-number">0</span>;<br>    length = <span class="hljs-built_in">strlen</span>(flag);<br>    v19 = length - <span class="hljs-number">1LL</span>;<br>    i_2 = length;<br>    v12 = <span class="hljs-number">0LL</span>;<br>    buf[<span class="hljs-number">0</span>] = length;<br>    buf[<span class="hljs-number">1</span>] = <span class="hljs-number">0LL</span>;<br>    scale1 = <span class="hljs-number">16</span> * ((length + <span class="hljs-number">15LL</span>) / <span class="hljs-number">0x10uLL</span>);  <span class="hljs-comment">// 在动态分配栈上的内存</span><br>    <span class="hljs-keyword">while</span> ( buf != (buf - (scale1 &amp; <span class="hljs-number">0xFFFFFFFFFFFFF000LL</span>)) )<br>      ;<br>    temp1 = <span class="hljs-built_in">alloca</span>(scale1 &amp; <span class="hljs-number">0xFFF</span>);<br>    <span class="hljs-keyword">if</span> ( (scale1 &amp; <span class="hljs-number">0xFFF</span>) != <span class="hljs-number">0</span> )<br>      *(&amp;buf[<span class="hljs-number">-1</span>] + (scale1 &amp; <span class="hljs-number">0xFFF</span>)) = *(&amp;buf[<span class="hljs-number">-1</span>] + (scale1 &amp; <span class="hljs-number">0xFFF</span>));<br>    Buf = buf;                                  <span class="hljs-comment">// Buf指向分配的内存</span><br>    <span class="hljs-built_in">encrypt1</span>(flag, buf);                        <span class="hljs-comment">// 对flag进行加密，加密结果实际上由Buf记录，buf是一个通用的缓存空间</span><br>    v21 = length - <span class="hljs-number">1LL</span>;<br>    scale2 = <span class="hljs-number">16</span> * ((length + <span class="hljs-number">15LL</span>) / <span class="hljs-number">0x10uLL</span>);  <span class="hljs-comment">// 再次动态分配栈上的内存</span><br>    <span class="hljs-keyword">while</span> ( buf != (buf - (scale2 &amp; <span class="hljs-number">0xFFFFFFFFFFFFF000LL</span>)) )<br>      ;<br>    temp2 = <span class="hljs-built_in">alloca</span>(scale2 &amp; <span class="hljs-number">0xFFF</span>);<br>    <span class="hljs-keyword">if</span> ( (scale2 &amp; <span class="hljs-number">0xFFF</span>) != <span class="hljs-number">0</span> )<br>      *(&amp;buf[<span class="hljs-number">-1</span>] + (scale2 &amp; <span class="hljs-number">0xFFF</span>)) = *(&amp;buf[<span class="hljs-number">-1</span>] + (scale2 &amp; <span class="hljs-number">0xFFF</span>));<br>    Enc = buf;                                  <span class="hljs-comment">// Enc指向分配的内存</span><br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; length; ++i )<br>    &#123;<br>      temp = <span class="hljs-built_in">encrypt2</span>(*(Buf + i));              <span class="hljs-comment">// 对上一轮加密的结果再进行一次加密，加密结果由Enc记录</span><br>      *(Enc + i) = temp;<br>    &#125;<br>    judge = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; length; ++j )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( *(Enc + j) != byte_2120[j] )         <span class="hljs-comment">// 判断加密结果是否正确</span><br>      &#123;<br>        judge = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( judge )<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;right&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function">__int64 __fastcall <span class="hljs-title">encrypt1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *flag, __int64 buf)</span></span><br><span class="hljs-function"></span>&#123;<br>  __int64 count; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+14h] [rbp-1Ch]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> length; <span class="hljs-comment">// [rsp+18h] [rbp-18h]</span><br><br>  length = <span class="hljs-built_in">strlen</span>(flag);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )<br>  &#123;<br>    count = i;<br>    <span class="hljs-keyword">if</span> ( i &gt;= length )<br>      <span class="hljs-keyword">break</span>;<br>    *(i + buf) = <span class="hljs-built_in">rol</span>(flag[i], (i % <span class="hljs-number">7</span>) + <span class="hljs-number">1</span>);     <span class="hljs-comment">// return (flag[i] &lt;&lt; ((i%7)+1)) | (flag[i] &gt;&gt; (8 - ((i%7)+1)))</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function">__int64 __fastcall <span class="hljs-title">encrypt2</span><span class="hljs-params">(<span class="hljs-type">char</span> Buf_i)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">unsigned</span> __int8 v1; <span class="hljs-comment">// al</span><br>  <span class="hljs-type">unsigned</span> __int8 v3; <span class="hljs-comment">// [rsp+15h] [rbp-3h]</span><br><br>  v1 = <span class="hljs-built_in">rol</span>(Buf_i ^ <span class="hljs-number">0x5Au</span>, <span class="hljs-number">3</span>);                   <span class="hljs-comment">// return (a1^0x5Au &lt;&lt; 3) | (a1^0x5Au &gt;&gt; (8 - 3));</span><br>  v3 = <span class="hljs-built_in">sub_1313</span>((<span class="hljs-number">16</span> * ((<span class="hljs-number">3</span> * (v1 &gt;&gt; <span class="hljs-number">4</span>)) &amp; <span class="hljs-number">0xF</span>)) | (<span class="hljs-number">5</span> * (v1 &amp; <span class="hljs-number">0xF</span>)) &amp; <span class="hljs-number">0xFu</span>);<span class="hljs-comment">// AI说是模幂运算函数，计算a1^(255) mod 257</span><br>  <span class="hljs-keyword">return</span> byte_2020[<span class="hljs-built_in">ror</span>(v3, <span class="hljs-number">2</span>)];                 <span class="hljs-comment">// return (v3 &gt;&gt; 2) | (v3 &lt;&lt; (8 - 2));此处建立了映射关系</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>笔者加解密这一块太菜了，没有数学头脑，只能依靠AI解密了（因为涉及数论，笔者还没学过）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rol</span>(<span class="hljs-params">b, n</span>):<br>    n %= <span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> ((b &lt;&lt; n) | (b &gt;&gt; (<span class="hljs-number">8</span> - n))) &amp; <span class="hljs-number">0xFF</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ror</span>(<span class="hljs-params">b, n</span>):<br>    n %= <span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> ((b &gt;&gt; n) | (b &lt;&lt; (<span class="hljs-number">8</span> - n))) &amp; <span class="hljs-number">0xFF</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mod_inv</span>(<span class="hljs-params">a, mod=<span class="hljs-number">257</span></span>):<br>    <span class="hljs-comment"># 计算a在模257下的逆元，使用费马小定理</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(a, <span class="hljs-number">255</span>, mod)<br><br>byte_2020 = [<br>    <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>,<br>    <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>,<br>    <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br>    <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>,<br>    <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>,<br>    <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>,<br>    <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>,<br>    <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>,<br>    <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br>    <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>,<br>    <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>,<br>    <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>,<br>    <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>,<br>    <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>,<br>    <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>,<br>    <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span><br>]<br><br><span class="hljs-comment"># 构建反向映射</span><br>rev_2020 = &#123;&#125;<br><span class="hljs-keyword">for</span> idx, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(byte_2020):<br>    rev_2020[val] = idx<br><br>enc_data = [<br>    <span class="hljs-number">0x97</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xDA</span>,<br>    <span class="hljs-number">0x43</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x71</span>,<br>    <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x1A</span><br>]<br><br><span class="hljs-comment"># 逆向encrypt2</span><br>enc1_out = []<br><span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(enc_data):<br>    idx = rev_2020[c]  <span class="hljs-comment"># 得到索引（即v3循环右移2位后的值）</span><br>    v3 = rol(idx, <span class="hljs-number">2</span>)   <span class="hljs-comment"># 循环左移2位得到v3（原循环右移2位的逆）</span><br>    <span class="hljs-comment"># 如果v3为0？但原代码中a1不为0才计算，这里假设v3不为0</span><br>    <span class="hljs-keyword">if</span> v3 == <span class="hljs-number">0</span>:<br>        x = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        x = mod_inv(v3, <span class="hljs-number">257</span>)<br>    A = (x &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xF</span><br>    B = x &amp; <span class="hljs-number">0xF</span><br>    high = (<span class="hljs-number">11</span> * A) &amp; <span class="hljs-number">0xF</span><br>    low = (<span class="hljs-number">13</span> * B) &amp; <span class="hljs-number">0xF</span><br>    v1 = (high &lt;&lt; <span class="hljs-number">4</span>) | low<br>    tmp = ror(v1, <span class="hljs-number">3</span>)  <span class="hljs-comment"># 循环右移3位（原循环左移3位的逆）</span><br>    enc1_out.append(tmp ^ <span class="hljs-number">0x5A</span>)<br><br><span class="hljs-comment"># 逆向encrypt1</span><br>flag = []<br><span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(enc1_out):<br>    n = (i % <span class="hljs-number">7</span>) + <span class="hljs-number">1</span><br>    flag_char = ror(c, n)  <span class="hljs-comment"># 循环右移n位（原循环左移n位的逆）</span><br>    flag.append(flag_char)<br><br><span class="hljs-comment"># 转换为字符串</span><br>flag_str = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(b) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> flag)<br><span class="hljs-built_in">print</span>(flag_str)<br></code></pre></td></tr></table></figure></li></ul><h3 id="minigame"><a href="#minigame" class="headerlink" title="minigame"></a>minigame</h3><ul><li><p>微信小程序逆向，第一次遇到这个类型的题</p></li><li><p>用<a href="https://github.com/biggerstar/wedecode">wedecode</a>解包附件，输出结果在wedecode-main&#x2F;OUTPUT&#x2F;default里</p><p><img src="/../images/image-20251003175458209.png" alt="解包结果"></p><p>没有这方面的经验，让AI分析项目，发现utils&#x2F;validator.wasm里有检验逻辑。wasm是一种二进制文件，可以转成wat阅读（类似汇编）。使用在线工具<a href="https://webassembly.github.io/wabt/demo/wasm2wat/">wasm2wat demo</a>把wasm转成wat:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs wat">(module<br>  (type $t0 (func (param i32) (result i32)))<br>  (type $t1 (func))<br>  (func $c (export &quot;c&quot;) (type $t0) (param $p0 i32) (result i32)<br>    (local $l1 i32) (local $l2 i32) (local $l3 i32) (local $l4 i32)<br>    (if $I6<br>      (i32.ne<br>        (block $B0 (result i32)<br>          (block $B1<br>            (block $B2<br>              (br_if $B2<br>                (i32.eqz<br>                  (i32.and<br>                    (local.tee $l3<br>                      (local.get $p0))<br>                    (i32.const 3))))<br>              (drop<br>                (br_if $B0<br>                  (i32.const 0)<br>                  (i32.eqz<br>                    (i32.load8_u<br>                      (local.get $p0)))))<br>              (loop $L3<br>                (br_if $B2<br>                  (i32.eqz<br>                    (i32.and<br>                      (local.tee $p0<br>                        (i32.add<br>                          (local.get $p0)<br>                          (i32.const 1)))<br>                      (i32.const 3))))<br>                (br_if $L3<br>                  (i32.load8_u<br>                    (local.get $p0))))<br>              (br $B1))<br>            (loop $L4<br>              (local.set $p0<br>                (i32.add<br>                  (local.tee $l1<br>                    (local.get $p0))<br>                  (i32.const 4)))<br>              (br_if $L4<br>                (i32.eq<br>                  (i32.and<br>                    (i32.or<br>                      (i32.sub<br>                        (i32.const 16843008)<br>                        (local.tee $l4<br>                          (i32.load<br>                            (local.get $l1))))<br>                      (local.get $l4))<br>                    (i32.const -2139062144))<br>                  (i32.const -2139062144))))<br>            (loop $L5<br>              (local.set $l1<br>                (i32.add<br>                  (local.tee $p0<br>                    (local.get $l1))<br>                  (i32.const 1)))<br>              (br_if $L5<br>                (i32.load8_u<br>                  (local.get $p0)))))<br>          (i32.sub<br>            (local.get $p0)<br>            (local.get $l3)))<br>        (i32.const 38))<br>      (then<br>        (return<br>          (i32.const 0))))<br>    (loop $L7<br>      (block $B8<br>        (local.set $l1<br>          (i32.eq<br>            (local.tee $p0<br>              (i32.xor<br>                (i32.load8_u offset=1024<br>                  (local.get $l2))<br>                (i32.load8_s<br>                  (i32.add<br>                    (local.get $l2)<br>                    (local.get $l3)))))<br>            (i32.const 153)))<br>        (br_if $B8<br>          (i32.ne<br>            (local.get $p0)<br>            (i32.const 153)))<br>        (br_if $L7<br>          (i32.ne<br>            (local.tee $l2<br>              (i32.add<br>                (local.get $l2)<br>                (i32.const 1)))<br>            (i32.const 38)))))<br>    (local.get $l1))<br>  (func $b (export &quot;b&quot;) (type $t1))<br>  (memory $a (export &quot;a&quot;) 258 258)<br>  (data $d0 (i32.const 1024) &quot;\ff\f5\f8\fe\e2\ff\f8\fc\a9\fb\ab\ae\fa\ad\ac\a8\fa\ae\ab\a1\a1\af\ae\f8\ac\af\ae\fc\a1\fa\a8\fb\fb\ad\fc\ac\aa\e4&quot;))<br><br></code></pre></td></tr></table></figure></li><li><p>由AI分析知，逻辑主要是把输入的内容与密文异或，异或的结果要等于153。等价于将输入的内容和153异或要等于密文。解密就是拿153异或密文。exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<br>    <span class="hljs-number">0xff</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0xfb</span>,<br>    <span class="hljs-number">0xab</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0xa8</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0xa1</span>,<br>    <span class="hljs-number">0xa1</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0xfa</span>,<br>    <span class="hljs-number">0xa8</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0xe4</span><br>]<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(data ^ <span class="hljs-number">153</span>) <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> enc])<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure></li></ul><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="strangapp"><a href="#strangapp" class="headerlink" title="strangapp"></a>strangapp</h3><ul><li>待更新…</li></ul>]]></content>
    
    
    <summary type="html">2025“湾区杯”网络安全大赛初赛Re方向WriteUp、复现</summary>
    
    
    
    <category term="WriteUp&amp;复现" scheme="https://sydzi.github.io/categories/WriteUp-%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="WriteUp" scheme="https://sydzi.github.io/tags/WriteUp/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
    <category term="复现" scheme="https://sydzi.github.io/tags/%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Day1:数据结构与复杂度</title>
    <link href="https://sydzi.github.io/2025/09/18/Day1-%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>https://sydzi.github.io/2025/09/18/Day1-%E5%A4%8D%E6%9D%82%E5%BA%A6/</id>
    <published>2025-09-18T04:16:30.000Z</published>
    <updated>2025-09-18T14:24:47.654Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构简述、复杂度初探</p><span id="more"></span><h2 id="数据结构简述"><a href="#数据结构简述" class="headerlink" title="数据结构简述"></a>数据结构简述</h2><ul><li><p>“数据结构（data structure）是组织和存储数据的方式，涵盖数据内容、数据之间关系和数据操作方法”，这是<a href="https://www.hello-algo.com/">Hello 算法</a>中给出的定义。数据结构是人为创造的、服务于数据存储与处理的一种规范，我们可以根据一种数据结构的概念，用不同的语言、不同的特性来实现它。</p></li><li><p>数据主要有两种存储结构：顺序存储和链式存储。这两种存储结构是后续各种数据结构实现的基础。</p><ul><li><p>顺序存储，就是数据存储在连续的内存空间上。</p></li><li><p>链式存储，就是数据存储在不连续的内存空间上，但是每个内存单位之间又有联系，像链条一样串联在一起。</p></li></ul></li><li><p>数据结构按照逻辑特征可以分为四种：线性结构、图结构、树形结构、集合结构。</p></li><li><p>抽象数据类型(ADT)：用于描述数据结构的一种模型，包括了结构特性的描述、相关的运算函数描述。ADT和类很像，但是ADT更像是用代码实现具体数据结构前列的的提纲。</p></li><li><p>算法是对数据进行处理的策略，即运算方法。算法会依赖数据结构来实现。算法追求效率，即更短的运算时间和更少的资源占用。</p></li></ul><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li><p>算法追求时间和空间上的效率，所以描述一个算法的复杂度分为两种：时间复杂度和空间复杂度。</p></li><li><p>时间复杂度评估的是一段代码的运行时间，由于计算机执行操作的时间都很短，所以时间复杂度的评估往往等同于操作次数的评估。我们通常说的时间复杂度实际上是渐进时间复杂度。标准的时间复杂度考虑代码中所有的操作，比如赋值会记1次操作，两个变量相加会记1次操作等。渐进时间复杂度则只考虑操作数的量级，所以关注的往往是代码中的关键操作。</p><p>所谓关键操作，一般是指操作边界含n，即操作的边界含有变量、不同情况下边界不同的的操作。如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        sum+=n;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，for循环中的操作执行次数依赖于边界n，这就是我们需要关注的地方。</p><p>以这段代码为例，给sum赋值的语句记1次操作，for循环中，给i赋值记1次操作，i的边界判断记n+1次操作（因为i自增到n+1还会到i&lt;&#x3D;n这里来进行边界判断），for循环中sum累加记n次操作，返回sum记1次操作。这样子，这段代码总共进行了2n+4次操作，只考虑量级的话就是n。</p></li><li><p>对于渐进时间复杂度，采用大O表示法：O(算法量级)。如上面这段代码，量级为n，渐进时间复杂度记为O(n)。</p></li><li><p>空间复杂度评估的是一段代码占用的内存空间。空间复杂度和时间复杂度类似，通常只考虑量级，但此处是占用内存空间的量级。内存空间的占用比较直观，关注的重点依旧是边界包含变量的操作，记录的是操作带来的内存空间占用情况。如赋值操作，记1个单位的空间占用；创建长度为n的数组，记n个单位的空间占用等。还用上面的代码为例子，sum赋值记1个单位，i赋值记1个单位，所以这段代码总共就占用2个单位的内存空间，量级为1，空间复杂度记为O(1)。</p></li><li><p>常见操作的时间复杂度和空间复杂度：</p><table><thead><tr><th align="left">语句&#x2F;操作</th><th align="left">时间复杂度</th><th align="left">空间复杂度</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>赋值操作</strong> (<code>a = b</code>)</td><td align="left">O(1)</td><td align="left">O(1)</td><td align="left">基本数据类型赋值</td></tr><tr><td align="left"><strong>算术运算</strong> (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>)</td><td align="left">O(1)</td><td align="left">O(1)</td><td align="left">固定大小数值运算</td></tr><tr><td align="left"><strong>比较操作</strong> (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>)</td><td align="left">O(1)</td><td align="left">O(1)</td><td align="left">基本数据类型比较</td></tr><tr><td align="left"><strong>数组索引</strong> (<code>arr[i]</code>)</td><td align="left">O(1)</td><td align="left">O(1)</td><td align="left">随机访问</td></tr><tr><td align="left"><strong>函数调用</strong></td><td align="left">O(1)</td><td align="left">O(1)</td><td align="left">调用开销本身</td></tr><tr><td align="left"><strong>if-else</strong></td><td align="left">O(1)</td><td align="left">O(1)</td><td align="left">条件判断本身</td></tr><tr><td align="left"><strong>switch-case</strong></td><td align="left">O(1)</td><td align="left">O(1)</td><td align="left">跳转表实现</td></tr><tr><td align="left"><strong>goto</strong></td><td align="left">O(1)</td><td align="left">O(1)</td><td align="left">跳转指令</td></tr><tr><td align="left"><strong>单层for循环</strong></td><td align="left">O(n)</td><td align="left">O(1)</td><td align="left">循环n次，体为O(1)</td></tr><tr><td align="left"><strong>嵌套for循环</strong></td><td align="left">O(n²)</td><td align="left">O(1)</td><td align="left">两层各n次循环</td></tr><tr><td align="left"><strong>while循环</strong></td><td align="left">O(n)</td><td align="left">O(1)</td><td align="left">循环n次，体为O(1)</td></tr><tr><td align="left"><strong>do-while循环</strong></td><td align="left">O(n)</td><td align="left">O(1)</td><td align="left">循环n次，体为O(1)</td></tr><tr><td align="left"><strong>递归调用</strong></td><td align="left">O(n)</td><td align="left">O(n)</td><td align="left">线性递归，n为深度</td></tr><tr><td align="left"><strong>尾递归优化</strong></td><td align="left">O(n)</td><td align="left">O(1)</td><td align="left">编译器优化后</td></tr><tr><td align="left"><strong>函数返回</strong></td><td align="left">O(1)</td><td align="left">O(1)</td><td align="left">栈帧销毁</td></tr><tr><td align="left"><strong>malloc&#x2F;new</strong></td><td align="left">O(1)</td><td align="left">O(n)</td><td align="left">分配n字节内存</td></tr><tr><td align="left"><strong>free&#x2F;delete</strong></td><td align="left">O(1)</td><td align="left">O(1)</td><td align="left">释放内存</td></tr><tr><td align="left"><strong>内存拷贝</strong></td><td align="left">O(n)</td><td align="left">O(1)</td><td align="left">拷贝n字节</td></tr><tr><td align="left"><strong>内存设置</strong></td><td align="left">O(n)</td><td align="left">O(1)</td><td align="left">设置n字节</td></tr><tr><td align="left"><strong>try-catch</strong></td><td align="left">O(1)</td><td align="left">O(1)</td><td align="left">无异常时开销</td></tr><tr><td align="left"><strong>throw抛出</strong></td><td align="left">O(n)</td><td align="left">O(1)</td><td align="left">n为调用栈深度</td></tr><tr><td align="left"><strong>异常捕获</strong></td><td align="left">O(1)</td><td align="left">O(1)</td><td align="left">匹配异常类型</td></tr></tbody></table></li></ul>]]></content>
    
    
    <summary type="html">数据结构简述、复杂度初探</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://sydzi.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="https://sydzi.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>week27-week30</title>
    <link href="https://sydzi.github.io/2025/09/08/week27-week30/"/>
    <id>https://sydzi.github.io/2025/09/08/week27-week30/</id>
    <published>2025-09-08T11:42:15.000Z</published>
    <updated>2025-10-05T14:27:27.889Z</updated>
    
    <content type="html"><![CDATA[<p>2025年9月篇</p><span id="more"></span><h2 id="week27-2025-9-1-2025-9-7"><a href="#week27-2025-9-1-2025-9-7" class="headerlink" title="week27 (2025.9.1-2025.9.7)"></a>week27 (2025.9.1-2025.9.7)</h2><ul><li>接下来打算把周记分成四周一篇了，每周照样更新，但是四周一篇文章</li><li>这周（其实是上周，这段是补的）把博客主题给换了。原先想着先配置完，到时候直接把文章移到新的博客文件里，但是进度太慢了。这周直接给原博客换皮😋还更了一篇博客,真好😋(虽然还是AI出力)</li><li>moe week4上新题了,但是week3甚至week2还有没写完的题</li><li>安卓这块的笔记还没更,开学了找找时间补上</li></ul><h2 id="week28-2025-9-8-2025-9-14"><a href="#week28-2025-9-8-2025-9-14" class="headerlink" title="week28 (2025.9.8-2025.9.14)"></a>week28 (2025.9.8-2025.9.14)</h2><ul><li>好的手忙脚乱的开学第一周，目前学习计划有待更新。</li><li>这周和X2c的新师傅们组队参加了湾区杯，独立解出了一道题，还是太菜了。考察方向还挺全面，pc端、安卓甚至微信小程序都有。</li></ul><h2 id="week29-2025-9-15-2025-9-21"><a href="#week29-2025-9-15-2025-9-21" class="headerlink" title="week29 (2025.9.15-2025.9.21)"></a>week29 (2025.9.15-2025.9.21)</h2><ul><li>这周有个长城杯（还有个铁人三项长城杯，这俩好像不是一个），只分web、AI安全、数据安全三个方向，没做出来，爆0了</li><li>开学了学习状态又开始不稳定了，老是偷懒不找时间学😖这学期好几门数学相关课，要燃尽了</li><li>给博客新开了数据结构分类，能不能更下去看造化了(</li></ul><h2 id="week30-2025-9-22-2025-9-28"><a href="#week30-2025-9-22-2025-9-28" class="headerlink" title="week30 (2025.9.22-2025.9.28)"></a>week30 (2025.9.22-2025.9.28)</h2><ul><li>这周又是没有新知识的一周</li><li>周六又干掉一道moectf的题，只剩最后一道week2的upx_revenge了，实在没招了😖</li><li>感觉还是没找到学业和比赛的平衡点，这样下去恐怕一学期学的都没有一个暑假多😖不得不吐槽为什么乱七八糟的课这么多啊😖</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;2025年9月篇&lt;/p&gt;</summary>
    
    
    
    <category term="周记" scheme="https://sydzi.github.io/categories/%E5%91%A8%E8%AE%B0/"/>
    
    
    <category term="周记" scheme="https://sydzi.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>icarus主题优化</title>
    <link href="https://sydzi.github.io/2025/09/02/icarus%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
    <id>https://sydzi.github.io/2025/09/02/icarus%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/</id>
    <published>2025-09-02T04:13:44.000Z</published>
    <updated>2025-09-07T07:50:42.954Z</updated>
    
    <content type="html"><![CDATA[<p>icarus主题复制功能重构（仿照next主题）、firebase统计阅读人数</p><span id="more"></span><h2 id="复制功能重构"><a href="#复制功能重构" class="headerlink" title="复制功能重构"></a>复制功能重构</h2><ul><li><p>icarus主题自带的复制功能是带文字选中的（如下图），个人感觉麻烦了点，于是考虑借鉴next的复制风格，一键复制</p><p><img src="/../images/image-20250902231901036.png" alt="官网指南截图"></p></li><li><p>实现：</p><p>hexo-theme-icarus&#x2F;source&#x2F;js&#x2F;main.js：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs diff">        if (clipboard) &#123;<br><span class="hljs-deletion">-           new ClipboardJS(&#x27;.highlight .copy&#x27;, &#123;</span><br><span class="hljs-deletion">-               target: function(trigger) &#123;</span><br><span class="hljs-deletion">-                   return trigger.parentNode.nextElementSibling;</span><br><span class="hljs-deletion">-               &#125;</span><br><span class="hljs-deletion">-           &#125;).on(&#x27;success&#x27;, function(e) &#123;</span><br><span class="hljs-deletion">-               e.clearSelection();</span><br><span class="hljs-deletion">-               const tmp = e.trigger.innerHTML;</span><br><span class="hljs-deletion">-               e.trigger.innerHTML = &#x27;&lt;i class=&quot;fas fa-check&quot;&gt;&lt;/i&gt;&#x27;;</span><br><span class="hljs-deletion">-               setTimeout(function() &#123;</span><br><span class="hljs-deletion">-                   e.trigger.innerHTML = tmp;</span><br><span class="hljs-deletion">-               &#125;, 2000);</span><br><span class="hljs-deletion">-           &#125;);</span><br><span class="hljs-addition">+           $(&#x27;figure.highlight&#x27;).each(function() &#123;</span><br><span class="hljs-addition">+               const target = $(this).find(&#x27;figcaption div.level-right&#x27;)[0];</span><br><span class="hljs-addition">+               if (target) &#123;</span><br><span class="hljs-addition">+                   registerCopyButton(target, this);</span><br><span class="hljs-addition">+               &#125;</span><br><span class="hljs-addition">+           &#125;);</span><br>        &#125;<br>        <br><span class="hljs-comment">----------------------------------------------------------------------------------</span><br><br>...<br><br>    $(&#x27;.article &gt; .content &gt; table&#x27;).each(function() &#123;<br>        if ($(this).width() &gt; $(this).parent().width()) &#123;<br>            $(this).wrap(&#x27;&lt;div class=&quot;table-overflow&quot;&gt;&lt;/div&gt;&#x27;);<br>        &#125;<br>    &#125;);<br><br><span class="hljs-addition">+    // 注册复制按钮功能，仿照Next主题实现</span><br><span class="hljs-addition">+    function registerCopyButton(target, element) &#123;</span><br><span class="hljs-addition">+        // 添加复制按钮</span><br><span class="hljs-addition">+        target.insertAdjacentHTML(&#x27;beforeend&#x27;, &#x27;&lt;a href=&quot;javascript:;&quot; class=&quot;copy&quot; title=&quot;Copy&quot;&gt;&lt;i class=&quot;fas fa-copy&quot;&gt;&lt;/i&gt;&lt;/a&gt;&#x27;);</span><br><span class="hljs-addition">+        const button = target.querySelector(&#x27;.copy&#x27;);</span><br><span class="hljs-addition">+        </span><br><span class="hljs-addition">+        button.addEventListener(&#x27;click&#x27;, function() &#123;</span><br><span class="hljs-addition">+            const code = element.querySelector(&#x27;.code&#x27;).innerText;</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            if (navigator.clipboard) &#123;</span><br><span class="hljs-addition">+                // 使用现代的Clipboard API</span><br><span class="hljs-addition">+                navigator.clipboard.writeText(code).then(function() &#123;</span><br><span class="hljs-addition">+                    button.querySelector(&#x27;i&#x27;).className = &#x27;fas fa-check-circle&#x27;;</span><br><span class="hljs-addition">+                &#125;, function() &#123;</span><br><span class="hljs-addition">+                    button.querySelector(&#x27;i&#x27;).className = &#x27;fas fa-times-circle&#x27;;</span><br><span class="hljs-addition">+                &#125;);</span><br><span class="hljs-addition">+            &#125; else &#123;</span><br><span class="hljs-addition">+                // 兼容性回退方案</span><br><span class="hljs-addition">+                const ta = document.createElement(&#x27;textarea&#x27;);</span><br><span class="hljs-addition">+                ta.style.top = window.scrollY + &#x27;px&#x27;;</span><br><span class="hljs-addition">+                ta.style.position = &#x27;absolute&#x27;;</span><br><span class="hljs-addition">+                ta.style.opacity = &#x27;0&#x27;;</span><br><span class="hljs-addition">+                ta.readOnly = true;</span><br><span class="hljs-addition">+                ta.value = code;</span><br><span class="hljs-addition">+                document.body.append(ta);</span><br><span class="hljs-addition">+                ta.select();</span><br><span class="hljs-addition">+                ta.setSelectionRange(0, code.length);</span><br><span class="hljs-addition">+                ta.readOnly = false;</span><br><span class="hljs-addition">+                const result = document.execCommand(&#x27;copy&#x27;);</span><br><span class="hljs-addition">+                button.querySelector(&#x27;i&#x27;).className = result ? &#x27;fas fa-check-circle&#x27; : &#x27;fas fa-times-circle&#x27;;</span><br><span class="hljs-addition">+                ta.blur();</span><br><span class="hljs-addition">+                button.blur();</span><br><span class="hljs-addition">+                document.body.removeChild(ta);</span><br><span class="hljs-addition">+            &#125;</span><br><span class="hljs-addition">+        &#125;);</span><br><span class="hljs-addition">+        </span><br><span class="hljs-addition">+        // 鼠标离开300ms后恢复复制图标</span><br><span class="hljs-addition">+        element.addEventListener(&#x27;mouseleave&#x27;, function() &#123;</span><br><span class="hljs-addition">+            setTimeout(function() &#123;</span><br><span class="hljs-addition">+                const icon = button.querySelector(&#x27;i&#x27;);</span><br><span class="hljs-addition">+                if (icon) &#123;</span><br><span class="hljs-addition">+                    icon.className = &#x27;fas fa-copy&#x27;;</span><br><span class="hljs-addition">+                &#125;</span><br><span class="hljs-addition">+            &#125;, 300);</span><br><span class="hljs-addition">+        &#125;);</span><br><span class="hljs-addition">+    &#125;</span><br><br>    function adjustNavbar() &#123;<br>        const navbarWidth = $(&#x27;.navbar-main .navbar-start&#x27;).outerWidth() + $(&#x27;.navbar-main .navbar-end&#x27;).outerWidth();<br>        if ($(document).outerWidth() &lt; navbarWidth) &#123;<br>            $(&#x27;.navbar-main .navbar-menu&#x27;).addClass(&#x27;justify-content-start&#x27;);<br>        &#125; else &#123;<br>            $(&#x27;.navbar-main .navbar-menu&#x27;).removeClass(&#x27;justify-content-start&#x27;);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>hexo-theme-icarus&#x2F;layout&#x2F;common&#x2F;scripts.jsx</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs diff">           return &lt;Fragment&gt;<br>            &lt;script src=&#123;cdn(&#x27;jquery&#x27;, &#x27;3.3.1&#x27;, &#x27;dist/jquery.min.js&#x27;)&#125;&gt;&lt;/script&gt;<br>            &lt;script src=&#123;cdn(&#x27;moment&#x27;, &#x27;2.22.2&#x27;, &#x27;min/moment-with-locales.min.js&#x27;)&#125;&gt;&lt;/script&gt;<br>            &lt;script dangerouslySetInnerHTML=&#123;&#123; __html: `moment.locale(&quot;$&#123;language&#125;&quot;);` &#125;&#125;&gt;&lt;/script&gt;<br>            &lt;script dangerouslySetInnerHTML=&#123;&#123; __html: embeddedConfig &#125;&#125;&gt;&lt;/script&gt;<br>            &lt;script data-pjax src=&#123;url_for(&#x27;/js/column.js&#x27;)&#125;&gt;&lt;/script&gt;<br>            &lt;Plugins site=&#123;site&#125; config=&#123;config&#125; page=&#123;page&#125; helper=&#123;helper&#125; head=&#123;false&#125; /&gt;<br><span class="hljs-deletion">-           &#123;clipboard &amp;&amp; &lt;script src=&#123;cdn(&#x27;clipboard&#x27;, &#x27;2.0.4&#x27;, &#x27;dist/clipboard.min.js&#x27;)&#125; defer&gt;&lt;/script&gt;&#125;</span><br>            &lt;script data-pjax src=&#123;url_for(&#x27;/js/main.js&#x27;)&#125; defer&gt;&lt;/script&gt;<br>        &lt;/Fragment&gt;;<br></code></pre></td></tr></table></figure></li></ul><h2 id="使用firebase统计阅读人数"><a href="#使用firebase统计阅读人数" class="headerlink" title="使用firebase统计阅读人数"></a>使用firebase统计阅读人数</h2><h3 id="config文件添加配置"><a href="#config文件添加配置" class="headerlink" title="config文件添加配置"></a>config文件添加配置</h3><p>_config.icarus.yml</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+# Firebase Firestore 阅读人数统计</span><br><span class="hljs-addition">+services:</span><br><span class="hljs-addition">+    firebase:</span><br><span class="hljs-addition">+        enable: true</span><br><span class="hljs-addition">+        collection: articles # Firestore数据库中的集合名称</span><br><span class="hljs-addition">+        apiKey:  # 你的Firebase API Key</span><br><span class="hljs-addition">+        projectId:  # 你的Firebase项目ID</span><br></code></pre></td></tr></table></figure><h3 id="文章head增加人数统计"><a href="#文章head增加人数统计" class="headerlink" title="文章head增加人数统计"></a>文章head增加人数统计</h3><p>hexo-theme-icarus&#x2F;layout&#x2F;common&#x2F;articles.jsx</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">                            &#123;/* Visitor counter */&#125;                            <br>                            &#123;!index &amp;&amp; plugins &amp;&amp; plugins.busuanzi <span class="hljs-comment">=== true ? &lt;span class=&quot;level-item&quot; id=&quot;busuanzi_container_page_pv&quot; dangerouslySetInnerHTML=&#123;&#123;</span><br>                                __html: _p(&#x27;plugin.visit_count&#x27;, &#x27;&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;0&lt;/span&gt;&#x27;)<br>                            &#125;&#125;&gt;&lt;/span&gt; : null&#125;<br><span class="hljs-addition">+                           &#123;/* Firebase Visitor counter */&#125;</span><br><span class="hljs-addition">+                           &#123;config.services &amp;&amp; config.services.firebase &amp;&amp; config.services.firebase.enable ? &lt;span class=&quot;level-item&quot;&gt;</span><br><span class="hljs-addition">+                               &lt;i class=&quot;far fa-eye mr-1&quot;&gt;&lt;/i&gt;</span><br><span class="hljs-addition">+                               &lt;span class=&quot;firestore-visitors-count&quot;&gt;0&lt;/span&gt;</span><br><span class="hljs-addition">+                           &lt;/span&gt; : null&#125;</span><br></code></pre></td></tr></table></figure><h3 id="基于firebase的统计功能实现"><a href="#基于firebase的统计功能实现" class="headerlink" title="基于firebase的统计功能实现"></a>基于firebase的统计功能实现</h3><p>source&#x2F;js&#x2F;firebase_counter.js（新建）</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+/* global IcarusThemeSettings, firebase */</span><br><span class="hljs-addition">+</span><br><span class="hljs-addition">+// Firebase Counter - 阅读量统计功能</span><br><span class="hljs-addition">+</span><br><span class="hljs-addition">+if (IcarusThemeSettings &amp;&amp; IcarusThemeSettings.services &amp;&amp; IcarusThemeSettings.services.firebase &amp;&amp; IcarusThemeSettings.services.firebase.enable) &#123;</span><br><span class="hljs-addition">+    </span><br><span class="hljs-addition">+    // 初始化Firebase</span><br><span class="hljs-addition">+    try &#123;</span><br><span class="hljs-addition">+        // 确保firebase对象存在</span><br><span class="hljs-addition">+        if (typeof firebase === &#x27;undefined&#x27;) &#123;</span><br><span class="hljs-addition">+            console.error(&#x27;Firebase library not loaded&#x27;);</span><br><span class="hljs-addition">+            // 如果Firebase库未加载，隐藏计数器元素</span><br><span class="hljs-addition">+            document.querySelectorAll(&#x27;.firestore-visitors-count&#x27;).forEach(el =&gt; &#123;</span><br><span class="hljs-addition">+                el.style.display = &#x27;none&#x27;;</span><br><span class="hljs-addition">+            &#125;);</span><br><span class="hljs-addition">+        &#125; else &#123;</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            firebase.initializeApp(&#123;</span><br><span class="hljs-addition">+                apiKey: IcarusThemeSettings.services.firebase.apiKey,</span><br><span class="hljs-addition">+                projectId: IcarusThemeSettings.services.firebase.projectId</span><br><span class="hljs-addition">+            &#125;);</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            // 开发环境检测</span><br><span class="hljs-addition">+            const isLocalhost = [&#x27;localhost&#x27;, &#x27;127.0.0.1&#x27;].includes(window.location.hostname);</span><br><span class="hljs-addition">+            const isDevelopment = isLocalhost || window.location.hostname.includes(&#x27;192.168.&#x27;);</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            // 移除所有调试日志输出</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            // 获取数据库引用</span><br><span class="hljs-addition">+            const db = firebase.firestore();</span><br><span class="hljs-addition">+            const articlesCollection = IcarusThemeSettings.services.firebase.collection || &#x27;articles&#x27;;</span><br><span class="hljs-addition">+            const articles = db.collection(articlesCollection);</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            // 获取阅读次数函数</span><br><span class="hljs-addition">+            const getCount = (doc, increaseCount) =&gt; &#123;</span><br><span class="hljs-addition">+                // 获取文档数据</span><br><span class="hljs-addition">+                return doc.get().then(d =&gt; &#123;</span><br><span class="hljs-addition">+                    // 初始化计数</span><br><span class="hljs-addition">+                    let count = d.exists ? d.data().count : 0;</span><br><span class="hljs-addition">+                    </span><br><span class="hljs-addition">+                    // 如果需要增加计数（只在文章页面且未在同一会话访问过）</span><br><span class="hljs-addition">+                    if (increaseCount) &#123;</span><br><span class="hljs-addition">+                        // 增加计数</span><br><span class="hljs-addition">+                        count++;</span><br><span class="hljs-addition">+                        return doc.set(&#123; count &#125;).then(() =&gt; &#123;</span><br><span class="hljs-addition">+                            if (isDevelopment) console.log(&#x27;计数已更新:&#x27;, count);</span><br><span class="hljs-addition">+                            return count;</span><br><span class="hljs-addition">+                        &#125;).catch(error =&gt; &#123;</span><br><span class="hljs-addition">+                            console.error(&#x27;Error updating count:&#x27;, error);</span><br><span class="hljs-addition">+                            return count; // 返回增加前的计数</span><br><span class="hljs-addition">+                        &#125;);</span><br><span class="hljs-addition">+                    &#125;</span><br><span class="hljs-addition">+                    </span><br><span class="hljs-addition">+                    return count;</span><br><span class="hljs-addition">+                &#125;).catch(error =&gt; &#123;</span><br><span class="hljs-addition">+                    console.error(&#x27;Error getting count:&#x27;, error);</span><br><span class="hljs-addition">+                    // 出错时返回默认值0</span><br><span class="hljs-addition">+                    return 0;</span><br><span class="hljs-addition">+                &#125;);</span><br><span class="hljs-addition">+            &#125;;</span><br><span class="hljs-addition">+</span><br><span class="hljs-addition">+            // 处理阅读计数的函数</span><br><span class="hljs-addition">+            const handleViewCount = () =&gt; &#123;</span><br><span class="hljs-addition">+                // 获取当前URL路径</span><br><span class="hljs-addition">+                const currentPath = window.location.pathname;</span><br><span class="hljs-addition">+                </span><br><span class="hljs-addition">+                // 增强首页识别：使用多个可能的选择器</span><br><span class="hljs-addition">+                const isIndexPage = document.querySelector(&#x27;.article-list&#x27;) !== null ||</span><br><span class="hljs-addition">+                                   document.querySelector(&#x27;.article-card-list&#x27;) !== null ||</span><br><span class="hljs-addition">+                                   document.querySelectorAll(&#x27;.article-card&#x27;).length &gt; 0 || // 降低阈值以适应首页</span><br><span class="hljs-addition">+                                   (currentPath === &#x27;/&#x27; &amp;&amp; document.querySelector(&#x27;article.article&#x27;) !== null); // 特殊处理：根路径+article.article元素</span><br><span class="hljs-addition">+                </span><br><span class="hljs-addition">+                // 增强文章页面识别：使用更精确的选择器组合</span><br><span class="hljs-addition">+                // 重要：首页优先判断，且文章页判断要排除首页的情况，并增加特定的文章页特征</span><br><span class="hljs-addition">+                const isArticlePage = !isIndexPage &amp;&amp; (</span><br><span class="hljs-addition">+                    // 传统文章页选择器</span><br><span class="hljs-addition">+                    (document.querySelector(&#x27;.article-container&#x27;) !== null &amp;&amp; document.querySelector(&#x27;.article-content&#x27;) !== null) ||</span><br><span class="hljs-addition">+                    (document.querySelector(&#x27;article.post&#x27;) !== null &amp;&amp; document.querySelector(&#x27;.article-content&#x27;) !== null) ||</span><br><span class="hljs-addition">+                    document.querySelector(&#x27;[id=&quot;post-content&quot;]&#x27;) !== null ||</span><br><span class="hljs-addition">+                    // 针对hexo s环境的增强选择器，但需要确保不是首页</span><br><span class="hljs-addition">+                    (document.querySelector(&#x27;article.article&#x27;) !== null &amp;&amp; </span><br><span class="hljs-addition">+                     document.querySelector(&#x27;article.card-content.article&#x27;) !== null &amp;&amp;</span><br><span class="hljs-addition">+                     document.querySelectorAll(&#x27;.article-card&#x27;).length === 0 &amp;&amp;</span><br><span class="hljs-addition">+                     currentPath !== &#x27;/&#x27;)</span><br><span class="hljs-addition">+                );</span><br><span class="hljs-addition">+                                    </span><br><span class="hljs-addition">+                // 页面类型信息 - 仅在开发环境显示</span><br><span class="hljs-addition">+                if (isDevelopment) &#123;</span><br><span class="hljs-addition">+                    console.log(`[Firebase] 当前页面类型: $&#123;isArticlePage ? &#x27;文章页&#x27; : isIndexPage ? &#x27;首页&#x27; : &#x27;其他页面&#x27;&#125;`);</span><br><span class="hljs-addition">+                &#125;</span><br><span class="hljs-addition">+</span><br><span class="hljs-addition">+                if (isArticlePage) &#123;</span><br><span class="hljs-addition">+                    // 文章页面处理</span><br><span class="hljs-addition">+                    const titleElement = document.querySelector(&#x27;.title.is-3, .title.is-4-mobile&#x27;);</span><br><span class="hljs-addition">+                    const countElement = document.querySelector(&#x27;.firestore-visitors-count&#x27;);</span><br><span class="hljs-addition">+                    </span><br><span class="hljs-addition">+                    if (titleElement &amp;&amp; countElement) &#123;</span><br><span class="hljs-addition">+                        const title = titleElement.textContent.trim();</span><br><span class="hljs-addition">+                        const doc = articles.doc(title);</span><br><span class="hljs-addition">+                        </span><br><span class="hljs-addition">+                        // 确定是否增加计数：不在本地开发环境且同一会话未访问过</span><br><span class="hljs-addition">+                        let increaseCount = !isDevelopment;</span><br><span class="hljs-addition">+                        </span><br><span class="hljs-addition">+                        if (sessionStorage.getItem(title)) &#123;</span><br><span class="hljs-addition">+                            increaseCount = false;</span><br><span class="hljs-addition">+                        &#125; else &#123;</span><br><span class="hljs-addition">+                            // 标记为在当前会话中已访问</span><br><span class="hljs-addition">+                            sessionStorage.setItem(title, true);</span><br><span class="hljs-addition">+                        &#125;</span><br><span class="hljs-addition">+                        </span><br><span class="hljs-addition">+                        getCount(doc, increaseCount).then(count =&gt; &#123;</span><br><span class="hljs-addition">+                            countElement.innerText = count;</span><br><span class="hljs-addition">+                        &#125;).catch(e =&gt; &#123;</span><br><span class="hljs-addition">+                            // 移除错误日志</span><br><span class="hljs-addition">+                        &#125;);</span><br><span class="hljs-addition">+                    &#125; else &#123;</span><br><span class="hljs-addition">+                        // 静默处理：未找到文章标题或计数元素</span><br><span class="hljs-addition">+                    &#125;</span><br><span class="hljs-addition">+                &#125; else if (isIndexPage) &#123;</span><br><span class="hljs-addition">+                    // 首页文章列表处理</span><br><span class="hljs-addition">+                    // 修改选择器以匹配实际HTML结构</span><br><span class="hljs-addition">+                    // 首页文章结构: .card &gt; .card-content.article &gt; .title.is-3.is-size-4-mobile</span><br><span class="hljs-addition">+                    const titleElements = document.querySelectorAll(</span><br><span class="hljs-addition">+                        &#x27;.card .article .title.is-3, .card .article .title.is-4-mobile, &#x27; +</span><br><span class="hljs-addition">+                        &#x27;.card article .title.is-3, .card article .title.is-4-mobile, &#x27; +</span><br><span class="hljs-addition">+                        &#x27;.card .article p.title, .card article p.title&#x27;</span><br><span class="hljs-addition">+                    );</span><br><span class="hljs-addition">+                    const countElements = document.querySelectorAll(&#x27;.card .article .firestore-visitors-count, .card article .firestore-visitors-count&#x27;);</span><br><span class="hljs-addition">+                </span><br><span class="hljs-addition">+                // 移除首页元素检测日志</span><br><span class="hljs-addition">+                </span><br><span class="hljs-addition">+                if (titleElements.length &gt; 0 &amp;&amp; countElements.length &gt; 0) &#123;</span><br><span class="hljs-addition">+                    const promises = [...titleElements].map(element =&gt; &#123;</span><br><span class="hljs-addition">+                            const title = element.textContent.trim();</span><br><span class="hljs-addition">+                            const doc = articles.doc(title);</span><br><span class="hljs-addition">+                            // 首页只获取计数，不增加计数</span><br><span class="hljs-addition">+                            return getCount(doc, false).then(count =&gt; &#123;</span><br><span class="hljs-addition">+                                return count;</span><br><span class="hljs-addition">+                            &#125;);</span><br><span class="hljs-addition">+                        &#125;);</span><br><span class="hljs-addition">+                    </span><br><span class="hljs-addition">+                    Promise.all(promises).then(counts =&gt; &#123;</span><br><span class="hljs-addition">+                            counts.forEach((val, idx) =&gt; &#123;</span><br><span class="hljs-addition">+                                if (countElements[idx]) &#123;</span><br><span class="hljs-addition">+                                    countElements[idx].innerText = val;</span><br><span class="hljs-addition">+                                &#125;</span><br><span class="hljs-addition">+                            &#125;);</span><br><span class="hljs-addition">+                        &#125;).catch(e =&gt; &#123;</span><br><span class="hljs-addition">+                            // 错误处理：尝试显示一些默认值或替代文本</span><br><span class="hljs-addition">+                            countElements.forEach(el =&gt; &#123;</span><br><span class="hljs-addition">+                                if (el.innerText === &#x27;0&#x27;) &#123;</span><br><span class="hljs-addition">+                                    el.innerText = &#x27;加载中...&#x27;;</span><br><span class="hljs-addition">+                                &#125;</span><br><span class="hljs-addition">+                            &#125;);</span><br><span class="hljs-addition">+                        &#125;);</span><br><span class="hljs-addition">+                &#125; else &#123;</span><br><span class="hljs-addition">+                    // 尝试使用更通用的选择器</span><br><span class="hljs-addition">+                    const fallbackTitleElements = document.querySelectorAll(&#x27;.article-card a[href^=&quot;/&quot;]&#x27;);</span><br><span class="hljs-addition">+                    const fallbackCountElements = document.querySelectorAll(&#x27;.article-card .firestore-visitors-count&#x27;);</span><br><span class="hljs-addition">+                    </span><br><span class="hljs-addition">+                    if (fallbackTitleElements.length &gt; 0 &amp;&amp; fallbackCountElements.length &gt; 0) &#123;</span><br><span class="hljs-addition">+                        // 这里可以添加备选逻辑</span><br><span class="hljs-addition">+                    &#125;</span><br><span class="hljs-addition">+                &#125;</span><br><span class="hljs-addition">+                &#125; else &#123;</span><br><span class="hljs-addition">+                    // 静默处理：当前页面既不是文章页也不是首页</span><br><span class="hljs-addition">+                &#125;</span><br><span class="hljs-addition">+            &#125;;</span><br><span class="hljs-addition">++</span><br><span class="hljs-addition">+            // 监听传统页面加载完成事件</span><br><span class="hljs-addition">+            document.addEventListener(&#x27;DOMContentLoaded&#x27;, () =&gt; &#123;</span><br><span class="hljs-addition">+                handleViewCount();</span><br><span class="hljs-addition">+            &#125;);</span><br><span class="hljs-addition">+            </span><br><span class="hljs-addition">+            // 监听PJAX页面加载完成事件（适配Icarus主题的PJAX机制）</span><br><span class="hljs-addition">+            document.addEventListener(&#x27;page:loaded&#x27;, () =&gt; &#123;</span><br><span class="hljs-addition">+                handleViewCount();</span><br><span class="hljs-addition">+            &#125;);</span><br><span class="hljs-addition">+        &#125;</span><br><span class="hljs-addition">+    &#125; catch (error) &#123;</span><br><span class="hljs-addition">+        // 移除初始化失败日志</span><br><span class="hljs-addition">+        // 如果初始化失败，尝试隐藏计数器元素以避免显示为0</span><br><span class="hljs-addition">+        document.querySelectorAll(&#x27;.firestore-visitors-count&#x27;).forEach(el =&gt; &#123;</span><br><span class="hljs-addition">+            el.style.display = &#x27;none&#x27;;</span><br><span class="hljs-addition">+        &#125;);</span><br><span class="hljs-addition">+    &#125;</span><br><span class="hljs-addition">+&#125;</span><br></code></pre></td></tr></table></figure><h3 id="其他一些优化"><a href="#其他一些优化" class="headerlink" title="其他一些优化"></a>其他一些优化</h3><p>hexo-theme-icarus&#x2F;layout&#x2F;common&#x2F;scripts.jsx</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs diff">const &#123; Component, Fragment &#125; = require(&#x27;inferno&#x27;);<br>const &#123; toMomentLocale &#125; = require(&#x27;hexo/dist/plugins/helper/date&#x27;);<br>const Plugins = require(&#x27;./plugins&#x27;);<br><br>module.exports = class extends Component &#123;<br>    render() &#123;<br>        const &#123; site, config, helper, page &#125; = this.props;<br>        const &#123; url_for, cdn &#125; = helper;<br>        const &#123; article &#125; = config;<br>        const language = toMomentLocale(page.lang || page.language || config.language || &#x27;en&#x27;);<br><br>        let fold = &#x27;unfolded&#x27;;<br>        let clipboard = true;<br>        if (article &amp;&amp; article.highlight) &#123;<br>            if (typeof article.highlight.clipboard !== &#x27;undefined&#x27;) &#123;<br>                clipboard = !!article.highlight.clipboard;<br>            &#125;<br>            if (typeof article.highlight.fold <span class="hljs-comment">=== &#x27;string&#x27;) &#123;</span><br>                fold = article.highlight.fold;<br>            &#125;<br>        &#125;<br><br>        const embeddedConfig = `var IcarusThemeSettings = &#123;<br>            article: &#123;<br>                highlight: &#123;<br>                    clipboard: $&#123;clipboard&#125;,<br>                    fold: &#x27;$&#123;fold&#125;&#x27;<br>                &#125;<br><span class="hljs-addition">+           &#125;,</span><br><span class="hljs-addition">+           services: &#123;</span><br><span class="hljs-addition">+               firebase: $&#123;config.services &amp;&amp; config.services.firebase ? JSON.stringify(config.services.firebase) : &#x27;false&#x27;&#125;</span><br>            &#125;<br>        &#125;;`;<br><br>        return &lt;Fragment&gt;<br>            &lt;script src=&#123;cdn(&#x27;jquery&#x27;, &#x27;3.3.1&#x27;, &#x27;dist/jquery.min.js&#x27;)&#125;&gt;&lt;/script&gt;<br>            &lt;script src=&#123;cdn(&#x27;moment&#x27;, &#x27;2.22.2&#x27;, &#x27;min/moment-with-locales.min.js&#x27;)&#125;&gt;&lt;/script&gt;<br>            &lt;script dangerouslySetInnerHTML=&#123;&#123; __html: `moment.locale(&quot;$&#123;language&#125;&quot;);` &#125;&#125;&gt;&lt;/script&gt;<br>            &lt;script dangerouslySetInnerHTML=&#123;&#123; __html: embeddedConfig &#125;&#125;&gt;&lt;/script&gt;<br><span class="hljs-addition">+           &#123;/* Firebase Firestore */&#125;</span><br><span class="hljs-addition">+           &#123;config.services &amp;&amp; config.services.firebase &amp;&amp; config.services.firebase.enable ? (</span><br><span class="hljs-addition">+               &lt;Fragment&gt;</span><br><span class="hljs-addition">+                   &lt;script src=&quot;https://www.gstatic.com/firebasejs/9.6.11/firebase-app-compat.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-addition">+                   &lt;script src=&quot;https://www.gstatic.com/firebasejs/9.6.11/firebase-firestore-compat.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-addition">+               &lt;/Fragment&gt;</span><br><span class="hljs-addition">+           ) : null&#125;</span><br>            &lt;script data-pjax src=&#123;url_for(&#x27;/js/column.js&#x27;)&#125;&gt;&lt;/script&gt;<br>            &lt;Plugins site=&#123;site&#125; config=&#123;config&#125; page=&#123;page&#125; helper=&#123;helper&#125; head=&#123;false&#125; /&gt;<br>            &lt;script data-pjax src=&#123;url_for(&#x27;/js/main.js&#x27;)&#125; defer&gt;&lt;/script&gt;<br><span class="hljs-addition">+           &#123;/* Firebase counter script */&#125;</span><br><span class="hljs-addition">+           &#123;config.services &amp;&amp; config.services.firebase &amp;&amp; config.services.firebase.enable ? (</span><br><span class="hljs-addition">+               &lt;script data-pjax src=&#123;url_for(&#x27;/js/firebase_counter.js&#x27;)&#125; defer&gt;&lt;/script&gt;</span><br><span class="hljs-addition">+           ) : null&#125;</span><br>        &lt;/Fragment&gt;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">重构icarus主题复制功能（仿照next主题）、icarus主题使用firebase统计阅读人数</summary>
    
    
    
    <category term="杂记" scheme="https://sydzi.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="blog" scheme="https://sydzi.github.io/tags/blog/"/>
    
    <category term="杂记" scheme="https://sydzi.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Day16:Z3求解器</title>
    <link href="https://sydzi.github.io/2025/08/21/Day16-Z3/"/>
    <id>https://sydzi.github.io/2025/08/21/Day16-Z3/</id>
    <published>2025-08-21T04:04:22.000Z</published>
    <updated>2025-10-03T11:37:37.712Z</updated>
    
    <content type="html"><![CDATA[<p>z3求解器</p><span id="more"></span><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li>Int：整数</li><li>BitVec：二进制数据（如BitVec(‘a’,8)：8个比特位的一个变量a）</li><li>Real：有理数</li><li>Bool：布尔值</li><li>Array：数组</li></ul><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><h3 id="设变量"><a href="#设变量" class="headerlink" title="设变量"></a>设变量</h3><ul><li>使用基本数据类型来声明变量，如：x&#x3D;Int(‘x’)</li></ul><h3 id="创建求解器"><a href="#创建求解器" class="headerlink" title="创建求解器"></a>创建求解器</h3><ul><li>使用函数Solve()创建一个求解器：s&#x3D;Solver()</li></ul><h3 id="添加约束条件"><a href="#添加约束条件" class="headerlink" title="添加约束条件"></a>添加约束条件</h3><ul><li>使用函数add()添加约束条件：s.add(一个方程&#x2F;不等式)</li></ul><h3 id="判断是否有解"><a href="#判断是否有解" class="headerlink" title="判断是否有解"></a>判断是否有解</h3><ul><li>使用函数check()检查是否有解，有解返回’sat’，无解返回’unsat’</li></ul><h3 id="取解的交集"><a href="#取解的交集" class="headerlink" title="取解的交集"></a>取解的交集</h3><ul><li>使用函数model()取满足每个条件的解的交集，返回的是字典，用model[变量名]可以得到变量的解</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>解方程{x,y|30x+15y&#x3D;675,12x+5y&#x3D;265}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>x=Int(<span class="hljs-string">&#x27;x&#x27;</span>)<br>y=Int(<span class="hljs-string">&#x27;y&#x27;</span>)<br><br>s=Solver()<br>s.add(<span class="hljs-number">30</span>*x+<span class="hljs-number">15</span>*y==<span class="hljs-number">675</span>)<br>s.add(<span class="hljs-number">12</span>*x+<span class="hljs-number">5</span>*y==<span class="hljs-number">265</span>)<br><span class="hljs-keyword">if</span> s.check()==sat:<br>    <span class="hljs-built_in">print</span>(s.model())<br><span class="hljs-comment">#得到解[x = 20, y = 5]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">z3求解器</summary>
    
    
    
    <category term="Reverse学习笔记" scheme="https://sydzi.github.io/categories/Reverse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Day15:指令虚拟化</title>
    <link href="https://sydzi.github.io/2025/08/06/Day15-%E6%8C%87%E4%BB%A4%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    <id>https://sydzi.github.io/2025/08/06/Day15-%E6%8C%87%E4%BB%A4%E8%99%9A%E6%8B%9F%E5%8C%96/</id>
    <published>2025-08-06T07:41:01.000Z</published>
    <updated>2025-10-03T11:37:20.528Z</updated>
    
    <content type="html"><![CDATA[<p>指令虚拟化、实现一个小型虚拟机程序、VM逆向实践</p><span id="more"></span><h2 id="什么是指令虚拟化"><a href="#什么是指令虚拟化" class="headerlink" title="什么是指令虚拟化"></a>什么是指令虚拟化</h2><ul><li><p>CPU厂商在开发CPU前会制定一个规范，建立起数据和操作的对应关系（如x86-64规定0x30对应异或操作），而这个数据又可以根据操作命名出汇编指令（如0x30命名为xor），因此有了数据与操作的对应关系和汇编指令与操作的对应关系，称之为指令集。CPU可以视作一个解释器，负责读取数据或者汇编指令然后带动机器产生操作。</p></li><li><p>通俗的讲，指令虚拟化实际上就是自定义指令集并为自己的指令集构建解释器，用自定义的指令实现程序的过程。这个过程利用高级语言代码实现，也就是用软件来模拟硬件，类似于虚拟机，因此称之为指令虚拟化。</p></li><li><p>实现指令虚拟化，需要定义寄存器变量（至少需要一个EIP来指向运行的指令）、内存空间数组、解释器和指令数组。</p></li><li><p>实现自定义指令集的解释器，可以采用C语言的switch（其中code是自定义指令，通过循环输入）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//解释器：1输出11111，2输出22222，3输出33333</span><br><span class="hljs-keyword">switch</span>(code):<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;11111&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>print(<span class="hljs-string">&quot;22222&quot;</span>);<br><span class="hljs-keyword">break</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>print(<span class="hljs-string">&quot;33333&quot;</span>);<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure></li></ul><h2 id="实现一个小型虚拟机程序"><a href="#实现一个小型虚拟机程序" class="headerlink" title="实现一个小型虚拟机程序"></a>实现一个小型虚拟机程序</h2><ul><li>尝试编写一个输入两个数，输出和的程序</li></ul><h3 id="声明虚拟硬件结构体"><a href="#声明虚拟硬件结构体" class="headerlink" title="声明虚拟硬件结构体"></a>声明虚拟硬件结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r1;<span class="hljs-comment">//寄存器r1</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r2;<span class="hljs-comment">//寄存器r2</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> eip;<span class="hljs-comment">//寄存器eip</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> mem[<span class="hljs-number">256</span>];<span class="hljs-comment">//虚拟内存数组</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[<span class="hljs-number">1024</span>];<span class="hljs-comment">//指令数组</span><br>&#125; VM;<br></code></pre></td></tr></table></figure><h3 id="定义指令集"><a href="#定义指令集" class="headerlink" title="定义指令集"></a>定义指令集</h3><ul><li>使用op1、op2表示指令后面跟的操作数，寄存器作为隐式参数不会出现在code中</li></ul><table><thead><tr><th align="center">指令</th><th align="center">使用格式</th><th align="center">对应汇编指令&#x2F;伪代码</th><th align="center">操作解读</th></tr></thead><tbody><tr><td align="center">0x10</td><td align="center">0x10,op1</td><td align="center">mov r1,mem[op1]</td><td align="center">r1&#x3D;mem[op1]</td></tr><tr><td align="center">0x11</td><td align="center">0x11,op1</td><td align="center">mov r2,mem[op1]</td><td align="center">r2&#x3D;mem[op1]</td></tr><tr><td align="center">0x20</td><td align="center">0x20</td><td align="center">add r1,r2</td><td align="center">r1+&#x3D;r2</td></tr><tr><td align="center">0x30</td><td align="center">0x30,op1,op2</td><td align="center">scanf-&gt;mem[op1],mem[op2]</td><td align="center">输入给mem[op1]，mem[op2]</td></tr><tr><td align="center">0x40</td><td align="center">0x40</td><td align="center">printf r1</td><td align="center">输出r1的值</td></tr><tr><td align="center">0x50</td><td align="center">0x50</td><td align="center">ret</td><td align="center">return 1</td></tr></tbody></table><h3 id="编写解释器"><a href="#编写解释器" class="headerlink" title="编写解释器"></a>编写解释器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">vm_run</span><span class="hljs-params">(VM* vm)</span> &#123;<br>    <span class="hljs-type">char</span> opcode;<span class="hljs-comment">//用来存放指令</span><br>    <span class="hljs-type">char</span> op1, op2;<span class="hljs-comment">//用来存放操作数</span><br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        opcode = vm-&gt;code[vm-&gt;eip];<span class="hljs-comment">//读取eip指向的指令</span><br><br>        <span class="hljs-keyword">switch</span> (opcode) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x10</span>:<br>            op1 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">1</span>];<span class="hljs-comment">//获取操作数</span><br>            vm-&gt;r1 = vm-&gt;mem[op1];<span class="hljs-comment">//r1=mem[op1]</span><br>            vm-&gt;eip += <span class="hljs-number">2</span>;<span class="hljs-comment">//跳转到下一条指令（指令+操作数占2个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x11</span>:<br>            op1 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">1</span>];<span class="hljs-comment">//获取操作数</span><br>            vm-&gt;r2 = vm-&gt;mem[op1];<span class="hljs-comment">//r2=mem[op1]</span><br>            vm-&gt;eip += <span class="hljs-number">2</span>;<span class="hljs-comment">//跳转到下一条指令（指令+操作数占2个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x20</span>:<br>            vm-&gt;r1 += vm-&gt;r2;<span class="hljs-comment">//r1+=r2</span><br>            vm-&gt;eip += <span class="hljs-number">1</span>;<span class="hljs-comment">//跳转到下一条指令（只有指令，占1个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x30</span>:<br>            op1 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">1</span>];<span class="hljs-comment">//获取操作数1</span><br>            op2 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">2</span>];<span class="hljs-comment">//获取操作数2</span><br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;vm-&gt;mem[op1], &amp;vm-&gt;mem[op2]);<span class="hljs-comment">//输入给mem[op1]，mem[op2]</span><br>            vm-&gt;eip += <span class="hljs-number">3</span>;<span class="hljs-comment">//跳转到下一条指令（指令+操作数占3个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x40</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, vm-&gt;r1);<span class="hljs-comment">//输出r1的值</span><br>            vm-&gt;eip += <span class="hljs-number">1</span>;<span class="hljs-comment">//跳转到下一条指令（只有指令，占1个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x50</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//循环终止，函数返回，虚拟机关机</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指令数组"><a href="#指令数组" class="headerlink" title="指令数组"></a>指令数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[]=&#123;<br><span class="hljs-number">0x30</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-comment">//输入给mem[0]，mem[1]</span><br>    <span class="hljs-number">0x10</span>,<span class="hljs-number">0x0</span>,<span class="hljs-comment">//r1=mem[0]</span><br>    <span class="hljs-number">0x11</span>,<span class="hljs-number">0x1</span>,<span class="hljs-comment">//r2=mem[1]</span><br>    <span class="hljs-number">0x20</span>,<span class="hljs-comment">//r1+=r2</span><br>    <span class="hljs-number">0x40</span>,<span class="hljs-comment">//输出r1的值</span><br>    <span class="hljs-number">0x50</span><span class="hljs-comment">//虚拟机关机</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r1;<span class="hljs-comment">//寄存器r1</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r2;<span class="hljs-comment">//寄存器r2</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> eip;<span class="hljs-comment">//寄存器eip</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> mem[<span class="hljs-number">256</span>];<span class="hljs-comment">//虚拟内存数组</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[<span class="hljs-number">1024</span>];<span class="hljs-comment">//指令数组</span><br>&#125; VM;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[]=&#123;<br><span class="hljs-number">0x30</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-comment">//输入给mem[0]，mem[1]</span><br>    <span class="hljs-number">0x10</span>,<span class="hljs-number">0x0</span>,<span class="hljs-comment">//r1=mem[0]</span><br>    <span class="hljs-number">0x11</span>,<span class="hljs-number">0x1</span>,<span class="hljs-comment">//r2=mem[1]</span><br>    <span class="hljs-number">0x20</span>,<span class="hljs-comment">//r1+=r2</span><br>    <span class="hljs-number">0x40</span>,<span class="hljs-comment">//输出r1的值</span><br>    <span class="hljs-number">0x50</span><span class="hljs-comment">//虚拟机关机</span><br>&#125;;<br><br>VM* <span class="hljs-title function_">vm_new</span><span class="hljs-params">()</span> &#123;<br>    VM* vm = (VM*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(VM));<span class="hljs-comment">//为虚拟硬件结构体申请空间</span><br>    <span class="hljs-built_in">memset</span>(vm, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(VM));<span class="hljs-comment">//初始化结构体</span><br>    <span class="hljs-built_in">memcpy</span>(vm-&gt;code, code, <span class="hljs-keyword">sizeof</span>(code));<span class="hljs-comment">//初始化code</span><br>    <span class="hljs-keyword">return</span> vm;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">vm_run</span><span class="hljs-params">(VM* vm)</span> &#123;<br>    <span class="hljs-type">char</span> opcode;<span class="hljs-comment">//用来存放指令</span><br>    <span class="hljs-type">char</span> op1, op2;<span class="hljs-comment">//用来存放操作数</span><br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        opcode = vm-&gt;code[vm-&gt;eip];<span class="hljs-comment">//读取eip指向的指令</span><br><br>        <span class="hljs-keyword">switch</span> (opcode) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x10</span>:<br>            op1 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">1</span>];<span class="hljs-comment">//获取操作数</span><br>            vm-&gt;r1 = vm-&gt;mem[op1];<span class="hljs-comment">//r1=mem[op1]</span><br>            vm-&gt;eip += <span class="hljs-number">2</span>;<span class="hljs-comment">//跳转到下一条指令（指令+操作数占2个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x11</span>:<br>            op1 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">1</span>];<span class="hljs-comment">//获取操作数</span><br>            vm-&gt;r2 = vm-&gt;mem[op1];<span class="hljs-comment">//r2=mem[op1]</span><br>            vm-&gt;eip += <span class="hljs-number">2</span>;<span class="hljs-comment">//跳转到下一条指令（指令+操作数占2个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x20</span>:<br>            vm-&gt;r1 += vm-&gt;r2;<span class="hljs-comment">//r1+=r2</span><br>            vm-&gt;eip += <span class="hljs-number">1</span>;<span class="hljs-comment">//跳转到下一条指令（只有指令，占1个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x30</span>:<br>            op1 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">1</span>];<span class="hljs-comment">//获取操作数1</span><br>            op2 = vm-&gt;code[vm-&gt;eip + <span class="hljs-number">2</span>];<span class="hljs-comment">//获取操作数2</span><br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;vm-&gt;mem[op1], &amp;vm-&gt;mem[op2]);<span class="hljs-comment">//输入给mem[op1]，mem[op2]</span><br>            vm-&gt;eip += <span class="hljs-number">3</span>;<span class="hljs-comment">//跳转到下一条指令（指令+操作数占3个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x40</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, vm-&gt;r1);<span class="hljs-comment">//输出r1的值</span><br>            vm-&gt;eip += <span class="hljs-number">1</span>;<span class="hljs-comment">//跳转到下一条指令（只有指令，占1个索引位）</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x50</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//循环终止，函数返回，虚拟机关机</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    VM* vm = vm_new();<span class="hljs-comment">//生成一个虚拟机</span><br>    <span class="hljs-keyword">if</span> (vm_run(vm))<span class="hljs-comment">//运行虚拟机</span><br>        system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="简单示例的逆向"><a href="#简单示例的逆向" class="headerlink" title="简单示例的逆向"></a>简单示例的逆向</h2><ul><li><p>VM题最显著的特征应该就是虚拟硬件结构体的初始化和解释器了。解决这类问题，需要先复刻出一个解释器，通过在解释器中增加打印分析出的代码的操作，来得到去虚拟化的原程序，进而可以正常逆向分析</p></li><li><p>先来看main函数：</p><p><img src="/../images/image-20250806232124465.png" alt="main函数"></p><p>下面三个带字符串的函数可以看出是printf和system</p></li><li><p>看看v1&#x3D;后面的函数</p><p><img src="/../images/image-20250806232516529.png" alt="v1=后面的函数"></p><p>目前没什么明显的VM特征</p></li><li><p>再看看if括号里的函数</p><p><img src="/../images/image-20250806232613438.png" alt="if括号里的函数"></p><p>看到出现switch了，开始推测是VM的解释器</p><p>回到上一个函数，发现确实和VM的初始化函数很像，最后面一个函数的第二个参数对应出来的是一堆数字，和初始化code对应上了</p><p><img src="/../images/image-20250806232947764.png" alt="一堆数字"></p></li><li><p>OK，那就对伪代码进行一点点优化，然后开始分析解释器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//推测虚拟硬件结构体</span><br>__int64 __fastcall <span class="hljs-title function_">vm_run</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *vm)</span><br>&#123;<br>  sub_140001940(&amp;unk_1401150A2);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">switch</span> ( *((_BYTE *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">268</span>) )<span class="hljs-comment">//vm+268是code所在，结合下文分析，加上vm[2]就构成了code[eip]</span><br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x10</span>:<br>        *vm = *((<span class="hljs-type">char</span> *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">269</span>);<span class="hljs-comment">//*vm=code[eip+1]，vm应该是一个寄存器，这句是mov r1,op1</span><br>        vm[<span class="hljs-number">2</span>] += <span class="hljs-number">2</span>;<span class="hljs-comment">//每个case都有，推测是eip。+=2，说明有一个操作数                            </span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x11</span>:<br>        vm[<span class="hljs-number">1</span>] = *((<span class="hljs-type">char</span> *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">269</span>);<span class="hljs-comment">//vm[1]=code[eip+1]，vm[1]应该也是一个寄存器,这句是mov r2,op1</span><br>        vm[<span class="hljs-number">2</span>] += <span class="hljs-number">2</span>;<span class="hljs-comment">//有一个操作数</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x20</span>:<br>        *((_BYTE *)vm + *((<span class="hljs-type">char</span> *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">269</span>) + <span class="hljs-number">12</span>) = *((_BYTE *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">270</span>);<br>            <span class="hljs-comment">//*((char *)vm + vm[2] + 269)是code[eip+1]，即op1，所以左边是vm+12+op1，推测vm+12是虚拟内存，刚好跨过三个连续的int型寄存器</span><br>            <span class="hljs-comment">//右边即vm+vm[2]+268+2即code[eip+2]，即op2</span><br>        vm[<span class="hljs-number">2</span>] += <span class="hljs-number">3</span>;<span class="hljs-comment">//有两个操作数</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x30</span>:<br>        *((_BYTE *)vm + *vm + <span class="hljs-number">12</span>) ^= *((_BYTE *)vm + <span class="hljs-number">4</span>);<span class="hljs-comment">//mem[r1]^=r2</span><br>        ++vm[<span class="hljs-number">2</span>];<span class="hljs-comment">//无操作数</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x40</span>:<br>        sub_140001610(&amp;unk_1400D74B0, vm + <span class="hljs-number">3</span>);<span class="hljs-comment">//unk这个是%5s，所以这是scanf。这里的vm是int，加三跳过了单个寄存器，是mem[0]</span><br>        ++vm[<span class="hljs-number">2</span>];<span class="hljs-comment">//无操作数</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x50</span>:<br>        <span class="hljs-keyword">return</span> sub_1400D4430(vm + <span class="hljs-number">3</span>, (<span class="hljs-type">char</span> *)vm + *((<span class="hljs-type">char</span> *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">269</span>) + <span class="hljs-number">12</span>, *((<span class="hljs-type">char</span> *)vm + vm[<span class="hljs-number">2</span>] + <span class="hljs-number">270</span>));<br>            <span class="hljs-comment">//三个参数分别为mem[0],mem[op1],op2，推测是memcmp（怎么没暗示操作数个数</span><br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>推测虚拟硬件结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>   <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r1;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r2;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> eip;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> mem[<span class="hljs-number">268</span><span class="hljs-number">-3</span>*<span class="hljs-number">4</span>=<span class="hljs-number">256</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[<span class="hljs-number">36</span>];<br>&#125; VM;<br></code></pre></td></tr></table></figure></li><li><p>带输出分析出来的代码的解释器如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">vm_run</span><span class="hljs-params">(VM* vm)</span> &#123;<br>    <span class="hljs-type">char</span> opcode;<br>    <span class="hljs-type">char</span> op1, op2;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        opcode = vm-&gt;code[vm-&gt;eip];<br><br>        <span class="hljs-keyword">switch</span> (opcode) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x10</span>:<br>            vm-&gt;r1 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            vm-&gt;eip += <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mov r1,&quot;</span> &lt;&lt; vm-&gt;r1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x11</span>:<br>            vm-&gt;r2 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            vm-&gt;eip += <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mov r2,&quot;</span> &lt;&lt; vm-&gt;r2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x20</span>:<br>            op1 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            op2 = code[vm-&gt;eip + <span class="hljs-number">2</span>];<br>            vm-&gt;mem[op1] = op2;<br>            vm-&gt;eip += <span class="hljs-number">3</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mov mem[&quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)op1 &lt;&lt; <span class="hljs-string">&quot;],&quot;</span> &lt;&lt; op2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x30</span>:<br>            vm-&gt;mem[vm-&gt;r1] ^= vm-&gt;r2;<br>            ++vm-&gt;eip;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;xor mem[&quot;</span> &lt;&lt; vm-&gt;r1 &lt;&lt; <span class="hljs-string">&quot;],&quot;</span> &lt;&lt; vm-&gt;r2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x40</span>:<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%5s&quot;</span>, &amp;vm-&gt;mem[<span class="hljs-number">0</span>]);<br>            ++vm-&gt;eip;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;scanf mem\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x50</span>:<br>            op1 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            op2 = code[vm-&gt;eip + <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">memcmp</span>(&amp;vm-&gt;mem[<span class="hljs-number">0</span>], &amp;vm-&gt;mem[op1], op2);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>完整的脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r1;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r2;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> eip;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> mem[<span class="hljs-number">256</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[<span class="hljs-number">36</span>];<br>&#125; VM ;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[] = &#123;<br>    <span class="hljs-number">0x20</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x40</span>,<br>    <span class="hljs-number">0x11</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x04</span>,<br>    <span class="hljs-number">0x30</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x05</span><br>&#125;;<br><br>VM* <span class="hljs-title function_">vm_new</span><span class="hljs-params">()</span> &#123;<br>    VM* vm = (VM*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(VM));<br>    <span class="hljs-built_in">memset</span>(vm, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(VM));<br>    <span class="hljs-built_in">memcpy</span>(vm-&gt;code, code, <span class="hljs-keyword">sizeof</span>(code));<br>    <span class="hljs-keyword">return</span> vm;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">vm_run</span><span class="hljs-params">(VM* vm)</span> &#123;<br>    <span class="hljs-type">char</span> opcode;<br>    <span class="hljs-type">char</span> op1, op2;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        opcode = vm-&gt;code[vm-&gt;eip];<br><br>        <span class="hljs-keyword">switch</span> (opcode) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x10</span>:<br>            vm-&gt;r1 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            vm-&gt;eip += <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mov r1,&quot;</span> &lt;&lt; vm-&gt;r1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x11</span>:<br>            vm-&gt;r2 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            vm-&gt;eip += <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mov r2,&quot;</span> &lt;&lt; vm-&gt;r2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x20</span>:<br>            op1 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            op2 = code[vm-&gt;eip + <span class="hljs-number">2</span>];<br>            vm-&gt;mem[op1] = op2;<br>            vm-&gt;eip += <span class="hljs-number">3</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mov mem[&quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)op1 &lt;&lt; <span class="hljs-string">&quot;],&quot;</span> &lt;&lt; op2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x30</span>:<br>            vm-&gt;mem[vm-&gt;r1] ^= vm-&gt;r2;<br>            ++vm-&gt;eip;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;xor mem[&quot;</span> &lt;&lt; vm-&gt;r1 &lt;&lt; <span class="hljs-string">&quot;],&quot;</span> &lt;&lt; vm-&gt;r2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x40</span>:<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%5s&quot;</span>, &amp;vm-&gt;mem[<span class="hljs-number">0</span>]);<br>            ++vm-&gt;eip;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;scanf mem\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x50</span>:<br>            op1 = code[vm-&gt;eip + <span class="hljs-number">1</span>];<br>            op2 = code[vm-&gt;eip + <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">memcmp</span>(&amp;vm-&gt;mem[<span class="hljs-number">0</span>], &amp;vm-&gt;mem[op1], op2);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    VM* vm = vm_new();<br>    <span class="hljs-keyword">if</span> (vm_run(vm))<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;failed\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;good\n&quot;</span>);<br>    <br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>这样我们得到了原程序的汇编代码（参杂着奇怪的代码）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> mem[<span class="hljs-number">16</span>],H<br><span class="hljs-keyword">mov</span> mem[<span class="hljs-number">17</span>],e<br><span class="hljs-keyword">mov</span> mem[<span class="hljs-number">18</span>],l<br><span class="hljs-keyword">mov</span> mem[<span class="hljs-number">19</span>],l<br><span class="hljs-keyword">mov</span> mem[<span class="hljs-number">20</span>],o<br><span class="hljs-number">12345</span><br>scanf mem<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>,<span class="hljs-number">33</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">xor</span> mem[<span class="hljs-number">0</span>],<span class="hljs-number">33</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">xor</span> mem[<span class="hljs-number">1</span>],<span class="hljs-number">33</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">xor</span> mem[<span class="hljs-number">2</span>],<span class="hljs-number">33</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>,<span class="hljs-number">3</span><br><span class="hljs-keyword">xor</span> mem[<span class="hljs-number">3</span>],<span class="hljs-number">33</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>,<span class="hljs-number">4</span><br><span class="hljs-keyword">xor</span> mem[<span class="hljs-number">4</span>],<span class="hljs-number">33</span><br>failed<br></code></pre></td></tr></table></figure></li><li><p>可以看到，程序先把”Hello”传给了mem的一片区域，然后获取输入，把输入的数与33异或，最后执行返回处的判断。返回处是对比mem[0]和mem[op1]，对比op2位，结合code最后几位，知道是对比mem[0]和mem[16]，对比5位。所以要求的输入是”Hello”逐位异或的结果（不可见字符，尝试输入失败）</p></li></ul>]]></content>
    
    
    <summary type="html">指令虚拟化、实现一个小型虚拟机程序、VM逆向实践</summary>
    
    
    
    <category term="Reverse学习笔记" scheme="https://sydzi.github.io/categories/Reverse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Day14:IDApython与SMC</title>
    <link href="https://sydzi.github.io/2025/08/05/Day14-IDApython%E4%B8%8ESMC/"/>
    <id>https://sydzi.github.io/2025/08/05/Day14-IDApython%E4%B8%8ESMC/</id>
    <published>2025-08-05T01:53:56.000Z</published>
    <updated>2025-10-03T11:37:14.381Z</updated>
    
    <content type="html"><![CDATA[<p>IDApythonAPI、SMC自修改代码</p><span id="more"></span><h2 id="IDApython"><a href="#IDApython" class="headerlink" title="IDApython"></a>IDApython</h2><ul><li>先贴上官方文档： <a href="https://python.docs.hex-rays.com/index.html">https://python.docs.hex-rays.com/index.html</a></li></ul><h3 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h3><ul><li>idc.here() &#x2F; idc.get_screen_ea()：返回光标所在处的地址</li><li>idc.get_inf_attr(INF_MIN_EA) &#x2F; idc.get_inf_attr(INF_MAX_EA)：返回最小&#x2F;最大地址（没有随机化地址情况下）</li><li>idc.generate_disasm_line(ea,0)：返回ea所在处的汇编指令</li><li>idc.prev_head(ea)&#x2F;next_head(ea)：返回ea处上一条&#x2F;下一条指令地址</li><li>idc.print_insn_mnem(ea)：打印ea处的助记符（即mov,add什么的）</li><li>idc.print_operand(ea,n)：打印ea处第n个操作数（n&#x3D;0或者1）</li></ul><h3 id="段相关API"><a href="#段相关API" class="headerlink" title="段相关API"></a>段相关API</h3><ul><li>idautils.Segments()：返回段起始地址列表</li><li>idc.get_segm_name(ea)：返回ea所在段的名字</li><li>idc.get_segm_start(ea)&#x2F;get_segm_end(ea)：返回ea所在段的起始地址&#x2F;结束地址</li><li>idc.get_next_seg(ea)：返回ea所在段的下一个段的起始地址</li></ul><h3 id="函数相关API"><a href="#函数相关API" class="headerlink" title="函数相关API"></a>函数相关API</h3><ul><li>idautils.Functions(start_addr,end_addr)：返回地址间的函数对象（不写参数就是所有函数对象）</li><li>idautils.FuncItems(ea)：返回ea所在函数所有指令的地址（相当于地址列表）</li><li>idaapi.get_func(ea)：获得ea所在函数的对象（含有如start_ea、end_ea、size等属性）</li><li>idc.get_func_name(ea)：返回ea所在函数的名字</li><li>idc.get_func_attr(ea,FUNCATTR_START) &#x2F; idc.get_func_attr(ea,FUNCATTR_END)：返回ea所在函数的起始地址&#x2F;结束地址</li><li>idc.get_next_func(ea) &#x2F; idc.get_prev_func(ea)：返回ea所在函数的上一个&#x2F;下一个函数的起始地址</li></ul><h3 id="指令相关API"><a href="#指令相关API" class="headerlink" title="指令相关API"></a>指令相关API</h3><ul><li>ida_ua.insn_t()，返回一个空的指令对象（或者说创建一个空的指令对象），包含函数的一些属性</li><li>idaapi.decode_insn(out,ea)，解析ea所在处的指令，把解析的结果给out（out必须是一个指令对象）<ul><li>out.ea：指令的起始地址</li><li>out.size：指令占用的字节数</li><li>out.get_cannon_mnemonic()：指令的助记符</li><li>out.itype：助记符的十进制码</li></ul></li></ul><h3 id="操作数相关API"><a href="#操作数相关API" class="headerlink" title="操作数相关API"></a>操作数相关API</h3><ul><li>idc.get_operand_value(ea,n)：返回ea处第n个操作数的值</li><li>idc.get_operand_type(ea,n)：返回ea处第n个操作数的类型</li></ul><h3 id="数据读写相关API"><a href="#数据读写相关API" class="headerlink" title="数据读写相关API"></a>数据读写相关API</h3><ul><li>idc.get_bytes(ea,size)：返回ea处size大小的bytes</li><li>idc.patch_byte(ea,content)：修改ea处的1字节为content</li><li>idc.patch_word(ea,content)：修改ea处的2字节为content</li><li>idc.patch_dword(ea,content)：修改ea处的4字节为content</li><li>idc.patch_qword(ea,content)：修改ea处的8字节为content</li></ul><h3 id="调试相关API"><a href="#调试相关API" class="headerlink" title="调试相关API"></a>调试相关API</h3><ul><li><p>ida_dbg.load_debugger(“local”,0)：启动调试器</p></li><li><p>ida_dbg.add_bpt(ea)：在ea处下断点</p></li><li><p>ida_dbg.del_bpt(ea)：删除ea处断点</p></li><li><p>ida_dbg.start_process(path,args,sdir)：启动调试进程，参数对应路径、命令行参数、工作目录</p></li><li><p>ida_dbg.step_into()：单步步入</p></li><li><p>ida_dbg.step_over()：单步步过</p></li><li><p>ida_dbg.step_until_ret()：运行到返回</p></li><li><p>idc.get_reg_value(regname)：获取regname寄存器的值</p></li><li><p>idc.set_reg_value(value,regname)：设置regname寄存器的值</p></li></ul><h3 id="其他操作相关API"><a href="#其他操作相关API" class="headerlink" title="其他操作相关API"></a>其他操作相关API</h3><ul><li><p>idautils.XrefsFrom(ea)：返回ea处引用的对象（有属性frm、to、type）</p></li><li><p>idautils.XrefsTo(ea)：返回所有引用ea处的对象（有属性frm、to、type）（Ctrl+X）</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idautils,idaapi<br><span class="hljs-keyword">for</span> xref <span class="hljs-keyword">in</span> idautils.XrefsTo(here()):<br>    <span class="hljs-built_in">print</span>(xref.to)<span class="hljs-comment">#here()</span><br>    <span class="hljs-built_in">print</span>(xref.frm)<span class="hljs-comment">#调用here()的函数地址</span><br><span class="hljs-keyword">for</span> xref <span class="hljs-keyword">in</span> idautils.XrefsFrom(here()):<br>    <span class="hljs-built_in">print</span>(xref.frm)<span class="hljs-comment">#here()</span><br>    <span class="hljs-built_in">print</span>(xref.to)<span class="hljs-comment">#here()引用的函数地址</span><br></code></pre></td></tr></table></figure></li><li><p>idautils.Strings()：返回包含所有字符串的对象（有属性ea、length、strtype）（shift+F12）</p></li><li><p>idc.get_strlit_contents(ea)：返回ea处的字符串</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idc,idautils<br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> idautils.Strings():<br>    string=idc.get_strlit_contents(s.ea)<br>    <span class="hljs-built_in">print</span>(string)<br><span class="hljs-comment">#打印所有字符串</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="自修改代码（SMC）"><a href="#自修改代码（SMC）" class="headerlink" title="自修改代码（SMC）"></a>自修改代码（SMC）</h2><ul><li><p>自修改代码（Self-Modifying-Code）指某部分代码以加密后的形式存在于程序中，程序执行到这部分代码的时候才会进行动态解密，和加壳有点异曲同工。常用来加密关键逻辑，使其不可直接静态分析</p></li><li><p>特征：</p><p>程序中存在对程序自身某部分的运算，一般还需要VirtualProtect() &#x2F; mprotect()来改变内存的属性以便将解密后的代码数据写入内存，或者使用VirtualAlloc把解密后的代码数据写入堆中执行（为了避免API暴露，还可能会新增一个有RWX属性的段来存放加密后的代码）。</p></li><li><p>应对方法有两种：一种是动态调试得到解密后的关键逻辑，另一种是使用脚本解密关键逻辑后再覆盖回去</p><ul><li><p>示例：2021-羊城杯-babysmc</p><p>PS：本来想要自己写一个简单程序试试手的，研究了半个下午没研究出来，程序修正到解密函数可以解密出正确代码了，但是调用关键逻辑check的时候莫名其妙跑飞了，在那个安全检查的位置，跳转后像是个畸形函数，不知道是不是改内存属性的时候影响到了，所以只能去找网上的题目了</p></li><li><p>这是优化后的主函数：</p><p><img src="/../images/image-20250805234429100.png" alt="主函数"></p><p>优化的来源就是，enc的位置是一团数字，而loc_7FF6BF081D00处开始是正常代码，加上对下面的decrypt函数的分析，可以确定enc就是被加密后的first_part</p></li><li><p>这是decrypt函数：</p><p><img src="/../images/image-20250805234728191.png" alt="decrypt函数"></p><p>非常明显地调用了VirtualProtect函数，解密逻辑很简单，就是ror后异或0x5a（ror查出来是循环右移，3就是右移的位数了，这点看汇编可能更清晰点）</p></li><li><p>下面就是今天的成果展示了（ror由DS协助实现），SMC解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idautils,idc,idaapi<br><br>enc=idc.get_bytes(<span class="hljs-number">0x00007FF6BF081085</span>,<span class="hljs-number">0x00007FF6BF081D00</span>-<span class="hljs-number">0x00007FF6BF081085</span>)<br>loc=<span class="hljs-number">0x00007FF6BF081085</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ror</span>(<span class="hljs-params">value, shift, bits=<span class="hljs-number">8</span></span>):<br>    shift %= bits  <span class="hljs-comment"># 确保位移量在有效范围内</span><br>    <span class="hljs-keyword">return</span> (value &gt;&gt; shift) | ((value &lt;&lt; (bits - shift)) &amp; ((<span class="hljs-number">1</span> &lt;&lt; bits) - <span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br>    idc.patch_byte(loc,(ror(i,<span class="hljs-number">3</span>)^<span class="hljs-number">0x5a</span>)&amp;<span class="hljs-number">0xff</span>)<br>    loc+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;done&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>本来是要写完的，但是first_part的函数解析完好几百行了，是我看不懂的加密🫠去找WP，发现是非常混淆的base64，还加了异或，但是我没看出逻辑，索性点到为止，改天把编码和密码的部分补上再说。</p></li><li><p>本来也尝试了动调解密，但是调着调着给我下起东西来了，虽然链接看着是微软的，但是还是有点怕，就舍弃这个方法了（下的是kernel.pdb好像，DS说是缺失符号文件🫠🫠）</p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">IDApythonAPI、SMC自修改代码</summary>
    
    
    
    <category term="Reverse学习笔记" scheme="https://sydzi.github.io/categories/Reverse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Day13:反调试（二）</title>
    <link href="https://sydzi.github.io/2025/08/03/Day13-%E5%8F%8D%E8%B0%83%E8%AF%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://sydzi.github.io/2025/08/03/Day13-%E5%8F%8D%E8%B0%83%E8%AF%95%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2025-08-03T00:38:55.000Z</published>
    <updated>2025-10-03T11:37:11.800Z</updated>
    
    <content type="html"><![CDATA[<p>时间差检测、断点检测</p><span id="more"></span><h2 id="时间差检测"><a href="#时间差检测" class="headerlink" title="时间差检测"></a>时间差检测</h2><ul><li>CPU的运行十分迅速，一段代码可能在几毫秒内就可以执行完毕，但是调试的时候，代码运行时间会显著地变慢，这就是时间差检测的原理。时间差检测主要通过计算时间差然后与预设的值比较实现。</li></ul><h3 id="RDTSC指令计算"><a href="#RDTSC指令计算" class="headerlink" title="RDTSC指令计算"></a>RDTSC指令计算</h3><ul><li><p>rdtsc是一个汇编指令，用于将时间读入edx:eax寄存器（高32位：低32位）。通过取两次时间把结果相减可以得到一个时间差。显著特征就是rdtsc指令</p></li><li><p>效果：</p><p><img src="/../images/image-20250803103503205.png" alt="IDA"></p><p><img src="/../images/image-20250803103510223.png" alt="XDbg"></p></li><li><p>应对方法：</p><p>根据程序的逻辑，可以在计算出时间差并比较之后改变比较结果。</p></li></ul><h3 id="GetTickCount计算"><a href="#GetTickCount计算" class="headerlink" title="GetTickCount计算"></a>GetTickCount计算</h3><ul><li><p>原理和RDTSC类似，只不过时间差采用GetTickCount计算。GetTickCount也是WINAPI，会有明显标记。</p></li><li><p>效果：</p><p><img src="/../images/image-20250803110132263.png" alt="IDA"></p><p><img src="/../images/image-20250803110151704.png" alt="XDbg"></p></li><li><p>应对方法：</p><p>修改比较结果即可</p></li></ul><h3 id="QueryPerformanceCounter计算"><a href="#QueryPerformanceCounter计算" class="headerlink" title="QueryPerformanceCounter计算"></a>QueryPerformanceCounter计算</h3><ul><li><p>原理类似，只是采用QueryPerformanceCounter计算，也是WINAPI，比较好识别</p></li><li><p>效果：</p><p><img src="/../images/image-20250803111252719.png" alt="IDA"></p><p><img src="/../images/image-20250803111302239.png" alt="XDbg"></p></li><li><p>应对方法：</p><p>修改比较结果即可</p></li></ul><h2 id="断点检测"><a href="#断点检测" class="headerlink" title="断点检测"></a>断点检测</h2><ul><li>断点是调试的一个显著特点。断点可以分为软件断点、硬件断点和内存断点。软件断点通过将目标代码修改为中断指令（X86\X64下一般为INT3\0xCC）实现；硬件断点通过将指令地址写入调试寄存器的DR0-DR3监控地址访问来实现；内存断点通过修改内存页（一片片内存区域）的访问权限实现。三者的实现方法都会触发异常让调试器捕获进而中断。反调试的断点检测主要利用软件断点和硬件断点，内存断点由于针对内存区域而非具体指令，精度太低，一般不考虑。</li></ul><h3 id="软件断点检测"><a href="#软件断点检测" class="headerlink" title="软件断点检测"></a>软件断点检测</h3><ul><li><p>常见手段是在内存区域搜索0xCC（使用汇编指令repnz scasb）</p></li><li><p>效果：</p><p><img src="/../images/image-20250803184326511.png" alt="IDA"></p><p><img src="/../images/image-20250803184332179.png" alt="XDbg"></p></li><li><p>因为进行了比较，所以修改比较结果即可绕过</p></li></ul><h3 id="硬件断点检测"><a href="#硬件断点检测" class="headerlink" title="硬件断点检测"></a>硬件断点检测</h3><ul><li><p>常见手段是获取DR寄存器的值并和0比较。特征是GetThreadContext函数（或者其他ThreadContext相关的函数）和与0的比较</p></li><li><p>效果：</p><p><img src="/../images/image-20250803190042096.png" alt="IDA"></p><p><img src="/../images/image-20250803190057497.png" alt="XDbg"></p></li><li><p>应对方法：</p><p>还是进行了比较，修改比较结果绕过</p></li></ul>]]></content>
    
    
    <summary type="html">时间差检测、断点检测</summary>
    
    
    
    <category term="Reverse学习笔记" scheme="https://sydzi.github.io/categories/Reverse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Day12:反调试（一）</title>
    <link href="https://sydzi.github.io/2025/08/02/Day12-%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    <id>https://sydzi.github.io/2025/08/02/Day12-%E5%8F%8D%E8%B0%83%E8%AF%95/</id>
    <published>2025-08-02T05:18:54.000Z</published>
    <updated>2025-10-03T11:37:07.949Z</updated>
    
    <content type="html"><![CDATA[<p>反调试基本原理、WINAPI检测、数据检测、进程检测</p><span id="more"></span><h2 id="反调试基本原理"><a href="#反调试基本原理" class="headerlink" title="反调试基本原理"></a>反调试基本原理</h2><ul><li>反调试技术通常借助操作系统相关的内容来实现，常见办法有调用WindowsAPI获得相关数据、有意触发异常监测异常处理（调试器会捕获异常）、时间差检测（实际运行过程十分迅速）、硬件断点检测、进程检测等</li></ul><h2 id="WINAPI检测"><a href="#WINAPI检测" class="headerlink" title="WINAPI检测"></a>WINAPI检测</h2><ul><li>由于是直接使用WINAPI，所以一般在IDA或者动态调试器里会有明显的函数名字样，识别会比较容易</li><li>此类一般是利用函数的返回值或者函数传递回来的参数作为判断标准，应对方法主要有使用反反调试插件、修改相关值、hook等</li></ul><h3 id="IsDebuggerPresent"><a href="#IsDebuggerPresent" class="headerlink" title="IsDebuggerPresent"></a>IsDebuggerPresent</h3><ul><li><p>原理：</p><p>IsDebuggerPresent() 实际上是通过访问PEB（ProcessEnvironmentBlock，进程环境块，一个描述进程相关数据的结构体）中的BeingDebugged标志来判断是否被调试的，被调试的话，函数返回1。有关BeingDebugged的内容，见下文。</p></li><li><p>IDA和XDbg的效果图：</p><p><img src="/../images/image-20250802131116428.png" alt="IDA效果图"></p><p><img src="/../images/image-20250802131150198.png" alt="XDbg效果图"></p><p>可以看到明显的IsDebuggerPresent字样。</p></li><li><p>应对方法：</p><p>在XDbg中开启scyllahide插件或者在TEST EAX,EAX后改变一下ZF就可以了</p></li></ul><h3 id="CheckRemoteDebuggerPresent"><a href="#CheckRemoteDebuggerPresent" class="headerlink" title="CheckRemoteDebuggerPresent"></a>CheckRemoteDebuggerPresent</h3><ul><li><p>原理：</p><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">BOOL WINAPI <span class="hljs-title function_">CheckRemoteDebuggerPresent</span><span class="hljs-params">(</span><br><span class="hljs-params">InHANDLE hProcess,<span class="hljs-comment">//参数1，一个进程句柄，传入当前进程句柄就是checklocal了</span></span><br><span class="hljs-params">InoutPBOOL pbDebuggerPresent<span class="hljs-comment">//参数2，一个用来传递的布尔值，用来表示是否被调试</span></span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure><p>这个函数实际上是借用了NtQueryInfomationProcess函数来实现调试检测的，简单讲就是通过NtQueryInformationProcess查询一个数据然后和非调试状态下这个数据预期的值进行比较，比较结果再传给自己的参数2。更详细的原理见下一个API</p></li><li><p>效果图：</p><p><img src="/../images/image-20250802151411075.png" alt="IDA效果图"></p><p><img src="/../images/image-20250802151613861.png" alt="xdbg效果"></p></li><li><p>应对方法：</p><p>scyllahide依旧管用，也可以在call CheckRemoteDebuggerPresent下面的cmp后改变zf来实现反反调试</p></li></ul><h3 id="NtQueryInformationProcess"><a href="#NtQueryInformationProcess" class="headerlink" title="NtQueryInformationProcess"></a>NtQueryInformationProcess</h3><ul><li><p>原理：</p><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">__kernel_entry NTSTATUS <span class="hljs-title function_">NtQueryInformationProcess</span><span class="hljs-params">(</span><br><span class="hljs-params">    IN HANDLE           ProcessHandle,<span class="hljs-comment">//要查询的进程句柄</span></span><br><span class="hljs-params">    IN PROCESSINFOCLASS ProcessInformationClass,<span class="hljs-comment">//要查询的信息类型</span></span><br><span class="hljs-params">    OUT PVOID           ProcessInformation,<span class="hljs-comment">//接收查询结果的缓冲区（变量）</span></span><br><span class="hljs-params">    IN ULONG            ProcessInformationLength,<span class="hljs-comment">//缓冲区大小</span></span><br><span class="hljs-params">    OUT PULONG          ReturnLength OPTIONAL<span class="hljs-comment">//实际返回的数据大小，可选</span></span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure><p>通过设置第二个参数为0x7（表示查询一个叫ProcessDebugPort的变量），函数会通过第三个参数传递调试信息，被调试则传递<strong>非</strong>0</p><p>或者设置第二个参数为0x1E（表示查询一个叫ProcessDebugObjectHandle的变量），被调试则传递<strong>非</strong>NULL</p><p>或者设置第二个参数为0x1F（表示查询一个叫ProcessDebugFlags的变量），被调试则传递0</p><p>原型是这样，但是这个函数是Windows内部API，即系统不想用户使用这个函数（可能是出于安全考虑），所以直接调用是不行的，要动态加载。下面是DS给的实现源码参考：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 1. 定义函数指针类型（必须手动声明）</span><br><span class="hljs-keyword">typedef</span> LONG NTSTATUS;<br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">NTSTATUS</span> <span class="hljs-params">(NTAPI* PNtQueryInformationProcess)</span><span class="hljs-params">(</span><br><span class="hljs-params">    HANDLE ProcessHandle,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> ProcessInformationClass,  <span class="hljs-comment">// 直接使用 int 代替 PROCESSINFOCLASS</span></span><br><span class="hljs-params">    PVOID ProcessInformation,</span><br><span class="hljs-params">    ULONG ProcessInformationLength,</span><br><span class="hljs-params">    PULONG ReturnLength</span><br><span class="hljs-params">)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 2. 动态加载 ntdll.dll</span><br>    HMODULE hNtdll = GetModuleHandleW(<span class="hljs-string">L&quot;ntdll.dll&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!hNtdll) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>        system(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 获取 NtQueryInformationProcess 函数地址</span><br>    PNtQueryInformationProcess NtQueryInformationProcess = <br>        (PNtQueryInformationProcess)GetProcAddress(hNtdll, <span class="hljs-string">&quot;NtQueryInformationProcess&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!NtQueryInformationProcess) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>        system(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 调用函数查询调试端口（0x7 = ProcessDebugPort）</span><br>    DWORD debugPort = <span class="hljs-number">0</span>;<br>    NTSTATUS status = NtQueryInformationProcess(<br>        GetCurrentProcess(),<br>        <span class="hljs-number">0x7</span>,  <span class="hljs-comment">// ProcessDebugPort</span><br>        &amp;debugPort,<br>        <span class="hljs-keyword">sizeof</span>(debugPort),<br>        <span class="hljs-literal">NULL</span><br>    );<br><br>    <span class="hljs-comment">// 5. 严格按照你的逻辑输出</span><br>    <span class="hljs-keyword">if</span> (debugPort)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bye\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello\n&quot;</span>);<br><br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是IDA的反汇编结果</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>000000014007E130 sub_14007E130   proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: sub_14007920B↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E130                                         <span class="hljs-comment">; DATA XREF: .pdata:00000001401AB818↓o</span><br><span class="hljs-symbol">.text:</span>000000014007E130<br><span class="hljs-symbol">.text:</span>000000014007E130 var_180         = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">180h</span><br><span class="hljs-symbol">.text:</span>000000014007E130 var_160         = <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">160h</span><br><span class="hljs-symbol">.text:</span>000000014007E130 var_150         = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">150h</span><br><span class="hljs-symbol">.text:</span>000000014007E130 hModule         = <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">148h</span><br><span class="hljs-symbol">.text:</span>000000014007E130 var_128         = <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">128h</span><br><span class="hljs-symbol">.text:</span>000000014007E130 var_10C         = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">10Ch</span><br><span class="hljs-symbol">.text:</span>000000014007E130 var_EC          = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0ECh</span><br><span class="hljs-symbol">.text:</span>000000014007E130 var_18          = <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">18h</span><br><span class="hljs-symbol">.text:</span>000000014007E130<br><span class="hljs-symbol">.text:</span>000000014007E130 <span class="hljs-comment">; __unwind &#123; // j___GSHandlerCheck</span><br><span class="hljs-symbol">.text:</span>000000014007E130                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span>000000014007E132                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rdi</span><br><span class="hljs-symbol">.text:</span>000000014007E133                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">rsp</span>, <span class="hljs-number">178h</span><br><span class="hljs-symbol">.text:</span>000000014007E13A                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rbp</span>, [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">30h</span>]<br><span class="hljs-symbol">.text:</span>000000014007E13F                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">180h</span>+var_150]<br><span class="hljs-symbol">.text:</span>000000014007E144                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">22h</span> <span class="hljs-comment">; &#x27;&quot;&#x27;</span><br><span class="hljs-symbol">.text:</span>000000014007E149                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span>000000014007E14E                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>000000014007E150                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">cs</span>:__security_cookie<br><span class="hljs-symbol">.text:</span>000000014007E157                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span>000000014007E15A                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_18], <span class="hljs-built_in">rax</span><br><span class="hljs-symbol">.text:</span>000000014007E161                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, unk_1401B80A2<br><span class="hljs-symbol">.text:</span>000000014007E168                 <span class="hljs-keyword">call</span>    sub_14007A313<br><span class="hljs-symbol">.text:</span>000000014007E16D                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E16E                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, ModuleName <span class="hljs-comment">; &quot;ntdll.dll&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E175                 <span class="hljs-keyword">call</span>    <span class="hljs-built_in">cs</span>:GetModuleHandleW<span class="hljs-comment">;此处加载ntdll库</span><br><span class="hljs-symbol">.text:</span>000000014007E17B                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+hModule], <span class="hljs-built_in">rax</span><br><span class="hljs-symbol">.text:</span>000000014007E17F                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+hModule], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>000000014007E184                 <span class="hljs-keyword">jnz</span>     short loc_14007E1A7<br><span class="hljs-symbol">.text:</span>000000014007E186                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aHello     <span class="hljs-comment">; &quot;hello\n&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E18D                 <span class="hljs-keyword">call</span>    sub_14007886F<br><span class="hljs-symbol">.text:</span>000000014007E192                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E193                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aPause     <span class="hljs-comment">; &quot;pause&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E19A                 <span class="hljs-keyword">call</span>    sub_140078810<br><span class="hljs-symbol">.text:</span>000000014007E19F                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E1A0                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>000000014007E1A2                 <span class="hljs-keyword">jmp</span>     loc_14007E240<br><span class="hljs-symbol">.text:</span>000000014007E1A7 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>000000014007E1A7<br><span class="hljs-symbol">.text:</span>000000014007E1A7 loc_14007E1A7:                          <span class="hljs-comment">; CODE XREF: sub_14007E130+54↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E1A7                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rdx</span>, ProcName   <span class="hljs-comment">; &quot;NtQueryInformationProcess&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E1AE                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+hModule] <span class="hljs-comment">; hModule</span><br><span class="hljs-symbol">.text:</span>000000014007E1B2                 <span class="hljs-keyword">call</span>    <span class="hljs-built_in">cs</span>:GetProcAddress<span class="hljs-comment">;此处获取NtQueryInformationProcess函数地址</span><br><span class="hljs-symbol">.text:</span>000000014007E1B8                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_128], <span class="hljs-built_in">rax</span><span class="hljs-comment">;此处把函数地址传给局部变量</span><br><span class="hljs-symbol">.text:</span>000000014007E1BC                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_128], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>000000014007E1C1                 <span class="hljs-keyword">jnz</span>     short loc_14007E1E1<br><span class="hljs-symbol">.text:</span>000000014007E1C3                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aHello     <span class="hljs-comment">; &quot;hello\n&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E1CA                 <span class="hljs-keyword">call</span>    sub_14007886F<br><span class="hljs-symbol">.text:</span>000000014007E1CF                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E1D0                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aPause     <span class="hljs-comment">; &quot;pause&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E1D7                 <span class="hljs-keyword">call</span>    sub_140078810<br><span class="hljs-symbol">.text:</span>000000014007E1DC                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E1DD                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>000000014007E1DF                 <span class="hljs-keyword">jmp</span>     short loc_14007E240<br><span class="hljs-symbol">.text:</span>000000014007E1E1 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>000000014007E1E1<br><span class="hljs-symbol">.text:</span>000000014007E1E1 loc_14007E1E1:                          <span class="hljs-comment">; CODE XREF: sub_14007E130+91↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E1E1                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_10C], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>000000014007E1E8                 <span class="hljs-keyword">call</span>    <span class="hljs-built_in">cs</span>:GetCurrentProcess<br><span class="hljs-symbol">.text:</span>000000014007E1EE                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">180h</span>+var_160], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>000000014007E1F7                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r9d</span>, <span class="hljs-number">4</span><span class="hljs-comment">;缓冲区大小</span><br><span class="hljs-symbol">.text:</span>000000014007E1FD                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">r8</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_10C]<span class="hljs-comment">;接收结果的缓冲区</span><br><span class="hljs-symbol">.text:</span>000000014007E201                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">7</span><span class="hljs-comment">;指定查询的信息类型</span><br><span class="hljs-symbol">.text:</span>000000014007E206                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rax</span><span class="hljs-comment">;查询的进程句柄</span><br><span class="hljs-symbol">.text:</span>000000014007E209                 <span class="hljs-keyword">call</span>    [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_128]<span class="hljs-comment">;调用NtQueryInformationProcess</span><br><span class="hljs-symbol">.text:</span>000000014007E20C                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_EC], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>000000014007E20F                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_10C], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>000000014007E213                 <span class="hljs-keyword">jz</span>      short loc_14007E224<br><span class="hljs-symbol">.text:</span>000000014007E215                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aBye       <span class="hljs-comment">; &quot;bye\n&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E21C                 <span class="hljs-keyword">call</span>    sub_14007886F<br><span class="hljs-symbol">.text:</span>000000014007E221                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E222                 <span class="hljs-keyword">jmp</span>     short loc_14007E231<br><span class="hljs-symbol">.text:</span>000000014007E224 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>000000014007E224<br><span class="hljs-symbol">.text:</span>000000014007E224 loc_14007E224:                          <span class="hljs-comment">; CODE XREF: sub_14007E130+E3↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E224                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aHello     <span class="hljs-comment">; &quot;hello\n&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E22B                 <span class="hljs-keyword">call</span>    sub_14007886F<br><span class="hljs-symbol">.text:</span>000000014007E230                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E231<br><span class="hljs-symbol">.text:</span>000000014007E231 loc_14007E231:                          <span class="hljs-comment">; CODE XREF: sub_14007E130+F2↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E231                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, aPause     <span class="hljs-comment">; &quot;pause&quot;</span><br><span class="hljs-symbol">.text:</span>000000014007E238                 <span class="hljs-keyword">call</span>    sub_140078810<br><span class="hljs-symbol">.text:</span>000000014007E23D                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>000000014007E23E                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>000000014007E240<br><span class="hljs-symbol">.text:</span>000000014007E240 loc_14007E240:                          <span class="hljs-comment">; CODE XREF: sub_14007E130+72↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E240                                         <span class="hljs-comment">; sub_14007E130+AF↑j</span><br><span class="hljs-symbol">.text:</span>000000014007E240                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-symbol">.text:</span>000000014007E243                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_180]<br><span class="hljs-symbol">.text:</span>000000014007E247                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rdx</span>, unk_140171FF0<br><span class="hljs-symbol">.text:</span>000000014007E24E                 <span class="hljs-keyword">call</span>    sub_140079A35<br><span class="hljs-symbol">.text:</span>000000014007E253                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rdi</span><br><span class="hljs-symbol">.text:</span>000000014007E256                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">150h</span>+var_18]<br><span class="hljs-symbol">.text:</span>000000014007E25D                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rbp</span>        <span class="hljs-comment">; StackCookie</span><br><span class="hljs-symbol">.text:</span>000000014007E260                 <span class="hljs-keyword">call</span>    j___security_check_cookie<br><span class="hljs-symbol">.text:</span>000000014007E265                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rsp</span>, [<span class="hljs-built_in">rbp</span>+<span class="hljs-number">148h</span>]<br><span class="hljs-symbol">.text:</span>000000014007E26C                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">rdi</span><br><span class="hljs-symbol">.text:</span>000000014007E26D                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span>000000014007E26E                 <span class="hljs-keyword">retn</span><br><span class="hljs-symbol">.text:</span>000000014007E26E <span class="hljs-comment">; &#125; // starts at 14007E130</span><br><span class="hljs-symbol">.text:</span>000000014007E26E sub_14007E130   endp<br><span class="hljs-symbol">.text:</span>000000014007E26E<br></code></pre></td></tr></table></figure><p>特征应该是 call    cs:GetModuleHandleW、call    cs:GetProcAddress、 call    cs:GetCurrentProcess</p></li><li><p>应对方法：</p><p>scyllahide也是支持反NtQueryInformationProcess反调试的，手动绕过一般是更改缓冲区的值与标准值的比较结果，当然在DS给的源码中因为加入了一些错误处理（如ntdll载入失败就跳过反调试），可以通过人为改动错误判断的结果来实现直接跳过反调试</p></li></ul><h3 id="GetLastError"><a href="#GetLastError" class="headerlink" title="GetLastError"></a>GetLastError</h3><ul><li><p>这个函数用于获取最近一次异常的返回值。使用的方法一般是故意构造异常，如果处于被调试状态，调试器会捕获异常导致返回的错误码和预期的不符。</p></li><li><p>效果：</p><p><img src="/../images/image-20250802173635007.png" alt="IDA"></p><p><img src="/../images/image-20250802173655097.png" alt="XDbg"></p></li><li><p>应对方法：</p><p>可以看到，GetLastError之后，会把返回值和预设的值进行比较，所以修改cmp后的zf就可以了。由于GetLastError的自由度比较高（触发异常的方法多样），所以scyllahide应该是不支持的（笔者没有认出什么相关的设置）</p></li></ul><h2 id="数据检测"><a href="#数据检测" class="headerlink" title="数据检测"></a>数据检测</h2><h3 id="BeingDebugged"><a href="#BeingDebugged" class="headerlink" title="BeingDebugged"></a>BeingDebugged</h3><ul><li><p>BeingDebugged是PEB的成员变量之一，用于描述进程是否处于被调试状态，为1时表示处于被调试状态。</p><p>PEB结构体具体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">PEB</span> &#123;</span><br>  BYTE                          Reserved1[<span class="hljs-number">2</span>];<br>  BYTE                          BeingDebugged;<span class="hljs-comment">//偏移为2</span><br>  BYTE                          Reserved2[<span class="hljs-number">1</span>];<br>  PVOID                         Reserved3[<span class="hljs-number">2</span>];<br>  PPEB_LDR_DATA                 Ldr;<br>  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;<br>  PVOID                         Reserved4[<span class="hljs-number">3</span>];<br>  PVOID                         AtlThunkSListPtr;<br>  PVOID                         Reserved5;<br>  ULONG                         Reserved6;<br>  PVOID                         Reserved7;<br>  ULONG                         Reserved8;<br>  ULONG                         AtlThunkSListPtr32;<br>  PVOID                         Reserved9[<span class="hljs-number">45</span>];<br>  BYTE                          Reserved10[<span class="hljs-number">96</span>];<br>  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;<br>  BYTE                          Reserved11[<span class="hljs-number">128</span>];<br>  PVOID                         Reserved12[<span class="hljs-number">1</span>];<br>  ULONG                         SessionId;<br>&#125; PEB, *PPEB;<br></code></pre></td></tr></table></figure></li><li><p>反调试手段通常是访问进程的该参数（如WINAPI的IsDebuggerPresent()）来判断是否处于被调试状态。32位下，PEB用FS:[0x30]表示；64位下，PEB用FS:[0x60]表示。加上偏移2就是对BeingDebugged的访问了（这就是这种方法的特征了）</p></li><li><p>效果图：</p><p><img src="/../images/image-20250802180316105.png" alt="IDA"></p><p><img src="/../images/image-20250802180438104.png" alt="XDbg"></p></li><li><p>应对方法：</p><p>scyllahide可绕过，手动绕过只需要在访问指令下方的cmp后修改ZF即可</p></li></ul><h3 id="NTGlobalFlag"><a href="#NTGlobalFlag" class="headerlink" title="NTGlobalFlag"></a>NTGlobalFlag</h3><ul><li><p>NTGlobalFlag也是PEB结构体的成员，但是是非公开的（因此上文的PEB结构体定义中看不到）。32位下，它位于PEB偏移0x68处，64位下，它位于PEB偏移0xBC处（特征）。它本是描述进程堆管理的，但是由于调试器中的进程创建堆的方式和正常情况有所不同，被调试时该值会被设为0x70（又一个特征），因此也被用来判断是否被调试</p></li><li><p>效果：</p><p><img src="/../images/image-20250802181920666.png" alt="IDA"></p><p><img src="/../images/image-20250802181950005.png" alt="XDbg"></p></li><li><p>应对方法：</p><p>syllahide可以绕过，也可以在下面的比较逻辑（因为是内联汇编，所以比较逻辑的实现会有不同）后修改ZF绕过</p></li></ul><h2 id="进程检测"><a href="#进程检测" class="headerlink" title="进程检测"></a>进程检测</h2><h3 id="FindWindow"><a href="#FindWindow" class="headerlink" title="FindWindow"></a>FindWindow</h3><ul><li><p>实际上是窗口检测，这个函数获取的是进程窗口的类名或者标签，通过与预期的名字进行比较来判断是否处于被调试状态。由于使用的是系统函数，所以实际上也属于WINAPI检测，但是不重要。特征和WINAPI检测一样，会有明显的标记</p></li><li><p>效果：</p><p><img src="/../images/image-20250802184919847.png" alt="IDA"></p><p><img src="/../images/image-20250802185121993.png" alt="XDbg"></p></li><li><p>本例的程序创建了一个判断函数，在主函数中是将返回值test后来判断是否被调试的，所以只需要修改主函数中的test eax,eax后的ZF就可以实现绕过了。scyllahide应该是不支持的</p></li></ul><h3 id="父进程检测"><a href="#父进程检测" class="headerlink" title="父进程检测"></a>父进程检测</h3><ul><li><p>原理是正常程序双击运行父进程为explorer.exe，而拖进调试器打开父进程为调试器，通过比较获得的父进程名和预设的父进程名可以判断是否处于被调试状态。一般会通过遍历进程或者通过NtQueryInfomationProcess查询来实现。特征是出现大量和进程相关的api，如遍历进程时会调用CreateToolhelp32Snapshot、th32ParentProcessID、Process32Next等，NtQueryInfomationProcess查询会出现QueryFullProcessImageNameA或者其他相关函数与调试器名称字符串同时出现的情况</p></li><li><p>效果：</p><p><img src="/../images/image-20250802200208452.png" alt="IDA显式体现"></p><p><img src="/../images/image-20250802200407372.png" alt="XDbg跳转表中体现"></p><p><img src="/../images/image-20250802201532370.png" alt="IDA"></p><p><img src="/../images/image-20250802201557678.png" alt="XDbg"></p></li><li><p>实测scyllahide绕过不了第一种方法但可以绕过第二种方法。手动绕过也可以，主要基于后续对进程名的判断，修改判断结果即可绕过</p></li></ul><h3 id="特征码检测"><a href="#特征码检测" class="headerlink" title="特征码检测"></a>特征码检测</h3><ul><li><p>有的调试器在内存中会有特征码，通过遍历进程和搜索特征码可以判断是否被调试。这种情况会比较复杂，难点应该在识别上。一方面可以通过分析是否出现特征码（可能会是很明显的一连串数字初始化），另一方面遍历进程会出现父进程检测中提及的api，但是这些一般不会出现在主函数中，需要跟进函数查看。</p><p>特征码示例：</p><p><img src="/../images/image-20250802211300649.png" alt="IDA"></p><p><img src="/../images/image-20250802211316100.png" alt="XDbg"></p></li><li><p>scyllahide一般绕过不了，可以在主函数涉及判断结果的逻辑中进行改动绕过。</p></li></ul>]]></content>
    
    
    <summary type="html">反调试基本原理、WINAPI检测、数据检测、进程检测</summary>
    
    
    
    <category term="Reverse学习笔记" scheme="https://sydzi.github.io/categories/Reverse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Day11:花指令</title>
    <link href="https://sydzi.github.io/2025/07/31/Day11-%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
    <id>https://sydzi.github.io/2025/07/31/Day11-%E8%8A%B1%E6%8C%87%E4%BB%A4/</id>
    <published>2025-07-31T02:54:49.000Z</published>
    <updated>2025-10-03T11:37:03.213Z</updated>
    
    <content type="html"><![CDATA[<p>花指令</p><span id="more"></span><h2 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2><ul><li><p>又叫垃圾指令，不影响程序原始逻辑，但会干扰IDA反编译或者反汇编。</p></li><li><p>原理：</p><p>因为反编译器多是静态分析的，不会通过执行来分析逻辑，只会根据反汇编出来的指令分析，因此有空可乘：例如可以通过内联汇编不完整指令但是跳过不完整指令来模糊指令边界、内联汇编永跳永不跳分支来误导运行逻辑分析、内联汇编无意义指令误导主要逻辑</p></li><li><p>显著特征是出现红色行，而应对方法是选中花指令所在的区域改为“nop”（空指令）</p></li></ul><h3 id="恒跳型"><a href="#恒跳型" class="headerlink" title="恒跳型"></a>恒跳型</h3><ul><li><p>实测IDA9.0.241217不会报红，也就是混淆失效，所以就看看源码吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>_asm&#123;<br>xor eax, eax;<br>jz s;<br>add esp, <span class="hljs-number">0x11</span>;<br>s:<br>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="call-ret相消型"><a href="#call-ret相消型" class="headerlink" title="call-ret相消型"></a>call-ret相消型</h3><ul><li><p>来看效果</p><p><img src="/../images/image-20250731203000820.png" alt="报红"></p></li><li><p>可以看到，在函数中间出现了sp-analysis failed，而上面一条就是retn，明显不对。</p><p>往前看，rep stosd初始化后，call了$+5，即当前位置+5&#x3D;0046308C，也就是下一条的add</p><p>然后给esp的值+7（call的时候push eip即push 0046308c了）</p><p>此时esp存放值为0046308c+7&#x3D;00463093，所以retn时会pop 00463093，程序跳到00463093</p><p>往下看，00463093正是没识别出来的三个数的最后一个，下面还有一个offset没有指令。</p><p>第三个数68h和offset结合刚好是push offset，对应上了下面的call（函数传参）</p></li><li><p>选中没识别的三个数，按“U”（undefine)，可以看到三个数分开了</p><p><img src="/../images/image-20250731203817109.png" alt="按U"></p></li><li><p>选中db 68h和dd offset aHello，按C转化为汇编指令，可以看到push offset恢复了</p><p><img src="/../images/image-20250731204815374.png" alt="恢复push"></p></li><li><p>选中call $+5到db 34h，右键选择”Fill with NOPs“（实测db 34h会nop不干净，要选中到db 34h下一行）</p><p><img src="/../images/image-20250731204858702.png" alt="NOP"></p></li><li><p>可以看到函数变成这样，这是因为插入了retn导致函数范围分析错误，需要纠正</p><p><img src="/../images/image-20250731205500606.png" alt="NOP完"></p></li><li><p>点击函数名，然后右键edit fuction，把end address改成末尾那个真正的retn的地址就OK了</p><p><img src="/../images/image-20250731205807130.png" alt="纠正函数范围"></p></li></ul><h3 id="jz-操作数不全型"><a href="#jz-操作数不全型" class="headerlink" title="jz-操作数不全型"></a>jz-操作数不全型</h3><ul><li><p>这种情况下会出现和上一种一样的指令识别错误的问题，且看图：</p><p><img src="/../images/image-20250801002342967.png" alt="图"></p></li><li><p>这是按照MSVS C++初始化规则跳转后，在本来main函数的地方的截图。但是跳转过程中会发现，跳转到main函数的代码是jmp loc_xxxxxx而不是jmp sub_xxxxxx。但是目前还不影响，先分析报错的地方。</p></li><li><p>可以看到 xor ebp,[eax+50h] 处报红了，并且下面是一段没分析出来的数和字符串”pause”，下面进行分析</p></li><li><p>首先，rep stosd初始化后，进行了一个恒跳，跳转的地方是0046308E，在 xor ebp,[eax+50h] 这条指令里，所以这里红了</p></li><li><p>把 xor ebp,[eax+50h] 这条指令undefine一下</p><p><img src="/../images/image-20250801002409823.png" alt="undefine一下"></p></li><li><p>根据逻辑，程序是肯定会跳到0046308E的，所以前面的代码冗余，直接nop掉。选中 xor eax,eax 到0046308E（根据上一种类型的经验，要多覆盖一位才能刚好nop掉目标代码）</p><p><img src="/../images/image-20250801002510740.png" alt="NOP"></p></li><li><p>nop完成后（如果有db 90h就按”C“转成code）就会发现下面没分析的数立刻分析出指令了</p><p><img src="/../images/image-20250801002536258.png" alt="去混淆成功"></p></li><li><p>但是还没完，此时按F5是无法反编译的，因为报错的地方是loc_xxxxxx范围里的，不是一个函数，也就是前面说的jmp loc_xxxxxx而不是jmp sub_xxxxxx的问题了。这里可以看出，IDA这类混淆会导致IDA把函数识别成一个引用而不是函数。</p></li><li><p>到最开始push ebp开辟栈帧的引用loc_463070处，把它undefine一下，再按“P”重新分析一下，就可以得到main函数了</p><p><img src="/../images/image-20250801002703125.png" alt="修复的main函数"></p></li><li><p>这类有一个特征就是jz loc_xxxxxx+1，据此可以快速找到加了混淆的地方</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>上述三种（实际上有混淆效果的只有两种）是比较基础的花指令。识别花指令的要点主要是看红色错误，也可以结合一些特征来识别。解决方法就是nop掉混淆代码。</li><li>在实际设计题目时，笔者意外发现了一些更强力的混淆，单单是在上述三种类型的基础上加一点其他指令，就会导致一个函数完全无法被识别（被放在rdata段而不是text段的那种），但是程序还能正常执行，而报错的地方在无法识别的函数的上级函数里（跳转到这个函数的那个函数），可能要结合AI才能实现快捷的分析。因此，花指令还是一个具有挑战性的混淆方式（当然也可能是笔者太菜了没石粒）</li></ul>]]></content>
    
    
    <summary type="html">花指令</summary>
    
    
    
    <category term="Reverse学习笔记" scheme="https://sydzi.github.io/categories/Reverse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Day10:壳与脱壳（二）</title>
    <link href="https://sydzi.github.io/2025/07/30/Day10-%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://sydzi.github.io/2025/07/30/Day10-%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2025-07-30T05:13:02.000Z</published>
    <updated>2025-10-03T11:37:00.038Z</updated>
    
    <content type="html"><![CDATA[<p>二次断点法、一次断点法、特征查找法（均基于Xdbg）、Dll手动脱壳</p><span id="more"></span><h2 id="寻找OEP的方法（二）"><a href="#寻找OEP的方法（二）" class="headerlink" title="寻找OEP的方法（二）"></a>寻找OEP的方法（二）</h2><h3 id="二次断点法"><a href="#二次断点法" class="headerlink" title="二次断点法"></a>二次断点法</h3><ul><li><p>又叫内存镜像法，原理是壳程序解析时会从.rsrc段获取资源，解析后回到代码段，因此可以通过现在.rsrc段设置内存读取断点，然后在代码段(.text&#x2F;.code)设置内存写入断点来监控壳程序执行。</p></li><li><p>通常这个方法是基于OllyDbg的，但是从原理出发Xdbg也不是不能用。除了有一步是在OllyDbg中设置忽略所有异常，Xdbg好像没有这个设置选项，但是经过实测是可以用这个方法在Xdbg脱upx壳的。</p></li><li><p>Upx脱壳示例：</p><ul><li><p>Xdbg载入程序，先在“断点”模块把预设的断点删除，避免程序在非关注的异常处（断点处）停下</p><p><img src="/../images/image-20250730155018782.png" alt="移除断点"></p></li><li><p>然后到“内存映射”模块找到程序的.rsrc（注意所属方为用户），下一次性内存读取断点</p><p><img src="/../images/image-20250730155602928.png" alt="下内存读取断点"></p></li><li><p>shift+F9运行，然后在上方的upx0处下一次性内存写入断点</p><p><img src="/../images/image-20250730155656485.png" alt="下内存写入断点"></p></li><li><p>shift+F9运行，回到“CPU”模块，会发现下方不远处就有一个大跳（隔得有点远截不到eip和大跳的同框图），在大跳前下断点，F9运行到断点处，然后步进就可以到达OEP了</p></li></ul></li><li><p>但是有一点奇怪的地方：结合upx的解析原理，upx好像是从upx1段加载数据解析到upx0段的（AI说的，不确定对不对），所以按道理，在upx1处下内存读取断点不是也有类似的监控效果吗？但是实测这样子会跑飞🤔有过一个想法就是，因为在upx1段下了读取断点，壳程序解析前中断了，然后又在upx0段下写入断点，然后按道理应该停在解析然后写入这一步，就是解析了还没写入，或者说刚刚写入一次，那这样也不至于直接调试终止吧🤔</p></li></ul><h3 id="一次断点法（二次断点法plus"><a href="#一次断点法（二次断点法plus" class="headerlink" title="一次断点法（二次断点法plus)"></a>一次断点法（二次断点法plus)</h3><ul><li><p>这个方法是基于二次断点法和upx实测出来的，因为根据壳程序解析的原理，最终都会发生向内存写入解析完的数据的操作，所以直接在写入的地方下内存写入断点，这样调试器中断的地方就离OEP不远了（接近壳程序解析的尾声，但还是远到截不到eip和大跳的同框图）</p></li><li><p>示例</p><ul><li><p>首先，同样要先去掉预设断点</p><p><img src="/../images/image-20250730163429021.png" alt="去掉预设断点"></p></li><li><p>然后在“内存映射”模块给upx0下一次性内存写入断点&#x2F;给upx1下一次性内存读取断点</p><p><img src="/../images/image-20250730164034182.png" alt="下内存写入断点"></p></li><li><p>shift+F9运行，中断的地方就差不多是壳程序解析写入&#x2F;开始解析的地方了，在下方大跳前F2断点+F9运行一步到位，然后就可以跳转到OEP了</p></li></ul></li></ul><h3 id="特征查找法"><a href="#特征查找法" class="headerlink" title="特征查找法"></a>特征查找法</h3><ul><li><p>借助特征指令popad，在程序区域搜索指令，然后下断点运行至此，再接着运行到OEP处</p></li><li><p>示例：</p><ul><li><p>F9运行到程序区域，此时断在pushad</p><p><img src="/../images/image-20250730165414432.png" alt="F9运行"></p></li><li><p>右键在当前区域搜索命令popad</p><p><img src="/../images/image-20250730165457171.png" alt="搜索"></p></li><li><p>双击搜索结果跳转，下方不远处就是到OEP的大跳了。直接在jmp前一条指令下断点，F9到此，然后步进</p><p><img src="/../images/image-20250730165636809.png" alt="搜索结果"></p></li></ul></li></ul><h2 id="Dll手动脱壳"><a href="#Dll手动脱壳" class="headerlink" title="Dll手动脱壳"></a>Dll手动脱壳</h2><ul><li><p>若出现Dll程序加壳的情况，可以先把Dll程序转化成exe程序，然后使用和exe手动脱壳一样的步骤即可</p></li><li><p>示例：</p><ul><li><p>用DIE打开Dll程序，可以看到显示加了upx壳</p><p><img src="/../images/image-20250730224157270.png" alt="DIE查看"></p></li><li><p>点击“区块”下方的“&gt;”，打开文件结构界面</p><p><img src="/../images/image-20250730224231764.png" alt="文件结构页面"></p></li><li><p>取消勾选右上角”只读“，然后点击IMAGE_FILE_HEADER，取消勾选”标志“中的”Dll“（图中未取消）</p><p><img src="/../images/image-20250730224435928.png" alt="取消勾选Dll"></p><p>此时可以发现，Characteristics的值变了</p></li><li><p>然后把dll后缀改成exe就可以按照exe手动脱壳的步骤进行脱壳了</p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">二次断点法、一次断点法、特征查找法（基于Xdbg）、Dll手动脱壳</summary>
    
    
    
    <category term="Reverse学习笔记" scheme="https://sydzi.github.io/categories/Reverse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Day9:壳与脱壳（一）</title>
    <link href="https://sydzi.github.io/2025/07/29/Day9-%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://sydzi.github.io/2025/07/29/Day9-%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2025-07-29T09:14:04.000Z</published>
    <updated>2025-10-03T11:36:56.610Z</updated>
    
    <content type="html"><![CDATA[<p>壳、壳的加载过程、工具脱壳、手动脱壳流程、esp定律（基于Xdbg）</p><span id="more"></span><h2 id="壳"><a href="#壳" class="headerlink" title="壳"></a>壳</h2><ul><li><p>先看ctf-wiki对壳的介绍：</p><p><strong>壳</strong> 是在一些计算机软件里一段专门负责保护软件不被非法修改或反编译的程序。</p><p>它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。</p></li><li><p>因此，加壳程序包含壳程序和原程序两个部分，且原程序在壳程序运行后才恢复到独立可执行的状态。因此，可以借助动态调试器在壳程序运行完后进行dump，从而获得独立可执行的原程序</p></li><li><p>常见的壳有压缩壳和加密壳两种：</p><p>压缩壳：upx、ASpack、PECompat等</p><p>加密壳：VMProtect、Themida、ASProtector等</p></li></ul><h2 id="壳的加载过程"><a href="#壳的加载过程" class="headerlink" title="壳的加载过程"></a>壳的加载过程</h2><ul><li>壳和原程序在逻辑上基本没有关联，因此，壳程序在解析加壳后的二进制文件前，会先保存各寄存器的值，通常用pushad&#x2F;puahfd实现</li><li>解析完成后，是原程序的逻辑部分，此时，壳程序给出控制权，寄存器恢复到解析前的状态，通常用popad&#x2F;popfd实现</li><li>最后，程序跳到原程序入口点开始执行</li></ul><h2 id="工具脱壳"><a href="#工具脱壳" class="headerlink" title="工具脱壳"></a>工具脱壳</h2><ul><li><p>直接使用工具脱壳的情况主要有两种：一种是无修改的、只使用加壳程序加壳；另一种是使用加壳程序加壳后修改了区块名的。前者可以直接使用加壳程序脱壳（如果具备脱壳功能的话），后者先修改区块名再使用加壳程序脱壳。</p></li><li><p>upx无修改加壳示例：</p><p>拿到可执行文件，先到DIE查看，发现有壳。对壳的信息描述没有出现“modified”字眼，因此判断是无修改加壳，直接使用工具脱壳</p><p><img src="/../images/image-20250729103439484.png" alt="查看壳信息"></p><p>直接使用upx -d脱壳</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-29%20103724.png" alt="upx-d脱壳"></p><p>再次用DIE打开，发现没有识别出壳了</p><p><img src="/../images/image-20250729104311684.png" alt="脱壳后查看壳信息"></p></li><li><p>upx修改区块名加壳示例：</p><p>先到DIE查看壳信息，发现是upx modified</p><p><img src="/../images/image-20250729110711262.png" alt="查看壳信息"></p><p>点击“区块“下方的”&gt;“查看区块信息，发现区块名有改动</p><p><img src="/../images/image-20250729110752177.png" alt="区块名改动"></p><p>010editor修改区块名</p><p><img src="/../images/image-20250729111002665.png" alt="修改区块名"></p><p>再次查看壳信息，变成无修改加壳了，直接工具脱壳</p><p><img src="/../images/image-20250729111128932.png" alt="再次查看壳信息"></p></li></ul><h2 id="手动脱壳流程"><a href="#手动脱壳流程" class="headerlink" title="手动脱壳流程"></a>手动脱壳流程</h2><ul><li><p>步骤：</p><ul><li>查壳：使用DIE、ExeinfoPE、PEiD等工具查壳</li><li>寻找程序原入口点(OEP)：通过各种方法找到壳代码结束、程序真正开始的地方</li><li>dump内存：借助插件从OEP开始dump出原程序</li><li>输入表(IAT)重建：借助插件重建输入表</li><li>关闭程序重定位：使用DIE等工具关闭程序重定位</li></ul></li><li><p>寻找OEP的方法有很多，而dump和IAT重建以及关闭重定位的方法基本固定。先用一个例子展示整体流程，再详细展开寻找OEP的方法。upx手动脱壳示例：</p><ul><li><p>查壳：显示是upx</p><p><img src="/../images/image-20250729133015652.png" alt="查壳"></p></li><li><p>寻找OEP：</p><p>采用esp定律法（详见下文）找到push ebp开头的一段代码</p><p><img src="/../images/image-20250729134006853.png" alt="寻找OEP"></p></li><li><p>dump内存：</p><p>打开插件scylla，点击“转储”栏中的“转储”，会获得一个_dump后缀的exe文件</p><p><img src="/../images/image-20250729134119537.png" alt="dump"></p></li><li><p>IAT重建：</p><p>点击“IAT自动搜索”，会有弹窗问是否使用高级搜索结果，点“是”。这时候，VA和“大小”两个框会被填充。</p><p><img src="/../images/image-20250729134901607.png" alt="IAT自动搜索"></p><p>接下来点“获取导入”，上方的大框中会出现dll结尾的东西，需要把带红色X的取消勾选</p><p><img src="/../images/image-20250729134937163.png" alt="获取导入"></p><p>然后点击修复转储，选择刚刚dump出来的文件，会得到一个再加上_SCY的exe文件。</p><p>此时程序大概率运行不了，会闪退。但是对于静态分析来说，到这一步已经足够了。</p></li><li><p>关闭重定位：把得到的_dump_SCY.exe文件拖到DIE，点击“区块”栏的“&gt;”，会弹出文件结构界面</p><p><img src="/../images/image-20250729135914719.png" alt="文件结构界面"></p><p>先取消勾选右上角的“只读”</p><p><img src="/../images/image-20250729140239276.png" alt="取消只读"></p><p>点击IMAGE_NT_HEADERS下的IMAGE_FILE_HEADER，在“标志”选项中勾选“RELOCS_STRIPPED”（图中未勾选）</p><p><img src="/../images/image-20250729140145721.png" alt="勾选RELOCS_STRIPPED"></p><p>再点击IMAGE_OPTIONAL_HEADERS，找到另一个标志(DllCharacteristics)，取消勾选“DYNAMIC_BASE”（图中未取消）</p><p><img src="/../images/image-20250729140545940.png" alt="取消勾选DYNAMIC_BASE"></p><p>这样子，我们的程序就脱完壳并且可以正常运行了</p></li><li><p>PS：关于IAT重建这一步骤，为什么不能IAT自动搜索再转储一步到位？</p><p>结合AI的解释，个人见解是IAT自动搜索的过程可能会运行程序，导致地址刷新，OEP失效，dump出来的程序不完整或者不对。因此，dump和IAT重建实际上是两个步骤，不过被集成到了一个界面。其实还有手动重建IAT的方法，这种情况下就确确实实需要先dump再导入重建的IAT了，因为在调试器中找到OEP后还要继续找IAT</p></li></ul></li></ul><h2 id="寻找OEP的方法（一）"><a href="#寻找OEP的方法（一）" class="headerlink" title="寻找OEP的方法（一）"></a>寻找OEP的方法（一）</h2><h3 id="ESP定律"><a href="#ESP定律" class="headerlink" title="ESP定律"></a>ESP定律</h3><ul><li><p>前文，我们知道了壳程序解析时会有pushad\popad或者pushfd\popfd的操作。pushad时，随着通用寄存器值的入栈，esp的值会发生变化，又因为栈平衡的特性，最终esp的值会回到pushad后的这个值。因此，可以借助这一点，给pushad后的esp值下硬件访问断点，popad后就会触发断点，中断调试，进而实现跳过整个壳解析过程。当然，中断处还不是OEP，一般在中断处后会有一个跨度明显的jmp，甚至jmp后还有一个跳转表jmp才会到达真正的OEP</p></li><li><p>具体操作如下：</p><ul><li><p>xdbg打开，F9到程序所在内存区域</p><p><img src="/../images/image-20250729172225632.png" alt="xdbg打开"></p></li><li><p>可以看到EIP所在就是pushad</p><p><img src="/../images/image-20250729172310628.png" alt="pushad"></p></li><li><p>F8步过，esp更新</p><p><img src="/../images/image-20250729172402698.png" alt="esp更新"></p></li><li><p>在右下角栈窗口设上硬件访问断点</p><p><img src="/../images/image-20250729172449826.png" alt="设置硬件访问断点"></p></li><li><p>点击工具栏“视图”下方的“-&gt;”，程序会执行过popad。可以看到下方不远处有个大跳</p><p><img src="/../images/image-20250729172606653.png" alt="popad"></p></li><li><p>F8到大跳处F7步入，有跳转表继续F7步入，可以看到开辟栈帧操作，这里就是OEP了，在此处直接使用scylla dump出程序</p><p><img src="/../images/image-20250729172759829.png" alt="OEP"></p></li></ul></li></ul><h3 id="单步跟踪法"><a href="#单步跟踪法" class="headerlink" title="单步跟踪法"></a>单步跟踪法</h3><ul><li>如名，就是一直按F8，让程序尽量向下走，遇到循环就跳过，遇到近call就步入，重点关注大跳</li><li>参考ctf-wiki <a href="https://ctf-wiki.org/reverse/platform/windows/unpack/trace/">https://ctf-wiki.org/reverse/platform/windows/unpack/trace/</a></li></ul>]]></content>
    
    
    <summary type="html">壳、壳的加载过程、工具脱壳、手动脱壳流程、esp定律（基于Xdbg）</summary>
    
    
    
    <category term="Reverse学习笔记" scheme="https://sydzi.github.io/categories/Reverse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Day8:thiscall、类</title>
    <link href="https://sydzi.github.io/2025/07/21/Day8-%E7%B1%BB/"/>
    <id>https://sydzi.github.io/2025/07/21/Day8-%E7%B1%BB/</id>
    <published>2025-07-21T08:51:35.000Z</published>
    <updated>2025-10-03T11:36:52.508Z</updated>
    
    <content type="html"><![CDATA[<p>thiscall、类</p><span id="more"></span><h2 id="调用约定：thiscall"><a href="#调用约定：thiscall" class="headerlink" title="调用约定：thiscall"></a>调用约定：thiscall</h2><ul><li>对于C++this指针的特性，有一种专门的调用约定叫thiscall，主要用于类出现的场景</li><li>无论x86&#x2F;x64，this指针均由ecx&#x2F;rcx扮演，指向对象的内存地址</li><li>thiscall由被调用者清理参数占用的栈空间</li></ul><h2 id="类（一）"><a href="#类（一）" class="headerlink" title="类（一）"></a>类（一）</h2><ul><li><p>简单的构造析构分析</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;main函数</span><br><span class="hljs-symbol">.text:</span>004641E0 var_EC          = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0ECh</span><br><span class="hljs-symbol">.text:</span>004641E0 var_30          = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">30h</span><br><span class="hljs-symbol">.text:</span>004641E0 var_20          = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">20h</span><br><span class="hljs-symbol">.text:</span>004641E0 var_4           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span>004641E0<br><span class="hljs-symbol">.text:</span>004641E0                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>004641E1                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>004641E3                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0F0h</span><br><span class="hljs-symbol">.text:</span>004641E9                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>004641EA                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>004641EB                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>004641EC                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_30]<br><span class="hljs-symbol">.text:</span>004641EF                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">0Ch</span><br><span class="hljs-symbol">.text:</span>004641F4                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span>004641F9                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>004641FB                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, ___security_cookie<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464200</span>                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464202</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_4], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464205</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_54D014<br><span class="hljs-symbol">.text:</span>0046420A                 <span class="hljs-keyword">call</span>    sub_45FF30<br><span class="hljs-symbol">.text:</span>0046420F                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464210</span>                 <span class="hljs-keyword">push</span>    offset aXiaoming <span class="hljs-comment">; 参数&quot;xiaoming&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464215</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-number">1</span>               <span class="hljs-comment">; 另一个参数</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464217</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+var_20] <span class="hljs-comment">; [ebp+var_20]是一个对象，this指针指向该对象</span><br><span class="hljs-symbol">.text:</span>0046421A                 <span class="hljs-keyword">call</span>    sub_46062E      <span class="hljs-comment">; 构造函数</span><br><span class="hljs-symbol">.text:</span>0046421F                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464220</span>                 <span class="hljs-keyword">push</span>    offset aPause   <span class="hljs-comment">; &quot;pause&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464225</span>                 <span class="hljs-keyword">call</span>    sub_45F98B      <span class="hljs-comment">; system</span><br><span class="hljs-symbol">.text:</span>0046422A                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046422D</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_EC], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464237</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+var_20] <span class="hljs-comment">; this指针</span><br><span class="hljs-symbol">.text:</span>0046423A                 <span class="hljs-keyword">call</span>    sub_45D38E      <span class="hljs-comment">; 析构函数</span><br><span class="hljs-symbol">.text:</span>0046423F                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_EC]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464245</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464246</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464248</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464249</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edx</span>, dword_464274<br><span class="hljs-symbol">.text:</span>0046424F                 <span class="hljs-keyword">call</span>    sub_45EC4D<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464254</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464255</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464256</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464257</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464258</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464259</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+var_4]<br><span class="hljs-symbol">.text:</span>0046425C                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ebp</span>        <span class="hljs-comment">; StackCookie</span><br><span class="hljs-symbol">.text:</span>0046425E                 <span class="hljs-keyword">call</span>    j_@__security_check_cookie@<span class="hljs-number">4</span> <span class="hljs-comment">; __security_check_cookie(x)</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464263</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0F0h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464269</span>                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>0046426B                 <span class="hljs-keyword">call</span>    sub_45F175<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464270</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464272</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464273</span>                 <span class="hljs-keyword">retn</span><br><br><span class="hljs-comment">;构造函数</span><br><span class="hljs-symbol">.text:</span>00463FC0 var_C           = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ch</span><br><span class="hljs-symbol">.text:</span>00463FC0 var_8           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>00463FC0 arg_0           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>00463FC0 arg_4           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">0Ch</span><br><span class="hljs-symbol">.text:</span>00463FC0<br><span class="hljs-symbol">.text:</span>00463FC0                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>00463FC1                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>00463FC3                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br><span class="hljs-symbol">.text:</span>00463FC9                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>00463FCA                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>00463FCB                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>00463FCC                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>00463FCD                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br><span class="hljs-symbol">.text:</span>00463FD0                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">3</span><br><span class="hljs-symbol">.text:</span>00463FD5                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span>00463FDA                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>00463FDC                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>00463FDD                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-built_in">ecx</span> <span class="hljs-comment">; 当前对象地址保存到[ebp+var_8]</span><br><span class="hljs-symbol">.text:</span>00463FE0                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_54D014<br><span class="hljs-symbol">.text:</span>00463FE5                 <span class="hljs-keyword">call</span>    sub_45FF30<br><span class="hljs-symbol">.text:</span>00463FEA                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>00463FEB                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8] <span class="hljs-comment">; 第一个对象成员</span><br><span class="hljs-symbol">.text:</span>00463FEE                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+arg_0] <span class="hljs-comment">; 第一个参数1</span><br><span class="hljs-symbol">.text:</span>00463FF1                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">eax</span>], <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>00463FF3                 <span class="hljs-keyword">push</span>    <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span>00463FF5                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+arg_4] <span class="hljs-comment">; 第二个参数&quot;xiaoming&quot;</span><br><span class="hljs-symbol">.text:</span>00463FF8                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>00463FF9                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span>00463FFC                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">4</span>          <span class="hljs-comment">; 第二个对象成员</span><br><span class="hljs-symbol">.text:</span>00463FFF                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464000</span>                 <span class="hljs-keyword">call</span>    sub_45FCF1      <span class="hljs-comment">; memcpy()</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464005</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0Ch</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464008</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8] <span class="hljs-comment">; 返回的是对象地址</span><br><span class="hljs-symbol">.text:</span>0046400B                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>0046400C                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046400D</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>0046400E                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464014</span>                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464016</span>                 <span class="hljs-keyword">call</span>    sub_45F175<br><span class="hljs-symbol">.text:</span>0046401B                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046401D</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>0046401E                 <span class="hljs-keyword">retn</span>    <span class="hljs-number">8</span><br><br><span class="hljs-comment">;析构函数</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464040</span> var_C           = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ch</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464040</span> var_8           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464040</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464040</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464041</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464043</span>                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464049</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>0046404A                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>0046404B                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>0046404C                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046404D</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464050</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">3</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464055</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span>0046405A                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>0046405C                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046405D</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-built_in">ecx</span> <span class="hljs-comment">; 把对象地址存到[ebp+var_8]</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464060</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_54D014<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464065</span>                 <span class="hljs-keyword">call</span>    sub_45FF30<br><span class="hljs-symbol">.text:</span>0046406A                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>0046406B                 <span class="hljs-keyword">push</span>    offset aDestructing <span class="hljs-comment">; &quot;destructing......&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464070</span>                 <span class="hljs-keyword">call</span>    sub_45DB59      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464075</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464078</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464079</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>0046407A                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>0046407B                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464081</span>                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464083</span>                 <span class="hljs-keyword">call</span>    sub_45F175<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464088</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>0046408A                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>0046408B                 <span class="hljs-keyword">retn</span><br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> ID;<br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Student</span>(<span class="hljs-type">int</span> n = <span class="hljs-number">0</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* na = <span class="hljs-string">&quot;NONE&quot;</span>) :<span class="hljs-built_in">ID</span>(n) &#123;<br><span class="hljs-built_in">memcpy</span>(name, na, <span class="hljs-built_in">sizeof</span>(na));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>~<span class="hljs-built_in">Student</span>();<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Student::show</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s\n&quot;</span>, ID, name);<br>&#125;<br>Student::~<span class="hljs-built_in">Student</span>() &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;destructing......&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">Student <span class="hljs-title">stu</span><span class="hljs-params">(<span class="hljs-number">001</span>, <span class="hljs-string">&quot;xiaoming&quot;</span>)</span></span>;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">thiscall、类</summary>
    
    
    
    <category term="Reverse学习笔记" scheme="https://sydzi.github.io/categories/Reverse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Day7:数组与指针识别</title>
    <link href="https://sydzi.github.io/2025/07/17/Day7-%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88%E8%AF%86%E5%88%AB/"/>
    <id>https://sydzi.github.io/2025/07/17/Day7-%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88%E8%AF%86%E5%88%AB/</id>
    <published>2025-07-17T05:28:29.000Z</published>
    <updated>2025-10-03T11:36:48.752Z</updated>
    
    <content type="html"><![CDATA[<p>数组与指针识别</p><span id="more"></span><h2 id="数组与指针识别"><a href="#数组与指针识别" class="headerlink" title="数组与指针识别"></a>数组与指针识别</h2><ul><li><p>整型一维数组</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00464260</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_14], <span class="hljs-number">1</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464267</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_10], <span class="hljs-number">2</span><br><span class="hljs-symbol">.text:</span>0046426E                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_C], <span class="hljs-number">3</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464275</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_14] <span class="hljs-comment">; 数组首地址</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464278</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span>             <span class="hljs-comment">; 传参</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464279</span>                 <span class="hljs-keyword">call</span>    sub_45D447<br><span class="hljs-symbol">.text:</span>0046427E                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><br><span class="hljs-comment">;sub_45D447</span><br><span class="hljs-symbol">.text:</span>004640D0 arg_0           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>004640D0<br><span class="hljs-symbol">.text:</span>004640D0                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>004640D1                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>004640D3                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><br><span class="hljs-symbol">.text:</span>004640D9                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>004640DA                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>004640<span class="hljs-built_in">DB</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>004640DC                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edi</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>004640DE                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>004640E0                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span>004640E5                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>004640E7                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_54D014<br><span class="hljs-symbol">.text:</span>004640EC                 <span class="hljs-keyword">call</span>    sub_45FF35<br><span class="hljs-symbol">.text:</span>004640F1                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>004640F2                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span>004640F7                 <span class="hljs-keyword">shl</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; eax=4*2^1=8</span><br><span class="hljs-symbol">.text:</span>004640F9                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+arg_0] <span class="hljs-comment">; [ebp+arg_0]是传入的参数，即数组首地址</span><br><span class="hljs-symbol">.text:</span>004640FC                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ecx</span>+<span class="hljs-built_in">eax</span>]  <span class="hljs-comment">; [ecx+eax]即[ebp+arg_0+eax]，即[ebp+10h]</span><br><span class="hljs-symbol">.text:</span>004640FF                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464100</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464105</span>                 <span class="hljs-keyword">shl</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span>          <span class="hljs-comment">; eax=4*2^0=4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464108</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+arg_0]<br><span class="hljs-symbol">.text:</span>0046410B                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ecx</span>+<span class="hljs-built_in">eax</span>]  <span class="hljs-comment">; 即[ebp+0Ch]</span><br><span class="hljs-symbol">.text:</span>0046410E                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span>0046410F                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464114</span>                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span>     <span class="hljs-comment">; ecx=4*0=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464117</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ebp</span>+arg_0]<br><span class="hljs-symbol">.text:</span>0046411A                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">edx</span>+<span class="hljs-built_in">ecx</span>]  <span class="hljs-comment">; 即[ebp+8]，即[ebp+arg_0]，数组首位</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046411D</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0046411E                 <span class="hljs-keyword">push</span>    offset aDDD     <span class="hljs-comment">; &quot;%d %d %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464123</span>                 <span class="hljs-keyword">call</span>    sub_45DB5E      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464128</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">10h</span><br><span class="hljs-symbol">.text:</span>0046412B                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>0046412C                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046412D</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>0046412E                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464134</span>                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464136</span>                 <span class="hljs-keyword">call</span>    sub_45F17F<br><span class="hljs-symbol">.text:</span>0046413B                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046413D</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>0046413E                 <span class="hljs-keyword">retn</span><br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">IntShow</span><span class="hljs-params">(<span class="hljs-type">int</span>* n)</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, n[<span class="hljs-number">0</span>], n[<span class="hljs-number">1</span>], n[<span class="hljs-number">2</span>]);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;;<br>IntShow(arr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>字符型一维数组</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00464281</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ds</span>:dword_520E60 <span class="hljs-comment">; &#x27;lleh&#x27;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464286</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_24], <span class="hljs-built_in">eax</span> <span class="hljs-comment">; 用eax过渡，传给局部变量</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464289</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">cx</span>, <span class="hljs-built_in">ds</span>:word_520E64 <span class="hljs-comment">; &#x27;o&#x27;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464290</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_20], <span class="hljs-built_in">cx</span> <span class="hljs-comment">; 用cx过渡，传给局部变量</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464294</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464297</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span>             <span class="hljs-comment">; 前半段的地址入栈</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464298</span>                 <span class="hljs-keyword">call</span>    sub_45E3AB<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046429D</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><br><span class="hljs-comment">;sub_45E3AB</span><br><span class="hljs-symbol">.text:</span>00463FC0 arg_0           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>00463FC0<br><span class="hljs-symbol">.text:</span>00463FC0                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>00463FC1                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>00463FC3                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><br><span class="hljs-symbol">.text:</span>00463FC9                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>00463FCA                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>00463FCB                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>00463FCC                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edi</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>00463FCE                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>00463FD0                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span>00463FD5                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>00463FD7                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_54D014<br><span class="hljs-symbol">.text:</span>00463FDC                 <span class="hljs-keyword">call</span>    sub_45FF35<br><span class="hljs-symbol">.text:</span>00463FE1                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span>00463FE2                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+arg_0] <span class="hljs-comment">; 参数传给eax</span><br><span class="hljs-symbol">.text:</span>00463FE5                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>00463FE6                 <span class="hljs-keyword">push</span>    offset aS       <span class="hljs-comment">; &quot;%s&quot;</span><br><span class="hljs-symbol">.text:</span>00463FEB                 <span class="hljs-keyword">call</span>    sub_45DB5E      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>00463FF0                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>00463FF3                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>00463FF4                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>00463FF5                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>00463FF6                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><br><span class="hljs-symbol">.text:</span>00463FFC                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>00463FFE                 <span class="hljs-keyword">call</span>    sub_45F17F<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464003</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464005</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464006</span>                 <span class="hljs-keyword">retn</span><br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CharShow</span><span class="hljs-params">(<span class="hljs-type">char</span>* n)</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, n);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> buf[] = &#123; <span class="hljs-string">&quot;hello&quot;</span> &#125;;<br>CharShow(buf);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>数组作为返回值</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>004642C3                 <span class="hljs-keyword">call</span>    sub_45FC79<br><span class="hljs-symbol">.text:</span>004642C8                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_40], <span class="hljs-built_in">eax</span> <span class="hljs-comment">; 从返回值中取出传到局部变量</span><br><span class="hljs-symbol">.text:</span>004642CB                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_40] <span class="hljs-comment">; 放入寄存器中push作为参数</span><br><span class="hljs-symbol">.text:</span>004642CE                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004642CF                 <span class="hljs-keyword">push</span>    offset aS       <span class="hljs-comment">; &quot;%s&quot;</span><br><span class="hljs-symbol">.text:</span>004642D4                 <span class="hljs-keyword">call</span>    sub_45DB59      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>004642D9                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><br><span class="hljs-comment">;sub_45FC79</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span> var_14          = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">14h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span> var_10          = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">10h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span> var_C           = <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ch</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span> var_A           = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ah</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span> var_4           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464020</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464021</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464023</span>                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0D4h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464029</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>0046402A                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>0046402B                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>0046402C                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_14]<br><span class="hljs-symbol">.text:</span>0046402F                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">5</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464034</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464039</span>                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span>0046403B                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, ___security_cookie<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464040</span>                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464042</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_4], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464045</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_54E014<br><span class="hljs-symbol">.text:</span>0046404A                 <span class="hljs-keyword">call</span>    sub_45FF35<br><span class="hljs-symbol">.text:</span>0046404F                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464050</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ds</span>:dword_521E60 <span class="hljs-comment">; &#x27;oviv&#x27;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464055</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_10], <span class="hljs-built_in">eax</span> <span class="hljs-comment">; eax过渡，传给局部变量</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464058</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">cx</span>, <span class="hljs-built_in">ds</span>:word_521E64 <span class="hljs-comment">; &#x27;05&#x27;</span><br><span class="hljs-symbol">.text:</span>0046405F                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_C], <span class="hljs-built_in">cx</span> <span class="hljs-comment">; cx过渡，传给局部变量</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464063</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">dl</span>, <span class="hljs-built_in">ds</span>:byte_521E66<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464069</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_A], <span class="hljs-built_in">dl</span><br><span class="hljs-symbol">.text:</span>0046406C                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_10] <span class="hljs-comment">; 前半段给eax，作为返回值传递</span><br><span class="hljs-symbol">.text:</span>0046406F                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464070</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464072</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464073</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edx</span>, dword_4640A0<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464079</span>                 <span class="hljs-keyword">call</span>    sub_45EC52<br><span class="hljs-symbol">.text:</span>0046407E                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0046407F                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464080</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464081</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464082</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464083</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+var_4]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464086</span>                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ebp</span>        <span class="hljs-comment">; StackCookie</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464088</span>                 <span class="hljs-keyword">call</span>    j_@__security_check_cookie@<span class="hljs-number">4</span> <span class="hljs-comment">; __security_check_cookie(x)</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046408D</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0D4h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464093</span>                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464095</span>                 <span class="hljs-keyword">call</span>    sub_45F17A<br><span class="hljs-symbol">.text:</span>0046409A                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>0046409C                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046409D</span>                 <span class="hljs-keyword">retn</span><br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>* <span class="hljs-title function_">CrZT</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">char</span> temp[<span class="hljs-number">7</span>] = <span class="hljs-string">&quot;vivo50&quot;</span>;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span>* p = CrZT();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>整形二维数组（和一维数组没有本质上的区别，都是占用一段连续的内存空间）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>004642DC                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_58], <span class="hljs-number">1</span><br><span class="hljs-symbol">.text:</span>004642E3                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_54], <span class="hljs-number">2</span><br><span class="hljs-symbol">.text:</span>004642EA                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_50], <span class="hljs-number">3</span><br><span class="hljs-symbol">.text:</span>004642F1                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_4C], <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span>004642F8                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>004642FD                 <span class="hljs-keyword">shl</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span>          <span class="hljs-comment">; eax=8*2^0=8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464300</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+<span class="hljs-built_in">eax</span>+var_58] <span class="hljs-comment">; 即[ebp+var_58+8]，即[ebp+var_50]</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464304</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464309</span>                 <span class="hljs-keyword">shl</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">0</span>          <span class="hljs-comment">; edx=4*2^0=4</span><br><span class="hljs-symbol">.text:</span>0046430C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ecx</span>+<span class="hljs-built_in">edx</span>]  <span class="hljs-comment">; 即[ebp+var_58+0Ch]，即[ebp+var_4C]</span><br><span class="hljs-symbol">.text:</span>0046430F                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464310</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464315</span>                 <span class="hljs-keyword">shl</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">0</span>          <span class="hljs-comment">; ecx=8*2^0=8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464318</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ebp</span>+<span class="hljs-built_in">ecx</span>+var_58] <span class="hljs-comment">; 即[ebp+var_58+8]，即[ebp+var_50]</span><br><span class="hljs-symbol">.text:</span>0046431C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464321</span>                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span>     <span class="hljs-comment">; ecx=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464324</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">edx</span>+<span class="hljs-built_in">ecx</span>]  <span class="hljs-comment">; 即[ebp+var_50]</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464327</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464328</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046432D</span>                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span>     <span class="hljs-comment">; ecx=8*0=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464330</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ebp</span>+<span class="hljs-built_in">ecx</span>+var_58] <span class="hljs-comment">; 即[ebp+var_58]</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464334</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464339</span>                 <span class="hljs-keyword">shl</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span>          <span class="hljs-comment">; eax=4*2^0=4</span><br><span class="hljs-symbol">.text:</span>0046433C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">edx</span>+<span class="hljs-built_in">eax</span>]  <span class="hljs-comment">; 即[ebp+var_54]</span><br><span class="hljs-symbol">.text:</span>0046433F                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464340</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464345</span>                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">edx</span>, <span class="hljs-number">0</span>     <span class="hljs-comment">; eax=8*0=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464348</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+<span class="hljs-built_in">eax</span>+var_58] <span class="hljs-comment">; 即[ebp+var_58]</span><br><span class="hljs-symbol">.text:</span>0046434C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464351</span>                 <span class="hljs-keyword">imul</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">edx</span>, <span class="hljs-number">0</span>     <span class="hljs-comment">; ecx=4*0=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464354</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ecx</span>+<span class="hljs-built_in">eax</span>]  <span class="hljs-comment">; 即[ebp+var_58]</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464357</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464358</span>                 <span class="hljs-keyword">push</span>    offset aDDDD    <span class="hljs-comment">; &quot;%d,%d,%d,%d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046435D</span>                 <span class="hljs-keyword">call</span>    sub_45DB59      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464362</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">14h</span><br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> num[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = &#123; &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125; &#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d,%d,%d&quot;</span>, num[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], num[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>], num[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], num[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">数组与指针识别</summary>
    
    
    
    <category term="Reverse学习笔记" scheme="https://sydzi.github.io/categories/Reverse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Day6:if-else语句识别、switch语句识别、循环语句识别</title>
    <link href="https://sydzi.github.io/2025/07/15/Day6-switch%E8%AF%AD%E5%8F%A5%E8%AF%86%E5%88%AB/"/>
    <id>https://sydzi.github.io/2025/07/15/Day6-switch%E8%AF%AD%E5%8F%A5%E8%AF%86%E5%88%AB/</id>
    <published>2025-07-15T07:50:16.000Z</published>
    <updated>2025-10-03T11:36:45.896Z</updated>
    
    <content type="html"><![CDATA[<p>if-else语句识别、switch语句识别、循环语句识别</p><span id="more"></span><h2 id="if-else语句识别"><a href="#if-else语句识别" class="headerlink" title="if-else语句识别"></a>if-else语句识别</h2><ul><li><p>第一种，数值比较作为条件（x86debug为例，其余类似，仅是比较方法（如使用sub而不是cmp）和模式特征上的差异）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>004702D0                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br><span class="hljs-symbol">.text:</span>004702D3                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004702D4                 <span class="hljs-keyword">push</span>    offset unk_545E50 <span class="hljs-comment">; %d</span><br><span class="hljs-symbol">.text:</span>004702D9                 <span class="hljs-keyword">call</span>    sub_4681E0      <span class="hljs-comment">; scanf</span><br><span class="hljs-symbol">.text:</span>004702DE                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>004702E1                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_C], <span class="hljs-number">1</span><br><span class="hljs-symbol">.text:</span>004702E5                 <span class="hljs-keyword">jnz</span>     short loc_4702F6 <span class="hljs-comment">; if [ebp+var_C]!=1, jump to loc_4702f6</span><br><span class="hljs-symbol">.text:</span>004702E7                 <span class="hljs-keyword">push</span>    offset aNEquales1 <span class="hljs-comment">; &quot;n equales 1&quot;</span><br><span class="hljs-symbol">.text:</span>004702EC                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>004702F1                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span>004702F4                 <span class="hljs-keyword">jmp</span>     short loc_470303<br><span class="hljs-symbol">.text:</span>004702F6 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>004702F6<br><span class="hljs-symbol">.text:</span>004702F6 loc_4702F6:                             <span class="hljs-comment">; CODE XREF: main+45↑j</span><br><span class="hljs-symbol">.text:</span>004702F6                 <span class="hljs-keyword">push</span>    offset aNDoesNotEqual1 <span class="hljs-comment">; &quot;n does not equal 1&quot;</span><br><span class="hljs-symbol">.text:</span>004702FB                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470300</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equales 1&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n does not equal 1&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>第二种，变量直接作为条件</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00470303</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_18]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470306</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470307</span>                 <span class="hljs-keyword">push</span>    offset unk_545E50 <span class="hljs-comment">; %d</span><br><span class="hljs-symbol">.text:</span>0047030C                 <span class="hljs-keyword">call</span>    sub_4681E0      <span class="hljs-comment">; scanf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470311</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470314</span>                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_18], <span class="hljs-number">0</span> <span class="hljs-comment">; 和&#x27;0&#x27;比较</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470318</span>                 <span class="hljs-keyword">jz</span>      short loc_470327 <span class="hljs-comment">; if [ebp+var_18]==0, jump to loc_470327, 跳过printf</span><br><span class="hljs-symbol">.text:</span>0047031A                 <span class="hljs-keyword">push</span>    offset aJudgeIsNotZero <span class="hljs-comment">; &quot;judge is not zero&quot;</span><br><span class="hljs-symbol">.text:</span>0047031F                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470324</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> judge;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;judge);<br><span class="hljs-keyword">if</span> (judge)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;judge is not zero&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>第三种，返回值（函数式）作为条件</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00470387</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span>0047038A                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0047038B                 <span class="hljs-keyword">push</span>    offset unk_545E50 <span class="hljs-comment">; %d</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470390</span>                 <span class="hljs-keyword">call</span>    sub_4681E0      <span class="hljs-comment">; scanf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470395</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470398</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span>0047039B                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span>             <span class="hljs-comment">; 输入的值入栈，即函数传参</span><br><span class="hljs-symbol">.text:</span>0047039C                 <span class="hljs-keyword">call</span>    sub_46B214      <span class="hljs-comment">; 自定义函数</span><br><span class="hljs-symbol">.text:</span>004703A1                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><span class="hljs-symbol">.text:</span>004703A4                 <span class="hljs-keyword">test</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span>        <span class="hljs-comment">; 1 &amp; 1 = 0； 0 &amp; 0 = 1</span><br><span class="hljs-symbol">.text:</span>004703A6                 <span class="hljs-keyword">jz</span>      short loc_4703B5<br><span class="hljs-symbol">.text:</span>004703A8                 <span class="hljs-keyword">push</span>    offset aItS0    <span class="hljs-comment">; &quot;it&#x27;s 0\n&quot;</span><br><span class="hljs-symbol">.text:</span>004703AD                 <span class="hljs-keyword">call</span>    sub_468D1B<br><span class="hljs-symbol">.text:</span>004703B2                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br><br><span class="hljs-comment">;sub_46b214</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470110</span> arg_0           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470110</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470110</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470111</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470113</span>                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470119</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span>0047011A                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>0047011B                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span>0047011C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edi</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span>0047011E                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470120</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470125</span>                 <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470127</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset unk_57500E<br><span class="hljs-symbol">.text:</span>0047012C                 <span class="hljs-keyword">call</span>    sub_46B660<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470131</span>                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470132</span>                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+arg_0], <span class="hljs-number">0</span>  <span class="hljs-comment">; [ebp+8], eax在栈上的位置</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470136</span>                 <span class="hljs-keyword">jnz</span>     short loc_470141 <span class="hljs-comment">; eax=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470138</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; if [ebp+arg_0]==0, eax=1, return 1(eax)</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047013D</span>                 <span class="hljs-keyword">jmp</span>     short loc_470143<br><span class="hljs-symbol">.text:</span>0047013F <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>0047013F                 <span class="hljs-keyword">jmp</span>     short loc_470143<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470141</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470141</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470141</span> loc_470141:                             <span class="hljs-comment">; CODE XREF: sub_470110+26↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470141</span>                 <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span>        <span class="hljs-comment">; eax=0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470143</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470143</span> loc_470143:                             <span class="hljs-comment">; CODE XREF: sub_470110+2D↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470143</span>                                         <span class="hljs-comment">; sub_470110+2F↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470143</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470144</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470145</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470146</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><br><span class="hljs-symbol">.text:</span>0047014C                 <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br><span class="hljs-symbol">.text:</span>0047014E                 <span class="hljs-keyword">call</span>    sub_46A62A<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470153</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470155</span>                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470156</span>                 <span class="hljs-keyword">retn</span><br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">IfZero</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> a;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<br><span class="hljs-keyword">if</span>(IfZero(a))<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;it&#x27;s 0\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="switch语句识别"><a href="#switch语句识别" class="headerlink" title="switch语句识别"></a>switch语句识别</h2><ul><li><p>比较简单的情况下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00470327</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span>0047032A                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0047032B                 <span class="hljs-keyword">push</span>    offset unk_545E50 <span class="hljs-comment">; %d</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470330</span>                 <span class="hljs-keyword">call</span>    sub_4681E0      <span class="hljs-comment">; scanf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470335</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470338</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span>0047033B                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_EC], <span class="hljs-built_in">eax</span> <span class="hljs-comment">; [ebp+var_EC]==[ebp+var_24], 用临时变量[ebp+var_EC]来检验case</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470341</span>                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_EC], <span class="hljs-number">1</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470348</span>                 <span class="hljs-keyword">jz</span>      short loc_47035E <span class="hljs-comment">; case1输出</span><br><span class="hljs-symbol">.text:</span>0047034A                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_EC], <span class="hljs-number">5</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470351</span>                 <span class="hljs-keyword">jz</span>      short loc_470371 <span class="hljs-comment">; case5输出</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470353</span>                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_EC], <span class="hljs-number">0Ah</span><br><span class="hljs-symbol">.text:</span>0047035A                 <span class="hljs-keyword">jz</span>      short loc_470384 <span class="hljs-comment">; case10输出</span><br><span class="hljs-symbol">.text:</span>0047035C                 <span class="hljs-keyword">jmp</span>     short loc_470395 <span class="hljs-comment">; break然后system(&quot;pause&quot;)</span><br><span class="hljs-symbol">.text:</span>0047035E <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>0047035E<br><span class="hljs-symbol">.text:</span>0047035E loc_47035E:                             <span class="hljs-comment">; CODE XREF: main+A8↑j</span><br><span class="hljs-symbol">.text:</span>0047035E                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470361</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470362</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470367</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>0047036C                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>0047036F                 <span class="hljs-keyword">jmp</span>     short loc_470395<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470371</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470371</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470371</span> loc_470371:                             <span class="hljs-comment">; CODE XREF: main+B1↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470371</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470374</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470375</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span>0047037A                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>0047037F                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470382</span>                 <span class="hljs-keyword">jmp</span>     short loc_470395<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470384</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470384</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470384</span> loc_470384:                             <span class="hljs-comment">; CODE XREF: main+BA↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470384</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_24]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470387</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470388</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047038D</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470392</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470395</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470395</span> loc_470395:                             <span class="hljs-comment">; CODE XREF: main+BC↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470395</span>                                         <span class="hljs-comment">; main+CF↑j ...</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470395</span>                 <span class="hljs-keyword">push</span>    offset aPause   <span class="hljs-comment">; &quot;pause&quot;</span><br><span class="hljs-symbol">.text:</span>0047039A                 <span class="hljs-keyword">call</span>    sub_46AFAD      <span class="hljs-comment">; system(&quot;pause&quot;)</span><br><span class="hljs-symbol">.text:</span>0047039F                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> number;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;number);<br><span class="hljs-keyword">switch</span> (number) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>再复杂点，会优化出跳转表，即每个case跳转的地址会被集合成一个数组，像表一样</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>004702D3                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004702D4                 <span class="hljs-keyword">push</span>    offset unk_545E50 <span class="hljs-comment">; %d</span><br><span class="hljs-symbol">.text:</span>004702D9                 <span class="hljs-keyword">call</span>    sub_4681E0      <span class="hljs-comment">; scanf</span><br><span class="hljs-symbol">.text:</span>004702DE                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>004702E1                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br><span class="hljs-symbol">.text:</span>004702E4                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_D4], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004702EA                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, [<span class="hljs-built_in">ebp</span>+var_D4] <span class="hljs-comment">; 把输入值传到ecx，下一步减去1，减1的原因见后面的解释</span><br><span class="hljs-symbol">.text:</span>004702F0                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; switch 67 cases</span><br><span class="hljs-symbol">.text:</span>004702F3                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_D4], <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">.text:</span>004702F9                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_D4], <span class="hljs-number">42h</span> <span class="hljs-comment">; 把输入值和42h(66)比较，下一步是大于66就跳出case的判断</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470300</span>                 <span class="hljs-keyword">ja</span>      def_470313      <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470306</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ebp</span>+var_D4]<br><span class="hljs-symbol">.text:</span>0047030C                 <span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ds</span>:byte_470418[<span class="hljs-built_in">edx</span>] <span class="hljs-comment">; 跳转表索引值表，即预判了输入值的范围并且为每个可能的值建立了索引值表（比如说现在确定了范围是0-66，就枚举了0-66这些数值对应的索引，然后再根据索引找到应改跳转的地址</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470313</span>                 <span class="hljs-keyword">jmp</span>     <span class="hljs-built_in">ds</span>:jpt_470313[<span class="hljs-built_in">eax</span>*<span class="hljs-number">4</span>] <span class="hljs-comment">; switch jump</span><br><span class="hljs-symbol">.text:</span>0047031A <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>0047031A<br><span class="hljs-symbol">.text:</span>0047031A loc_47031A:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span>0047031A                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span>0047031A                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 1</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047031D</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0047031E                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470323</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470328</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>0047032B                 <span class="hljs-keyword">jmp</span>     short def_470313 <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047032D</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047032D</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047032D</span> loc_47032D:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047032D</span>                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047032D</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 5</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470330</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470331</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470336</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>0047033B                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>0047033E                 <span class="hljs-keyword">jmp</span>     short def_470313 <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470340</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470340</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470340</span> loc_470340:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470340</span>                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470340</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 10</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470343</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470344</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470349</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>0047034E                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470351</span>                 <span class="hljs-keyword">jmp</span>     short def_470313 <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470353</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470353</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470353</span> loc_470353:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470353</span>                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470353</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 17</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470356</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470357</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span>0047035C                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470361</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470364</span>                 <span class="hljs-keyword">jmp</span>     short def_470313 <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470366</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470366</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470366</span> loc_470366:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470366</span>                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470366</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 11</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470369</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0047036A                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span>0047036F                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470374</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470377</span>                 <span class="hljs-keyword">jmp</span>     short def_470313 <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470379</span> <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470379</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470379</span> loc_470379:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470379</span>                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470379</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 67</span><br><span class="hljs-symbol">.text:</span>0047037C                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047037D</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470382</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470387</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span>0047038A                 <span class="hljs-keyword">jmp</span>     short def_470313 <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span>0047038C <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>0047038C<br><span class="hljs-symbol">.text:</span>0047038C loc_47038C:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+73↑j</span><br><span class="hljs-symbol">.text:</span>0047038C                                         <span class="hljs-comment">; DATA XREF: .text:jpt_470313↓o</span><br><span class="hljs-symbol">.text:</span>0047038C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_C] <span class="hljs-comment">; jumptable 00470313 case 3</span><br><span class="hljs-symbol">.text:</span>0047038F                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470390</span>                 <span class="hljs-keyword">push</span>    offset aNEqualsD <span class="hljs-comment">; &quot;n equals %d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00470395</span>                 <span class="hljs-keyword">call</span>    sub_468D1B      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>0047039A                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047039D</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047039D</span> def_470313:                             <span class="hljs-comment">; CODE XREF: sub_4702A0+60↑j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047039D</span>                                         <span class="hljs-comment">; sub_4702A0+73↑j ...</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0047039D</span>                 <span class="hljs-keyword">push</span>    offset aPause   <span class="hljs-comment">; jumptable 00470313 default case, cases 2,4,6-9,12-16,18-66</span><br><span class="hljs-symbol">.text:</span>004703A2                 <span class="hljs-keyword">call</span>    sub_46AFAD      <span class="hljs-comment">; system</span><br><span class="hljs-symbol">.text:</span>004703A7                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> number;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;number);<br><span class="hljs-keyword">switch</span> (number) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">17</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">67</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n equals %d&quot;</span>, number);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>对跳转表和索引值表进行进一步解释：</p><p>先看跳转表：</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-16%20000211.png" alt="跳转表"></p><p>可以看到跳转表只有简单的8种情况。但是编译器（反编译器？）只能根据case的最大值用笨方法枚举可能的值，这时候，就可以给这些枚举的值分成两种：一种是case里有的，一种是case里没有的。看跳转表的最后一个，叫def而不是loc，这个就是给case里没有的枚举值准备的。因为分为case里有的和没有的，因此，case里有的，会给出具体的索引值；case里没有的，统一导向跳转表的最后一个。再看索引值表：</p><p><img src="/../images/image-20250716001640839.png" alt="索引值表"></p><p>可以看到，里面枚举了0到66对应的索引值。看汇编代码，是将输入的值作为索引值表的索引来用的，索引出来的值再作为跳转表的索引。注意看，索引值表的最小值为0，因此，跳转表和数组一样从0开始索引，而0-7对应跳转表的八种情况。通过进一步挖掘信息，还可以知道跳转表是把case按照从小到大的顺序排列的。因此，最开始会对输入值有一个减的操作。至于为什么减1，我们就可以推测最小的case是1了，因为索引从0开始，而最小的case在索引0处。</p></li><li><p>这样解释下来可能还有点绕，所以我们按照机器的动作走一遍：</p><p>首先，把case按顺序排出跳转表。</p><p>然后，假设我们拿到输入的值。作为机器，我们知道case有：1，3，5，10，17，11，67，所以先给输入的值减1，以便这个值是1的时候我们可以索引到跳转表下标0处。同时，如果这个值大于66，我们还可以直接跳过case检查，直接导出去（刚好和在case最大最小值范围内但不是case的值一样对待）</p><p>再然后，我们枚举0-66的值，并且把这些值和case里有的值一一比较，分出两种值：一种在case里，一种不再case里。</p><p>ok，然后我们建立索引值表，给在case里的枚举值对应的跳转表索引值，比如说枚举值2（输入值是3），刚好case里有3，按顺序排第二，我们就给索引值1（从0开始索引）。回头看截出来的索引值表，在下标2的地方刚好是1（枚举值索引出跳转表索引）；给不在case里的值索引到7，对应跳转表最后一位（为没在case里的值专门准备的那一位）。</p><p>最后，我们就准备好我们的解决方案了，对于任意输入的值我们就都有对策了。</p></li><li><p>请务必真正理解上述内容，因为在逆向工程中，这么绕的操作很常见。在PE文件结构部分，我们或许还有机会再接触到这么绕的操作。（其实只需要写出程序拿到ida里点开跳转表和索引值表（如果有的话）看几眼就明白了，亲身实践总比阅读文字来的有效，因为文字还取决于书写者的表达水平(●’◡’●)）</p></li></ul><h2 id="循环语句识别"><a href="#循环语句识别" class="headerlink" title="循环语句识别"></a>循环语句识别</h2><ul><li><p>第一种，for循环</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">00464096</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-number">0</span>  <span class="hljs-comment">; 一个变量初始化为0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0046409D</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_14], <span class="hljs-number">1</span> <span class="hljs-comment">; 另一个变量初始化为1</span><br><span class="hljs-symbol">.text:</span>004640A4                 <span class="hljs-keyword">jmp</span>     short loc_4640AF<br><span class="hljs-symbol">.text:</span>004640A6 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>004640A6<br><span class="hljs-symbol">.text:</span>004640A6 loc_4640A6:                             <span class="hljs-comment">; CODE XREF: sub_464070+4E↓j</span><br><span class="hljs-symbol">.text:</span>004640A6                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_14]<br><span class="hljs-symbol">.text:</span>004640A9                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; 用eax过渡，给[ebp+var_14]加1</span><br><span class="hljs-symbol">.text:</span>004640AC                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_14], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004640AF<br><span class="hljs-symbol">.text:</span>004640AF loc_4640AF:                             <span class="hljs-comment">; CODE XREF: sub_464070+34↑j</span><br><span class="hljs-symbol">.text:</span>004640AF                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_14], <span class="hljs-number">0Ah</span><br><span class="hljs-symbol">.text:</span>004640B3                 <span class="hljs-keyword">jg</span>      short loc_4640C0 <span class="hljs-comment">; [ebp+var_14]大于0Ah时跳转（出循环）</span><br><span class="hljs-symbol">.text:</span>004640B5                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span>004640B8                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_14] <span class="hljs-comment">; 用eax过渡，把[ebp+var_14]的值加到[ebp+var_8]上</span><br><span class="hljs-symbol">.text:</span>004640BB                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004640BE                 <span class="hljs-keyword">jmp</span>     short loc_4640A6 <span class="hljs-comment">; 跳回去，形成循环</span><br><span class="hljs-symbol">.text:</span>004640C0 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>004640C0<br><span class="hljs-symbol">.text:</span>004640C0 loc_4640C0:                             <span class="hljs-comment">; CODE XREF: sub_464070+43↑j</span><br><span class="hljs-symbol">.text:</span>004640C0                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span>004640C3                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004640C4                 <span class="hljs-keyword">push</span>    offset aCountD  <span class="hljs-comment">; &quot;count : %d &quot;</span><br><span class="hljs-symbol">.text:</span>004640C9                 <span class="hljs-keyword">call</span>    sub_45DB54      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>004640CE                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>count += i;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count : %d &quot;</span>, count);<br></code></pre></td></tr></table></figure></li><li><p>第二种，while循环</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>004640D1                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-number">0</span>  <span class="hljs-comment">; 一个变量初始化为0</span><br><span class="hljs-symbol">.text:</span>004640D8                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_20], <span class="hljs-number">0Ah</span> <span class="hljs-comment">; 另一个变量初始化为10</span><br><span class="hljs-symbol">.text:</span>004640DF<br><span class="hljs-symbol">.text:</span>004640DF loc_4640DF:                             <span class="hljs-comment">; CODE XREF: sub_464070+87↓j</span><br><span class="hljs-symbol">.text:</span>004640DF                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_20], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>004640E3                 <span class="hljs-keyword">jle</span>     short loc_4640F9 <span class="hljs-comment">; [ebp+var_20]小于等于0时跳转（出循环）</span><br><span class="hljs-symbol">.text:</span>004640E5                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span>004640E8                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_20] <span class="hljs-comment">; eax过渡，把[ebp+var_20]值加到[ebp+var_8]上</span><br><span class="hljs-symbol">.text:</span>004640EB                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004640EE                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_20]<br><span class="hljs-symbol">.text:</span>004640F1                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; eax过渡，给[ebp+var_20]减1</span><br><span class="hljs-symbol">.text:</span>004640F4                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_20], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004640F7                 <span class="hljs-keyword">jmp</span>     short loc_4640DF <span class="hljs-comment">; 回跳，形成循环</span><br><span class="hljs-symbol">.text:</span>004640F9 <span class="hljs-comment">; ---------------------------------------------------------------------------</span><br><span class="hljs-symbol">.text:</span>004640F9<br><span class="hljs-symbol">.text:</span>004640F9 loc_4640F9:                             <span class="hljs-comment">; CODE XREF: sub_464070+73↑j</span><br><span class="hljs-symbol">.text:</span>004640F9                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span>004640FC                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>004640FD                 <span class="hljs-keyword">push</span>    offset aCountD  <span class="hljs-comment">; &quot;count : %d &quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464102</span>                 <span class="hljs-keyword">call</span>    sub_45DB54      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464107</span>                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>count += n;<br>n--;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count : %d &quot;</span>, count);<br></code></pre></td></tr></table></figure></li><li><p>第三种，do-while循环</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>0046410A                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-number">0</span>  <span class="hljs-comment">; 一个变量初始化为0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464111</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_2C], <span class="hljs-number">0Ah</span> <span class="hljs-comment">; 另一个变量初始化为10</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464118</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464118</span> loc_464118:                             <span class="hljs-comment">; CODE XREF: sub_464070+BE↓j</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464118</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span>0046411B                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_2C] <span class="hljs-comment">; eax过渡，把[ebp+var_2C]值加到[ebp+var_8]上</span><br><span class="hljs-symbol">.text:</span>0046411E                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_8], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464121</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_2C]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464124</span>                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; eax过渡，给[ebp+var_2C]减1</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464127</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_2C], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0046412A                 <span class="hljs-keyword">cmp</span>     [<span class="hljs-built_in">ebp</span>+var_2C], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>0046412E                 <span class="hljs-keyword">jg</span>      short loc_464118 <span class="hljs-comment">; [ebp+var_2C]大于0时回跳</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464130</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_8]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464133</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464134</span>                 <span class="hljs-keyword">push</span>    offset aCountD  <span class="hljs-comment">; &quot;count : %d &quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00464139</span>                 <span class="hljs-keyword">call</span>    sub_45DB54      <span class="hljs-comment">; printf</span><br><span class="hljs-symbol">.text:</span>0046413E                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">do</span> &#123;<br>count += i;<br>i--;<br>&#125; <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count : %d &quot;</span>, count);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">if-else语句识别、switch语句识别、循环语句识别</summary>
    
    
    
    <category term="Reverse学习笔记" scheme="https://sydzi.github.io/categories/Reverse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Day5:函数调用约定</title>
    <link href="https://sydzi.github.io/2025/07/12/Day5-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/"/>
    <id>https://sydzi.github.io/2025/07/12/Day5-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/</id>
    <published>2025-07-12T02:58:24.000Z</published>
    <updated>2025-10-03T11:36:42.193Z</updated>
    
    <content type="html"><![CDATA[<p>函数调用约定</p><span id="more"></span><h2 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h2><ul><li><p>主要有三种：cdecl、stdcall、fastcall。以求和函数为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//求和</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span>&#123;<br>    <span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> res=sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>cdecl：完全栈传参，参数从右往左入栈，由调用者清理参数占用的栈空间</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">; int __cdecl main()</span><br>_main           proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: j__main↑j</span><br>  <br>var_C           = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ch</span><br>res             = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br>  <br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitStart_2:</span><br>                <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">3</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br>                <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitEnd_2:</span>                   <span class="hljs-comment">; JMC_flag</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset _6005466B_entry@cpp<br>                <span class="hljs-keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="hljs-number">4</span> <span class="hljs-comment">; __CheckForDebuggerJustMyCode(x)</span><br>                <span class="hljs-keyword">nop</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">3</span>               <span class="hljs-comment">; 参数c入栈</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">2</span>               <span class="hljs-comment">; 参数b入栈</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">1</span>               <span class="hljs-comment">; 参数a入栈</span><br>                <span class="hljs-keyword">call</span>    j_?sum@@YAHHHH@Z <span class="hljs-comment">; sum(int,int,int)</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0Ch</span><span class="hljs-comment">;这里调用者进行了清理参数占用的栈空间的操作(3个参数×4字节)，被调用者不负责</span><br>                <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+res], <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+res]<br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">push</span>    offset _Format  <span class="hljs-comment">; &quot;%d\n&quot;</span><br>                <span class="hljs-keyword">call</span>    j__printf<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br>                <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br>                <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">call</span>    j___RTC_CheckEsp<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">retn</span><br>_main           endp<br><br><span class="hljs-comment">; int __cdecl sum(int a, int b, int c)</span><br>?sum@@YAHHHH@Z  proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: sum(int,int,int)↑j</span><br>  <br>a               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br>b               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">0Ch</span><br>c               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">10h</span><br>  <br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><span class="hljs-comment">;sum函数自身的栈空间</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitStart:</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edi</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ecx</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br>                <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitEnd:</span>                     <span class="hljs-comment">; JMC_flag</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset _6005466B_entry@cpp<br>                <span class="hljs-keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="hljs-number">4</span> <span class="hljs-comment">; __CheckForDebuggerJustMyCode(x)</span><br>                <span class="hljs-keyword">nop</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+a]<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+b]<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+c]<br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><span class="hljs-comment">;清理自身栈空间</span><br>                <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">call</span>    j___RTC_CheckEsp<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">retn</span><br>?sum@@YAHHHH@Z  endp<br></code></pre></td></tr></table></figure></li><li><p>stdcall：完全栈传参，参数从右往左入栈，由被调用者清理参数占用的栈空间</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">; int __cdecl main()</span><br>_main           proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: j__main↑j</span><br>  <br>var_C           = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ch</span><br>res             = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br>  <br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitStart_2:</span><br>                <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">3</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br>                <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitEnd_2:</span>                   <span class="hljs-comment">; JMC_flag</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset _6005466B_entry@cpp<br>                <span class="hljs-keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="hljs-number">4</span> <span class="hljs-comment">; __CheckForDebuggerJustMyCode(x)</span><br>                <span class="hljs-keyword">nop</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">3</span>               <span class="hljs-comment">; 参数c入栈</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">2</span>               <span class="hljs-comment">; 参数b入栈</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">1</span>               <span class="hljs-comment">; 参数a入栈</span><br>                <span class="hljs-keyword">call</span>    j_?sum@@YGHHHH@Z <span class="hljs-comment">; sum(int,int,int)</span><br>                <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+res], <span class="hljs-built_in">eax</span><span class="hljs-comment">;这里直接到把返回值给res了，调用者不负责清理参数占用的栈空间</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+res]<br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">push</span>    offset _Format  <span class="hljs-comment">; &quot;%d\n&quot;</span><br>                <span class="hljs-keyword">call</span>    j__printf<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br>                <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br>                <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">call</span>    j___RTC_CheckEsp<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">retn</span><br>_main           endp<br>  <br><span class="hljs-comment">; int __stdcall sum(int a, int b, int c)</span><br>?sum@@YGHHHH@Z  proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: sum(int,int,int)↑j</span><br>  <br>a               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br>b               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">0Ch</span><br>c               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">10h</span><br>  <br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><span class="hljs-comment">;sum的栈空间</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitStart:</span><br>               <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edi</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ecx</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br>                <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitEnd:</span>                     <span class="hljs-comment">; JMC_flag</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset _6005466B_entry@cpp<br>                <span class="hljs-keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="hljs-number">4</span> <span class="hljs-comment">; __CheckForDebuggerJustMyCode(x)</span><br>                <span class="hljs-keyword">nop</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+a]<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+b]<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+c]<br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0C0h</span><span class="hljs-comment">;清理自身栈空间</span><br>                <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">call</span>    j___RTC_CheckEsp<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">retn</span>    <span class="hljs-number">0Ch</span><span class="hljs-comment">;被调用者通过返回指令给esp增加0Ch，清理参数占用的栈空间</span><br>?sum@@YGHHHH@Z  endp<br></code></pre></td></tr></table></figure></li><li><p>fastcall：寄存器+栈传参，优先使用寄存器，剩余参数从右往左入栈，由被调用者清理参数占用的栈空间</p><p>寄存器传参优先级：</p><p>x86：ecx  edx  栈</p><p>x64：rcx  rdx  r8  r9  栈</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">; int __cdecl main()</span><br>_main           proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: j__main↑j</span><br>  <br>var_C           = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">0Ch</span><br>res             = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br>  <br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitStart_2:</span><br>                <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_C]<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">3</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br>                <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitEnd_2:</span>                   <span class="hljs-comment">; JMC_flag</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset _6005466B_entry@cpp<br>                <span class="hljs-keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="hljs-number">4</span> <span class="hljs-comment">; __CheckForDebuggerJustMyCode(x)</span><br>                <span class="hljs-keyword">nop</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-number">3</span>               <span class="hljs-comment">; 参数c入栈</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">2</span>          <span class="hljs-comment">; 参数b存入寄存器</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">1</span>          <span class="hljs-comment">; 参数a存入寄存器</span><br>                <span class="hljs-keyword">call</span>    j_?sum@@YIHHHH@Z <span class="hljs-comment">; sum(int,int,int)</span><br>                <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+res], <span class="hljs-built_in">eax</span><span class="hljs-comment">;这里也是没有调用者对参数占用的栈空间的清理</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+res]<br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">push</span>    offset _Format  <span class="hljs-comment">; &quot;%d\n&quot;</span><br>                <span class="hljs-keyword">call</span>    j__printf<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span><br>                <span class="hljs-keyword">xor</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0CCh</span><br>                <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">call</span>    j___RTC_CheckEsp<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">retn</span><br>_main           endp<br><br><span class="hljs-comment">; int __fastcall sum(int a, int b, int c)</span><br>?sum@@YIHHHH@Z  proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: sum(int,int,int)↑j</span><br>  <br>var_18          = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">18h</span><br>b               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">14h</span><br>a               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br>c               = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span>  <span class="hljs-number">8</span><br>  <br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0D8h</span><span class="hljs-comment">;sum开辟栈空间</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ecx</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitStart:</span><br>                <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edi</span>, [<span class="hljs-built_in">ebp</span>+var_18]<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-number">6</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0CCCCCCCCh</span><br>                <span class="hljs-keyword">rep</span> <span class="hljs-keyword">stosd</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">__$EncStackInitEnd:</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ecx</span><br>                <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+b], <span class="hljs-built_in">edx</span><br>                <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+a], <span class="hljs-built_in">ecx</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, offset _6005466B_entry@cpp <span class="hljs-comment">; JMC_flag</span><br>                <span class="hljs-keyword">call</span>    j_@__CheckForDebuggerJustMyCode@<span class="hljs-number">4</span> <span class="hljs-comment">; __CheckForDebuggerJustMyCode(x)</span><br>                <span class="hljs-keyword">nop</span><br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+a]<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+b]<br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+c]<br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">edi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">esi</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebx</span><br>                <span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">0D8h</span><span class="hljs-comment">;sum清理栈空间</span><br>                <span class="hljs-keyword">cmp</span>     <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span><br>                <span class="hljs-keyword">call</span>    j___RTC_CheckEsp<br>                <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span><br>                <span class="hljs-keyword">retn</span>    <span class="hljs-number">4</span><span class="hljs-comment">;由于只有一个参数被push到栈上，所以被调用者返回4，清理参数占用的栈空间</span><br>?sum@@YIHHHH@Z  endp<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">函数调用约定</summary>
    
    
    
    <category term="Reverse学习笔记" scheme="https://sydzi.github.io/categories/Reverse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://sydzi.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://sydzi.github.io/tags/Reverse/"/>
    
  </entry>
  
</feed>
